%%==%%http://www.acm.org/tog/resources/RTNews/html/index.html%%==%%Ray Tracing News Guide%%==%%Ray Tracing News, an infrequent newsletter on ray tracing and general computer graphics research and resources%%==%%48842%%==%%21 Dec 99%%==%% Ray Tracing News Guide Light Makes Right Compiled by Eric Haines erich acm org Opinions expressed are mine not Autodesk s my current employer A wonderful index of the Ray Tracing News was begun by Paul Heckbert You can also search the entire collection Quick search help For a wider view of the world check out the ray tracing FAQ Archive locations Text version at http www acm org tog resources RTNews text Zip file of all text files at http www acm org tog resources RTNews text rtn text zip HTML at http www acm org tog resources RTNews html Zip file of all HTML pages at http www acm org tog resources RTNews html rtn html zip If you would like to be informed when a new issue of the Ray Tracing News has come out let erich acm org know This cumulative table of contents was started by Joe Cychosz thanks Joe RTNv12n2 December 21 1999 Introduction Ray Tracing Roundup The Ups and Downs of Multithreaded Ray Tracing and Optimization by John Stone A Summary of Octree Ray Traversal Algorithms by Vlastimil Havran Additional Octree Traversal Notes by John Spackman Erik Jansen and Joel Welling Z buffer and Raytracing by Sam Paik Ray Tracing Procedural Parametric Surfaces by Mark VandeWettering Stephen Westin and Matt Pharr Raytracing Gloss Translucency by Peter Eastman Matt Pharr and Stephen Westin Importance for Ray Tracing by Per Christensen Good Computer Graphics Books by Brent McPherson RTNv12n1 June 25 1999 Introduction Ray Tracing Roundup Comparison of Hierarchical Grids by Vlastimil Havran and Filip Sixta Great Shadow Hack summarized by Eric Haines Octree Traversal and the Best Efficiency Scheme by Ben Hutchison Eric Haines Hanan Samet and Erik Jansen Quicker Grid Generation via Memory Allocation by Eric Haines RTNv11n1 July 11 1998 Introduction Ray Tracing Roundup Pluecker Coordinate Tutorial by Ken Shoemake A Short Note on Kalra and Barr s Algorithm by Andrei Sherstyuk Origins of Point In Polygon Take 10 by Neil Stewart Info on REYES Algorithm by Robert Speranza and Tom Duff Polygon Shrinking by Dave Rusin and Jeff Erickson Correcting Normals on Flipped Polygons by Kev Duncan Colvin Steve Baker John Nagle Dennis Jiang Alejo Hausner and Eric Haines What s Mesa by Brian Paul Multithreading Mesa by John Stone Recent Ray Tracing European Conference Papers Attenuation in Water by Bretton Wade and Ian Ashdown RTNv10n3 December 2 1997 Introduction New People Ray Tracing Roundup Two New Graphics Books plus One by Eric Haines Ray Classification for Animation by Matt Quail Raytracker Tricks by Hakan Zap Andersson Even Faster Crossings Test by Philip Brown Additional Notes on Nested Grids by Kris Klimaszewski Andrew Woo Frederic Cazals and Eric Haines Recursive Grids and Ray Bounding Box Comments and Timings by Andrew Woo CD ROM The Internet Raytracing Competition Year One review by Eric Haines Pl uuml cker Coordinates by Jeff Erickson Errors of Commission and Omission by Eric Haines Cyrus Beck as a Ray Polygon Tester by David Rogers Mirror Reflectivity by Greg W Larson Testing a Matrix for Uniform Scaling by Charles Iliya Krempeaux and Eduardo Marreiros Declassified CIA BRDFs now available by Greg Ward Larson Lifting the Monkey s Paw Curse by Jeff Goldsmith Eccentricity Effects in Blobs by Alfonso Hermida RTNv10n2 June 26 1997 SIGGRAPH Roundtable Introduction New People Marcos Fajardo Orellana Ray Tracing Roundup Illuminated by Black Light by Dan Wexler What s Wrong with Monte Carlo Methods by D C Nguyen JuHu Pete Shirley Stephen Westin and Eric Veach More on Rendering Bugs by Eric Haines The Curse of the Monkey s Paw by Eric Haines Global Illumination Bible by Ian Ashdown Megahedron Detecting Points on the Edge of a Polygon by Eric Haines Rendering Unflat Polygons by Eric Haines Free Polygon Tessellators by Eric Haines Octree Neighbor Finding by Andrew Glassner Francois Sillion and Paul Heckbert Author Sues Publisher by Ralph Grabowski European Graphics Tour by Nelson Max Fast Shadow Testing Bibliography by Slawomir Kilanowski RTNv10n1 January 21 1997 Introduction New People Jim Roedder Faster Refraction Formula and Transmission Color Filtering by Xavier Bec Results of Sphere in Box Ratio Contest by Han Wen Nienhuys Jim Arvo and Eric Haines Ray Tracing Roundup Papers of Interest by Eric Haines Synthetic Textures and Genetic Algorithms by Steve Worley Ray Tracing What is it Good For by Arijan Siska Fast Soft Shadows by Steve Worley Progressive Ray Tracing and Fast Previews by Eric Haines Free Radiosity Renderer inc C source code by Ian Ashdown Cells and Portals Resources by Randy Stiles New Books by Eric Haines RTNv9n2 January 24 1996 Introduction Advice to Authors by Anonymae RTNv9n1 January 18 1996 Introduction Results of the Name that Area Ratio Contest by Eric Haines and Arijan Siska Another Contest Sphere in Box ratio by Eric Haines Ray Tracing Roundup A Freeware modeller supporting VRML by Stephen Chenney 3D Point Hashing by Steve Worley 5D vs BSP and ABVH by Nguyen Duc Cuong aka JuHu Interacting with Ray Traces by Bert Peers Hierarchical Techniques for Glossy Global Illumination by Per Christensen Global Illumination SIGGRAPH meeting by Greg Ward Total Internal Reflection by Eric Haines Greg Ward and Chris Larson Pretemporal Imaging Systems by Ken Musgrave and Eric Haines PNG Status by Tim Wegner and Tom Lane Cinematography References by Dan Wexler Getting Rid of the Divide by Frank Compagner and Bob Pendleton RTNv8n3 August 2 1995 Introduction Contest Name that Area Ratio Ray Tracing Roundup On Line Computer Science Bibliography Collection by Alf Christian Achilles Comments on RTNv8n1 by Alexander Enzmann Dore Now Free and Dore Mailing List by Len Wanger Fooling Around by Eric Haines Beware of VIDEA by W Purgathofer E Groeller M Feda Still More on Optical Ray Tracing by Dan Reiley Raytracing and 3D Studio by Michael Adams and Brian Hoffman Testing SIPP versus Raytraces under DOS by Alexander Enzmann RTNv8n2 May 16 1995 Introduction Ray Tracing Roundup Scanline vs Ray Tracing by Loren Carpenter and Sam Richards Pyramid Clipping by Erik Reinhard and Erik Jansen Copyrighting Raytraced Images by J Edward Bell Benton Holzwarth and Keith Octrees and Whatnot by Steve Worley and Eric Haines Learning Radiance by Kevin Matthews Radiance vs Pov by Cloister Bell Overlapping Refractors by Steve Worley and Eric Haines Raytracing Particle Systems by Jos Stam Answers References on Cone Tracing by Brent Baker Dumb Radiosity Question by Steve Worley and Eric Haines Good Book on 3d Animation by Scott McCaskill Animation Books by Dave DeBry Fast Algorithms for 3D Graphics by Glaeser Any Good by Brian Hook Order of Rendering and Fast Texturing by Bruno Levy Dan Piponi and Bernie Roehl FREE E Mag on VR Computer Graphics et al Issue 2 by David Lewis Color Quantization Bibliography by Ian Ashdown RTNv8n1 January 23 1995 Introduction People Fetishes and Perversions by Doug Andersen Ray Tracing Roundup New Web Sites of Note by Eric Haines MGF Materials and Geometry Format by Greg Ward Blue Moon Rendering Tools RenderMan Implementation by Larry Gritz RenderMan Implementation Paper On Line by Philipp Slusallek TGA BBS CD ROM review by Eric Haines Review of Syndesis Avalon CDROM by Keith Rule SIRDS SIS stereograms Holusions whatever by Eric Haines Two Books on Stereograms by Eric Haines Siggraph Report The Exhibits by Techs Avery Scanline Rendering Previewer by Eric Haines due to Chris Cason Raysmith by Eduardo Bustillo Iceta Terminology Survey Results by Peter Shirley Radiosity Online A Bibliography by Ian Ashdown Jevans Temporal Coherence for Ray Tracing by Eric Haines Reviews of Encyclopedia of Graphics File Formats from Steve Lamont John Grieggs Tom Lane Brian Erwin and Andy Key SDSC Image Tools library by Matt Hughes LUG Library v1 0 by Raul Rivero RTNv7n5 October 13 1994 Introduction New People Ray Tracing Roundup Recent Ray Tracing Papers Rumor Mill AERO Animation Simulation System version 1 5 1 by Thomas Braeunl A Brief Review of an old AERO by Dave Negro Photon Tracing by Chris Thornborrow and Greg Ward Faster Than POV RAY 2 1 by Dieter Bayer Z Buffer Based Rendering Program by Raghu Karinthi Gossamer a Free Macintosh VR 3D Renderer by Jon Blossom Antialiasing Issues by Arijan Siska Microcosm by Abe Megahed of Cosmic Software Fisheye Lens Distortion by Greg Ward Optical Ray Tracers Correcting Normal Direction by Gavin Bell Graphics Gems IV Table of Contents by Paul Heckbert Beyond Graphics Gems by Paul Heckbert Radiosity vs Ray Tracing by Rico Tsang ACM SIGGRAPH Online Bibliography Updated by Frank Kappe How to be Notified of New POV Releases PoVSB Windows based Modeler v0 85 by Jeff Hauswirth Porting Rayshade PBM etc from Unix to DOS by Mike Castle REYES Patents William C Archibald Going from AutoCAD and 3DS into Ray Tracing by Sean Ross Computer Lego Modeling by Paul Gyugyi Rowe s Ray Tracing World BBS by Harry Rowe On Using BSP trees by Benton Jackson Books about Commercial Renderers by Don Lewis Jimbo and Yury German RTNv7n4 July 14 1994 Introduction and Announcement Call For Participation POV Ray Tracing CD ROM by Christopher Cason Tracers and Tracings 1 by Tom Hoover Review of Tracers and Tracings CD ROM by Eric Haines Ray Tracer Comparison by Amanda L Osborne Blob Sculptor by Alfonso Hermida Book Announcements and Modeler vs Scripting Language by Mitch Waite A Quick Writeup of Ray Tracing for the Macintosh CD from notes by Eduard Schwan Ray Tracing Roundup POV Help by Chris Cason Lenticular 3D by Keith Rule POV Official News Issue 1 POV Team A Quick Explanation of Radiosity Computation vs Output by Steve Hollasch A Grand Unified Modeller GUM by Lex van der Sluijs New at least to me Bulletin Boards collected by Eric Haines GemCAD Review by Greg Prior A Summary of the Reyes Algorithm by Steve Demlow Version 1 7 of Polyray Available by Alexander Enzmann Use of External Program Calling for Polyray by Alexander Enzmann POV Ray Legal Stipulations Correction by Dan Farmer 3D Graphics Book List by Brian Hook RTNv7n3 July 6 1994 Introduction Ray Tracing Roundtable at SIGGRAPH 94 by Eric Haines Books at SIGGRAPH 94 by Eric Haines Radiosity A Programmer s Perspective by Ian Ashdown Computational Geometry in C by Joseph O Rourke Simple Databases Available For Rendering Global Illumination by Peter Shirley Radiance Version 2 4 Available by Greg Ward Faster Ray Torus Intersection by Eric Haines RAT PACK Free Ray Tracing Research Software by Tom Wilson Light Beams Tricks by Chris Thornborrow On Line Ray Tracing Bibliography by Ian Grimstead Polynomials by Han Wen Nienhuys Shadow Caching Observation by Han Wen Nienhuys Small Comment on GGems III bsp c by Han Wen Nienhuys Fogsources by Han Wen Nienhuys The Rayce Ray Tracer by Han Wen Nienhuys Ray Tracing Roundup A Storage Trick for 3D Polygons by Eric Haines Illumination Related Abstracts from the Proceedings of Graphics Interface 93 Design and Aims of the YART Graphics Kernel by Ekkehard Ekki Beier Distribution Ray Tracing by Marc Levoy Ray Tracing Antialiasing and What To Do Instead Steven Demlow Yet Another Illumination Ph D by George Drettakis RTNv7n2 February 2 01 1994 Introduction Ray Tracing Roundup A Note on SPD Platform Compiler Results SPARC II by David Hook OORT Object Oriented Ray Tracer by Nicholas Wilt and Eric Haines Partial Evaluation Applied to Ray Tracing by P H Andersen Comparison of Ray Traversal Methods by Erik Jansen Sphere Tessellation Gamma Correction by Olin Lathrop Computational Geometry On Line Bibliography by Bill Jones Summary of Advanced Rendering Papers from Eurographics 93 by Erik Jansen RAT Another Ray Tracer by Tom Wilson Fast Raytracing via SEADS by John Chapman and Wilfrid Lefer Parallel Ray Tracing Schemes by Rainer Menes Notes on Parallel Ray Tracing by Hsiu Lin and Sam Uselton Parallel Texturing by Jon Leech and Brian Corrie Mapping Texture on a Sphere by Ron Capelli Computational Geometry in C by Joseph O Rourke Programming for Graphics Files in C and C by John R Levine Point in Polygon the Quick Answer by Wm Randolph Franklin and Eric Haines Elib and NetNews Information by Eric Haines CFP 5th Eurographics Workshop on Rendering by Georgios Sakas CFP 5th EG workshop on Animation Simulation by Gerard Hegron Morphology Digest by Henk Heijmans Position of the Sun by Joe Cychosz RTNv7n1 February 2 1994 Introduction Quick Book Reviews by Eric Haines Ray Tracing Roundup 3D Artist Magazine Information by Tim Riley Updated Graphics CD ROM from Knowledge Media by Paul A Benson The Desert Isle List by Amanda Osborne Raytrace Utilities List for DOS and Windows by Amanda Osborne Brief Reviews of a Bunch of Useful PC Stuff by Tim Lister Tree and Plant Image Generation by Phil Drinkwater and Jason Weber POV Ray 2 0 Released by Dave Buck JPEG Texture Maps by Petri Nordlund ArchiCAD Model Translator and other notes by Paul D Bourke New Radiance Version Available by Greg Ward Previewer Program for Radiance by Greg Ward IRIT Solid Modeller Version 4 0 by Gershon Elber Object Oriented Graphics GOOD 0 50 by Ekkehard Beier GFX News by Eric Hsiao New Wavefront Listserv by George H Otto Optimized POV 2 0 version by Peter K Campbell Errata for Adventures in Ray Tracing by Alfonso Hermida RTNv6n3 September 28 1993 Introduction New People Ray Tracing Roundup Free Ray Tracer Summary compiled by Eric Haines Ray Tracer Races Round 2 by Eric Haines An Enhanced Standard Procedural Databases Package by Eric Haines Shadows from Refractive Objects by Steven Collins Shadows Through Transmitters by Eric Haines Greg Ward Alexander Enzmann Stephen Coy and David Hook Faster Bounding Volume Hierarchies by Brian Smits and Eric Haines Simple Sun Position Program by James Ashton Sphere and Cylinder Cone Disc Annulus Definition by Eric Haines Ray Tracing Roundup Simple Sphere Tessellation by Mike Castle Syndesis CD ROM Review by Eric Haines Ray Tracing Related Abstracts from the Proceedings of Graphics Interface 93 Ray Tracing Papers in the First Bilkent Computer Graphics Conference ATARV 93 Ankara Turkey July 1993 Fourth Eurographics Workshop on Rendering Paris France June 14 16 by Francois Sillion Gamma Correction Frequently Asked Questions by Graeme Gill 3D Studio Rendering by Chris Williams Ray Bezier Patch Intersection by Chuck McKinley Max Froumentin Turbulence and Noise by Ken Perlin Ray Tracing Research Ideas by Klaus Lisberg Kristensen Christian Gautier POV Ray Utilities by Dan Farmer SPD Platform Compiler Results by David Hook RTNv6n2 July 1 1993 Introduction New People Ray Tracer Races Round 2 by Eric Haines Simple Fast Triangle Intersection part II by John Spackman Review Photorealism and Ray Tracing in C and others by Eric Haines Comments on Various Ray Tracing Speedups by Andrew Woo awoo alias com Errata to Photorealism and Ray Tracing in C compiled by Eric Haines InterChange Plus Model Texture Data CD ROM by John Foust Ray Tracing Roundup Net News Cullings Re Intersection Between a Line and a Polygon UNDECIDABLE by Allen B Obfuscated Postscript Ray Tracer by Takashi Hayakawa RTNv6n1 January 27 1993 Introduction New People New Places etc An Easily Implemented Ray Tracing Speedup by Steve Worley Color Storage by Greg Ward Bounding Areas for Ray Polygon Intersection by Steve Worley and Eric Haines Simple Fast Triangle Intersection by Chris Green and Steve Worley Ray Tracing Roundup Spectrum Overview edited by Nick Fotis Comments on the Glazing Trick by Eric Haines Net News Cullings Announcing the ACM SIGGRAPH Online Bibliography Project by Stephen Spencer A Brief History of Blobby Modeling by Paul Heckbert Cool Raytracing Ideas Karen Paik Optical Effects and Accuracy by Sam Uselton Map Projections Reference Book by Mike Goss A Brief Review of Playmation by Chris Williams PV3D Quick Review by David Anjo Bounding Volumes Sphere vs Box by Tom Wilson Raytracing Swept Objects by Mark Podlipec Ray Transformation by Kendall Bennett RTNv5n3 September 2 1992 Introduction Intersection Between a Line and a Polygon UNDECIDABLE by Dave Baraff Tom Duff Fastest Point in Polygon Test by Aladdin Nassar Philip Walden Eric Haines Tom Dickens Ron Capelli Sundar Narasimhan Christopher Jam and last but not least Stuart MacMartin Polygon Intersection via Barycentric Coordinates by Peter Shirley Many Sided Polygon Intersection by Eric Haines Benjamin Zhu Code for Point in Polygon Intersectors by Eric Haines RTNv5n2 August 26 1992 Introduction SIGGRAPH roundtable etc New People New Addresses etc BSP Traversal Errata by Kelvin Sung The Art of Noise by Steve Worley Ray Tracing Roundup by Eric Haines Graphics Gems III Residency Mask errata by Joe Cychosz Any Future for Efficiency Research by Eric Haines NuGrid Update by Mike Gigante Net News Cullings Spline Patch Ray Intersection Routines by Sean Graves Xdart from Mark Spychalla 4D Space Viewing Software by Steve Hollasch BYU Modelling and Visualization Package Free Demo by Stacey D Son New Radiosity Program Available by Guy Moreillon Optics Lab Information by Anthony Siegman Ray Tracing or Casting Applications by Tom Wilson Goofy Idea Gary McTaggart Constant Time Ray Tracing by Tom Wilson Eric Haines Brian Corrie and Masataka Ohta VLSI for Ray Tracing by Kenneth Cameron George Kyriazis Peter De Vijt Jon Leech Sam Uselton Thierry Priol and Dega Dude The Moon Revisited by Tom Duff Soft Shadow Ideas compiled by Derek Woolverton Book Announcement Multiprocessor Methods for Computer Graphics Rendering by Scott Whitman RTNv5n1 July 10 1992 Introduction SIGGRAPH roundtable etc New People New Addresses etc Texturing Parameterization by Haakan Zap Andersson NuGrid results by Mike Gigante Recursive Ray Traversal by Erik Jansen and Wim de Leeuw Response by Kelvin Sung Ideal Grid Object Densities by Dan Gehlhaar Marc Andreessen BVH Traversal Results by Nicholas Wilt Ray Tracing Roundup by Eric Haines Mail Based 3D File Server by Bob Lindabury Imagine That by Steve Worley Correct Roots for Torus Intersection by Haakan Zap Andersson Information on Taos Parallel Processor by Paul Wain The Glazing Trick by Haakan Zap Andersson Bug in Ray Convex Polyhedron Intersector in Graphics Gems II Eric Haines RTNv4n3 November 18 1991 Introduction New People Address Changes etc ElectroGig Free Software Offer Spectrum A Proposed Image Synthesis Architecture by Andrew Glassner Spline Intersection Texture Mapping and Whatnot by Rick Turner Satellite Image Interpretation by Andy Newton Material Properties by Ken Turkowski New Library of 3D Objects Available via FTP by Steve Worley Object Oriented Ray Tracing Book New and Updated Ray Tracing and Radiosity Bibliographies DKBTrace 2 12 Port to Mac by Thomas Okken Graphics Gems II Source Code Radiance Digest Archive by Greg Ward Model Generation Software by Paul D Bourke Rayshade 4 0 Release Patches 1 2 and DOS Port by Craig Kolb and Rod Bogart RayShade Timings by Craig Kolb RayShade vs DKBtrace Timings by Iain Dick Sinclair PVRay Beta Release by David Buck Vort 2 1 Release by Eric H Echidna BRL CAD 4 0 Release by Michael J Muuss and Glenn M Gillis RTNv4n2 July 15 1991 Introduction SIGGRAPH get together etc New People Address Changes etc Ray Tracing Related FTP sites compiled by Eric Haines Ray Tracing the way I do it by Haakan Zap Andersson More Thoughts on Anti Aliasing by John Woolverton Spatial Measures for Accelerated Ray Tracing by John Spackman Barcelona Workshop Summary by Arjan Kok Book Announcement from Stuart Green Spiral Scene Generator by Tom Wilson An Announcement From The Paper Bank Project by Juhana Kouhia Radiance 1 4 via FTP by Greg Ward Proceedings of Graphics Interface 91 Availability by Irene Gargantini NFF Previewers by Bernie Kirby Patrick Flynn Mike Gigante Eric Haines RayTracker Demos Available by Jari Kahkonen RayTracker Info by Zap Andersson RTNv4n1 March 1 1991 Introduction New People Address Changes etc Ray Tracing Abstract Collection by Tom Wilson Report on Lausanne Hardware Workshop by Erik Jansen New Version of SPD Now Available by Eric Haines Teapot Timings by John Spackman The Very First Point in Polygon Publication by Chris Schoeneman The Acne Problem by Christophe Schlick Shirley Thesis Available via Anonymous FTP by Pete Shirley Some Thoughts On Anti aliasing by Zap Anderssen Eric Haines New VORT Release and the VORT Chess Set by Eric H Echnida David Hook Best or at least Better of RT News by Tom Wilson At Long Last Rayshade v4 0 is Available for Beta testing by Craig Kolb Parallel Ray Tracer by Kory Hamzeh Mike Muuss Richard Webb Distributed DKB by Jonas Yngvesson Quadrangle Tessellation by Christophe Schlick New Release of Radiance Software Bug Fixes by Greg Ward Radiance Timings on a Stardent by Eric Ost RTSYSTEM Fast Ray Tracer by Patrick Aalto DKBTrace Beta Available by David Buck Computer Graphics 2nd Edition Corrections Software etc by Brown Emailer Papers which are currently available from the Net via anon FTP J Kouhia Net News Cullings Ray Cylinder Intersection Tutorial by Mark VandeWettering C Fractal and Ray Tracing Book by Fractalman Ray Spline Intersection Reference by Spencer Thomas Superquadric Intersection by Rick Speer Michael B Carter Comments on Interval Arithmetic by Mark VandeWettering Don Mitchell Platonic Solids by Alan Paeth Moon Problems by Ken Musgrave Pete Shirley Ken gave another problem with rendering the moon Shadow Testing Simplification by Tom Wilson SIMD Parallel Ray Tracing by George Kyriazis Rick Speer Rayscene Animator by Jari K hk nen sic SIPP 2 0 3d Rendering Package by Jonas Yngvesson and Inge Wallin 3DDDA Comments by John Spackman Radiosity Implementation Available via FTP by Sumant Dirt by Paul Crowley Thomson Digital Images University Donation Program by Michael Takayama A Brief Summary of Ray Tracing Related Stuff Angus Y Montgomery RTNv3n4 October 1 1990 Introduction New People Address Changes etc Photorealism and the color Pink TM from Andrew Glassner DKBTrace v2 0 and Ray Tracing BBS Announcement by David Buck Aaron Collins Article Summaries from Eurographics Workshop by Pete Shirley Convex Polyhedron Intersection via Kay Kajiya by Eric Haines New Radiosity Bibliography Available by Eric Haines A Suggestion for Speeding Up Shadow Testing Using Voxels by Andrew Pearce Real3d passed on by Juhana Kouhia Zap Andersson Utah Raster Toolkit Patch by Spencer Thomas NFF Shell Database by Thierry Leconte FTP list update and New Software by Eric Haines George Kyriazis Net News Cullings Humorous Anecdotes by J Eric Townsend Greg Richter Michael McCool Eric Haines Graphics Interface 91 CFP Parametric Surface Reference by Spencer Thomas Solid Light Sources Reference by Steve Hollasch Philip Schneider Graphics Gems Source Code Available by Andrew Glassner David Hook Graphics Gems Volume 2 CFP by Sari Kalin Foley Van Dam Feiner and Hughes Computer Graphics Bug Reports by Steve Feiner Radiosity via Ray Tracing by Pete Shirley Algorithm Order Discussion by Masataka Ohta Pete Shirley Point in Polygon One More Time by Mark Vandewettering Eric Haines Edward John Kalenda Richard Parent Sam Uselton Zap Andersson and Bruce Holloway Quadrant Counting Polygon In Out Testing by Craig Kolb Ken McElvain Computer Graphics Journals by Juhana Kouhia RTNv3n3 July 13 1990 Introduction Ray Tracing Roundtable Announcement New People Address Changes etc Jarke van Wijk Thesis Availability by Erik Jansen New Name For Distributed Ray Tracing by Paul Heckbert et al NFF Files from Thierry Leconte RADIANCE Software Available by Greg Ward Rayshade Updates SPD Bug by Craig Kolb New Version of Vort Ray Tracer by David Hook Graphics Interface 90 by Eric Haines Real3d Review Haakan ZAP Andersson Bits From a Letter by David Jevans On Antialiasing Light and Such by Haakan ZAP Andersson Net News Cullings Summary Uniform Random Distribution of Points on Sphere s Surface Marshall Cline Ray Tracing Radiosity by Frank Vance Mark VandeWettering Ray Tracing the Torus by Prem Subrahmanyam Bob Webber Need Help on Superquadrics by Wayne McCormick Robert Skinner Ray Tracing Penumbral Shadows Prem Subrahmanyam Ray with Bicubic Patch Intersection Problem Wayne Knapp John Peterson Lawrence Kesteloot Mark VandeWettering Thomas Williams Rendering Intersecting Glass Spheres by John Cristy Craig Kolb DKBPC Raytracer by Tom Friedel New release of IRIT solid modeller by Gershon Elber Easier Use of Ray Tracers by Philip Colmer Mark VandeWettering Jack Ritter Raytracer Glass by F Ken Musgrave Michael A Kelly Ray Intersection with Grid by Alasdair Donald Robert McIntyre Rick Speer Database for DBW Render by Prem Subrahmanyam RTNv3n2 March 20 1990 Introduction New People Address Changes etc FTP Site List by Eric Haines RayShade Posting and Patches and Whatnot by Craig Kolb Common Rendering Language by Eric Haines Avoiding Re Intersection Testing by Eric Haines Torus Equation Correction by Pat Hanrahan Introduction to Ray Tracing Shading Model Errata by Kathy Kershaw Comments on Last Issue by Mark VandeWettering An Improvement to Goldsmith Salmon by Jeff Goldsmith Fiddling with the Normal Vector by H ZAP Anderson A Note on Texture Sampling by Eric Haines Unofficial MTV Patches by Eric Haines Net News Cullings OFF Databases by Randi Rost VM pRAY is now available by Didier Badouel Superquadrics by Prem Subrahmanyam Patrick Flynn Ron Daniel and Mark VandeWettering Graphics Textbook Recommendations by Paul Heckbert Mark VandeWettering and Kent Paul Dolan Where To Find U S Map Data by Dru Nelson References for Rendering Height Fields Mark VandeWettering RayShade 3 0 Released on comp sources unix by Craig Kolb Bibliography of Texture Mapping Image Warping by Paul Heckbert More Texturing Functions by Jon Buller Ray Cylinder Intersection by Mark VandeWettering C Code for Intersecting Quadrics by Prem Subrahmanyam Parallel Ray Tracing on IRISs collected by Doug Turner RTNv3n1 January 2 1990 Introduction New People Archive Site for Ray Tracing News by Kory Hamzeh Ks T 1 by Craig Kolb and Eric Haines Quartic Roots and Intro to RT Errata by Larry Gritz and Eric Haines More on Quartics by Larry Spence Question Kay and Kajiya Slabs for Arbitrary Quadrics by Thomas C Palmer Ambient Term by Pierre Poulin Book Reviews on Hierarchical Data Structures of Hanan Samet by A T Campbell III Comparison of Kolb Haines and MTV Ray Tracers Part I by Eric Haines Raytracer Performance of MTV by Steve Lamont BRL CAD Ray Tracer Timings by Gavin Bell BRL CAD Benchmarking and Parallelism by Mike Muuss Net News Cullings Rayshade Patches Available by Craig Kolb Research and Timings from IRISA by Didier Badouel Concerning Smart Pixels by John S Watson Input Files for DBW Render by Tad Guy Intersection with Rotated Cubic Curve Reference by Richard Bartels Needed Quartz surface characteristics by Mike Macgirvin Solution to Smallest Sphere Enclosing a Set of Points by Tom Shermer True Integration of Linear Area Lights by Kevin Picott RTNews9 v2n8 October 27 1989 Introduction Tracing Tricks edited by Eric Haines Ambient Light Efficiency Schemes Bounding Volume Hierarchy Octree Bounding Box Intersection Spline Surface Intersection Acknowledgements Bibliography RTNews8 v2n7 October 13 1989 Introduction New People and Address Changes Solid Surface Modeler Information by Eric Haines Minimum Bounding Sphere Program by Marshall Levine Parallelism Modeler Info Request by Brian Corrie Net News Cullings Ray Tracer Available by Craig Kolb Source from Roy Hall s Book by Tim O Connor More on Texture Mapping by Spatial Position by Paul Lalonde Procedural Bump mapping Query by Prem Subrahmanyam Ray Tracer Performance on Machines by Gavin A Bell Steve Lamont Projective Mapping Explanation by Ken Turk Turkowski Intersection Calculation Problem Request Jari Toivanen Mathematical Elements for Computer Graphics Call for Errata by David Rogers Raytracing on NCUBE Request by Ping Kang Hsiung Intersection Between a Line and a Polygon UNDECIDABLE by Dave Baraff Tom Duff RTNews8 v2n6 September 20 1989 Introduction New People and Address Changes Q A on Radiosity Using Ray Tracing by Mark VandeWettering and John Wallace Dark Bulbs by Eric Haines MTV Ray Tracer Update and Bugfix by Mark VandeWettering DBW Ray Tracer Description Net News Cullings Wanted Easy Ray Torus Intersection by Jochen Schwarze Polygon to Patch NFF Filter by Didier Badouel Texture Mapping Resources by Eric Haines Prem Subrahmanyam Ranjit Bhatnagar and Jack Ritter RTNews7 v2n5 August 29 1989 Introduction A SIGGRAPH Report by Eric Haines Ray Tracing Poll from the roundtable discussion An Introduction to Ray Tracing Announcement and Errata Graphics Gems Call for Contributions by Andrew Glassner New People and Address Changes Bugs in MTV s Ray Tracer by Eric Haines Bug in SPD from Pete Segal Solid Textures Tidbit by Roman Kuchkuda Sundry Comments by Jeff Goldsmith Texture Mapping Question by Susan Spach Net News Cullings Ray Traced Image Files Prem Subramanyan Image Collection by Paul Raveling MTV Raytracer on ATARI ST precision error report by Dan Riley Question on Ray Tracing Bicubic Parametric Patches by Robert Minsk RTNews7 v2n4 June 21 1989 Introduction Hardcopy News New and Used People Minimum Bounding Sphere continued by Jack Ritter Comments on A Review of Multi Computer Ray Tracing by Thierry Priol Query Dataflow architectures and Ray Tracing by George Kyriazis Net News Cullings Re Pixar s noise function by Jon Buller Re DBW render for SUN 3 by Tad Guy Re Steel Colors by Eugene Miya Dirty Little Tricks by Jack Ritter Obfuscated Ray Tracer by George Kyriazis Contents of FTP archives skinner cs uoregon edu by Mark VandeWettering RTNews7 v2n3 May 12 1989 Introduction New People by Carl Bass Paul Wanuga QRT Ray Tracer and five other Amiga Ray Tracers by Steve Koren New Version of MTV Ray Tracer by Mark VandeWettering Re Ray Traced Bounding Spheres by Earl Culham Noise and Turbulence Function Code Pascal and C by Jon Buller William Dirks RTNews6 v2n2 February 20 1989 Introduction by Eric Haines New Subscribers by Turner Whitted Mike Muuss The BRL CAD Package by Mike Muuss New Book Illumination and Color in Computer Generated Imagery Roy Hall Eric Haines Uniform Distribution of Sample Points on a Surface Depth of Field Problem by Marinko Laban Query on Frequency Dependent Reflectance by Mark Reichert Best of comp graphics ftp Site by Raymond Brand Notes on Frequency Dependent Refraction Sound Tracing Laser Speckle RTNews6 v2n1 January 6 1989 Introduction by Eric Haines New Members by David Jevans Subrata Dasgupta Darwin Thielman Steven Stadnicki Mark Reichert Multiprocessor Visualization of Parametric Surfaces by Markku Tamminen comments from many others Miscellany by K R Subramanian David F Rogers Steven Stadnicki Joe Smith Mark Reichert Tracey Bernath Supersampling Discussion by David Jevans Alan Paeth Andrew Woo Loren Carpenter Distributed Ray Tracer Available by George Kyriazis Ray Tracing Program for 3b1 by Sid Grange Map Archive by Gary L Crum Index of Back Issues by Eric Haines RTNews5 v1n11 November 4 1988 Intro New People Ray Triangle Intersection with Barycentric Coordinates by Rod Bogart Jeff Arenberg Transforming normals by David F Rogers 2D box test by Jack van Wijk Re Neutral File Format by Jeff Goldsmith RT and Applications by Cary Scofield Re Goldsmith and Eyes by K R Subramanian subramn cs utexas edu Wood Textures by Rod Bogart Shadows Mirrors and Virtual Lighting by Steve Stadnicki Re Basics of Raytracing by David Jevans Re What is Renderman Standard by Steve Upstill Free On Line Computer Graphics References Latest Mailing List Short Form by Eric Haines RTNews5 v1n10 October 3 1988 Intro New Addresses and People Bitmap Stuff by Jeff Goldsmith More Comments on Kay Kajiya Questions and Answers for want of a better name More on MTV s Public Domain Ray Tracer features bug fixes etc Neutral File Format NFF by Eric Haines RTNews4 v1n9 September 11 1988 Intro Capsule Autobiographies by more new people The Continuing Saga of MTV s Raytracer by Mark VandeWettering Public Domain Ray Tracer Q A by Mark VandeWettering Public Domain Ray Tracer Utilities by Tom Vijlbrief Sorting Unnecessary on Shadow Rays for Kay Kajiya by Eric Haines and Mark VandeWettering Summary of Replies to Vectorizing Ray Object Intersection Query by Tom Palmer The Ray Tracer I Wrote by George Kyriazis New Bitmaps Library Available Jef Poskanzer RTNews4 v1n8 September 5 1988 Intro Capsule Biographies SIGGRAPH 88 RT Roundtable Summary by Paul Strauss and Jeff Goldsmith Commercial Ray Tracing Software and SIGGRAPH by Eric Haines and others A Letter by Jeff Goldsmith Best of USENET Postscript Ray Tracer John Hartman and Paul Heckbert RTNews3 v1n7 June 20 1988 Introduction New People and Addresses Non article on RenderMan and Dore by Eric Haines Ray Tracing Bibliography Update by Paul Heckbert and Eric Haines Commercial Ray Tracing Software by Eric Haines Benchmarks by Jeff Goldsmith RTNews3 v1n6 April 6 1988 RT News Hardcopy Form by Andrew Glassner New People Question for the Day by Rod Bogart Re Linear time Voxel Walking for BSP by Erik Jansen Some Thoughts on the Theory of RT Efficiency by Jim Arvo Automatic Creation of Object Hierarchies for Ray Tracing by Eric Haines Best of USENET RTNews2 v1n5 March 26 1988 Intro Eric Haines Mailing list changes and additions Kuchkuda Lorig Rekola More on shadow testing efficiency etc Jeff Goldsmith More comments on tight fitting octrees for quadrics Jeff Goldsmith LINEAR TIME VOXEL WALKING FOR OCTREES Jim Arvo Efficiency Tricks Eric Haines A Rendering Trick and a Puzzle Eric Haines PECG correction David Rogers RTNews2 v1n4 March 8 1988 Surface acne by Eric Haines Goldsmith Salmon hierarchy building Efficiency tricks followup by Ohta Goldsmith Haines Net News Cullings Spatial Subdivision by Ruud Waij Paul Heckbert Andrew Glassner RTNews2 v1n3 March 1 1988 Mailing list updates Another Dore article Teapot in a football stadium by Glassner Arvo Haines Efficiency Tricks by Jeff Goldsmith More book recommendations by Jeff Goldsmith Bug for the day by Eric Haines A pet peeve by Jeff Goldsmith RTNews2 v1n2 Februrary 15 1988 Dore RTNews1 v1n1 January 15 1988 Introduction Subdivision and CSG by Erik Jansen Spline surface rendering and what s wrong with octrees by Eric Haines Top ten hit parade of computer graphics books by Eric Haines Normal vectors and octree relies by Olin Lathrop and Eric Haines Subspaces and simulated annealing by Jim Arvo RTNews1 the start Sometime after Siggraph 87 Introduction SPD and NETLIB by Eric Haines Spline Surfaces by John Peterson Haines Goldsmith Kay Abnormal Normals by Eric Haines Eric Haines erich acm org Ray Tracing News Guide Ray Tracing News Guide Ray Tracing News Guide Ray Tracing News Guide Ray Tracing News Guide Ray Tracing News Guide Ray Tracing News Guide Ray Tracing News Guide Ray Tracing News Guide Ray Tracing News Guide Ray Tracing News ray tracing computer graphics resource research article help information code Ray Tracing News ray tracing computer graphics resource research article help information code Ray Tracing News ray tracing computer graphics resource research article help information code Ray Tracing News ray tracing computer graphics resource research article help information code Ray Tracing News ray tracing computer graphics resource research article help information code Ray Tracing News ray tracing computer graphics resource research article help information code Ray Tracing News ray tracing computer graphics resource research article help information code Ray Tracing News ray tracing computer graphics resource research article help information code Ray Tracing News ray tracing computer graphics resource research article help information code Ray Tracing News ray tracing computer graphics resource research article help information codeRay Tracing News an infrequent newsletter on ray tracing and general computer graphics research and resourcesRay Tracing News an infrequent newsletter on ray tracing and general computer graphics research and resourcesRay Tracing News an infrequent newsletter on ray tracing and general computer graphics research and resourcesRay Tracing News an infrequent newsletter on ray tracing and general computer graphics research and resources http www acm org tog resources RTNews html index html http www acm org tog resources RTNews html index html http www acm org tog resources RTNews html index html http www acm org tog resources RTNews html index html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews1a.html%%==%%Ray Tracing News, Volume 1, Number 1%%==%%Ray Tracing News "Light Makes Right" September-December, 1987 Volume 0 (we're C programmers, right?) Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. ...%%==%%26610%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right September December 1987 Volume 0 we re C programmers right Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1987 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction SPD NETLIB Spline Surfaces Abnormal Normals Introduction The Ray Tracing News email edition began after some ray tracing researchers met at SIGGRAPH 87 and an address list was formed Andrew Glassner started The Ray Tracing News hardcopy edition and soon thereafter we distributed copies of the email address list to researchers This is the first archive collection of The Ray Tracing News I hope you will get as much use out of it as I have Eric Haines 3D Eye Inc 2359 N Triphammer Rd Ithaca NY 14850 hpfcla hpfcrs eye erich I m presently keeping the list up to date As far as adding new people to this mailing list I d personally like to see the list not grow without bounds Given that the Intro to Ray Tracing course had the highest attendance there s obviously a lot of people interested in ray tracing The group presently consists of researchers and people building ray tracing systems and it d be nice to keep it at this level and keep all of our long distance e mail costs down First off a quick announcement if you didn t get a copy of the Intro to Ray Tracing course notes at SIGGRAPH 87 and would like a copy they sold out twice send me 20 and I ll xerox them There are only three articles which are reprints the rest is new stuff and pretty worthwhile back to contents SPD NETLIB My news for the day is that netlib is now carrying my standard procedural database generators written in C If you don t know about netlib here s the two minute explanation Netlib has two addresses One is hplabs hpfcla research netlib There may be other quicker routes to netlib you ll have to research that yourself The second one may be more convenient as it is an arpa connection netlib anl mcs arpa So after you do mail hplabs hpfcla research netlib the next step is to request what you want one line per request For example to get my databases simply type on a single line and don t have anything else on the line send haines from graphics and end the message Netlib is computerized and will automatically parse your message and send you the 82K bytes of dox code for my databases The best way to find out about netlib and what it has to offer is to send it a request send index and you ll get sent a listing of all the libraries available It s mostly numerical analysissy stuff lots o matrix solvers but there are some things of interest One particularly yummy database is the polyhedron contributions There are some 142 polyhedra descriptions vertices faces edge descriptions and more Some of these descriptions are buggy but most are good as netlib says Anything free comes with no guarantee As far as the question what do the images look like goes the images will be published in IEEE CG A in November back to contents Spline Surfaces A question which I want to answer is which is the best way in software to ray trace bicubic spline patches In particular I want to intersect bicubics also quadrics and linears and any mix of the three e g bicubic u quadric v that can also be rational and also have non uniform knots As an added bonus I d like to do trimming curves I am interested in anyone s feelings or findings on this subject especially any experiences with actual implementation they may have had To kick off discussion of this problem John Peterson who is researching this question at the University of Utah was kind enough to spend some time on a response to me His reply follows printed with his permission RE ray tracing splines I ve sent a paper on ray tracing splines via polygons to TOG but since that s going to be stuck in the review process for a while here s an overview Most of the recent published stuff on this have been approaches using numerical methods which I would avoid like the plague I recently discovered that Whitted mentions surface subdivision very briefly in his classic paper CACM 80 and also in Rubin Whitted SIGGRAPH 80 The technique they use was to subdivide the surface on the fly i e an area of surface is split only when rays come near it Whitted doesn t go into any detail in these papers though just a couple of paragraphs each However Whitted s motivation for subdivision on the fly was lack of memory on his PDP 11 nowadays I think you re better off just to do all the subdivision initially then throw the surface away much less bookkeeping The polygon bounding volume database isn t that huge if you use adaptive surface subdivision more on that in a moment In terms of references I d highly recommend the Killer B s An Introduction to the Use of Splines in Computer Graphics by Bartels Beatty and Barsky It appeared as SIGGRAPH tutorial notes in 85 and 86 and I think a book version is coming out from Kaufmann sp in September Another good reference is A Survey of Curve and Surface Methods in CAGD by Bohm Farin and Kahmann in Computer Aided Geometric Design July 1984 Both of these give excellent background on all the math you ll need for dealing with splines If you need to know about rationals see Tiller s paper Rational B Splines for Curve and Surface Representations in CG A September 83 The subdivision algorithm I used is based on the Oslo Algorithm Cohen Lyche Riesenfeld Computer Graphics Image Proc Oct 1980 This is a little slower than some of the other subdivision algorithms but the win is that you re not restricted to specific orders or knot vectors Since the subdivision time is generally small compared to the ray tracing time like A couple tricks are noteworthy First if you re doing adaptive surface subdivision you ll need a flatness criteria to determine when to quit splitting the surface I ve found a good approximation is to take the bounding box of the control mesh and find the point in the middle of it Then project the size of a pixel onto this point and use this distance as a flatness criteria Other trick Crack prevention If you split a surface into two parts one part may get subdivided more than the other If this happens along the seam between the two halves you need to force the polygon vertices in the side with more divisions to lie on the edge of the surface with fewer subdivisions My reply to John follows Thanks much for taking the time to tell me about splines and your findings You leave me in a quandary though I m interested in the numerical techniques for bicubics but I also want to take your warnings to heart I have to admit I have a great fear of throwing away the nice compact spline description and blow it up into tons of polygons From your comments you say that using adaptive techniques can help avoid this problem You seem to divide to the pixel level as your criteria hmmm I ll have to think about that Avoiding cracks sounds like a headache Also it seems to me that you ll have problems when you generate reflection rays since for these rays the flatness criteria is not necessarily valid Have you ever noticed practical problems with this one pathological example I can think of is a lens in front of a spline patch the lens magnifies the pixel sized patches into much larger entities However almost everything has pathological problems of some sort Have you run into any problems due to your method on a practical level I may try subdividing on the fly to avoid all this To this end have you looked at Ron Pulleyblank s routine for calculating bicubic patch intersections IEEE CG A March 1987 What do you think of his on the fly subdivision algorithm Articles thanks for the references Have you seen the article by Levner Tassinari and Marini A Simple Method for Ray Tracing Bicubic Surfaces in Computer Graphics 1987 T L Kunii editor Springer Verlag Tokyo Sounded intriguing someone s hopefully going to get me a copy of it soon if you don t have it and would like a copy If you do have a copy is it any good Now here s John s response RE Numerical techniques I guess grim memories of round off errors and consistently inconsistent results may bias my opinion but there are some fundamental reasons for the problems with numerical methods Finding roots of systems of two equations is inherently an unstable process for a good description of this see section 9 6 in Numerical Recipes by William Press et al Another way to think about iterative approximations in two variables is the chaotic patterns you see Mandlebrot sets It s very roughly the same idea Chaos and ray tracing don t mix Your comments about the flatness criteria are true though in practice I ve only found one practical instance where it really poses a problem This is when a light source is very close to an object and casts a shadow on a wall some distance away The shadow projection magnifies the surface s silhouette onto the wall and in some cases you see some faceting in the shadow s edge The work around is to have a per surface resolution factor attribute The flatness criteria found by projecting the pixel is multiplied by this factor so a surface with a res factor of 0 5 may generate up to twice as many polygons as it normally would extra polygons are generated only where the surface is really curved though In order to get a feel for just how much data subdivision generates I tried the following experiment I took the code for balls c from the procedural database package you posted and modified it to generate a rational quadratic Bezier surface for each sphere as well as bounding volumes around each group of spheres I didn t do the formal benchmark case too lazy but just choose a view where all the spheres level 2 91 of them just filled the screen The results look like this Image Size Triangles pixels generated 128x128 7800 512x512 30400 The original spline surface definition wasn t small each sphere has 45 rational homogeneous control points knot vectors My philosophy at the moment is that the algorithms for handling lots of trivial primatives win over those for handling a few complex ones Right now the lots of little primatives camp has a lot of strong members Octrees Voxels Kay Kajiya Caltech Arvo Co etc If you just want to maximize speed I think these are difficult to beat but they do eat lots of memory I d be very interested in seeing a software implementation of Pulleyblank s method The method seemed very clever but it was very hardware oriented lots of integer arithmetic etc I guess the question is whether or not their subdivision algorithm is faster than just a database traversal Something like Kay Kajiya or Arvo s traversal methods would probably scream if you could get them to run in strictly integer arithmetic not to mention putting them in hardware Cheers jp Anywell that s the discussion as far as it s gone We can continue it in one of two ways 1 everyone writes to everyone on the subject this is quick but can get confusing if there are a lot of answers 2 send replies to me which I ll then send to all I opt for 1 for now if things get confusing we can always shift to 2 Actually we re shifting to 2 around now though it seems worthwhile to pass on your comments to all if you re set up to do it A summary of the comments will eventually probably get put in Andrew s ray tracing newsletter More responses so far From Jeff Goldsmith Re flatness criterion The definition that JP gave seems to be based on pixel geometry That doesn t seem right Why not subdivide until you reach subpatches that have preset limits in the change in their tangent vector bounded curvature Al Barr and Brian Von Herzen have done some formal studies of that in a paper given this year It wasn t applied to ray tracing but it doesn t matter I used that technique for creating polygonal representations of superquadrics with fair to good success The geometric criterion makes sure that not much happens to the surface within a patch which is what you really want anyway I too by the way believe in the gobs of polygons vs one compicated object tradeoff The two seem to be close in speed but polygons saves big time in that you never need new code for your renderer I hate writing debugging renderer code because it takes so long Modeling code is much faster Jeff From Tim Kay Subject ray tracing bicubic patches The discussion about subdivision was interesting I just want to point out that a paper in this year s proceedings Snyder and Barr did just what the discussion suggested The teapot was modeled with patches and John hacked them up into very small polygons He also talked about some of the problems that you run into Tim From Brian Barsky What numerical techniques is John referring to He doesn t mean the resolvent work does he Response from John Peterson I was using a modified version of Sweeney s method It was extended in two ways first a more effective means was used to generate the bounding volumes around the mesh and it was able to handle surfaces with arbitrary orders and knot vectors I wrote up the results in a paper that appeared in a very obscure proceedings ACM Rocky Mnt Regional Conference Santa Fe NM Nov 1986 back to contents Abnormal Normals From Eric Haines My contribution for the week is an in house memo I just wrote on transforming normals which is easier that it sounds Some of you have undoubtedly dealt with this long ago but hopefully I ll notify some poor soul that all is not simple with normal transforms Pat Hanrahan mentioned this problem in his talk at the SIGGRAPH 87 Intro to Ray Tracing course but I didn t really understand why he was saying don t use the modeling matrix to transform normals Now I do and I thought I d explain it in a fairly informal way Any comments and corrections are appreciated Abnormal Normals Eric Haines 3D Eye Inc The problem given a polygon and its normal s and a modeling matrix how do we correctly transform the polygon from model to world space We assume that the modeling matrix is affine i e no perspective transformation is going on This question turns out to be fraught with peril The right answer is to transform the vertices using the modeling matrix and to transform the normals using the transpose of the inverse also known as the adjunct of the modeling matrix However no one believes this on first glance Why do all that extra work of taking the inverse and transposing it So we ll present the wrong answers which are commonly used in the graphics community nonetheless sometimes with good reason then talk about why the right answer is right Wrong answer 1 Transform the normals using the modeling matrix What this means is multiplying the normal x y z 0 by the modeling matrix This actually works just fine if the modeling matrix is formed from translation matrices which won t affect the normal transformation since translations multiply the w component of the vector which is 0 for normals and rotation matrices Scaling matrices are also legal as long as the x y and z components are the same i e no stretching occurs Reflection matrices where the object is flipped through a mirror plane more about these later are also legal as long as there is no stretching Note that scaling will change the overall length of the vector but not the direction So what s wrong Well scaling matrices which stretch the object i e whose scaling factors are not all the same for x y and z ruin this scheme Imagine you have a plane at a 45 degree tilt formed by the equation x y more formally x y 0 Looking down upon the x y plane from the z axis the plane would appear as a line x y The plane normal is 1 1 0 for simplicity don t worry about normalizing the vector which would appear to be a ray where x y x 0 Now say we scale the plane by stretching it along the x axis by 2 i e the matrix 2 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 This would form a plane in world space where x 2y Using the method of multiplying the normal by this modeling matrix gives us a ray where x 2y x 0 The problem with this ray is that it is not perpendicular to our plane In fact the normal is now 2x y x 0 Therefore using the modeling matrix to transform normals is wrong for the stretching case Y normal Y normal X X Figure 1 a b Incorrect Stretching Transformation Wrong answer 2 Transform the vertices then calculate the normal This is a limited response to the wrongness of method 1 solving the stretching problem It s limited because this method assumes the normal is calculated from the vertices This is not necessarily the case The normals could be supplied by the user given as a normal for the polygon or on a normal per vertex basis or both However even if the system only allowed normals which were computed from the vertices there would still be a direction problem Say the method used to calculate the normal is to take the cross product of the first two edges of the polygon This is by far the most common method Most other methods based on the local geometry of the polygon will suffer from the same problem or else the problem in method 1 Say the vertices are 1 0 0 0 0 0 and 0 1 0 The edge vectors i e the vector formed from subtracting one vertex on the edge from the other vertex forming that edge are 1 0 0 and 0 1 0 in other words the two edge vectors are parallel to the x and y axes The normal is then 0 0 1 calculated from the cross product of these vectors If we transform the points by the reflection matrix 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 the result is the same none of the edges actually moved However when we use a reflection matrix as a transform it is assumed that we want to reverse the object s appearance With the above transform the expected result is that the normal will be reversed thereby reversing which side is thought of as the front face Our method fails on these reflection transforms because it does not reverse the normal no points changed location so the normal will be calculated as staying in the same direction The right answer What usually works is to transform the normals with the transpose of the inverse of the modeling matrix Rather than trying to give a full proof I ll talk about the three types of matrices which are relevant rotation reflection and scaling stretching Translation was already seen to have no effect on normals so we can ignore it Other more obscure affine transformations e g shearing are avoided in the discussion though the method should also hold for them In the case of rotation matrices and reflection matrices the transpose and the inverse of these transforms are identical So the transpose of the inverse is simply the original modeling matrix in this case As we saw using the modeling matrix worked fine for these matrices in method 1 The problems occurred with stretching matrices For these the inverse is not just a transpose of the matrix so the transpose of the inverse gives a different kind of matrix This matrix solves our problems For example with the bad stretching case of method 1 the transpose of the inverse of the stretch matrix is simply 0 5 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 note that the transpose operation is not actually needed in this particular case Multiplying our normal 1 1 0 by this matrix yields 0 5 1 0 or the equation 2x y x 0 which is the correct answer The determinant One problem with taking the inverse is that sometimes it isn t defined for various transforms For example casting an object onto a 2D x y plane 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 does not have an inverse there s no way to know what the z component should turn back into given that the above transform matrix will always set the z component to 0 Essentially information has been irretrievably destroyed by this transform The determinant of the upper left 3x3 matrix the only part of the matrix we really need to invert for the normal transform is 0 which means that this matrix is not invertable An interesting property of the determinant is that it coupled with method 2 can make that method work If the determinant of the 3x3 is positive we have not shifted into the mirror world If it is negative then we should reverse the sign of the normal calculated as we have entered the mirror universe It would be nice to get a normal for polygons which have gone through this transform All bets are off but some interesting observations can be made The normal must be either 0 0 1 or its negative 0 0 1 for this transformation or undefined if all vertices are now on a single line Choosing which normal is a bit tricky One OK method is to check the normal before transform against 0 0 1 if the dot product of the two is negative then reverse the normal so that it will point towards the original direction However if our points went through the z reflection matrix we used earlier then went through the transform above the normals were reversed then the object was cast onto the x y plane In this case we would want to have the reverse of the normal calculated from the edges However this reversal has been lost by our casting transform concatenating the reflection matrix with the casting matrix yields the same casting matrix One tricky way of preserving this is to allow 0 and 0 to be separate entities with the sign of zero telling us whether to reverse the normal or not This trick is rather bizarre though it s probably easier to just do it the simple way and warn whoever s using the system to avoid non invertable transformations THE END Well that s all for now Do you have any comments questions interesting offerings for the group Either send your bit to everyone on the list or send a copy on to me and I ll post it to all I realize this is quite a deluge of info for one message but all of this has accumulated over a few months The traffic so far has been quite mild don t worry about future flooding All for now Eric Haines more discussion of problem back to contents Eric Haines erich acm org Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 http www acm org tog resources RTNews html rtnews1a html http www acm org tog resources RTNews html rtnews1a html http www acm org tog resources RTNews html rtnews1a html http www acm org tog resources RTNews html rtnews1a html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews1b.html%%==%%Ray Tracing News, Volume 1, Number 1%%==%%Ray Tracing News "Light Makes Right" January 15, 1988 Volume 1, Number 2 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%52035%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right January 15 1988 Volume 1 Number 2 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1988 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Subdivision and CSG by Erik Jansen Bounded Ray Tracing by Masataka Ohta Spline Surface Rendering and What s Wrong with Octrees by Eric Haines Top Ten Hit Parade of Computer Graphics Books by Eric Haines About Normal Vector Transform Octrees by Olin Lathrop and Eric Haines Subspaces and Simulated Annealing by Jim Arvo Introduction Well we ve all been massively inactive as far as ray tracing news what with SIGGRAPH and the holidays Now that the rush is over I thought I d pass on some additional comments on spline surfaces and how to ray trace them a polemic against octree subdivision and end with a quick list of recommended books Finally the updated mailing list note that Andrew Glassner moved Speaking of whom Andrew Glassner would like contributions to The Ray Tracing News hardcopy edition He hopes to publish another one soon but says it may be the last if no one sends him any more material So if you have an interesting technical memo or other short less than 5 pages piece you d like to share with the rest of us please write him see the mailing list All for now Eric back to contents Subdivision and CSG by Erik Jansen I went briefly through the discussion I have been working on most items the last five years Some of the results are described in Solid modelling with faceted primitives my PhD thesis book It is printed 108 pages with a cover in colour People who are interested in a free copy can mail me Here is the abstract Solid modelling with faceted primitives F W Jansen Computer Aided Design and Computer Graphics techniques are valuable tools in industrial design for the design and visualisation of objects For the internal representation of the geometry of objects several geometric modelling schemes are used One approach Constructive Solid Geometry CSG models objects as combinations of primitive solids The subject of research in this project is a CSG representation where the surfaces of the primitives are approximated with flat surface elements facets Techniques to improve the efficiency of the display of models with a large number of these surface elements have been developed Two approaches have been taken The first approach is based on the use of additional data structures to enhance the processing sorting and search of these surface elements Further a method is presented to store intermediate results of the logical computations needed for the processing of CSG representations These methods are applied to a CSG polygon modelling system The second approach aims at the development of algorithms for multi processor systems and VLSI based display systems The central method is a CSG depth buffer algorithm A tree traversal method is introduced that combines several techniques to reduce the processing and memory use The methods have been applied to a CSG halfspace modelling system Keywords computer graphics geometric modelling solid modelling Constructive Solid Geometry CSG ray tracing algorithm depth buffer algorithm z buffer algorithm list priority algorithm depth priority algorithm spatial subdivision CSG classification CSG coherence The following subjects are also included adaptive subdivision crack removal You can send this information to all I will read the discussion more carefully and will comment on it later Erik Jansen back to contents Bounded Ray Tracing by Masataka Ohta utokyo relay csnet RELAY CS NET Dear Sir The discussions so far is very interesting one and I have several comments As I am charged for foreign mail about 1 for 1K bytes both incoming and out going it costs considerablely to mail everyone on the list separately So I would like you to re distribute my transpacific mail to everyone else Masataka Ohta My comment on the flatness criteria with reflections follows Though I don t like subdividing patches into polygons for ray tracing it s incoherent and for example CSG objects are difficult to render good flatness criteria even with reflection refraction or shadowing can be given using ray bound tracing The basic idea is simple Ray bound is a combination of two bounds a bound of ray origins and a bound of ray directions A efficient bound can be formed by using a sphere for bounding ray origins and using a circle on a unit sphere i e using spherical geometry for ray directions To begin with bound a set of all rays which originates from each pixel Flatness of a patch for the first generation ray should be computed against this ray bound which is equivalent to measure flatness with perspective transformation because rays are bounded by a pixel sized cone As for the second generation rays they can be bounded by a certain ray bound which can be calculated form the first generation ray bound And those ray bounds should be used for the flatness check For those further interested in ray bound tracing I will physically mail my paper titled Bounded ray tracing for perfect and efficient anti aliasing back to contents Spline Surface Rendering and What s Wrong with Octrees by Eric Haines Well after all the discussion of spline surfaces I finally went with turning the spline surface into patches putting an octree around these and then do Glassner Kay Fujimoto etc octree ray tracing in reality I found Glassner s article the most useful though I didn t use his hashing scheme due to a being pressed for time and b being pressed for memory space This seems to work fairly well but I noticed some interesting problems with octrees that I thought I d pass on Note this first problem is kinda boring if you ve never implemented an octree subdivision scheme before Skip on to problem 2 which I think is more important The first problem is How do I cleverly chose octree bounds This problem was first mentioned to me by Mike Kaplan which I did not think about much until I suddenly noticed that all available memory was getting gobbled by certain polygonalized splines The problem is that there are two parameters which are commonly used to end the further subdivision of an octree cube into its eight component cubies One is a maximum number of primitives per octree cube To make the octree in the first place we have a bounding cube which contains the environment If the cube has more than a certain number of primitives in it then octree subdivision takes place The octree cubies formed are then each treated in a like fashion subdividing until all leaf cubies contain less than or equal to the number of primitives The second parameter is the maximum tree depth which is the number of levels beyond which we will not subdivide cubes This parameter generally has precedence over the first parameter i e if the maximum level has been reached but the maximum number of primitives is still exceeded subdivision will nonetheless halt The trick is that you have to pay close attention to both parameters Originally I set these parameters to some reasonable numbers 6 primitives and 8 levels being my maximums What I found is that some objects would have very deep octrees all the way down to level 8 even though their number of primitives was low For example an object with 64 patches would still have some leaf nodes down at level 8 which had 7 primitives in them I was pretty surprised by this problem My solution for spline surfaces was to keep the maximum number of primitives at 6 and use another parameter to determine the maximum level I use the formula max level round up ln primitives K ln S where K is the maximum number of primitives i e 6 and S was a prediction of how much an octree subdivision would cut down the number of primitives in an octree For example in an environment consisting of a set of randomly distributed points one would expect that when the octree cube containing these points was subdivided into eight octree cubies each octree cubie would have about 1 8th of the points inside it For a spline surface I reasoned that about four of the octree cubies might have some part of the surface in them which would give an S 4 Note that the largest original octree must have at least four cubies filled by the surface However this is not necessarily true for suceedingly smaller cubies Another factor which had to be taken into account was that there would also be some overlap some primitives would appear in two or more cubies So as a final reasonable guess I chose S 3 5 This seems to work fairly well in practice though further testing would be very worthwhile Coming up with some optimal way to chose a maximum octree depth still seems to be an open question Further study on how various environments actually fill space would be worthwhile how many octree nodes really are filled on the average for each subdivision More pragmatically how do we determine the best maximum depth for ray tracing an environment The problem with not limiting the maximum level is primarily one of memory If the octree grows without reasonable bounds a simple scene could use all available memory Also a large number of unnecessary octree nodes results in additional access time either through having to search through the octree or through having extraneous objects in the hashing table A more intelligent approach might be to do adaptive subdivision subdivide an octree cube as usual then see how many fewer primitives there are in each cubie If some cube has more than some percentage of primitives in it the subdivision could be deemed useless and so subdivision would end at this point If anyone knows a master s candidate looking for a project this whole question of when it is profitable to subdivide might make a worthwhile topic Judging from the interest in octrees by ray tracing researchers at last year s roundtable I think this will become more and more important as time goes on The second problem with octrees I decided to go with octrees for spline surfaces only because these objects would have fairly localized and even distribution of primitives i e quadrilateral patches I feel that octree efficiency techniques are probably horrible for ray tracing in general For example imagine you have a football stadium made of say 5K primitives Sitting on a goal line is a shiny polygonalized teapot of 5K quadrilaterals note that the teapot is teapot sized compared to the stadium You fill the frame with the teapot for a ray trace hoping to get some nice reflections of the stadium on its surface If you use an octree for this scene you ll run into an interesting problem The teapot is say a foot long The stadium is 200 yards long So the teapot is going to be only 1 600th the size of the stadium Each octree subdivision creates 8 cubies which are each half the length of the parent cube You could well subdivide down to 9 levels with that 9th level cubie having a length of 1 512th of the stadium length about 14 inches of octrees and still have the whole teapot inside one octree cube still undivided If you stopped at this 9th level of subdivision your ray trace would take forever Why Because whenever a ray would enter the octree cubie containing the teapot which most of the rays from your eye would do along with all those reflection and shadow rays the cubie would contain a list of the 5K teapot polygons Each of these polygons would have to be tested against the ray since there is no additional efficiency structure to help you out In this case the octree has been a total failure Now you may be in a position where you know that your environments will be well behaved you re ray tracing some specific object and the surrounding environment is limited in size However the designer who is attempting to create a system which can respond to any user s modeling requests is still confronted by this problem Further subdivision beyond level nine down to level eighteen may solve the problem in this case But I can always come up with a worse pathological case Some realistic examples are an animation zooming in on a texture mapped earth into the Caltech campus when you re on the campus the sphere which represents the earth would create a huge octree node and the campus would easily fall within one octree cubie Or a user simply wants to have a realistic sun and places a spherical light source 93 million miles away from the scene being rendered Ridiculous Well many times I find that I will place positional light sources quite some distance away from a scene since I don t really care how far the light is but just the direction the light is coming from If a primitive is associated with that light source the octree suddenly gets huge Solutions Mine is simply to avoid the octree altogether and use Goldsmith s automatic bounding volume generation algorithm IEEE CG A May 1987 However I hate to give up all that power of the octree so easily So my question has anyone found a good way around this problem One method might be to do octree subdivision down to a certain level then consider all leaf cubies that have more than the specified number of primitives in their lists as problem cubies For this list of primitives we perform Goldsmith s algorithm to get a nice bounding volume hierarchy This method reminds me of the SIGGRAPH 87 paper by John Snyder and Alan Barr Ray Tracing Complex Models Containing Surface Tesselations Their paper uses SEADS on the tesselated primitives and hierarchy on these instanced SEADS boxes to get around memory constraints while my idea is to use the octree for the total environment so that the quick cutoff feature of the octree can be used i e if any primitive in an octree cubie is intersected then ray trace testing is done versus having to test the whole environment s hierarchy against the ray Using bounding volume hierarchy locally then gets rid of the pathological cases for the octree However I tend to think the above just is not worthwhile It solves the pathological cases but I think that automatic bounding volume hierarchy let s call it ABVH methods will be found to be comparable in speed to octrees in many cases I think I can justify that assertion but first I would like to get your opinions about this problem more discussion of topic back to contents Top Ten Hit Parade of Computer Graphics Books by Eric Haines One of the most important resources I have as a computer graphics programmer is a good set of books both for education and for reference However there are a lot of wonderful books that I learn about years after I could have first used them Alternately I will find that books I consider classics are unknown by others So I would like to collect a list of recommended reading and reference from you all to be published later in the year I would especially like a recommendation for good books on filtering and on analytic geometry Right now I am reading Digital Image Processing by Gonzalez and Wintz and have A Programmer s Geometry on order but am not sure these fit the bill An Introduction to Splines for use in Computer Graphics and Geometric Modeling by Bartels Beatty Barsky looks like a great resource on splines but I have read only four chapters so far so am leaving it off the list for now Without further ado here are my top ten book recommendations Most should be well known to you all and so are listed mostly as a kernel of core books I consider useful I look forward to your additions The Elements of Programming Style 2nd Edition Brian W Kernighan P J Plauger 168 pages Bell Telephone Laboratories Inc 1978 All programmers should read this book It is truly an Elements of Style for programmers Examples of bad coding style are taken from other textbooks corrected and discussed Wonderful and pithy Fundamentals of Interactive Computer Graphics James D Foley A Van Dam 664 pages Addison Wesley Inc 1982 A classic covering just about everything once over lightly Principles of Interactive Computer Graphics 2nd Edition William M Newman R F Sproull 541 pages McGraw Hill Inc 1979 The other classic It s older e g ray tracing did not exist at this point but gives another perspective on various algorithms Mathematical Elements for Computer Graphics David F Rogers J A Adams 239 pages McGraw Hill Inc 1976 An oldie but goodie its major thrust is a thorough coverage of 2D and 3D transformations along with some basics on spline curves and surfaces Procedural Elements for Computer Graphics David F Rogers 433 pages McGraw Hill Inc 1985 For information on how to actually implement a wide variety of graphics algorithms from Bresenham s line drawer on up through ray tracing this is the best book I know However for complicated algorithms I would recommend also reading the original papers Numerical Recipes William H Press B P Flannery S A Teukolsky W T Vetterling 818 pages Cambridge University Press 1986 Chock full of information on numerical algorithms including code in FORTRAN and PASCAL no C unfortunately The best part of this book is that they give good advice on what methods are appropriate for different types of problems A First Course in Numerical Analysis 2nd Edition Anthony Ralston P Rabinowitz 556 pages McGraw Hill Inc 1978 Tom Duff s recommendation says it best This book is SO GOOD C A Reference Manual Samuel P Harbison G L Steele Jr 352 pages Prentice Hall Inc 1984 A comprehensive and comprehensible manual on C The Mythical Man Month Frederick P Brooks Jr 195 pages Addison Wesley Inc 1982 A classic on the pitfalls of managing software projects especially large ones A great book for beginning to learn how to schedule resources and make good predictions of when software really is going to be finished Programming Pearls Jon Bentley 195 pages Bell Telephone Laboratories Inc 1986 Though directed more towards systems and business programmers there are a lot of clever coding techniques to be learnt from this book Also it s just plain fun reading As an added bonus here s one more that I could not resist Patterns in Nature Peter S Stevens 240 pages Little Brown and Co Inc 1974 The thesis is that simple patterns recur again and again in nature and for good reasons A quick read with wonderful photographs my favorite is the comparison of a turtle shell with a collection of bubbles forming a similar shape Quite a few graphics researchers have used this book for inspiration in simulating natural processes more discussion of topic back to contents About Normal Vector Transform Octrees by Olin Lathrop and Eric Haines Here goes another attempt to reach more people I will now spare you all a paragraph of griping about the e mail system previous discussion of problem About the normal vector transform Eric you are absolutely right I also ran into this when some of my squashed objects just didn t look right about 4 years ago I would just like to offer a slightly different way of looking at the same thing I find I have difficulty with mathematical concepts unless I can attatch some sort of physical significance to them I think of a 3x4 transformation matrix as three basis vectors and a displacement vector instead of an amorphous pile of 12 numbers My first attack at finding a transformed normal was to find two non paralell surface vectors at the point in question These could be transformed regularly and the transformed normal would be their cross product This certainly works but is computationally slow It seemed clear that there should exist some 3x3 matrix that was the total transform the normal vector really went thru To simplify the thought experiment what if the original normal vector was exactly along the X axis Well the unit surface vectors would be the Y and Z axis vectors When these are sent thru the regular 3x3 transformation matrix they become the Y and Z basis vectors of that matrix The final resulting normal vector is therefore the cross product of the Y and Z basis vectors of the regular matrix This is then what the X basis vector of the normal vector transformation matrix should be In general a basis vector in the normal vector transformation matrix is the cross product of the other two basis vectors of the regular transformation matrix I wasn t until about a year later that I realized that this resulting matrix was the inverse transpose of the regular one This derivation results in exactly the same matrix that Eric was talking about but leaves me with more physical understanding of what it represents Now for a question It has always bothered me that this matrix trashes the vector magnitude This usually implies re unitizing the transformed normal vector in practise Does anyone avoid this step I don t want to do any more SQRTs than necessary You can assume that the original normal vector was of unit length but that the result also needs to be About octrees 1 I don t use Andrew s hashing scheme either I transform the ray so that my octree always lives in the 0 0 0 to 1 1 1 cube To find the voxel containing any one point I first convert the coordinates to 24 bit integers The octree now sits in the 0 to 2 23 cube Picking off the most significant address bit for each coordinate yields a 3 bit number This is used to select one of 8 voxels at the top level Now pick off the next address bit down and chose the next level of subordinate voxel etc until you hit a leaf node This process is LOGn and is very quick in practise Finding a leaf voxel given an integer coordinate seems to consume about 2 5 of the time for most images I store direct pointers to subordinate voxels directly in the parent voxel data block In fact this is the ONLY way I have of finding all but the top voxel 2 Choosing subdivision criteria First the biggest win is to subdivide on the fly Never subdivide anything until you find there is a demand for it My current subdivision criteria in order of precidence 1 overrides 2 are 1 Do not subdivide if hit subdivision generation limit This is the same as what Eric talked about I think everyone does this 2 Do not subdivide if voxel is empty 3 Subdivide if voxel contains more than one object 4 Do not subdivide if less than N rays passed thru this voxel but did not hit anything Currently N is set to 4 5 Subdivide if M K 6 Subdivide Again the most important point is lazy evaluation of the octree The above rules are only applied when a ray passes thru a leaf node voxel Before any rays are cast my octree is exactly one leaf node containing all the objects 3 First solution to teapot in stadium This really cries out for nested objects Jim Arvo Dave Kirk and I submitted a paper last year on The Ray Tracing Kernel which discussed applying object oriented programming to designing a ray tracer Jim just told me he is going to reply about this in detail so I will make this real quick Basically objects are only defined implicitly by the results of various standard operations they must be able to perform like intersect yourself with this ray The caller has no information HOW this is done An object can therefore be an aggregate object which really returns the result of intersecting the ray with all its subordinate objects this allows for easily and elegantly mixing storage techniques octrees linear space 5D structures etc in the same scene More on this from JIM 4 Second solution to teapot in stadium I didn t understand why an octree wouldn t work well here anyway Suppose the teapot is completely enclosed in a level 8 voxel That would only waste 8x8 64 voxels in getting down to the space you would have chosen for just the teapot alone Reflection rays actually hitting the rest of the stadium would be very sparse so go ahead and crank up the max subdivision limit Am I missing something This is a reply to Olin Lathrop Summary well maybe the octree is not so bad after all From Eric Haines Olin Lathrop writes To simplify the thought experiment what if the original normal vector was exactly along the X axis Well the unit surface vectors would be the Y and Z axis vectors When these are sent thru the regular 3x3 transformation matrix they become the Y and Z basis vectors of that matrix The final resulting normal vector is therefore the cross product of the Y and Z basis vectors of the regular matrix This is then what the X basis vector of the normal vector transformation matrix should be In general a basis vector in the normal vector transformation matrix is the cross product of the other two basis vectors of the regular transformation matrix It wasn t until about a year later that I realized that this resulting matrix was the inverse transpose of the regular one The problem is the sign of the basis vector is unclear by this method I tried this approach but it fails on mirror matrices Suppose your transformation matrix is 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 This matrix definitely affects the surface normal in X but your two vectors in Y and Z are unaffected This problem never occurs in the real world because such a matrix is equivalent to twisting an object through 4D space and making it go through the looking glass However it happens in computer graphics a lot e g I model half a car body then mirror reflect to get the other half If you have a two sided polygon laying in the YZ plane with one side red the other blue and apply the above transformation no vertices and no tangent vectors have any non zero X components and so will not change But the normal does reverse and the sides switch colors My conclusion was that you have to use the transpose of the inverse to avoid this problem since surface normals fail for this case p s did you get a copy of Glassner s latest 2nd edition memo on this problem He does a good job explaining the math About octrees 1 I don t use Andrew s hashing scheme either I transform the ray so that my octree always lives in the 0 0 0 to 1 1 1 cube Actually this is the exact approach I finally took also I had rejected the hashing scheme earlier and forgotten why and misremembered that it was because of memory costs the correct reason for not hashing is that it s faster to just zip through the octree by the above method no hashing is needed It s pretty durn fast to find the right voxel I agree Have you experimented with trying to walk up and down the octree that is when you are leaving an octree voxel you go up to the parent and see if the address is inside the parent If not you go to its parent and check the address etc until you find that you can go back down Should be faster than the straight downwards traversal when the octree is deep the neighboring voxels of the parent of the voxel you re presently in account for 3 of the 6 directions the ray can go after all You have 1 2 a chance of descending the octree if you check the parent 3 4ths if you go up two parents etc Where did I read of this idea anyway Fujimoto Kaplan Whatever the case it s not original with me Another idea that should be mentioned is one I first heard from Andrew Glassner putting quadtree like structures on the cube faces of the octree cubes It s additional memory but knowing which octree cube is the next would be a faster process Hopefully Andrew will write this up sometime The subdivision criteria ideas are great makes me want to go and try them out When are you going to write it up and get it published somewhere Lazy subdivision sounds worthwhile it definitely takes awhile for the octrees to get set up under my present do it all at the beginning approach not to mention the memory costs That was something I loved about the Arvo Kirk paper without it the 5D scheme would appear to be a serious memory hog 4 Second solution to teapot in stadium I didn t understand why an octree wouldn t work well here anyway Suppose the teapot is completely enclosed in a level 8 voxel That would only waste 8x8 64 voxels in getting down to the space you would have chosen for just the teapot alone Reflection rays actually hitting the rest of the stadium would be very sparse so go ahead and crank up the max subdivision limit Am I missing something There are two things which disturbed me about the use of the octree for this problem One was that if the maximum subdivision level was reached prematurely then the octree falls apart I mentioned that you could indeed subdivide down another 9 levels and have an 18 level octree that would work However the problem with this is knowing when to stop why not go on to 24 levels For me it boils down to when do I subdivide I suspect that your additional criteria might solve a lot of the pathological cases which is why I want to test them out Also note that there are built in maximum subdivision levels in octree schemes which could be reached and still not be sufficient though admittedly your 24 levels of depth are probably enough Of course I once thought 16 bits was enough for a z buffer now I m not so sure Say you have a satellite which is 5 feet tall in an image with the earth in the background We re now talking 23 levels of subdivision before you get within the realm of subdividing the satellite With 24 levels of depth being your absolute maximum you ve hit the wall with only one subdivision level helping you out on the satellite itself Good point that as far as memory goes it s really just 8x8 more voxels wasted One problem is say I m 8 feet in each direction from the teapot with me and the teapot in diagonally opposite corners of a cube which is then made into an octree The only way to get through the 8 cubes in the containing box is to travel through 4 of them i e if I m in Xhi Yhi Zhi and the teapot is in Xlo Ylo Zlo then I have to intersect my own box and then three other boxes to move me through in each lo direction In this case there are only 3 levels of octree cubes I have to go through before getting to the 1 foot cube voxel which contains the teapot The drawback of the octree is that I have to then do 3x4 12 box intersections which must be done each ray and which are useless Minor but now think of reflection rays from the teapot which try to hit the stadium each could go through up to 8 levels x 4 voxels per level 32 voxels just to escape the stadium without hitting anything not including all the voxels needed to be traversed from the teapot to the one foot cube Seems like a lot of intersection and finding the next octree address and tree traversal for hitting the background I suspect less bounding volumes would be hit using hierarchy and the tests would be simpler many of them being just a quick is the ray origin inside this box if so check inside the box I guess it just feels cleaner to have to intersect only bounding volumes which are needed which is the feel which automatic bounding volume hierarchy has to it Boxes can be of any size so that if someone adds a huge earth behind a satellite all that is added is a box that contains both With hierarchy you can do some simple tricks to cut down on the number of bounding volumes intersected For example by recording that the ray fired at the last pixel hit such and so object you can test this object first for intersection This quickly gets you a maximum depth that you need not go beyond if a bounding volume is intersected beyond this distance you don t have to worry about intersecting its contents This trick seems to gain you about 90 of the speed up of the octree i e not having to intersect any more voxels once an intersection is found while also allowing you the speed up of avoiding needless octree voxel intersections I call this the ray coherency speedup it can be used for all types of rays and if you hit when the ray is a shadow ray you can immediately stop testing this trick will work for the octree too Simply save a pointer to the object which blocked a particular shadow ray for a particular light last pixel and try it again for the next shadow ray I still have doubts about the octree However with lazy evaluation I think you get rid of one of my major concerns subdividing too deep makes for massive octrees which soak up tons of memory Have you had to deal with this problem i e has the octree ever gotten too big and do you have some way to free up memory some least recently used kind of thing An interesting comment that I read by John Peterson on USENET news some months ago was John Watson Ames Anyway I know there have been a few variations of the constant time algorithms around and what I need to know is what is the best i e simplest most effiecent etc version to implement Could some of you wonderful people comment on these techniques in general and maybe give me some pointers on recent research implementions etc This is an interesting question Here at Utah myself and Tom Malley implemented three different schemes in the same ray tracer Whitted Rubin Kay Kajiya and an octree scheme similar to the Glassner Kaplan camp I think The result All three schemes were within 10 20 of each other speedwise Now we haven t tested these times extensively I m sure you could find wider variances for pathological cases But on the few generic test cases we measured there just wasn t much difference If we get the time we plan on benchmarking the three algorithms more closely I suspect that this is probably the case with octree working best when the scene depth i e the number of objects which are intersected by each ray regardless of distance is high the ray coherency method outlined above for hierarchy fails and so cutting off early is a big benefit Automatic hierarchy probably wins when there are large irregularities in the density of the number of objects in space Of course the SEADS method equal sized voxels and 3DDDA is ridiculous for solving the teapot in a stadium kind of problems but it s probably great for machines with lots of memory ray tracing scenes with a localized set of objects By the way I found Whitted Rubin vs Kay Kajiya to be about the same Kay had less intersections but the sorting killed any time gained I find the coherency ray technique mostly does what Kay Kajiya does quickly gets you a maximum intersection depth for cutoff Without the memory constraints limiting the effectiveness of the octree I can believe it well could be the way of the future it is ideal for hardware solution so those extra voxel intersection and traversal tests don t bother me if they re real fast sort of like how the z buffer is the present winner in hidden surface algorithms because of its simplicity So how s that for a turnabout on my polemical anti octree position Nonetheless I m not planning to change my hierarchy code in the near future not until the subdivision and memory management problems are more fully understood All for now Eric Haines more discussion of topic back to contents Subspaces and Simulated Annealing by Jim Arvo I started out intending to write a very short reply to Eric Haines s teapot in a football stadium example but it turned out to be rather long At any rate most of what s described here except for some of the very speculative stuff near the bottom is a result of joint work with Dave Kirk Olin Lathrop and John Francis One way that we ve dealt with situations similar to Eric s teapot example is to use a combination of spatial subdivision and bounding volume techniques For instance we commonly mix two or three of the following techniques into a meta hierarchy for ray tracing a single environment 1 Linear list 2 Bounding box hierarchy 3 Octrees including BSP trees 4 Linear grid subdivision 5 Ray Classification We commonly refer to these as subspaces For us this means some convex volume of space a collection of objects in it and some technique for intersecting a ray with those objects This technique is part of an aggregate object and all the objects it manages are the children Any aggregate object can be the child of any other aggregate object and appears simply as a bounding volume and intersection technique to its parent In other words it behaves just like a primitive object Encapsulating a subspace as just another object is very convenient This is something which Dave and Olin and I agreed upon in order to make it possible to mix and match our favorite acceleration techniques within the same ray tracer for testing benchmarking and development purposes As an example of how we ve used this to ray trace moderately complex scenes I ll describe the amusement park scene which we animated This consisted of a number of rides spread throughout a park each containing quite a bit of detail We often showed closeups of objects which reflected the rest of the park a somewhat scaled down version of the teapot reflecting the stadium There were somewhere around 10 000 primitive objects not including fractal mountains which doesn t sound like much anymore but I think it still represents a fairly challenging scene to ray trace particularly for animating The organization of the scene suggested three very natural levels of detail A typical example of this is I Entire park a collection of rides trees and mountains II Triple decker Merry go round one of the rides III A character riding a horse a detail of a ride Clearly a single linear grid would not do well here because of the scale involved Very significant collections of primitives would end up clumped into single voxels Octress on the other hand can deal with this problem but don t enjoy quite the voxel walking speed of the linear grid This suggests a compromise What we did initially was to place a coarse linear grid around the whole park then another linear grid or octree around each ride and frequently a bounding box hierarchy around small clusters of primitives which would fall entirely with a voxel of even the second level usually 16x16x16 linear grid Later we began to use ray classification at the top level because for one thing it did some optimizations on first generation rays The other levels of the hierarchy were kept in place for the most part simplified a bit in order to run well on machines with A small but sort of interesting additional benefit which falls out of nesting subspaces is that it s possible to take better advantage of sparse transformations Obviously the same trick of transforming the rays into a canonical object space before doing the intersection test and transform the normal on the way out also works for aggregate objects Though this means doing possibly several transforms of a ray before it even gets to a primitive object quite often the transforms which are lower in the hierarchy are very simple e g scale and translate So there are cases when a dense i e expensive transform gets you into a subspace where most of the objects have sparse i e cheap transforms I ll gladly describe how we take advantage of matrix sparsity structures if anybody is interested If you end up testing N objects before finding the closest intersection this means that occasionally you can do the job with one dense transform and N sparse ones instead of N dense transforms This is particularly appropriate when you build a fairly complex object from many scaled and translated primitives then rotate the whole mess into some strange final orientation Unfortunately even in this case it s not necessarily always a win Often just pre concatenating the transforms and tossing the autonomous objects dense transforms and all into the parent octree or whatever is the better thing to do The jury is still out on this one Currently all of the high level decisions about which subspaces to place where are all made manually and specified in the modeling language This is much harder to do well than we imagined initially The tradeoffs are very tricky and sometimes counter intuitive A general rule of thumb which seems to be of value is to put an adaptive subspace e g an octree RC at the top level if the scene has tight clusters of geometry and a Linear grid if the geometry is fairly uniform Judicious placement of bounding box hierarchies within an adaptive hierarchy is a real art On the one hand you don t want to hinder the effectiveness of the adaptive subspace by creating large clumps of geometry that it can t partition On the other hand a little a priori knowledge about what s important and where bounding boxes will do a good job can often make a big difference in terms of both time and space the space part goes quintuple for RC Now the obvious question to ask is How can this be done automatically Something akin to Goldsmith and Salmon s automatic bounding volume generation algorithm may be appropriate Naturally in this context we re talking about a heterogeneous mixture of volumes not only differing in shape and surface area but also in cost both in terms of space and time Think of each subspace as being a function which allows you to intersect a ray with a set of objects with a certain expected i e average cost This cost is very dependent upon the spatial arrangement and characteristics of the objects in the set and each type of subspace provides different trade offs Producing an optimal or at least good organization of subspaces is then a very nasty combinatorial optimization problem An idea that I ve been toying with for quite some time now is to use simulated annealing to find a near optimal subspace hierarchy where optimality can be phrased in terms of any desired objective function taking into account e g both space and time Simulated annealing is a technique for probabilistically exploring the vast solution space typically of a combinatorial optimization problem looking for incremental improvements WITHOUT getting stuck too soon in a local minimum It s very closely linked to some ideas in thermodynamics and was originally motivated by nature s ability to find near optimal solutions to mind bogglingly complex optimization problems like getting all the water molecules in a lake into a near minimum energy configuration as the temperature gradually reaches freezing It s been fairly successfull at solving NP hard problems such as the travaling salesman and chip placement which are practically the same thing This part about simulated annealing and subspace hierarchies is all very speculative mind you It may not be practical at all It s easy to imagine the annealing taking three CPU years to produce a data structure which takes an hour to ray trace if it s done as a preprocessing step not lazily There are many details which I haven t discussed here largely because I haven t figured them out yet For example one needs to get a handle on the distribution of rays which will be intersected with the environment in order to estimate the efficiency of the various subspaces Assuming a uniform distribution is probably a good first approximation but there s got to be a better way perhaps through incremental improvements as the scene is ray traced and in particular between successive frames of an animation If this has any chance of working it s going to require an interesting mix of science and art The science is in efficiently estimating the effectiveness of a subspace i e predicting the relevant costs given a collection of objects and a probability density function of rays probably uniform The art is in selecting an annealing schedule which will let the various combinations of hierarchies percolate and gradually freeze into a near optimal configuration Doing this incrementally for an animation is a further twist for which I ve seen no analogies in the simulated annealing literature If you ve never heard of simulated annealing and you re interested in reading about it there s a very short description in Numerical Recipes The best paper that I ve found though is Optimization by Simulated Annealing by S Kirkpatrick C D Gelatt Jr and M P Vecchi in the May 13 1983 issue of Science Does this sound at all interesting to anybody Is anyone else thinking along these or similar lines related discussion of topic back to contents Eric Haines erich acm org Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 Ray Tracing News Volume 1 Number 1 http www acm org tog resources RTNews html rtnews1b html http www acm org tog resources RTNews html rtnews1b html http www acm org tog resources RTNews html rtnews1b html http www acm org tog resources RTNews html rtnews1b html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews2a.html%%==%%Ray Tracing News, Volume 1, Number 2%%==%%Ray Tracing News "Light Makes Right" February 15, 1988 Volume 1, Number 2 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%4553%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right February 15 1988 Volume 1 Number 2 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1988 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Dore Introduction So now that the SIGGRAPH paper submission rush is over the SIGGRAPH paper review process begins Fortunately it s generally easier to comment on someone else s deathless prose than write it yourself It s also time to start procrastinating on writing up SIGGRAPH tutorial notes So all in all it s not been too busy except for all the real work we ve all hopefully been doing back to contents Dore The only new news I ve got is on the new product by Ardent called Dore rhymes with moray there should be an up accent over that e in Dore Ardent is the new name for Dana Computer Inc i e the single user supercomputer supergraphics people Their Titan minisupercomputer is due out realsoonnow Dore stands for Dynamic Object Rendering Environment The places I ve seen articles so far is Electronics February 4 1988 on pages 69 70 and Mini Micro Systems February 1988 pages 22 23 The first article offers more detail I don t really want to rehash either article in full The salient points to me about Dore are 1 Toolkit approach 2 Can render using vectors hidden surface or ray tracing 3 Hierarchical object oriented system 4 Five object classes a primitives including points curves polygons meshes cubic solids and NURBS non uniform rational B splines b appearance attributes material properties inc solid texture maps and environmental reflection maps c geometric attributes modeling matrices d studio objects camera lights I like this term e organizational objects hierarchy and evidentally the ability to define function calls inside the environment which call routines in the application program No idea how this works 5 Quoted times 0 1 second for vector 10 seconds for hidden surface 100 seconds ray traced I assume on the Titan No idea what kind of scene complexity or resolution 6 Written in C 7 Open system source code sold in hopes of selling Dore on other systems The best part for universities and research labs is the price 250 for a source code license not sure what the cost is for source code maintenance vs 15000 for commercial users plus 5000 year after the first year Per copy binary license is 200 I am teaching the ray tracing section of A Consumer s and Developer s Guide to Image Synthesis at SIGGRAPH this year so definitely want to know more I would also like more information just out of curiosity So you university people please go out there and get one seems like a real bargain The contact info for Ardent is Ardent Computer Corp 550 Del Rey Ave Sunnyvale CA 94086 408 732 2806 That s all folks Eric back to contents Eric Haines erich acm org Ray Tracing News Volume 1 Number 2 Ray Tracing News Volume 1 Number 2 Ray Tracing News Volume 1 Number 2 Ray Tracing News Volume 1 Number 2 Ray Tracing News Volume 1 Number 2 Ray Tracing News Volume 1 Number 2 Ray Tracing News Volume 1 Number 2 Ray Tracing News Volume 1 Number 2 Ray Tracing News Volume 1 Number 2 Ray Tracing News Volume 1 Number 2 http www acm org tog resources RTNews html rtnews2a html http www acm org tog resources RTNews html rtnews2a html http www acm org tog resources RTNews html rtnews2a html http www acm org tog resources RTNews html rtnews2a html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews2b.html%%==%%Ray Tracing News, Volume 1, Number 3%%==%%Ray Tracing News "Light Makes Right" March 1, 1988 Volume 1, Number 3 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%21350%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right March 1 1988 Volume 1 Number 3 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1988 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Mailing List Updates Another Dore Article Responses to the teapot in a football stadium Problem by Andrew Glassner Comments on Jim Arvo s Efficiency Article by Eric Haines and Jim Arvo Efficiency Tricks by Jeff Goldsmith More Book Recommendations by Jeff Goldsmith Bug for the Day by Eric Haines A Pet Peeve by Jeff Goldsmith Postscript Introduction I just receive Andrew s note that the hardcopy RTN is in the mail which inspired me to flush the buffer and send on the latest offerings Special thanks to Jeff Goldsmith for submissions Eric back to contents Mailing List Updates First an address change John Peterson is now with Apple who writes I m currently hanging out at Apple thinking about 3D graphics for the rest of us and how to keep the jaggies away from personal computers But there is this Cray sitting about 50 feet away Hmmm John Peterson bicubic splines texturing Apple Computer graduated University of Utah 1988 alias john peterson hpfcrs hpfcla jp apple apple com RELAY CS NET I asked him for ray tracers at the University of Utah So Tom Malley and Rod Bogart whose initials are RGB are now subscribers From Tom My thesis research was similar to what John Wallace described being a two pass approach to radiosity to include specular reflection and transparency Form factors were all calculated via ray tracing however I did some brief examination of different ray intersection methods along the way Rubin Whitted Kay Kajiya and Glassner Tom Malley blending ray tracing and radiosity Evans Sutherland graduated University of Utah 1988 malley cs utah edu cs utah edu esunix tmalley alias tom malley hpfcrs hpfcla hplabs malley cs utah edu To quote John Peterson about Rod Bogart Rod developed a really neat method for using ray tracing to integrate computer generated pictures with real world images coming soon to a SIGGRAPH near you Rod Bogart blending ray tracing and images University of Utah alias rod bogart hpfcrs hpfcla hplabs bogart gr cs utah edu back to contents Another Dore Article In case you have not been able to track down the two articles previously mentioned about Dore Ardent s new rendering system there s now a third that I know of it s in Computer Design Feb 15 1988 pages 30 31 Pretty much like the other articles i e cast from the same press release back to contents Response to the teapot in a football stadium Problem by Andrew Glassner previous discussion of topic Just a quick response to your football stadium teapot example When you subdivide a node look at its children If only one child is non empty replace the original node with its non null child Do this recursively until the subdivision criterion is satisfied I do this in my spacetime ray tracer and the results can be big The ray propagation can get just a bit more complex but there are clever rays to keep it simple see John Amanatide s article in Eurographics 87 plus I have a scheme that I hope to write up soon Better yet go with a hybrid space subdivision bounding volume scheme such as the one described in my spacetime paper poorly described in the Intro to RT notes but better described in the version slated for the March issue of CG A I d be happy to mail you a preprint I think this hybrid scheme gives the best of both worlds and you can use whatever space subdivision and bounding volume techniques that you like in the two distinct phases of the algorithm I use adaptive space subdivision and Kay s bounding slabs and that combination seems to work pretty well And now I have to get back to moving into my office back to contents Comments on Jim Arvo s Efficiency Article by Eric Haines and Jim Arvo previous discussion of topic From Eric Haines with a few extra comments than my original letter to Jim Your article on efficiency is fascinating I hope to read it more carefully tonight and eventually we just came under a crunch of work comment on it Sounds like you ve done a lot of serious thought and speculation on the possibilities I agree with the philosophy of objects each having their own private hierarchies and having the ability to hook these hierarchies up however you want We ve done that on a small scale with our tesselated spline surfaces automatic hierarchy a la Goldsmith Salmon IEEE CG A May 1987 for everything but then octrees for the spline surfaces themselves A nice feature of Goldsmith is that you can weight the cost of each primitive into the algorithm multiply its area by some intersection cost which you ll probably have to figure out through experimentation to give it a weighting In this way a torus surface which has the same size bounding volume as a quadrilateral can be given a higher weighting factor A higher cost has the effect of making the hierarchical tree less horizontal near the complicated object i e there are more bounding volumes overall with a few complicated objects in each This is what you want since you d rather spend a little extra time on intersecting bounding volumes than wasting a lot of time intersecting the empty space around costly objects Response from Jim Arvo I m glad you found my article interesting All your interesting mail finally motivated me to contribute to the discussion I thought I would toss out a pet idea of mine and see if it sparked any debate It turns out that Jeff Goldsmith also looked at simulated annealing for bounding box hierarchies One day one of us will get some results Hopefully not negative results With all the talk about octrees and such it s clear that there are a number of potential papers waiting in the wings I ve been thinking that by getting the right collaborations going we the ray tracing group could easily hand IEEE several related papers effectively defining a theme issue What do you think My reply The efficiency article collection sounds possible Another idea which someone Mike Kaplan maybe I forget mentioned at last SIGGRAPH was A Characterization of Ten Ray Tracing Efficiency Algorithms If well done this would be a classic There are probably entirely new schemes still to be found and certainly trying to optimize and figure out good hybrid methods is an area ripe for development But right now many of the structures and algorithms are in place and still have not been fully compared Timings are unconvincing and statistics are worthwhile but don t tell the whole story An in depth comparison of the major algorithms and techniques to improve these would be wonderful Someday someday well my hope is that a few of us could do some writing along these lines even if it s just brainstorming on how to compare particular algorithms in a rigorous fashion e g How can we simulate a scene mathematically OK idealize each object as a box or sphere for simplicity Now how do we distribute the points to get realistic clustering Once we have a scene generator which could create various typical distributions of objects in a scene then we have to analyze how this generator would interact with each algorithm and be able to predict how each efficiency scheme deals with the scenes generated Or there might be simpler ways to isolate and analyze each factor which affects the efficiency of a scheme Anyway whatever but this stuff looks fun Understanding the strengths of the various techniques seems vital to being able to do any kind of annealing process for optimization back to contents Efficiency Tricks by Jeff Goldsmith Here s a good hack for Ray Tracing News When using Tim Kay s heapsort on bounding volumes in order to get the closest don t bother to do that for illumination rays I know it seems obvious but I never thought to do it The obvious corollary to that idea has a little more reach to it Since illumination rays form the bulk of the rays we trace getting the nearest intersection is of limited value In addition if CSG is used more times occur when the nearest intersection is of less value This seems to indicate that space tracing techniques are doing some amount of needless work Since it doesn t really cost that much perhaps it is not a flaw but maybe space tracers should consider approaches that don t worry about where along the path we are and optimize that problem instead more discussion of topic back to contents More Book Recommendations by Jeff Goldsmith previous discussion of topic I agree completely with your comment about libraries Mine is a crucial resource for me Here are some of my favorite books that are in my office Geometry Computational Geometry for Design and Manufacture Faux Pratt an early CAD text It has lots of good stuff on splines and 3D math Differential Geometry of Curves and Surfaces DoCarmo A super text on classical differential geometry Not quite the same as analytic geometry CRC Standard Math Tables This has an awesome section on analytic geometry Calculus too Can t live without it It is not the same as the first part of the Chemistry and Physics one Analytic Geometry Steen and Ballou Once was the standard college text on the subject That was a long time ago but it is very easy to read and it covers the fundamentals Computing Data Structures and Algorithms Aho Hopcroft and Ullman Read anything by these guys Data Structure Techniques Standish More How to than AHU s tome Numerical Analysis Burden Faires and Reynolds I have the other two as well This is the least complete of the three but the algorithms inside are childishly easy to implement They always seem to work too Best of all for many cases they have test data and solutions Software Tools Kernighan and Plauger How to write command line interpreters editors macro expanders the works Great reading Fundamentals of Computer Algorithms Horowitz and Sahni Less technical than AHU but pretty technical Thicker It may very well answer the problem you can t figure out straight off The Art of Computer Programming Knuth The Encyclopedia Physics Seem awfully useful sometimes Gravitation Misner Thorne and Wheeler The thickest book on my shelf It s a paperback too It s bent three bookends permanently Cheap JPL ones Truly a tome on modern physics Modern Physics Tippler Much easier to read than MTW Has lots of good appendices University Astronomy Pasachoff and Kuttner I read this book for fun I wonder why I didn t read it while I was taking Kuttner s course The Feynman Lectures on Physics Awesome first course Most of my needs are problems in the text Graphics etc Raster Graphics Handbook Conrac All about fundamentals of the craft Light and Color in Nature and Art Williamson and Cummings Much easier to read than Hall s thesis but less technical as well Etc Etc The Random House Dictionary of the English Language College Edition The best collegiate sized dictionary around By far The Chicago Manual of Style Has most of the answers Did you know that to recreate is to have fun but to re create is computer graphics The Elements of Style The one that came before computers back to contents Bug for the Day by Eric Haines This will be pretty unexciting for those who never intend to implement an octree subdivision scheme For future implementers I hope you find it of use it took me quite a few hours to track this one down so I think it is worth going into This bug was one I had when implementing octree subdivision for ray tracing The basic algorithm used was Glassner s once you intersect the octree structure move the intersection point in one half of the smallest cube s dimension in the direction normal to the wall hit In other words find out what cube is the next cube by finding a point that should be well inside of it then translating this point into integer octree coordinates and traversing the octree downwards until a leaf node is found However there are some subtle errors that can occur with moving to the next octree cube My favorite is almost hitting the edge of a cube moving into the next cube then getting caught moving to the cube diagonal to this cube i e moving from cube 1 to 2 to 3 X 2 Numbers are the order of cubes moved through Y 1 3 ray started here and hit almost at the ray is in X Y direction This went into an infinite loop going between 2 and 3 forever The reason was that when I hit the boundary 1 2 I would add a Y increment half minimum box size to the intersection point then convert this to find that I was now in box 2 I would then shoot the ray again and it would hit the wall at 2 To this intersection point I would add an X increment However what would happen is that the Y intersection point would actually be ever so slightly low earlier when I hit the 1 2 wall adding the increment pushed us into box 2 But now when the Y intersection point was converted it would put us in the 1 3 boxes and X would then put us in box 3 Basically the precision of the machine made the mapping between world space and octree space be ever so slightly off The infinite loop occurred when we shot the ray again at box 3 It would hit the 3 wall get Y incremented and because X was ever so slightly less than what was truly needed to put the intersection point in the 3 boxes we would go back to box 2 ad infinitum Another way to look at this is that when we would intersect the ray against any of the walls near the point the intersection point due to roundoff was always mapping to box 1 if not incremented Incrementing in Y would move it to box 2 and in X would move it to box 3 but then the next intersection test would yield another point that would be in box 1 Since we couldn t increment in both directions at once we could never get past 2 and 3 simultaneously This bug occurs very rarely because of this the intersection points all have to be such that they are very near a corner and the mapping of the points must all land within box 1 This problem occurred for me once in a few million rays which of course made it all that much more fun to search for it My solution was to check the distance of the intersections generated each time if the closest intersection was a smaller distance from the origin than the closest distance for the previous cube move then this intersection point would not be used but rather the next higher would be In this way forward progress along the ray would always be made By the way I found that it was worthwhile to always use the original ray origin for testing ray cube intersections doing this avoids any cumulative precision errors which could occur by successively starting from each new intersection point To simulate the origin starting within the cube I would simply test only the 3 cube faces which faced away from the ray direction this was also faster to test Anyway hope this made sense has anyone else run into this bug Any other solutions back to contents A Pet Peeve by Jeff Goldsmith Don t ever refer to pixels as rows and columns It makes it hard to get the order row column column row right Refer to pixels as x y coordinates Not only is that the natural system to do math on them but it is much easier to visualize in a debugging environment as well as running the thing I use the x and y npix switches on the tracer command line to override any settings and have found them to be much easier to deal with than the r and c that seem to be everywhere Note that C s normal array order is I think I always get these things wrong y x I agree my problem now is that Y 0 is the bottom edge of the screen when dealing with the graphics package HP s Starbase and Y 0 is the top when directly accessing the frame buffer HP s SRX EAH back to contents Postscript Next RT News issue I ll include a write up of Goldsmith Salmon which should hopefully make the algorithm clearer plus some little additions I ve made I ve found Goldsmith Salmon to be a worthwhile robust efficiency scheme which hasn t received much attention It embodies an odd way of thinking I have to reread my notes about it when I want to change the code as there are a number of costs which must be taken into account and inherited It s not immediately intuitive but has a certain sense to it once all the pieces are in place Hopefully I ll be able to shed some more light on it All for now Eric back to contents Eric Haines erich acm org Ray Tracing News Volume 1 Number 3 Ray Tracing News Volume 1 Number 3 Ray Tracing News Volume 1 Number 3 Ray Tracing News Volume 1 Number 3 Ray Tracing News Volume 1 Number 3 Ray Tracing News Volume 1 Number 3 Ray Tracing News Volume 1 Number 3 Ray Tracing News Volume 1 Number 3 Ray Tracing News Volume 1 Number 3 Ray Tracing News Volume 1 Number 3 http www acm org tog resources RTNews html rtnews2b html http www acm org tog resources RTNews html rtnews2b html http www acm org tog resources RTNews html rtnews2b html http www acm org tog resources RTNews html rtnews2b html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews2c.html%%==%%Ray Tracing News, Volume 1, Number 4%%==%%Ray Tracing News "Light Makes Right" March 8, 1988 Volume 1, Number 4 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%22739%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right March 8 1988 Volume 1 Number 4 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1988 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Surface Acne by Eric Haines and Jeff Goldsmith Goldsmith Salmon Hierarchy Building by Jeff Goldsmith Efficiency Tricks Followup by Masataka Ohta Jeff Goldsmith Eric Haines Primitive Box Overlap Testing extracts from USENET news by Ruud Waaj Paul Heckbert Andrew Glassner Surface Acne by Eric Haines and Jeff Goldsmith A problem which just about every ray tracer has run into and which has rarely appeared in the literature and even more rarely been solved in any way is what I call surface acne An easy way to explain this problem is with an example Say you are looking at a double sided i e no culling cylinder primitive You shoot an eye ray hitting the outside Now you look at a light As it turns out the intersection point truly is bathed by the light and so should see it What actually may happen is that the shadow test ray hits the cylinder In images this will show up as black dots or other anomalous shadings surface acne I ve seen this left in some images to give an interesting textured effect but normally it s a real problem How did this happen Well theoretically it can t However due to precision error the following happens When you hit the cylinder and calculated the intersection point in world space the point computed was actually ever so slightly inside the cylinder Now when the shadow ray is sent out it is tested against the cylinder s surface and an intersection is found at some tiny distance from the origin A common solution is to just assign an epsilon to each intersector and cross your fingers In other words what you really do is move the ray origin ever so slightly along the shadow or reflection or refraction ray direction and hope this was far enough that the new origin is outside of the object in actuality what you want is for the new origin to be on the same side of the object as the parent ray except for refraction rays which want to start on the opposite side This works fairly well for test systems but is pretty scary stuff for software used by anyone who didn t design it e g some user decides to input his molecular database in meters causing all his data to be much smaller in radius than my fudge factor When I add my fudge factor distance to the ray I find that my new ray origin is way outside the scene Another solution is to not test the item intersected if it is not self shadowing For example a polygon cannot cast a shadow on itself so should not be tested for intersection when a ray originates on its surface This works fine for some primitives but falls apart when self shadowing objects cylinders tori spline surfaces etc are used I have also experimented with some root polishing techniques which help to solve some problems but I ll leave it at this for now Has anyone any better solutions for surface acne ideally foolproof ones I suspect that the best solution is a combination of the above techniques but hopefully I m missing some concept that might make this problem easy to solve Hope to hear from you all on this Addenda from Jeff Goldsmith Al Barr and I have used a technical term for surface acne too We called it black dots or more often black shit Zbuffers have similar problems The results are called zbuffer shit or zippers Mostly the cruder term is used since the artifacts are not particularly desirable back to contents Goldsmith Salmon Hierarchy Building by Jeff Goldsmith Well I was going to write up some info on the Goldsmith Salmon hierarchy building algorithm but the RT News buffer was filled almost immediately and I haven t done it yet However there was this from Jeff Goldsmith about his earlier paper IEEE CG A May 1987 If you are going to spend some time and effort on automatic tree generation stuff Note paper 2 is almost done mostly talks about parallelism and hypercubes but some stuff on trees as well mostly work heuristics that include primitives and so on I d like to hear some thinking about the evaluation function Firstly it s optimized for primary rays That turns out to be an unfortunate choice since most rays are secondary rays We ve come up with a second order correction that is good for evaluating trees but turns the generation algorithm into O n log 2 n We ve not played around with it enough to tell whether it works If you have some thoughts solutions that would be nice Another finding on the same vein that is much more important is the mean see next note seems to be reasonably close but sigma is very high for the predictions vs actual tries This wasn t important actually wasn t detected on a sequential machine but became crucial on a parallel machine Some of the variation is due to our assumption attempt at view direction independence Clearly stuff in back is not checked for intersection much I don t know whether that is all of it we get bizarre plots of this data If you have any thoughts on how to make a better or more precise evaluation function I d really like to hear the reasoning and perhaps steal and use the results Oh the promised note The mean is only correct if the highest level bounding volume root node is contained completely within the view volume If it isn t the actual results end up proportional to the predicted ones but I haven t worked out the constant It shows up on our graphs pretty clearly though The second part of the algorithm is the builder I m not convinced that it is a very good method at all but it met the criteria I set up when trying to decompose trees O below n 2 and reasonably local I was trying to use simulated annealing at the time Some other features were environmental some were because I couldn t think of a better way In no sense am I convinced that the incremental approach or the specific one chosen is best I d like to hear about that too The only part I really like about the whole thing is the general approach of using heuristics to guess at some value rated in flops eventually and then trying to optimize that value Beyond that I think there is a whole realm of computational techniques waiting to be used to approximately solve optimization problems I m really interested in other work done in that direction and especially results regarding graphics Thanks for the good words I seem to have been mentioned in most of the last issue I bet that has something to do with my having acquired a network terminal on my desk less than a month ago yay more discussion of topic back to contents Efficiency Tricks Followup by Masataka Ohta Jeff Goldsmith Eric Haines previous discussion of topic These are comments generated by Jeff Goldsmith s note that Kay Kajiya sorting is not needed for shadow rays Comments from Masataka Ohta In the latest ray tracing news you write Efficiency Tricks Since illumination rays form the bulk of the rays we trace If so instead of space tracing you should use ray coherence at least for the illumination rays The ray coherent approaches are found in CG A vol 6 no 9 The Light Buffer A Shadow Testing Accelerator and in my paper ray coherence theorem and constant time ray tracing algorithm in proceedings of CG International 87 In addition if CSG is used more times occur when the nearest intersection is of less value This seems to indicate that space tracing techniques are doing some amount of needless work How about tracing illumination rays from light sources instead of from object surface It will be faster for your CSG case if the surface point lies in the shadow though if the surface point is illuminated there will be no speed improvement The problem is interesting to me because my research on coherent ray tracer also suggests that it is much better to trace illumination rays from the light source Do you have any other reasons to determine from where illumination rays are fired Jeff Goldsmith s reply Actually I believe you though I won t say with certainty that we know the best way to do shadow testing However I m interested in fundamentally understanding the ray tracing algorithm and determining what computation MUST be done so the realization that space tracing illumination rays still seems meaningful In fact it is my opinion that space tracing is not the right way to go and backwards classical ray tracing will eventually be closer to what will be used 30 years from now I won t even try to defend that position no one knows the answers What we are trying to do is shed a little light on the subject Thanks for your comments From Eric Haines I just got from Ohta the same note Ohta sent to you plus your reply Your reply is so short that I ve lost the sense of it So if you don t mind a quick explanation would be useful However I m interested in fundamentally understanding the ray tracing algorithm and determining what computation MUST be done so the realization that space tracing illumination rays still seems meaningful What is the realization that space tracing illumination rays I m missing something here which realization In fact it is my opinion that space tracing is not the right way to go and backwards classical ray tracing will eventually be closer to what will be used 30 years from now Do you mean by space tracing Ohta s method Basically it looks like I should reread Ohta s article but I thought I d check first Further explanation from Jeff Goldsmith I think that a word got dropped from the sentence either when I typed it in or later Who knows I do that about as often as computers do I meant Since distance order is not needed for illumination rays space tracing methods in general not Ohta s in particular do extra work It s not always clear that extra information costs extra computation but they usually go hand in hand It was just a rehash of the original message Anyway if extra computation is being done perhaps then there is an algorithm that does not do this computation yet does all the others or some others that is of lower asymptotic time complexity Basically this all boils down to my response to various claims that people have constant time ray tracers It is just not true It can t be true if they are using a method that will yield the first intersection along a path since we know that that computation cannot be done in less than O n log n without a discretized distance measurement I don t think that space tracers discretize distance in the sense of a bucket sort but I could be convinced I suppose Anyway that s what the ramblings are all about If you have some insights I d like to start an argument sorry discussion on the net about the topic What do you think more discussion of topic back to contents Primitive Box Overlap Testing extracts from USENET news by Ruud Waaj Paul Heckbert Andrew Glassner There was recently some interesting interchange about octree building on USENET Some people don t read or don t receive comp graphics so the rest of this issue consists of these messages From Ruud Waij who is not on the RT News e mail mailing list In article 198 dutrun UUCP winffhp dutrun UUCP ruud waij writes My ray tracing program which can display the primitives block sphere cone and cylinder uses spatial enumeration of the object space subdivision in regularly located cubical cells voxels to speed up computation The voxels each have a list of primitives If the surface of a primitive is inside a voxel this primitive will be put in the list of the voxel I am currently using bounding boxes around the primitives if part of the bounding box is inside the voxel the surface of the primitive is said to be inside the voxel This is a very easy method but also very s l o w I am trying to find a better way of determining whether the surface of a primitive is in a voxel or not but I am not very succesful Does anyone out there have any suggestions Response from Paul Heckbert Yes interesting problem Fitting a bounding box around the object and listing that object in all voxels intersected by the bounding box will be inefficient as it can list the object in many voxels not intersected by the object itself Imagine a long thin cylinder at an angle to the voxel grid I ve never implemented this but I think it would solve your problem for general quadrics find zmin and zmax for the object loop over z from zmin to zmax stepping from grid plane to grid plane find the conic curve of the intersection of the quadric with the plane this will be a second degree equation in x and y an ellipse parabola hyperbola or line note that you ll have to deal with the end caps of your cylinders and similar details find ymin and ymax for the conic curve loop over y from ymin to ymax stepping from grid line to grid line within the current z plane find the intersection points of the current y line with the conic this will be zero one or two points find xmin and xmax of these points loop over x from xmin to xmax the voxel at x y z intersects the object Perhaps others out there have actually implemented stuff like this and will enlighten us with their experience Response from Andrew Glassner Ruud and I have discussed this in person but I thought I d respond anyway both to summarize our discussions and offer some comments on the technique The central question of the posting was how to assign the surfaces of various objects to volume cells in order to use some form spatial subdivision to accelerate ray tracing Notice that there are at least two assumptions underlying this method The first assumes that the interior of each object is homogeneous in all respects and thus uninteresting from a ray tracing point of view As a counterexample if we have smoke swirling around inside a crystal ball then this homogeneous contents assumption breaks down fast To compensate we either must include the volume inside each object to each cell s object list and support a more complex object description encompassing both the surface and the contents or include as new objects the stuff within the original The other assumption is that objects have hard edges otherwise we have to revise our definition of surface in this context This can begin to be a problem with implicit surfaces though I haven t seen this really discussed yet in print But so as long as we re using hard edged objects with homogeneous interiors the surface in a cell approach is still attractive From here on I ll assume that cells are rectangular boxes So to which cells do we attach a particular surface Ruud s current technique gathered from his posting finds the bounding box of the surface and marks every cell that is even partly within the bounding volume Sure this marks a lot of cells that need not be marked One way to reduce the marked cell count is to notice that if the object is convex we can unmark any cell that is completely within the object we test the 8 corners with an inside outside test fast and simple for quadrics only slightly slower and harder for polyhedra If all 8 corners are inside unmark the cell Of course this assumes convex cells like boxes Note that some quadrics are not convex e g hyperboloid of one sheet so you must be at least a little careful here The opposite doesn t hold just because all 8 corners are outside does NOT mean a cell may be unmarked Consider the end of a cylinder poking into one side of a box like an ice cream bar on a stick where the ice cream bar itself is our cell The stick is within the ice cream but all the corners of the ice cream bar are outside the stick Since this box contains some of the stick s surface the box should still be marked So our final cells have either some inside and some outside corners or all outside corners What do we lose by having lots of extra cells marked Probably not much By storing the ray intersection parameter with each object after an intersection has been computed we don t ever need to actually repeat an intersection If the ray id that is being traced matches the ray id for which the object holds the intersection parameter we simply return the intersection value This requires getting access to the object s description and then a comparison probably the object access is the most expensive step But most objects are locally coherent if you hit a cell containing object A the next time you need object A again will probably be pretty soon So false positives cells who claim to contain an object they really don t aren t so bad since the pages containing an object will probably still be resident when we need it again We do need to protect ourselves though against a little gotcha that I neglected to discuss in my 84 CG A paper If you enter a cell and find that you hit an object it claims to contain you must check that the intersection you computed actually resides within that cell It s possible that the cell is a false positive so the object itself isn t even in the cell It s also possible that the object is something like a boomerang where it really is within the current cell but the actual intersection is in another cell The loss comes in when the intersection is actually in the next cell but another surface in the next cell but not in this one is actually in front Even worse if you re doing CSG that phony intersection can distort your entire precious CSG status tree The moral is not to be fooled just because you hit an object in a cell check to be sure that the intersection itself is also within the cell How to find the bounding box of a quadric A really simple way is to find the bounding box of the quadric in its canonical space and then transform the box into the object s position Fit a new bounding box around the eight transformed corners of the original bounding box This will not make a very tight volume at all imagine a slanted tilted cylinder and its bounding box but it s quick and dirty and I use it for getting code debugged and at least running If you have a convex hull program you can compute the hull for concave polyhedra and use its bounding box obviously you needn t bother for convex polyhedra For parametric curved surfaces you can try to find a polyhedral shell the is guaranteed to enclose the surface again you can find the shell s convex hull and then find the extreme values along each co ordinate If your boxes don t have to be axis aligned then the problem changes significantly Consider a sphere an infinite number of equally sized boxes at different orientation will enclose the sphere minimally More complicated shapes appear more formidable An O n 3 algorithm for non aligned bounding boxes can be found in Finding Minimal Enclosing Boxes by O Rourke International Journal of Computer and Information Sciences Vol 14 No 3 1985 pp 183 199 Other approaches include traditional 3 d scan conversion which I think should be easily convertable into an adaptive octree environment Or you can grab the bull by the horns and go for raw octree encoding approximating the surface with lots of little sugar cubes Then mark any cell in your space subdivision tree that encloses some or all of any of these cubes more discussion of topic back to contents Eric Haines erich acm org Ray Tracing News Volume 1 Number 4 Ray Tracing News Volume 1 Number 4 Ray Tracing News Volume 1 Number 4 Ray Tracing News Volume 1 Number 4 Ray Tracing News Volume 1 Number 4 Ray Tracing News Volume 1 Number 4 Ray Tracing News Volume 1 Number 4 Ray Tracing News Volume 1 Number 4 Ray Tracing News Volume 1 Number 4 Ray Tracing News Volume 1 Number 4 http www acm org tog resources RTNews html rtnews2c html http www acm org tog resources RTNews html rtnews2c html http www acm org tog resources RTNews html rtnews2c html http www acm org tog resources RTNews html rtnews2c html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews2d.html%%==%%Ray Tracing News, Volume 1, Number 5%%==%%Ray Tracing News "Light Makes Right" March 26, 1988 Volume 1, Number 5 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%37604%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right March 26 1988 Volume 1 Number 5 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1988 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Some Mailing List Changes and Additions More on Shadow Testing Efficiency etc by Jeff Goldsmith More Comments on Tight Fitting Octrees for Quadrics by Jeff Goldsmith Linear time Voxel Walking for Octrees by Jim Arvo Efficiency Tricks by Eric Haines A Rendering Trick and a Puzzle by Eric Haines USENET Roundup PECG Errata by David Rogers Introduction Well NCGA was pretty uninspiring as it rapidly becomes more and more PC oriented It was great to see people though and nice to escape the Ithaca snow and rain As far as ray tracing goes a few companies announced products The AT T Pixel Machine now has two rendering packages PICLIB and RAYLIB these may be merged into one package someday I would guess that separate development efforts caused the split any comments Leonard With the addition of some sort of VM capability this machine becomes pretty astounding in its ray tracing performance in case you didn t get to SIGGRAPH last year they had a demo of moving by mouse a shiny ball on top of the mandrill texture map about a frame per second ray trace on a small part of the screen HP announced its new graphics accelerator the TurboSRX and with it the eventual availability of a ray tracing and the first radiosity package as an extension to their Starbase graphics library Ardent and their Dore package were sadly missing Apollo was also noticeable for their non appearance Sun TAAC was there showing off some ray traced pictures but seemingly not planning to release a ray tracer the salesman claiming that whoever bought a TAAC would simply write their own Stellar was there with their supercomputer workstation interesting but no ray tracing in sight Anyone else note anything of ray tracing or other interest back to contents Some Mailing List Changes and Additions Changed address Roman Kuchkuda Megatek alias roman kuchkuda hpfcrs hpfcla hplabs ucbvax ucsd megatek kuchkuda rutgers edu New people I saw Gray at NCGA and got his email address He worked on ray tracing at RPI and is at Cray Gray Lorig volumetric data rendering sci vi and parallel vector architectures Cray Research Inc 1333 Northland Drive Mendota Heights MN 55120 612 681 3645 alias gray lorig hpfcrs hpfcla hplabs gray rhea CRAY COM uc msc umn edu By way of introduction this from Erik Jansen I visited the Helsinki University of Technology last week and found there a lot of ray tracing activities going on They are even reviving their old EXCELL system Markku Tamminen did a PhD work on a spatial index based on an adaptive binary space subdivision in 81 82 I met him in 81 and 82 and we talked at these occasions about ray tracing and spatial subdivision In his PhD thesis 1982 there is a ray tracing algorithm given for the EXCELL method EXtendible CELL method I decided to implement the algorithm for ray tracing polygon models That implementation failed because I could only use our PDP 11 at that time and I could have about ten cells in internal memory too less for effective coherence The program spend 95 of its time on swapping So far the history I told them about the RT news and they are very interested to receive it I will mail them Charles Woodward Panu Rekola e o your address so that they can introduce themselves to the others Panu Rekola spline intersection illumination models textures Helsinki University of Technology Laboratory of Information Processing Science Room Y229A SF 02150 Espoo Finland pre kiuas hut fi or pre hutcs hut fi alias panu rekola hpfcrs hpfcla hpda uunet mcvax hutcs pre Panu Rekola writes I just received a message from Erik Jansen Delft in which he told me that you take care of a mailing list called Ray Tracing News I already sent a message to Andrew Glassner on the same topic because Erik told me to contact him when he visited us some weeks ago Now I would like to join the discussion I promise to ask no stupid questions I have previously worked here in a CAD project where I wrote my MSc thesis on FEM elements and since about a year I have been responsible of our graphics Even though my experience in the field is quite short I suppose I have learned a lot while all people want to see their models in color and with glass etc visualization has been the bottleneck in our CAD projects As an introduction to the critical members of the mailing list you could tell that I am a filter who read unstandard input from the models created by other people manipulates the data with the normal graphics methods and outpus images The special features of our ray tracer are the EXCELL spatial directory which has been optimized for ray tracing during the last few weeks a new B spline and Bezier algorithm methods to display BR models with curved surfaces even blend surfaces although this part yet unfinished The system will be semi commercially used in a couple of companies soon e g car and tableware industry back to contents More on Shadow Testing Efficiency etc by Jeff Goldsmith followup to Ohta Goldsmith correspondence From Jeff Goldsmith Sorry I haven t responded sooner but movie making has taken up all my time recently With respect to pre sorting etc It is important to note that the preprocessing time must be MUCH smaller than the typical rendering time So far this has been true and even more so for animation O n in my writing explicitly in print means linear in the number of objects in the scene Obviously it is quite likely that the asymptotic time complexity a t c of any ray tracing algorithm will be different for the number of rays Excluding ray coherence methods and hybrid z buffer ray tracing methods the current a t c is O n in the number of rays for ray tracing Actually I think it is the same for these other methods because the hybrid methods just eliminate some of the rays from consideration and leave the rest to be just as hard and the coherence methods don t eliminate more than say 1 2 of the rays I think In any event for the a t c to become sub linear there can be no such fraction right About space tracing I think that I said that finding the closest intersection is an O log n problem I agree though that that statement is not completely correct Bucket sort methods for example can reduce the a t c below log n Also global sort time preprocessing can distribute some of the computation across all rays which can reduce the time complexity What about the subdivide on the fly methods e g Arvo and Kirk How do they fit in the scheme of things I think your evaluation of the space tracing methods is correct though the space complexity becomes important here too Also given a full space like Fujimoto s demos the time complexity is smaller That leads to the question What if the time complexity of an algorithm depends on its input data Standard procedure is to evaluate worst case complexity but we are probably interested in average case or more likely typical case Also it would be worthwhile and interesting to understand which algorithms do better with which type of data We need to quantify this answer when trying to find good hybrid schemes The next generation At SIGGRAPH 87 we had a round table and each answered the question what would you like to see happen to ray tracing in the next year My choice was to see something proven about ray tracing It sounds like you are interested in that too Any takers back to contents More Comments on Tight Fitting Octrees for Quadrics by Jeff Goldsmith followup to Ruud Waij s question last issue previous discussion of topic With respect to the conversation about octree testing I ve only done one try at that I just tested 9 points against the implicit representation of the surface 8 corners and the middle I didn t use it for ray tracing I even forget what for but I suspect that antialiasing will hide most errors generated that way Jim Blinn came up with a clever way to do edges and minima maxima of quadric surfaces using surprise homogeneous coordinates I don t think there ever was a real paper out of it but he published a tutorial paper in the Siggraph 84 tutorial notes on The Mathematics of Computer Graphics That technique works for any quadric surface cylinders aren t bounded though under any homogeneous transform including perspective He also talks about how to render these things using his method I tried it it works great and is incredibly fast I didn t implement many of his optimizations and can draw a texture mapped cylinder no end caps that fills the screen 512x512 on a VAX 780 in under a minute As to how this applies to ray tracing he gives a method for finding the silhouette of a quadric as well as minima and maxima It allows for easy use of forward differencing so should be fast enough to render quadrics into an octree Bob Conley did a volume oriented ray tracer for his thesis I don t remember the details but there ll be a long note about it that I ll pass on He mentions that his code can do index of refraction varying over position He uses a grid technique similar to Fujimoto s back to contents Linear time Voxel Walking for Octrees by Jim Arvo Just when you thought we had moved from octrees on to other things This just occurred to me yesterday Actually that was several days ago This mail got bounced back to me twice now More e mail gremlins I guess Linear time Voxel Walking for Octrees Here is a new way to attack the problem of voxel walking in octrees at least I think it s new By voxel walking I mean identifying the successive voxels along the path of a ray This is more for theoretical interest than anything else though the algorithm described below may actually be practical in some situations I make no claims about the practicality however and stick to theoretical time complexity for the most part For this discussion assume that we have recursively subdivided a cubical volume of space into a collection of equal sized voxels using a BSP tree i e each level imposes a single axis orthogonal partitioning plane The algorithm is much easier to describe using BSP trees and from the point of view of computational complexity there is basically no difference between BSP trees and octrees Also assuming that the subdivision has been carried out to uniform depth throughout simplifies the discussion but is by no means a prerequisite This would defeat the whole purpose because we all know how to efficiently walk the voxels along a ray in the context of uniform subdivision i e use a 3DDDA Assuming that the leaf nodes form an NxNxN array of voxels any given ray will pierce at most O N voxels The actual bound is something like 3N but the point is that it s linear in N Now suppose that we use a re traversal technique to move from one voxel to the next along the ray That is we create a point that is guaranteed to lie within the next voxel and then traverse the hierarchy from the root node until we find the leaf node or voxel containing this point This requires O log N operations In real life this is quite insignificant but here we are talking about the actual time complexity Therefore in the worst case situation of following a ray through O N voxels the re traversal scheme requires O N log N operations just to do the voxel walking Assuming that there is an upper bound on the number of objects in any voxel i e independent of N this is also the worst case time complexity for intersecting a ray with the environment In this note I propose a new voxel walking algorithm for octrees call it the partitioning algorithm for now which has a worst case time complexity of O N under the conditions outlined above In the best case of finding a hit right away after O 1 voxels both re traversal and partitioning have a time complexity of O log N That is BEST CASE O 1 voxels WORST CASE O N voxels searched before a hit searched before a hit Re traveral O log N O N Log N Partitioning O log N O N The new algorithm proceeds by recursively partitioning the ray into little line segments which intersect the leaf voxels The top down nature of the recursive search ensures that partition nodes are only considered ONCE PER RAY In addition the voxels will be visited in the correct order thereby retaining the O log N best case behavior Below is a pseudo code description of the partitioning algorithm It is the routine for intersecting a ray with an environment which has been subdivided using a BSP tree Little things like checking to make sure the intersection is within the appropriate interval have been omitted The input arguments to this routine are Node A BSP tree node which comes in two flavors a partition node or a leaf node A partition node defines a plane and points to two child nodes which further partition the positive and negative half spaces A leaf node points to a list of candidate objects P The ray origin Actually think of this as an endpoint of a 3D line segment since we are constraining the ray to be of finite length D A unit vector indicating the ray direction len The length of the ray or more appropriately the line segment This is measured from the origin P along the direction vector D The function Intersect is initially passed the root node of the BSP tree the origin and direction of the ray and a length len indicating the maximum distance to intersections which are to be considered This starts out being the distance to the far end of the original bounding cube FUNCTION Intersect Node P D len RETURNING results of intersection IF Node is NIL THEN RETURN no intersection IF Node is a leaf THEN BEGIN intersect ray P D with objects in the candidate list RETURN the closest resulting intersection END IF dist signed distance along ray P D to plane defined by Node near child of Node in half space which contains P IF 0 hit data Intersect near P D dist IF hit data no intersection THEN RETURN hit data Q P dist D 3D coords of point of intersection far child of Node in half space which does NOT contain P RETURN Intersect far Q D len dist END IF ELSE RETURN Intersect near P D len END As the BSP tree is traversed the line segments are chopped up by the partitioning nodes The shrinking of the line segments is critical to ensure that only relevent branches of the tree will be traversed The actual encodings of the intersection data the partitioning planes and the nodes of the tree are all irrelevant to this discussion These are constant time details Granted they become exceedingly important when considering whether the algorithm is really practical Let s save this for later A naive and incorrect proof of the claim that the time complexity of this algorithm is O N would go something like this The voxel walking that we perform on behalf of a single ray is really just a search of a binary tree with voxels at the leaves Since each node is only processed once and since a binary tree with k leaves has k 1 internal nodes the total number of nodes which are processed in the entire operation must be of the same order as the number of leaves We know that there are O N leaves Therefore the time complexity is O N But wait The tree that we search is not truly binary since many of the internal nodes have one NIL branch This happens when we discover that the entire current line segment is on one side of a partitioning plane and we prune off the branch on the other side This is essential because there are really N 3 leaves and we need to discard branches leading to all but O N of them Thus k leaves does not imply that there are only k 1 internal nodes The quention is Can there be more than O k internal nodes Suppose we were to pick N random voxels from the N 3 possible choices then walk up the BSP tree marking all the nodes in the tree which eventually lead to these N leaves Let s call this the subtree generated by the original N voxels Clearly this is a tree and it s uniquely determined by the leaves A very simple argument shows that the generated subtree can have as many as 2 N 1 log N nodes This puts us right back where we started from with a time complexity of O N log N even if we visit these nodes only once This makes sense because the re traversal method which is also O N log N treats the nodes as though they were unrelated That is it does not take advantage of the fact that paths leading to neighboring voxels are likely to be almost identical diverging only very near the leaves Therefore if the partitioning scheme really does visit only O N nodes it does so because the voxels along a ray are far from random It must implicitly take advantage of the fact that the voxels are much more likely to be brothers than distant cousins This is in fact the case To prove it I found that all I needed to assume about the voxels was connectedness provided I made some assumptions about the niceness of the BSP tree To give a careful proof of this is very tedious so I ll just outline the strategy which I think is correct But first let s define a couple of convenient terms 1 Two voxels are connected actually 26 connected if they meet at a face an edge or a corner We will say that a collection of voxels is connected if there is a path of connected voxels between any two of them 2 A regular BSP tree is one in which each axis orthogonal partition divides the parent volume in half and the partitions cycle X Y Z X Y Z etc Actually we can weaken both of these requirements considerably and still make the proof work If we re dealing with standard octrees the regularity is automatic Here is a sequence of little theorems which leads to the main result THEOREM 1 A ray pierces O N voxels THEOREM 2 The voxels pierced by a ray form a connected set THEOREM 3 Given a collection of voxels defined by a regular BSP tree any connected subset of K voxels generates a unique subtree with O K nodes THEOREM 4 The partitioning algorithm visits exactly the nodes of the subtree generated by the voxels pierced by a ray Furthermore each of these nodes is visited exaclty once per ray THEOREM 5 The partitioning algorithm has a worst case complexity of O N for walking the voxels pierced by a ray Theorems 1 and 2 are trivial With the exception of the uniqueness part theorem 3 is a little tricky to prove I found that if I completely removed either of the regularity properties of the BSP tree as opposed to just weakening them I could construct a counterexample I think that theorem 3 is true as stated but I don t like my proof yet I m looking for an easy and intuitive proof Theorem 4 is not hard to prove at all All the facts become fairly clear if you see what the algorithm is doing Finally theorem 5 the main result follows immediately from theorems 1 through 4 SOME PRACTICAL MATTERS Since log N is typically going to be very small bounded by 10 say this whole discussion may be purely academic However just for the heck of it I ll mention some things which could make this a maybe competative algorithm for real life situations in as much as ray tracing can ever be considered to be real life First of all it would probably be advisable to avoid recursive procedure calls in the inner loop of a voxel walker This means maintaining an explicit stack At the very least one should longjump out of the recursion once an intersection is found The calculation of dist is very simple for axis orthogonal planes consisting of a subtract and a multiply assuming that the reciprocals of the direction components are computed once up front before the recursion begins A nice thing which falls out for free is that arbitrary partitioning planes can be used if desired The only penalty is a more costly distance calculation The rest of the algorithm works without modification There may be some situations in which this extra cost is justified Sigh This turned out to be much longer than I had planned A followup message Here is a slightly improved version of the algorithm in my previous mail It turns out that you never need to explicitly compute the points of intersection with the partitioning planes This makes it a little more attractive Jim FUNCTION BSP Intersect Ray Node min max RETURNING intersection results BEGIN IF Node is NIL THEN RETURN no intersection IF Node is a leaf THEN BEGIN Do the real intersection checking intersect Ray with each object in the candidate list discarding those farther away than max RETURN the closest resulting intersection END IF dist signed distance along Ray to plane defined by Node near child of Node for half space containing the origin of Ray far the other child of Node i e not equal to near IF dist max OR dist RETURN BSP Intersect Ray near min max ELSE IF dist RETURN BSP Intersect Ray far min max ELSE BEGIN the interval intersects the plane hit data BSP Intersect Ray near min dist Test near side IF hit data indicates that there was a hit THEN RETURN hit data RETURN BSP Intersect Ray far dist max Test far side END IF END related previous discussion of topic more discussion of topic back to contents Efficiency Tricks by Eric Haines Some people turn out to be on the e mail mailing list but not the hardcopy list for the RT News In case you don t get the RT News in hardcopy form I m including the Efficiency Tricks article the puzzle from it in this issue Given a ray tracer which has some basic efficiency scheme in use how can we make it faster Some of my tricks are below what are yours HBV stands for Hierarchical Bounding Volumes Speed up 1 HBV and probably Octree Keep track of the closest intersection distance Whenever a primitive i e something that exists not a bounding volume is hit keep its distance as the maximum distance to search During further intersection testing use this distance to cut short the intersection calculations Speed up 2 HBV and possibly Octree When building the ray tree keep the ray tree around which was previously built For each ray tree node intersect the object in the old ray tree then proceed to intersect the new ray tree By intersecting the old object first you can usually obtain a maximum distance immediately which can then be used to aid Speed up 1 Speed up 3 When shadow testing keep the opaque object if any which shadowed each light for each ray tree node Try these objects immediately during the next shadow testing at that ray tree node Odds are that whatever shadowed your last intersection point will shadow again If the object is hit you can immediately stop testing because the light is not seen Speed up 4 When shadow testing save transparent objects for later intersection Only if no opaque object is hit should the transparent objects be tested Speed up 5 Don t calculate the normal for each intersection Get the normal only after all intersection calculations are done and the closest object for each node is know after all each ray can have only one intersection point and one normal Saving intermediate results is recommended for some intersection calculations Speed up 6 HBV only When shooting rays from a surface e g reflection refraction or shadow rays get the initial list of objects to intersect from the bounding volume hierarchy For example a ray beginning on a sphere must hit the sphere s bounding volume so include all other objects in this bounding volume in the immediate test list The bounding volume which is the father of the sphere s bounding volume must also automatically be hit and its other sons should automatically be added to the test list and so on up the object tree Note also that this list can be calculated once for any object and so could be created and kept around under a least recently used storage scheme more discussion of topic back to contents A Rendering Trick and a Puzzle by Eric Haines One common trick is to put a light at the eye to do better ambient lighting Normally if a surface is lit by only ambient light its shading is pretty crummy For example a non reflective cube totally in shadow will have all of its faces shaded the exact same shade very unrealistic The light at the eye gives the cube definition Note that a light at the eye does not need shadow testing wherever the eye can see the light can see and vice versa The puzzle Actually I lied This technique can cause a subtle error Do you know what shading error the above technique would cause hint assume the Hall model is used for shading back to contents USENET Roundup PECG Errata by David Rogers Other than a hilarious set of messages begun when Paul Heckbert s Jell O TM article was posted to USENET and the perennial question How do I find if a point is inside a polygon not much of interest However I did get a copy of the errata in Procedural Elements for Computer Graphics from David Rogers I updated my edition the Second with these corrections which was generally a time drain my advice is to keep the errata sheets in this edition checking them only if you are planning to use an algorithm However the third edition corrections are mercifully short From David F Rogers USNA MIL dfr cornell UUCP From David F Rogers dfr USNA MIL Subject PECG correction Date Thu 10 Mar 88 13 21 11 EST Correction list for PECG 2 26 86 David F Rogers There have been 3 printings of this book to date The 3rd printing occurred in approximately March 85 To see if you have the 3rd printing look on page 386 3rd line down and see if the word magenta is spelled correctly If it is you have the 3rd printing If not then you have the 2nd or 1st printing To see if you have the 2nd printing look on page 90 If the 15th printed line in the algorithm is while Pixel x y Boundary value you have the 2nd printing If not you have the 1st printing Please send any additional corrections to me at Professor David F Rogers Aerospace Engineering Department United States Naval Academy Annapolis Maryland 21402 uucp decvax brl bmd usna dfr arpa dfr usna Known corrections to the third printing Page Para Eq Line Was Should be 72 2 11 5 5 5 1 82 1 example 4 8 5 delete 100 5th equation upper limit on integral should be 2 vice 1 143 Fig 3 14 yes branch of t 1 decision blocks should extend down to Exit line invisible 144 Cyrus Beck algorithm 7 then 3 then 4 11 then 3 then 4 145 Table 3 7 1 value for w 2 1 2 1 147 1st eq 23 V sub e sub x j V sub e sub y j Known corrections to the second printing above plus text 19 2 5 Britian Britain 36 Eq 3 10 replace 2nd with 47 4 6 delta 0 delta 6 beta 355 2nd eq w s u w w s theta phi 385 2 5 magneta magenta 386 3 magneta magenta algorithms send self addressed long stamped envelope for xeroxed corrections 97 Bresenham 1 insert words first quadrant after modified 10 remove 12 1 2 I 2 14 delta x x sub 2 117 Explicit 18 Icount 0 delete clipping 18 insert m Large 120 9 P 2 P 1 12 insert after Icount 0 end if 13 insert after 1 if Icount 0 then neither end P P0 14 removed statement label 1 15 17 delete 18 delete 43 y yT 122 124 Sutherland write for new pages Cohen 128 midpoint 4 insert after initialize i i 1 129 6 i 1 delete 6 insert save original p1 Temp P1 8 i 2 i 2 11 12 save original delete Temp P1 14 add statement label 2 130 19 22 delete 24 i 2 i i 1 29 0 33 P1 P 143 3 wdotn Wdotn 144 20 176 Sutherland 1 then 5 then 4 Hodgman 177 9 4 x 4 2 x 2 198 floating 21 22 x y Xprev Yprev horizon 199 4 Lower Upper 200 11 19 rewrite as if y Lower x then Cflag 0 if y Upper x then Cflag 1 if y 2 129 Fig 3 6b move return to below Save P1 T P1 block remove Switch end point codes block in Reset counter block replace i 2 with i i 1 180 Fig 3 34b Reverse direction of arrows of box surrounding word Start 330 Fig 5 16a add P where rays meet surface 374 Fig 5 42 delete unlabelled third exit from decision box r ray 377 Fig 5 44 in lowest box I I I sub l sub j replace S with S sub j Known corrections to the first printing 90 91 scan line seed write for xeroxed corrections fill algorithm back to contents Eric Haines erich acm org Ray Tracing News Volume 1 Number 5 Ray Tracing News Volume 1 Number 5 Ray Tracing News Volume 1 Number 5 Ray Tracing News Volume 1 Number 5 Ray Tracing News Volume 1 Number 5 Ray Tracing News Volume 1 Number 5 Ray Tracing News Volume 1 Number 5 Ray Tracing News Volume 1 Number 5 Ray Tracing News Volume 1 Number 5 Ray Tracing News Volume 1 Number 5 http www acm org tog resources RTNews html rtnews2d html http www acm org tog resources RTNews html rtnews2d html http www acm org tog resources RTNews html rtnews2d html http www acm org tog resources RTNews html rtnews2d html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews3a.html%%==%%Ray Tracing News, Volume 1, Number 6%%==%%Ray Tracing News "Light Makes Right" April 6, 1988 Volume 1, Number 6 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%36352%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right April 6 1988 Volume 1 Number 6 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1988 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents RT News Hardcopy Form by Andrew Glassner New People Question for the Day by Rod Bogart Re Linear time Voxel Walking for BSP by Erik Jansen Some Thoughts on the Theory of RT Efficiency by Jim Arvo Automatic Creation of Object Hierarchies for Ray Tracing by Eric Haines Best of USENET RT News Hardcopy Form by Andrew Glassner I was surprised that there are still some folks on the softcopy list not on the hardcopy list On the next mailing please ask anyone on the electronic list who isn t getting the hardcopy but wants to to drop me a line electronically glassner cs unc edu or physically at the Department of Computer Science UNC CH Chapel Hill NC 27599 3175 back to contents New People from Cary Scofield Please add my name to the Ray Tracing News mailing list You can use the same address es you use for Jim Arvo or Olin Lathrop or the one I give you below I really enjoy reading RTN very enlightening stuff Thanks Cary Scofield Apollo Computer Inc 270 Billerica Rd Chelmsford MA 01824 apollo scofield eddie mit edu Could you please write up a paragraph about yourself which I could include next issue as an introduction I don t know that there is much about myself worth talking about but here goes I ve been working off and on with 3D graphics applications and systems for about 9 years started at Apollo 4 1 2 years ago been working on Apollo s 3dGMR and Raytracer packages presently in part time pursuit of an MS in Systems Engineering at Boston Univ my prevailing interests nowadays are in finding and developing a suitable software architecture for an image sythesis system that is network distributable and user extensible Cary Scofield from John Chapman John is presently doing grad work in computer graphics Yes I d like to be on the list getting the back issues would be great thanks The most stable email address for me is ubc cs fornax sfu cmpt chapman although this may change shortly nothing sent to it will be lost Fastest response address for short notes is still fornax bby bc john from Eric Haines Michael Cohen has also been added to the list He should be well known to anyone who has read anything about radiosity and has also done work in ray tracing his latest efforts with John Wallace resulting in an algorithm for combining radiosity and ray tracing Siggraph 87 last article In 1983 we both entered the Program of Computer Graphics at Cornell and after graduation he stayed on as a professor Embarrassingly enough I thought that he was on the RT News mailing list most of the PCG staff are anyway he s been added cohen squid tn cornell edu back to contents Question for the Day by Rod Bogart I actually do have a ray tracing question There has been mucho noise on the net about point in poly Around here we raytrace triangles So what is the fastest reliable way to intersect a ray with a triangle and also get back barycentric coordinates We subdivide our B spline patches into a hierarchy of bounding volumes with triangles at the leaves We preprocess the triangles by calculating a matrix to aid the intersection process The problem is the matrix must be inverted and doesn t always cooperate this usually fails for triangles nearly aligned with a coordinate plane Is there a favorite way of storing a triangle instead of our failing matrix so that the intersection returns barycentric coordinates r s t all 0 to 1 You don t need to bother the rest of the RT gang if you have solution of which you are confident Thanks RGB back to contents Re Linear time Voxel Walking for BSP by Erik Jansen previous discussion of topic I have some experience with the recursive ray traversal as I called it described by Jim Arvo The first implementation dates from fall 83 as mentioned in the previous RT news I presented the idea during the workshop Data structures for raster graphics June 1985 and I compared it there with the sequential traversal and did the suggestion that both methods can also be applied to a hierarchical box structure See F W Jansen Data structures for ray tracing In Data structures for raster graphics Proceedings workshop Kessener L R A Peters F J Lierop M L P van eds 57 73 Eurographics Seminars Springer Verlag 1986 In my thesis Solid modeling with faceted primitives Sept 1987 it is discussed on the pages 63 66 I agree that these sources are rather obscure and not known to people let say outside the Netherlands Here follows a summary of the pages of my thesis The sequential ray tracing algorithm for the BSP cell structure proceeds by local access First the intersection of the ray with the total structure is calculated then the cells are stepwise traversed by calculating the intersection of the ray with the cell planes and determining which cell is traversed next The spatial index directory is used to access the data in the cell The index in the directory is found by an address computation on the coordinates of a query point for all points within a cell the address computation function gives the same index value This is the EXCELL directory method see Tamminen Siggraph 83 A similar method is described in Fujimoto et al 1986 for traversing an octree space subdivision a neighbour finding technique on the basis of octree indexes Both methods are better than the method described in Glassner 1984 which classifies each point by descending the complete octree Another method is feasible a tree traversal method for the cell structure This method uses a cell structure that is created by a binary subdivision This recursive ray traversal method intersects the cell structure and recursively subdivides the ray and proceeds with the partitioning collection of cells first intersected If the ray interval only intersects a single cell then the data in that cell is tested for intersection with the ray Both algorithms have been implemented but no clear differences in performance could be found the average number of cells traversed for each ray is more than two or three which would be beneficial for the sequential traversal but it is not large enough to justify the initial cost of the recursive ray traversal The total processing time for the ray tracing breaks down into the following components cell traversal intersection and shading Their contributions are depicted in fig which shows that the intersection is still the major time consuming activity The constant time performance is confirmed by the results of fig Unfortunately the constant time is constantly very high sigh So far my thesis and exactly what was predicted by Jim In some test examples for instance a simple set up with five elementary volumes a few thousand polygons the average number of cells traversed was about 5 The original idea was not to eliminate the number of internal nodes that are traversed because I use the EXCELL indexing method but to avoid the cell plane intersections First I calculate the intersection of the ray with the six bounding planes of the world box I put xmin xmax ymin ymax zmin and zmax on a stack and I half each time the ray segment for x y and z alternatively Further while subdividing the ray I also half the directory index range of the EXCELL directory this requires another filling of the directory than in the original method and when the range contains only one index then the leaf level has been reached and the ray intersection with the cell data can be done If this is unclear I can give a more elaborated explanation next time It will be clear that I can not use with my method arbitrary partitioning planes An important point is the actual coding My implementation was in Pascal and I can imagine much better programs than I can write back to contents Some Thoughts on the Theory of RT Efficiency by Jim Arvo Jim is writing the course notes on efficiency for the Introduction to Ray Tracing course at this year s Siggraph He sent this on to me and mentioned I could pass them on to all Enjoy EAH Yes I did receive the latest RT news with my octree stuff in it By the way it occured to me that you mentioned something about walking up an octree to find the nearest common ancestor between a voxel and its neighbor Olin and I have been discussing this and I m quite sure that it s equivalent to the algorithm I described but it s NOT immediately obvious The important fact is that neighboring voxels in an octree have a common ancestor which is two steps up on average regardless of the depth of the octree This is what gets rid of the log N factor With respect to A Characterization of Ten Ray Tracing Efficiency Algorithms I m hoping that my section of the course notes will take a good first step toward filling this need There s obviously an infinite amount of work to be done here especially considering that ray tracing is on very shaky theoretical grounds as it stands Not that we have any doubts that it works We just can t say anything very convincing about how good our optimizations are at this point We clearly have to do some of the things you suggested in your last message or possibly go back to square one and try to create a formal ray tracing calculus which we can actually prove things about And of course I agree totally that we need to get a good handle on the strengths of the various techniques in order for something like annealing to have any chance at all By the way while writing the course notes I realized that there is a nice connection between the light buffer the ray coherence theorem Ohta Maekawa 87 and ray classification If you start with a direction cube like the hemicube of radiosity and cross it with i e form the cartesian product with different sets you get the central abstractions which these algorithms are based upon Like so light buffer ray coherence theorem ray classification directions directions directions x x x points objects space This is a very simple observation but I think it makes the different uses of direction easier to visualize and certainly easier to explain All three use sorted object lists associated directly or indirectly with cells of a subdivided direction cube I think these three algorithms form a nice well rounded section on directional techniques Well back to the salt mine Jim more I want to get your opinion concerning the correspondence between the light buffer the ray coherence algorithm and ray classification which I mentioned previously In particular I have the following chart which I d like to include in my section of the course notes and since the light buffer is your baby I d like you to tell me 1 If I ve represented it fairly 2 If there are other criteria which you think might be helpful to add to the chart Here is the chart which is actually just a figure in the context of a more detailed discussion Light Buffer Ray Coherence Ray Classification Directions Points Objects Space crossed with representing including bounding the light sources light sources environment Applied to shadowing rays all rays all rays Type of polygonal unrestricted unrestricted environment can be extended When data structure preprocessing preprocessing lazily during is built ray tracing Direction uniform uniform adaptive subdivision via quadtree Construction modified coherence object class of item list polygon ras theorem applied ification using terization to all pairs of hierarchy of objects beams Parameters number of number of max tree depth direction direction max item list size cells cells truncation size etc Item list constant time constant time Traversal of 2D or Lookup 5D hierarchy and caching Also have you given any thought to adaptive subdivision or lazy evaluation Are there other interesting extensions that you d care to mention I still haven t replied soon tonight if I can help it back to contents Automatic Creation of Object Hierarchies for Ray Tracing by Eric Haines previous discussion of topic This document is an explanation of the ideas presented by Goldsmith and Salmon in their May 87 paper in IEEE CG A Some changes to their algorithm have been made for additional efficiency during ray tracing though additional cost for the preprocess The problem is that you are given a list of objects and wish to create a near optimal hierarchy of bounding volumes to contain these objects The basic idea is to create the tree as we go adding each node at whatever location seems most optimal To avoid searching through the whole tree we work from the top down and figure out which child branch is most worth looking at The Algorithm As G S note the form of the tree created is order dependent One good method of ensuring a better tree is to shuffle the order of the list This can be done by given a list of objects OBJ 1 N for I 1 to N R random integer from 1 to N swap OBJ I and OBJ R Given the list of N objects form bounding boxes for each and calculate the area The area of the bounding box enclosing an object is proportional to Probability of hit P X Y Z Y Z and this is all we need to calculate since we re using these areas relative to one another The first object is considered as a root node of a tree structure simply OBJ 1 Tree 1 the initial tree and the other nodes are added to this tree one by one in optimal places Node Placement Start with the second node and look at the root of the tree The root will be either an object or a bounding volume well for the second node it will be an object after that it ll be a bounding volume We re presenting this algorithm in this fashion because this section will be used recursively throughout the root s children Root node is an object In this case the new object call it OBJ 2 will form a binary tree with the root node as follows BV 1 Tree 2 adding an object to tree 1 First Method OBJ 1 OBJ 2 A bounding volume was created which contains both objects and the bounding volume became the root node Root node is a bounding volume In this case three different possible paths can be taken when adding a new object to the tree The first is simply to add a binary tree structure as above with one child being the old root and the other child being the new object For example adding a new object OBJ 3 in this fashion to tree 2 above yields BV 2 Tree 3 Adding object 3 to tree 2 First Method BV 1 OBJ 3 OBJ 1 OBJ 2 Again a new bounding volume has been created and made the root node The second method for adding to a bounding volume root node is to simply add the new object as a new child leaf node BV 1 Tree 4 adding an object to tree 1 Second Method OBJ 1 OBJ 2 OBJ 3 Note that the bounding volume root node may increase in size This new bounding volume is noted as BV 1 to note this possible change The third method is to not add the new object as a sibling or a child of the root but rather to add it as a grandchild great grandchild or lower In this case some child is picked as the most efficient to accomodate the new object This child then acts like the root node above and the new object is added in the same fashion by choosing one of the three methods or if it is a leaf node automatically selecting the first method The next section deals with deciding which method is the most efficient Selection Process The goal behind creating the tree is to minimize the average number of intersection tests which must be performed By looking at the extra costs added by adding an object at various points we can select the least expensive option The costs are based on the area of the objects which represents the probability of the objects being hit by a ray The scheme is to test what the additional cost is for method one and for method two and record which is better This cost is termed the local best cost For the root node this cost is also saved as the best cost and the method and item are also saved Then method three is used selecting the child thought to be most efficient for adding the new object An inheritance cost is calculated for method three which is passed on to the child This cost is essentially the expense to the parents of adding the object to the tree It occurs only when the parent bounding volume must increase in size to accomodate the new object The term inheritance cost will mean the cost addition calculated at the level which is the sum of the parent inheritance cost inherited from above and the local inheritance cost the extra cost due to this level The child selected is then checked for its cost using methods one and two If the local best cost plus the parent inheritance cost is better than the best cost of earlier parents the best cost method and location are updated We now check method three to look for an efficient child of this child If the inheritance cost which will be the sum of the local inheritance cost found at this level plus the parent inheritance cost from earlier is greater than the best cost method three does not have to be pursued further on down the tree This halting is valid because no matter where the node would be added further down the tree the cost will never be better than the best cost Otherwise this whole procedure continues recursively on down the tree until method three can no longer be performed i e the inheritance cost is higher than the best cost or the selected testing node is an object leaf node At this point whichever node has been chosen as the best node is modified by method one or two Note that method three is not a true modification but rather is just a recursive mechanism pushing the testing by methods one and two down the tree After performing the changes to the tree structure the parent boxes are increased in volume if need be to accomodate the new object Efficiency Criteria Well we ve been talking in a vacuum up to now about how to calculate the average number of ray intersections performed for a tree We perform the same calculations as G S to determine the average see that article for a good explanation We also take their advice and not worry about the probability of hitting the root node and so multiply our probability equation by the proportional volume of the root node The practical effect is that this avoids a number of pointless divisions since we just want to calculate relative costs of adding the object to the structure and don t really want the actual average ray tree intersection value The cost for method one what happens here is that a bounding volume is created and its two children are the original test node and the new object We will use trees 1 and 2 to derive the cost calculations The initial probability cost of hitting OBJ 1 are simply old cost 1 This is the because the topmost node is always tested The new probability cost is the cost of hitting the bounding volume and intersecting the two objects inside the bounding volume Essentially new cost 1 2 P BV 1 This formula can be interpreted as follows One ray intersection is done to intersect the bounding volume If this volume is hit two more ray intersection tests must be done to check the two objects contained within From these two equations we can calculate the difference which is cost difference 2 P BV 1 The cost for method two what happens here is that the new object is added to the existing bounding volume Using trees 2 and 4 for demonstration the old cost is old cost 1 k P BV 1 where k is the number of children in our example it s 2 The new cost is new cost 1 k 1 P BV 1 with P BV 1 being the new area of the bounding volume The difference is cost difference P BV 1 P BV 1 k P BV 1 The inheritance cost for method three the cost incurred will be the difference between intersecting children times the old parent s area and intersecting children times the new parent s volume The old cost is old cost 1 k P BV 1 The number of children is the same for the new cost i e the new object will be added on down the line by method one or two which always ends up with one root node so the only thing that can change is the volume new cost 1 k P BV 1 The difference cost difference P BV 1 P BV 1 k With these criteria in hand we can now actually try the method out Example There are four tiles of a checkerboard to be ray traced which after shuffling are as shown 1 3 4 2 We start with a tree consisting of tile 1 with area 1 Adding tile 2 we automatically come up with a tree BV area 3 1 area 1 2 area 1 Note BV means the new BV being added BV means an old BV possibly increasing in size Looking at tile 3 we try out method one BV area 6 BV area 3 3 area 1 1 area 1 2 area 1 The cost difference is simply 2 times the new BV area i e 12 We also look at the cost of method 2 BV area 6 1 area 1 2 area 1 3 area 1 The cost is new area old area 2 children new area 6 3 2 6 12 Since this is the same as method one either method one or method 2 can be selected with the best cost being 12 Method 3 is now applied looking at each child and using methods one and two on them The inheritance cost is new area old area 2 children 6 3 2 6 Each child is an object leaf node so only method one can be used Trying this on object 1 BV area 6 inheritance 6 BV area 2 2 area 1 1 area 1 3 area 1 The local cost is 2 new area i e 4 The cost including the inheritance is 4 6 10 which is lower than our earlier best cost of 12 so performing method one on object 1 is now the best solution Trying method 1 on object 2 we get BV area 6 inheritance 6 1 area 1 BV area 6 2 area 1 3 area 1 The increase in cost is 2 new area i e 12 This plus the inheritance of 6 is 18 which is certainly horrible as we would expect So we end out with the best solution being replacing the node for object 1 with a BV which contains objects 1 and 3 shown earlier For object 4 we again test method one BV area 6 BV area 6 4 area 1 BV area 2 2 area 1 1 area 1 3 area 1 The local cost is 2 new area i e 12 Trying out method two BV area 6 BV area 2 2 area 1 4 area 1 1 area 1 3 area 1 The cost is new area old area 2 children new area 6 6 2 6 6 This is the better of the two methods so method two applied to the root is noted as the best cost of 6 Method 3 is now applied looking at each child and using methods one and two on them The inheritance cost is new area old area 2 children 6 6 2 0 The first child is the BV containing objects 1 and 3 so we try method 1 BV area 6 inheritance 0 BV area 4 2 area 1 BV area 2 4 area 1 1 area 1 3 area 1 The cost is 2 new area inheritance 8 which is not better than our previous best cost of 6 Method two yields BV area 6 inheritance 0 BV area 4 2 area 1 1 area 1 3 area 1 4 area 1 The cost is new area old area 2 children new area 4 2 2 4 8 which plus the inheritance cost of 0 is not better than our previous best cost of 6 Now we try method one on the second node of the tree i e object 2 BV area 6 BV area 2 BV area 2 1 area 1 3 area 1 2 area 1 4 area 1 Again the cost is 2 new area inheritance 2 2 0 4 This beats our best cost of 6 so this is the optimal insertion for object 4 so far Since this cost is also better than the best cost of 8 for the first child this branch is the best child to pursue further on down though we can t go further This means that we do not have to try methods one for object 4 on the first child s children objects 1 and 3 Confused Well that s life Try examples of your own to see how the algorithm works Improvements G S say they check which child node will be tested further by which has the smallest increase in area when the new object is added to it In case of ties which occur mostly when the area doesn t increase at all they give a few possible sub criteria for choosing However by the logic of bounding volumes the real test that should be done is to pick the bounding volume which gives the best result when methods one and two are applied to it To prove this by example imagine a bounding volume containing two other bounding volumes one huge say it has 50 of the area of its parent and one tiny say it s 1 Let s say an object is inserted which would not increase the size of the 50 BV but would triple the size of the 1 BV to 3 By Goldsmith s criterion we must pick the 50 BV to insert the object into Now if we intersect the root node we will hit the 50 BV half the time and so must then do the other object intersection half the time If instead we had picked the 3 BV this would be hit 3 of the time meaning that we would have to do the object test only 3 of the time In both cases we had to test each BV but it was smarter of us to put the object in the smaller BV in order to avoid testing This case will be caught by testing the increases for methods one and two for the BV s Method one for the larger would yield 50 2 and method two 50 1 giving 50 as the best cost For the tiny BV method one yields 3 2 6 and method two 3 1 2 3 7 giving 6 as the best cost obviously much better Even though we have increased the chance of having to open the smaller box it s still cheaper to do this than to add the object to a box which is much more likely to be hit back to contents Best of USENET From cyrus hi unm edu Tait Cyrus Newsgroups comp graphics Subject images Organization U of New Mexico Albuquerque It seems that once a month someone asks where they can get ahold of some images to play with Well for those of you looking for images to play with I have some images available that you can have They are available via anonymous ftp on hc dspo gov 26 1 0 90 The images are in pub images There are two directories old and new Both contain images as well as a README The README s describe the sizes of the images and basically what the images are of Because of disk space constraints all of the images are compressed All of the images but one are grey scale The other is an image of a mandrill in color Three files make up the madrill one for green red and blue Currently there are 20 images As time goes on this number will be increasing I hope so if you are interested in images you might want to check once a month or so to see if there are any new ones If you have any images which you would like to make available please let me know I would like to put them with the ones I currently have kind of like a repository More Several people have asked me for some more details concerning the images I have made available on hc dspo gov 26 1 0 90 Again the images are available via anonymous ftp and are in pub images There are 2 directories new and old which contain the 20 or so images Both have README s which describe the images and the sizes of the images The images are compressed the README s are NOT If your system does not have uncompress you might check with your system manager first to make sure I have put the source for compress uncompress in pub of the same machine The images are all grey scale except for mandrill The grey scale images are such that each pixel is represented by one byte value of 0 black 255 white Hope this helps any of you who were confused or were having troubles From todd utah cs UUCP Todd Elvins Newsgroups comp graphics Subject New model of an espresso maker Organization University of Utah CS Dept I have installed a file called espresso polys on the ftp directory at cs utah edu It is a model of one of those aluminum italian made espresso makers T Todd Elvins IFSR ucbvax ihnp4 decvax utah cs todd todd cs utah edu Eat drink and be merry for tomorrow you might be in Utah back to contents Eric Haines erich acm org Ray Tracing News Volume 1 Number 6 Ray Tracing News Volume 1 Number 6 Ray Tracing News Volume 1 Number 6 Ray Tracing News Volume 1 Number 6 Ray Tracing News Volume 1 Number 6 Ray Tracing News Volume 1 Number 6 Ray Tracing News Volume 1 Number 6 Ray Tracing News Volume 1 Number 6 Ray Tracing News Volume 1 Number 6 Ray Tracing News Volume 1 Number 6 http www acm org tog resources RTNews html rtnews3a html http www acm org tog resources RTNews html rtnews3a html http www acm org tog resources RTNews html rtnews3a html http www acm org tog resources RTNews html rtnews3a html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews3b.html%%==%%Ray Tracing News, Volume 1, Number 7%%==%%Ray Tracing News "Light Makes Right" June 20, 1988 Volume 1, Number 7 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%15073%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right June 20 1988 Volume 1 Number 7 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1988 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction New People and Addresses Non article on RenderMan and Dore by Eric Haines Ray Tracing Bibliography Update by Paul Heckbert and Eric Haines Commercial Ray Tracing Software by Eric Haines Benchmarks by Jeff Goldsmith Introduction So I ve regained the desire to type again a mere month after the SIGGRAPH course notes deadlines Not much in the queue but I thought I d pass on what little there is The most interesting developments which affect ray tracing are the release of the RenderMan tm interface by Pixar and the publication of Ardent s Dore tm Programmer s Guide and Reference Manual Andrew Glassner s hardcopy RT News is coming out soon if you re not on the mailing list write him SIGGRAPH Ray Tracers Roundtable in case you don t know this is an informal get together during SIGGRAPH where we talk about ray tracing techniques and trends Personally I d like to aim for about the same time as last year Thursday sometime after 5 pm with people then hitting the technical reception for food afterwards Same as last year we ll leave notes at the message center to all subscribers as to exactly where and when If you re not planning to attend SIGGRAPH please save me some note writing effort by telling me Otherwise see you there back to contents New People and Addresses Paul Heckbert s summer address at Xerox PARC heckbert pa xerox com Mail will still slowly but surely reach Paul at his old Berkeley address David Lister Data General Corp 62 T W Alexander Drive Research Triangle Park NC 27709 919 248 6223 alias david lister hpfcrs hpfcla hplabs lister dg rtp dg com From David I have been working on Ray Tracing since 1984 while I was a graduate student at The Ohio State University I am still working on my thesis for my MSEE on parallelism and algorithm improvements for Ray Tracing My areas of Ray Tracing interest include the following 1 algorithm efficency 2 simulation of natural phenomenon optical characteristics of materials and 3 parallelism David Lister Pete Segal AT T Pixel Machines Room 4K 208 Crawfords Corner Road Holmdel NJ 07733 201 949 1244 alias pete segal hpfcrs hpfcla ihnp4 homxc pixels pls From Pete I m not real big on introductions but here goes I was born the son of a poor black sharecropper wait wrong story I started in the Computer graphics lab at RPI in 1979 got my Master s in 82 and came to Bell Labs doing graphics for CAD systems I moved to Pixel Machines in early 1987 and have been working there since I am interested in 3d rendering and animation and I am currently working on the Ray tracing library for the Pixel Machine RAYlib back to contents Non article on RenderMan and Dore by Eric Haines What follows is a non review of RenderMan and Dore If you ve been looking for a chance to contribute to the RT News here s your chance I m not planning on reviewing either of these in depth but would love to hear others opinions even anonymous ones of these packages I just received a copy of Pixar s RenderMan interface To quote the preface The RenderMan interface is designed so that the information needed to specify a photorealistic image can be passed to different rendering programs compactly and efficiently In order to achieve this the interface does not specify how a picture is rendered but instead what picture is desired The RenderMan interface is a collection of procedures to transfer the description of a scene to the rendering program The interface for the ray tracer is wonderfully short as it is simply another command in Pixar s shading language I include it here in full 18 4 5 RAY TRACING color trace point R trace returns the incident light falling on a surface in a given direction R If a particular implementation does not support ray tracing and cannot compute the incident light arriving from an arbitrary direction trace will return 0 black That s it I don t see any way this command can support shadowing or filtering but I haven t read through the document carefully Pixar seems to want to go with their Shadow Depth Maps instead SIGGRAPH 87 paper Anyway this interface is endorsed by Apollo DEC Stellar Ardent and Sun so it seems to be a happening something I m not sure what endorsement means exactly but one thing it means is that you should probably check it out Dore well I received the two preliminary manuals yesterday As such about all I can commit myself to is nice packaging very artsy binders Reviews please back to contents Ray Tracing Bibliography Update by Paul Heckbert and Eric Haines Paul Heckbert s Ray Tracing Bibliography has been updated for May 1988 It will appear in the next issue of the hardcopy Ray Tracing News and in the SIGGRAPH 88 Introduction to Ray Tracing course notes If you would like to see it before then or would just like to have an electronic version on hand please write Eric Haines and I ll mail you the latest version Also if you do get a copy please tell us of any errata or addenda you may have for it back to contents Commercial Ray Tracing Software by Eric Haines I m collecting information for the Consumer s and Developer s Guide to Image Synthesis course at SIGGRAPH this year namely companies selling ray tracers The bare bones info is at the end of this issue I m in the midst of ordering manuals but that s about as far as I m going So I would like to hear from anyone who knows anything about these packages I will keep all reviews confidential unless you explicitly state otherwise Below is a partial list of groups in alphabetical order offering ray tracing packages If you know of any others please clue me in I m particular ignorant when it comes to software for animators advertising such as Wavefront For now I have left them off the list below The Contact section first lists the person who I have dealt with followed by the official contact address and or phone number I believe the only company that won t have representation on the floor at SIGGRAPH is Ray Tracing Corp though UCS probably will in some form Oh just to dispell rumors Numerical Designs Ltd Turner Whitted s company is not planning on announcing a ray tracer by SIGGRAPH 88 Instead they are marketing a package based on using pipes and filters for rendering beyond this I do not know AT T Pixel Machines RAYlib Available only on the Pixel Machine Cost manuals available realsoonnow Contact Ken Krause 201 563 2274 AT T Pixel Machines 1 800 544 0097 Ardent Dore Available on Ardent s Titan superworkstation Source available in C portable to other machines Cost 250 for universities research sites 15000 5000 per year for commercial sites Binary license 200 per copy Programmer s Guide and Reference Manual preliminary versions are 25 each Contact Ardent Computer Corporation 880 West Maude Avenue Sunnyvale CA 94086 408 732 0400 Hewlett Packard Add on to their existing Starbase graphics package which will also include radiosity software Announced at NCGA 1988 Available with the TurboSRX come the end of the year Cost Contact Hewlett Packard Co 1 800 752 0900 Ext 782A Integra via Mitsubishi via Enimax Turbo Beam Tracing Available on IBM PC AT or compatible Cost will be shown at SIGGRAPH Contact Gregory Szewczyk Enimax International Inc 113 Martin Grove Road Etobicoke Ontario M9B 4K7 CANADA 416 234 9120 Ray Tracing Corp TRACER and TRACER PC Source available in FORTRAN 77 TRACER runs on Cray VAX and many Unix based systems TRACER PC is for the IBM PC 640K memory 20 Mb hard disk math co processor and Targa or Number Nine card TRACER PC includes a modeler Cost 3000 for source and first year of updates Manual for 25 Contact Mark Franklin Ray Tracing Corporation 2516 Via Tejon Suite 316 Palos Verdes Estates CA 90274 213 373 0520 United Computer Systems Inc Ray Tracer Available on Apollo IBM and Mac Evidentally selling well on Mac and IBM 4x sales than Apollo sales since intro post SIGGRAPH 87 It turns out that this product is actually made by Ray Tracing Corp Cost manual available for 25 Contact Alan Brown at TMAC sp 213 475 1067 United Computer Systems Inc Graphics Development Group 10564 Progress Way Cypress CA 90630 714 220 2931 Wavefront Technologies Inc 3 D Dynamic Imaging System Their system has production speed ray tracing as a feature Cost Contact Wavefront Technologies 530 East Montecito Street Santa Barbara CA 93103 805 962 8117 back to contents Benchmarks by Jeff Goldsmith This recently appeared in the email newsletter on scientific visualization that Jeff Goldsmith has been editing If you re interested in subscribing and contributing to the SciVi discussion group contact him at jeff hamlet caltech edu I thought it of interest because of the bounding box intersector statistics EAH I did an interesting micro project this winter spring We were interested in porting some programs to PCs and or Workstations so I compared the performance of a few chunks of graphics code on a bunch of machines The code was supposed to represent some of the typical cpu and I O intensive things that graphics programs tend to do The benchmarks are Faults randomly accesses a huge array 16 Megabytes I know not huge to you Cray users but it is to PCs Obviously tests virtual memory usage Shade typical shading routine Tests floating point very strongly Bbox highly optimized bounding box intersection routine for a ray tracer actually this one has become somewhat unoptimized for the testing but you get the idea Was intended to test floating point performance and if then else branching Actually tests floating point and caching Clear sequentially clears a large memory array Tests compiler MIPS and memory usage Sub calls an empty subroutine repeatedly Tests MIPS Fread formatted reads and writes Tests I O speed floating point performance and MIPS Uread binary reads and writes Tests raw I O speed Machine faults shade bbox clear sub fread uread VAX780 12 5 16 9 12 3 11 8 19 3 17 4 23 2 uVAX II 22 2 18 5 15 6 12 9 18 9 24 0 29 1 HP320 10 45 4 8 5 6 HP350 4 5 28 3 4 3 4 Sun 3 1 9 34 4 6 5 5 Sun 3 2 9 48 3 3 2 4 Sun 386 9 5 16 2 5 3 1 Mac II 31 3 44 3 4 3 13 5 3 PC AT 70 180 39 17 6 PS 2 80 9 4 49 7 11 1 11 4 7 3 Compaq 19 0 13 1 5 5 Iris 30 59 4 5 15 3 IrisFPA 11 13 4 5 6 3 All entries are in seconds to run specified benchmark indicates that operating system not set up to allow program to run indicates benchmark not attempted The machines tested VAX780 Vax 11 780 with FPA and 32 Mbytes memory uVAX II Microvax II VMS 16 Mbytes memory HP320 Unix HP350 SRX Unix 32 Mbytes memory Sun 3 1 Sun 3 160 68881 co processor Sun 3 2 Sun 3 260 68881 co processor Sun 386 Sun 386i 250 80386 80387 Unix Mac II MPW 68881 PC AT Xenix 80287 PS 2 80 OS2 80387 co processor Compaq Compaq 386 Unix no coprocessor Iris SGI IRIS 3030 without FPA IrisFPA SGI IRIS 3030 with FPA Iris 3130 performance was identical to 3030 What did I learn from all this One thing is obvious if a FPA is available for your machine and you can afford it they are usually cheap buy it even if you don t do alot of floating point It affects all sorts of performance characteristics Another important point it is not possible to evaluated computer performance as one number Different computers do different things well back to contents Eric Haines erich acm org Ray Tracing News Volume 1 Number 7 Ray Tracing News Volume 1 Number 7 Ray Tracing News Volume 1 Number 7 Ray Tracing News Volume 1 Number 7 Ray Tracing News Volume 1 Number 7 Ray Tracing News Volume 1 Number 7 Ray Tracing News Volume 1 Number 7 Ray Tracing News Volume 1 Number 7 Ray Tracing News Volume 1 Number 7 Ray Tracing News Volume 1 Number 7 http www acm org tog resources RTNews html rtnews3b html http www acm org tog resources RTNews html rtnews3b html http www acm org tog resources RTNews html rtnews3b html http www acm org tog resources RTNews html rtnews3b html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews4a.html%%==%%Ray Tracing News, Volume 1, Number 8%%==%%Ray Tracing News "Light Makes Right" September 5, 1988 Volume 1, Number 8 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%36123%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right September 5 1988 Volume 1 Number 8 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1988 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Intro Capsule Biographies SIGGRAPH 88 RT Roundtable Summary by Paul Strauss and Jeff Goldsmith Commercial Ray Tracing Software and SIGGRAPH by Eric Haines and others A Letter by Jeff Goldsmith Best of USENET Postscript Ray Tracer John Hartman and Paul Heckbert Intro Well I m back from my honeymoon I ve just moved into a new house and I have returned to work and am confronted with a heavy duty schedule However the workstation s on the fritz for a few hours so here s my chance to compile an issue of the RT News Other major changes around here are that Michael Cohen of radiosity fame and a subscriber has begun his cross country drive from Ithaca to Salt Lake City He ll be continuing his education at the University of Utah s computer graphics facility Roy Hall is taking over Michael s place at the Cornell Program of Computer Graphics and should be added to this mailing list soon Andrew Glassner is now with Xerox PARC and his new address should be available by next issue too I plan to get another issue out within a week as there is also an interesting research idea that I need to talk about with a few people before presenting it here Stay tuned and please feel free to submit to the next issue back to contents Capsule Biographies What follows are short self descriptions by various new people at the roundtable at SIGGRAPH These are simply in the order I received them The latest address list email and physical is attached at the end of this issue By the way if you never submitted an autobiographical sketch or if you are doing something that s different from your last sketch please feel free to send one on to me for the next issue Russ Tuck SIMD parallel algorithms and architectures for ray tracing Computer Science Dept Univ of North Carolina My dissertation research is on parallel methods of programming SIMD parallel computers I have developed a measure of program portability and a system which lets the programmer specify in advance how portable a program must be The compiler can then provide and enforce this amount of portability I call this an optimally portable programming system I ll be presenting my work at Frontiers 88 The 2nd Symp on the Frontiers of Massively Parallel Computation in October Thinking about ways to do ray tracing and radiosity on massively parallel SIMD machines is a fun sidelight Some of my ideas were in the June 88 hardcopy Ray Tracing News Greg Ward accuracy and realism daylight efficient light sources Lawrence Berkeley Laboratory The purpose of my work is the development of more accurate calculations for lighting design and engineering Electric lighting contributes directly or indirectly to about 20 of the nation s energy consumption Although significant progress has been made in the area of energy efficient light sources wasteful installations frequently result from poor building design rather than low fixture efficiency It is hoped that with better computational tools architects and engineers will produce more energy efficient designs I am currently working on a validated reflection model and method for measuring surface properties using a digitizing camera By streamlining the measurement process it should be possible to obtain accurate simulations of designs using a realistic variety of construction materials I am also comparing the accuracy and applicability of different classes of lighting calculation and exploring the use of animation in design visualization Pete Litwinowicz realistic image sythesis etc Apple Computer INC Working on 3D animation rendering and modelling at Apple Tom Malley parallelism complex scenes space subdiv shading methods Evans Sutherland Computer Corporation My interests are primarily in how to make ray traced images that are significantly more realistic than the computer generated images we often see now The complexity of the models must increase for realism If we want to ray trace large databases on many processors we must determine efficient ways to make pieces of the data set available dynamically to processors as they perform intersection searches Additionally I m interested in analysis of reflection models to see where the typical simplifying assumptions steer us wrong and what the alternatives may be I d also like to see more closed loop comparisons of computer generated images with real scenes Chuck Grant tracing fewer rays coherency antialiasing Lawrence Livermore National Laboratory I am interested in algorithms and data structures for most areas of image synthesis visible surface algorithms volumetric visualization antialiasing texturing shading etc etc Ray tracing is a big part of my interests but not all I am currently working on a comparison of all existing visible surface algorithms and have invented several new ones as a result I am not interested in Scientific Data Visualization but the demands of my job make me spend a lot of time doing just that I am finishing my PhD in computer graphics at the University of California at Davis Steve Stepoway efficient intersection calc parallelism My interests in ray tracing these days are centering around finding more efficient ray object intersection calculations as well as issues of parallelism in rendering I am working with Sam Uselton U Tulsa and Mark Lee AMOCO on developing some new space sub division techniques next year s SIGGRAPH paper Daniel Bass Realism diffraction wavelength effects Apollo Computer Inc no autobiographical note Ken Joy intersection tests efficiency coherency Computer Graphics Research Lab Computer Science Division University of California Davis no autobiographical note Fred Fisher realism radiosity enhancements ray tracing manufacturing databases Hello I m now working at DEC doing electronics design for a geometry pipeline My interest in ray tracing has involved rendering polygonal databases presumably ones similar to those used in a quick Gouraud render CAD environment I ve been writing a lot of software on my own ray tracing and otherwise to understand the image synthesis process better with the intent of designing hardware to help the rendering phase Pierre Poulin illumination models natural phenomenon University of Toronto Department of Computer Science I am a graduate student working right now on a model for anisotropic reflection that would save the world and computing time This should be my introduction in the fascinating science of the simulation of natural phenomenon or how to deceive the eye with less than 1 million polygons Andrew C Woo intersection culling algorithms and complexity University of Toronto Department of Computer Science I am currently a first year fast approaching second year master s student at the University of Toronto My current thesis work is on a new approach to shadow acceleration beyond trans warp drive of course and comparing it to existing shadow accelerators eg the impulse power light buffer just kidding Eric Chuan Chee natural phenomena ray tracing animation University of Toronto Department of Computer Science I am finishing my first year as a master s student at the University of Toronto I currently do not have a thesis topic Robert E Webber Prof ray tracing large databases of volume density data Computer Science Department Rutgers University Busch Campus Am currently tuning a ray tracer that handles hierarchically arranged voxel data The basic unit of organization is a 16 by 16 by 16 voxel block where each voxel contains 32 bits of information This information is interpreted as either a density description of the contents of that voxel or a pointer to another voxel block representing a recursive decomposition of the current block 16 by 16 by 16 times 4 bytes means that my basic block is 16k which is a size that fits our local disk system rather well from the point of view of i o overhead The program is organized to allow the database to be spread over a number of files max 255 thus avoiding the 4 gigabyte unix file size problem since the pointers only have to be able to address the start of each 16k block 32 bit pointers can address a terabyte of data should we ever be lucky enough to have it as well as the problem of finding alot of space inside of a single disk partition Rutgers currently organizes its computing around a cluster of a hundred networked Sun workstations including 2 s 3 s and 4 s The current status of the system is that 5 megabyte scenes roughly 400 blocks representing densities at the 256 by 256 by 256 level have been ray traced Surface interpolation permitted images of demonstrating shadows shading and inter reflection to be generated Various techniques for determining the surface represented by a local cluster of voxel densities are being experimented with Will soon be running the ray tracer in parallel don t expect much bus contention as the system is currently extremely cpu bound We are also installing some WORM drives locally and so soon expect to have yet another layer of memory hierarchy to fiddle with Michael Natkin Brown University No current paragrapho for now as i m rewriting our whole environment at the moment no time for ray tracing That s all for now with about 6 people who are new but haven t contacted me yet back to contents SIGGRAPH 88 RT Roundtable Summary by Paul Strauss and Jeff Goldsmith 0 Women don t talk about ray tracing 1 It would be nice to have something that does both ray tracing and radiosity 2 It would be nice to have caustics 3 It would be nice to do analytical anti aliasing 4 Motion blur is a Good Thing 5 Adaptive subsampling don t work good 6 There are many ways to minimize ray object intersection tests 7 Hardware would be nice Maybe later 8 We should use ray tracing for real applications back to contents Commercial Ray Tracing Software and SIGGRAPH by Eric Haines and others Last issue I listed all the commercially available ray tracers I knew as of SIGGRAPH There were a few new entries I saw this year ElectroGIG from England shown at the Meiko booth is the first commercial ray tracer based on using constructive solid geometry that I ve seen SoftImage the people with the nice rocks image from Montreal had a nice looking Wavefront Alias etc looking package with a ray tracer They claim it was the fastest ray tracer on the floor it runs on a number of machines and seemed to use octree subdivision I never got to see the demo but people tell me that it was fast and that the programmer is a very careful and efficient coder Shima Seiki from Japan They claim to have a ray tracer with hardware assistance whatever that means though they re not marketing it yet and couldn t tell us anything about it The realtime texturing system from Mars with lots of cool buttons and knobs was pretty impressive though System cost is 500K 300K or we haven t decided depending on when you talked with them Ray Tracing Corp is now Ray Tracing Research Corp and they released a ray tracer for the Mac II for 895 Apollo not a product but their ray tracer was fun to watch as a demo of both the speed of their new DN10000 not sure about the number of zeros in that one super mini super workstation and of Apollo s networking abilities Darn fast Silicon Graphics also not a product they had a very nice demo which sadly a number of their marketing people didn t know about showing a scene from a god s eye point of view with rays shooting through the image plane and bouncing around The image would build up scan line by scan line on both the image plane in the scene and in a separate window You could also change the god s eye view interactively as the scene was being ray traced Nice Other things of interest AT T Pixel Machines ray tracer is now even faster purely due to software tuning They plan to cut even more time by further changes Sphereflake which ran at about 30 seconds last year now runs at around 16 seconds There is a public domain modeller which should be out in mid October which will run on the Iris 3130 and on the Pixel Machine It was developed by NASA demoed at AT T and since they re governmental they can t make it a for profit product In a month and a half contact their distributor COSMIC which stands for something at 404 542 3265 They won t really know much about it until then SGI showed radiosity images on the floor though there is no announced product yet They seemed to have developed their own adaptive refinement technique HP showed ray tracing film loops and stills and radiosity images and on the fly adaptive refinement which will be a product sometime this winter The new radiosity technique introduced by Cornell this year has the promise of being radiosity for the rest of us Those were my major impressions other than the usual the art show was better this year course lunches were worse etc anyone else care to add their two cents Jeff Goldsmith points out Cray Research has Oasis Gray Lorig s ray tracer available I think for free Of course you have to buy a Cray at 20 million first I don t get it Why doesn t every CG Software vendor supply a ray tracer It s definitely the easiest renderer to write Yes they are slo o o o o o w but they sound glitzy and I bet would stimulate sales even if buyers never used them Gray Lorig responded to my query for info on Oasis The current status of the Oasis package which is basically a raytracing animation package is it s an unsupported product What that really means is that we will give it to Cray customers for free give them updates every once and a while and provide support only when I feel like it John Peterson says I would add RenderMan to your list of commercial ray tracers I think you can explicitly implement classical ray tracing by writing some code in their magic shading language Also the ray tracer I wrote at Utah is or at least may be commercially available It specializes in ray tracing NURB B spline surfaces and supports the usual suspects of features refract flection shadows with penumbra texture mapping anti aliasing with stochastic sampling and motion blur It comes bundled with a geometric modelling system called Alpha 1 distributed by Engineering Geometry Systems in Salt Lake City The contact is Engineering Geometry Systems 275 East South Temple Suite 305 Salt Lake City UT 84111 I think the price is something like 10K for commerical sites and back to contents A Letter by Jeff Goldsmith my response is in brackets 1 A student of mine found a typographical error in your Intro to Ray Tracing notes I gave him some pages from same to teach him about texture mapping good job In Equation set E11 the third line should read Qvy Nb Dv2 rather than Nc I noted that you didn t catch it in this years issue Better typesetting though Thanks for publishing that Thanks If anyone else notices typoes omissions or anything else that bugs them in the Intro SIGGRAPH notes please contact Andrew Glassner or me or the individual author ASAP 2 Does anyone know where I can obtain 2D wood texture maps FTP email tape disc whatever is fine Any leads anyone I m interested too Jeff Goldsmith back to contents Best of USENET What follows are things posted to USENET that might be of interest here Many readers either don t receive USENET or haven t the time to perform chaff separation What follow are my own winnowings EAH Thomas Palmer writes Has anyone done any work on vectorizing ray object intersection calculations The vectorizing C compiler on a Cray X MP will not automatically vectorize loops smaller than about 5 or 6 iterations nor should it the vector register load time outweighs the gain Typical ray tracing vector operations involve vectors of length 3 or 4 Tom Thomas C Palmer NCI Supercomputer Facility c o PRI Inc Phone 301 698 5797 PO Box B Bldg 430 Uucp uunet ncifcrf gov palmer Frederick MD 21701 Arpanet palmer ncifcrf gov From spencer tut cis ohio state edu Stephen Spencer Subject Re Vectorizing ray object intersection calculations Organization Ohio State Computer Info Science There was an article in IEEE CG A about four years ago about vectorizing ray sphere intersections on a Cyber which included an algorithmic workup of how it worked As far as ray polygon intersection goes the article in SIGGRAPH 87 dealing with tesselation of polygonal objects it had the pictures of grass and the Statue of Liberty in it included the algorithm for fast ray polygon intersection and I did implement it and it did vectorize quite nicely I unfortunately no longer seem to have that piece of code but it wasn t difficult Of course you still have to do the sorting of the intersection points but the heavy intersection calculations can be done quickly From u jmolse sunset utah edu utah cs UUCP John M Olsen Newsgroups comp graphics Subject Polygon teapot ftp able Summary Come n get it Organization University of Utah Computer Science Dept One of the kind and generous People In Charge compressed the Utah Teapot and has made it available for a week or so as ftp pub teapot Z so those who want the polygon version of it can get it now It compressed to about 270K from 990K so it s not too bad to transfer The machine name is cs utah edu Have fun with it and let me know if you have any problems getting it transferred Just so I don t get hate mail and you don t think your software is broken The Utah teapot was designed with a hole in the bottom I had forgotten about this but was reminded by someone Jean Favre who rendered it From markv uoregon uoregon edu Mark VandeWettering Newsgroups comp graphics Subject Ray Tracer Part 01 01 Organization University of Oregon Computer Science Eugene OR Lines 2353 Here is the first release of my totally whiz bang ray tracer Okay so it isn t TOTALLY whiz bang but it does have some nice features It uses bounding volumes has cones spheres polygons and cylinders as primitives reads Eric Haines NFF file format images and more Use it abuse it sell it but be sure to have fun with it I had alot of fun hacking on it If any of you find bugs or better yet fix bugs and add features send them to me and I will try to get them worked into a future release which I hope might make it into comp sources unix code not included here either get it from USENET or you can write Mark or myself for a copy The source weighs in at about 55K bytes Reply To kjohn richp1 UUCP John K Counsulatant Organization RICH Inc Franklin Park IL If anyone is interested in other ray tracers I have source to DBW Render an excellent ray tracer ported from the VAX to the Amiga and Tracer a crude spheres only but a good starter tracer for the Amiga I am in the process of obtaining QRT quick ray tracer if there is such a thingee source also for the Amiga I can be reached at RealTime prefered 1 312 418 1236 6pm to 10 30pm central time USmail John Kjellman E Mail kjohn richp1 UUCP 17302 Park Ave Lansing IL 60438 Reply To sean ms uky edu Sean Casey Organization The Leaning Tower of Patterson Office The Univ of KY In article 2660 uoregon uoregon edu markv drizzle UUCP Mark VandeWettering writes Isn t DBW Render copyrighted I believe the source code may not be redistributed I tried to obtain the sources but aborted because of the restriction on use redistribution The first release of DBW Render was freely redistributable I believe it even found it s way to a Fish disk The story I hear is of an evil employer seeing and telling Dave that since he wrote it on the company computer it belongs to the company and that no further releases may be given away The current release uses Look Up A Word In The Manual type copy protection the most annoying kind I have experienced to date If someone really wants to pay for an Amiga ray tracer I d send him in the direction of one of Turbo Silver Videoscape 3D or Sculpt 3D all excellent products These products are in fierce competition with each other and get better all the time I saw a pamphlet in Turbo Silver that had an ad for a fascinating terrain generator module Just think combine a high quality terrain generator and the logistics of a board wargame Oh yeah I hear that some of the commercial Amiga ray tracing software is being ported to the Mac II These products have been around for a while so it s a good chance for Mac users to get their hands on some already evolved ray tracing software Sean Sean Casey sean ms uky edu sean ukma bitnet Looking for his towel backbone rutgers uunet ukma sean U of K Lexington Kentucky USA Internet site talk sean g ms uky edu With a name like Renderman you know it s good jam Reply To kyriazis turing cs rpi edu George Kyriazis Organization RPI CS Dept Hello world I have been using ray tracers for quite some time now and I have made many changes to some of them so I though it was time for me to write a ray tracer So there it is It is not supposed to be fast or anything but I think it is well commented and easy to understand It is very simple also I am willing to give it to anyone that wants it Unfortunately I don t think I can put it in a place where people can ftp to so if you want it please send me mail I m sure I can put it in some public place later The ray tracer currently supports only spheres with ambient diffuse specular lighting together with reflections and refractions I don t use any in line code for the vector routines but subroutines for readability Hope someone will want to play around with it George Kyriazis back to contents Postscript Ray Tracer John Hartman and Paul Heckbert This was published in the last hardcopy RT News Here it is again for those not inclined to type a lot Reply To jhartman miro Berkeley EDU John H Hartman Organization University of California Berkeley Ever worry about all those cycles that are going to waste every night when you shut off your laserwriter Well now you can put them to good use Introducing the world s first PostScript ray tracer Just start it up wait a long while and out comes an image that any true graphics type would die laughing over As it is currently set up it will trace a scene with three spheres and two lights The image resolution is 16x16 pixels Warning the code is a real kludge I m not sure there is much you can change without breaking it but you re welcome to try If by chance you are able to improve the running time please send us the improved version psray ps is the ray tracer result ps is what a 16x16 image should look like Have fun John H Hartman jhartman ernie berkeley edu UCB CSD ucbvax ernie jhartman to unpack cut here and run the following shell archive through sh contents psray ps result ps echo extracting psray ps sed s X psray ps X X Copyright c 1988 John H Hartman and Paul Heckbert X X This source may be copied distributed altered or used but not sold for X profit or incorporated into a product except under licence from the authors X This notice should remain in the source unaltered X John H Hartman jhartman ernie Berkeley EDU X Paul Heckbert ph miro Berkeley EDU X X This is a PostScript ray tracer It is not a toy don t let the kids X play with it Features include shadows recursive specular reflection X and refraction and colored surfaces and lights bet you can t tell X To use this thing just send it to your favorite Postscript printer X Then take a long nap walk coffee break vacation Running time for X a recursive depth of 3 and a size of 16x16 is about 1000 seconds X roughly 20 minutes or 4 seconds pixel X There are a few parameters at the beginning of the file that you can X change The rest of the code is pretty indecipherable It is translated X from a C program written by Paul Heckbert Darwyn Peachey and Joe Cychosz X for the Minimal Ray Tracing Programming Contest in comp graphics in X May 1987 Some changes have been made to improve the running time X Don t even bother trying to figure out how this works if you are looking X for a good example of a ray tracer X X starttime usertime def X DEPTH 3 def recursion depth X SIZE 16 def image resolution X TIMEOUT SIZE dup mul 10 mul cvi 120 add def approximately 10 sec pixel X NUM SPHERES 5 def X AOV 25 0 def angle of view X AMB 0 02 0 02 0 02 def ambient light X list of spheres lights in scene X x y z r g b rad kd ks kt kl ir X SPHERES 0 0 6 0 0 5 1 0 1 0 1 0 0 9 0 05 0 2 0 85 0 0 1 7 X 1 0 8 0 0 5 1 0 0 5 0 2 1 0 0 7 0 3 0 0 0 05 1 2 X 1 0 8 0 0 5 0 1 0 8 0 8 1 0 0 3 0 7 0 0 0 0 1 2 X 3 0 6 0 15 0 1 0 0 8 1 0 7 0 0 0 0 0 0 0 0 6 1 5 X 3 0 3 0 12 0 0 8 1 0 1 0 5 0 0 0 0 0 0 0 0 5 1 5 X def X Xstatusdict begin XTIMEOUT setjobtimeout X waittimeout TIMEOUT def Xend X initpage X Courier findfont X 10 scalefont setfont X def X X X 0 def X Y 1 def X Z 2 def X TOL 5e 4 def X BLACK 0 0 0 0 0 0 def X WHITE 1 0 1 0 1 0 def X U 0 0 def X B 0 0 def X index of fields in sphere array X cen 0 def X col 1 def X rad 2 def X kd 3 def X ks 4 def X kt 5 def X kl 6 def X ir 7 def X NEG SIZE SIZE neg def X MATRIX SIZE 0 0 NEG SIZE 0 SIZE def X vec 3 array def X VU vec def X vunit a 0 0 def X X dot product two arrays of three reals X vdot X aload pop X 4 1 roll X aload pop X 4 1 roll mul X 2 1 roll 4 1 roll mul add X 3 2 roll mul add X def X X vcomb sa a sb b returns new array of sa a sb b X X vcomb X aload pop X 4 1 roll dup dup X 5 1 roll 3 1 roll mul X 5 1 roll mul X 4 1 roll mul 3 1 roll X 5 2 roll aload pop X 4 1 roll dup dup X 5 1 roll 3 1 roll mul X 5 1 roll mul X 4 1 roll mul 3 1 roll X 4 1 roll add 5 1 roll X 3 1 roll add 4 1 roll X add 3 1 roll X vec astore X def X X vsub X aload pop X 4 1 roll aload pop X 4 1 roll sub 5 1 roll X 3 1 roll sub 4 1 roll X exch sub 3 1 roll X vec astore X def X X smul X aload pop X 4 1 roll dup dup X 5 1 roll 3 1 roll mul X 5 1 roll mul X 4 1 roll mul 3 1 roll X vec astore X def X X vunit X vunit a exch store X 1 0 vunit a dup vdot sqrt div vunit a smul X def X X grayscale X convert to ntsc then to grayscale X 0 11 mul exch X 0 59 mul add exch X 0 30 mul add X 255 0 mul X cvi X def X X X intersect returns best tmin rootp X 7 dict begin X d exch def X p exch def X best 1 def X tmin 1e30 def X rootp 0 def X 0 1 NUM SPHERES 1 sub X i exch def X sphere SPHERES i get def X VU sphere cen get p vsub store X B d VU vdot store X U B dup mul VU dup vdot sub sphere rad get dup mul add store X U 0 0 gt X X U B U sqrt sub store X U TOL lt X X U 2 0 B mul U sub store X B 1 0 store X X B 1 0 store X ifelse X U TOL ge X U tmin lt and X X best i store X tmin U store X rootp B store X X if X X if X for X best tmin rootp X end X def X X trace X 13 dict begin X d exch def X p exch def X level exch def X saveobj save def X color AMB vec copy def X level level 1 sub store X p d intersect X root exch def X v exch def X s exch def X 1 s ne X X sphere SPHERES s get def X p 1 0 p v d vcomb store X n X sphere cen get p X root 0 0 lt exch if X vsub vunit def X sphere kd get 0 0 gt X X 0 1 NUM SPHERES 1 sub X X i exch def X light SPHERES i get def X light kl get 0 0 gt X X VU light cen get p vsub vunit store X v light kl get X n VU vdot X mul store X v 0 0 gt X p VU intersect X B exch store X nd exch def X i eq X and X color 1 0 color v light col get vcomb def X if X if X for X if X color aload pop X sphere col get aload vec copy VU exch store X 4 1 roll mul X 5 1 roll X 3 1 roll mul X 4 1 roll X mul X 3 1 roll X color astore pop X nd d n vdot neg store X color X sphere ks get X sphere kd get color sphere kl get VU vcomb X 0 level eq X BLACK vec copy X level p 1 0 d 2 nd mul n vcomb trace vec astore X ifelse X 1 0 3 1 roll vcomb store X root 0 0 gt X v sphere ir get store X v 1 0 sphere ir get div store X ifelse X U 1 v dup mul 1 nd dup mul sub mul sub store X U 0 0 gt X X color X 1 0 color sphere kt get X 0 level eq X BLACK vec copy X level p v d v nd mul U sqrt sub n vcomb trace vec astore X ifelse X vcomb store X if X if X color aload pop X saveobj restore X end X def X X main X initpage X data SIZE dup mul string def X half SIZE 0 5 mul def X i 0 def X dy half AOV cvr 0 5 mul dup cos exch sin div mul def X temp vec def X 0 1 SIZE 1 sub X X y exch def X 0 1 SIZE 1 sub X X x exch def X data i X saveobj save def X VU X x cvr half sub put X VU Y dy put X VU Z half y cvr sub put X DEPTH BLACK VU vunit trace X grayscale X saveobj restore X put X i i 1 add store X for X for X gsave X 100 300 translate 400 400 scale SIZE SIZE 8 MATRIX data image X grestore X 100 200 moveto X Statistics show X 100 190 moveto X Size show SIZE 10 string cvs show X 100 180 moveto X Depth show DEPTH 3 string cvs show X 100 170 moveto X Running time show usertime starttime sub 1000 div 20 string cvs show X showpage X def X main load bind Xmain Xstop EOF10807 echo extracting result ps sed s X result ps X X picstr 16 string def X100 300 translate X400 400 scale X16 16 8 16 0 0 16 0 16 X currentfile picstr readhexstring pop image X0505050505050d0e1114140505050505 X050505050518231c1136472c05050505 X0505050528231b262729364b58050505 X05050525251c0e2528280e3a52550505 X050505241b0c0d0d0d0d0d0c3c540505 X050505080a0b0b0c0c0b0b0b0a080505 X0505620608090a0a0a0a090908072805 X056873170607070808080707060c2e2a X57676e94050505060606060505752d29 X525e6456310505050505050514722825 X45512f2e2b0a06050505050111141420 X35402726240b0b0b0509040410111119 X1e2c1e1d1b0b0b0b050904040c0d0d0c X0b121312100b0b0b0504040407080807 X050b0b0b0b0b0b050505040404040404 X05050505050505050505050505050505 Xshowpage EOF10808 exit back to contents Eric Haines erich acm org Ray Tracing News Volume 1 Number 8 Ray Tracing News Volume 1 Number 8 Ray Tracing News Volume 1 Number 8 Ray Tracing News Volume 1 Number 8 Ray Tracing News Volume 1 Number 8 Ray Tracing News Volume 1 Number 8 Ray Tracing News Volume 1 Number 8 Ray Tracing News Volume 1 Number 8 Ray Tracing News Volume 1 Number 8 Ray Tracing News Volume 1 Number 8 http www acm org tog resources RTNews html rtnews4a html http www acm org tog resources RTNews html rtnews4a html http www acm org tog resources RTNews html rtnews4a html http www acm org tog resources RTNews html rtnews4a html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews4b.html%%==%%Ray Tracing News, Volume 1, Number 9%%==%%Ray Tracing News "Light Makes Right" September 11, 1988 Volume 1, Number 9 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%42625%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right September 11 1988 Volume 1 Number 9 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1988 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Intro Biographical Sketches Old and New The Continuing Saga of MTV s Raytracer by Mark VandeWettering Public Domain Ray Tracer Q A by Mark VandeWettering Public Domain Ray Tracer Utilities by Tom Vijlbrief Sorting Unnecessary on Shadow Rays for Kay Kajiya by Eric Haines and Mark VandeWettering Summary of Replies to Vectorizing Ray Object Intersection Query by Tom Palmer The Ray Tracer I Wrote by George Kyriazis New Bitmaps Library Available Jef Poskanzer Intro Let s see there s Whitted s VandeWettering s Kyriazis Ohta s Hartman Heckbert s Pearl on the Amiga Atari and a whole slew of them by Heckbert and friends the Minimal Ray Tracer contest on USENET we re now at the point where the number of public domain ray tracers cannot be counted on one hand and that s even if you count all the minimal RTs from Paul Heckbert s contest as worth one If nothing else this proves ray tracing s a pretty trivial algorithm in its simplest form I had hoped to talk with Tim Kay about a project he proposed at the ray tracing roundtable at SIGGRAPH this year but he s in New York until the 20th The kernel of the idea that he proposed was setting up ftp space on one of the Caltech computers and letting people check in their test ray tracers there In the meantime this issue quickly filled up with biographical sketches and the winnowings of USENET especially Mark VandeWettering s efforts His ray tracer looks fairly nice doing much more than spheres check it out Eric back to contents Biographical Sketches Old and New Ben Trumbore photorealism efficiency interactive ray tracing Cornell University Program of Computer Graphics staff Greetings I am a candidate from the Reformed Radiosity party My campaign pledge I will not be satisfied until computer generated images are indistinguishable from photographs Like all right thinking Americans I believe ray tracing is the means to this end Better images at better runtimes And I strenuously deny allegations that I spend too much time working with stochastic textures every modern life needs balance I foresee a world where interaction and ray tracing live in harmony and I want you to be a part of that world Thank you A few more new people have joined our ranks since last issue Tom Palmer applied ray tracing realism modeling for molecular graphics National Cancer Institute P O Box B Bldg 430 Frederick MD 21701 301 698 5797 alias tom palmer palmer ncifcrf gov I m currently interested in vectorizing ray object intersection calculations However my primary interest is in applied ray tracing The wide variety of primitives and the realistic rendering make ray tracing an ideal if slow method for creating images of extremely complex molecular models I m currently working with a chemist collaborator experimenting with visualizing electon density electrostatic potential molecular orbitals etc via ray tracing primitives A note from Tom Palmer Doug Turner has left UNC and is now with Apple in Cupertino doing ray casting and textures on their Cray I would guess his email address to be turner apple com but don t hold me to it Phillip Getto Real time radiant energy simulation sampling object oriented rendering efficient intersections calcs CII 7309 Center for Interactive Computer Graphics Rensselaer Polytechnic Institute 110 8th St Troy NY 12180 3590 518 276 6491 alias phil getto phil yy cicg rpi edu George Kyriazis parallel ray tracing ECSE Dept JEC R P I Troy NY 12180 e mail kyriazis turing cs rpi edu kyriazis yy cicg rpi edu alias george kyriazis kyriazis yy cicg rpi edu I will pretty soon be parallelizing a ray tracer to work with an AT T Pixel Machine One of the problems there will be sharing pixels when doing anti aliasing Stochastic sampling may be considered Also implementing algorithms for high hit miss ratio in intersection calculations Stephen Spencer accurate diffuse light calculation antialiasing The Ohio State University Advanced Computing Center for the Arts and Design 1224 Kinnear Road Columbus Ohio 43212 614 292 3416 alias stephen spencer spencer tut cis ohio state edu Currently employed by The Ohio State University Advanced Computing Center for the Arts and Design as a Graphics Research Specialist I designing graphics software for research and instructional use by students and staff working in computer animation and industrial design Graphics interests include ray tracing somewhat obviously and radiosity and improving the realism of computer generated images in general Greg Turk rendering equation tracing from lights UNC at Chapel Hill P O Box 26 Chapel Hill NC 27514 919 962 1918 alias greg turk turk unc cs edu I m currently looking at ways to speed up collision detection for complex objects I m betting that collision detection can be made fast enough to be useful for interactive graphics applications and I plan to see how far I can get on Pixel planes my favorite one of a kind graphics engine Roy Hall Program of Computer Graphics 120 Rand Hall Cornell University Ithaca NY 14853 607 255 6711 alias roy hall roy wisdom tn cornell edu I ve been writing renderer s commercially for some time and have been concentrating on efficiency and eas of use Recently I returned to academics as faculty at Cornell I expect to be pursuing research for a variety of rendering techniques ray tracing being high on the list Just finished a book Illumination and Color in Computer Generated Imagery pub by Springer Verlag should be out Sept or Oct In addition to graphics research I m teaching architecture classes in lighting and acoustics and computer applications to architecture Mark VandeWettering Master s Student University of Oregon Computer And Information Sciences markv cs uoregon edu alias mark vandewettering markv cs uoregon edu I am currently interested in most aspects of raytracing radiosity and realistic image synthesis I am the author of a public domain raytracer that has been distributed via USENET and is available from me via e mail and via anonymous ftp I am interested in developing a library of public domain code for doing image synthesis and learning as much as I can in the mean time To download my raytracer ftp to drizzle cs uoregon edu 128 223 4 1 and login as ftp with your name as a password The README file in the pub directory can guide you further by way of introduction attached is Mark s reply to some of my comments about his ray tracer I would be pleased to see my raytracer compared to other raytracers I am not a serious graphics person my Master s thesis work is in functional programming languages and parallelism but I do seem to spend alot of my off hours trying to hack graphics stuff I chose Kajiya Kay bounding volumes because they seemed much simpler than octree methods and still offered good speed As for all your suggestions The t option is not mentioned the options list This option prints out a after each scan line is computed Thanks will include it I just hacked t in to get some idea of how fast the raytracer was how does your implementation of Kay Kajiya work That is what sorting algorithm is going on with insert delete that ensures you of getting the lowest key at the beginning of the list It s been but 10 years since I last studied sorting algorithms so I am not up to date on what your scheme is all about the powers of two comparisons and swaps I use a simple heap implementation and use it as a priority queue I forget which data structures book I hauled it out of but it isn t the most efficient in the world But then again when I profiled it it wasn t in the Top Ten Most Deadly list either so I guess its okay for now The next release will try to document it better More comments throughout the code would be a plus If you spend an hour or two now you ll save us all a lot of time Most of the stuff looks fairly straightforward but stuff like the Kay queue sort could use at least a reference as to where to go next Guilty as charged That is why I didn t try to post it to comp sources unix The next release will be cleaned up commented and have a better Makefile You comments on the lighting model are good the lighting model needs to be reworked at least slightly and probably a lot more than slightly I haven t got to it yet but it is coming Compilation and link problems I have a much more generic Makefile for it but I accidently distributed my totally hacked one The next release will probably be configurable to a wider variety of systems I have already received mail from a person at Tek Research Labs who is possibly thinking of adapting my raytracer to their new Motorola 88000 based workstation as a demo I said he could send me one if it sold any I am glad to see my effort so warmly received and treated with some level of enthusiasm Nobody has come back and said Gosh how stupid so I will probably wish to extend some further effort to keep it up back to contents The Continuing Saga of MTV s Raytracer by Mark VandeWettering I thought I would take the time to present a list of the software that I am making available via anonymous ftp All these things have been distributed via netnews over the past few years so I dusted them off and made them available I encourage anyone who has some interesting programs to contribute to send me mail Unfortunately I cannot allow people to upload directly because our space is VERY tight here the anonymous ftp login puts you in a subdirectory of mine and I have a puny quota but I would like to maintain a library of freely distributable source code for computer graphic applications I hope to have viewers for sun and X11 soon as well as an imagen printer dump Anyone working on such things write me if you would like to have your work distributed Anyway here is the current contents of the directory pub on drizzle cs uoregon edu 128 223 4 1 cut cut cut cut cut cut cut cut cut cut cut cut cut cut cut cut cut cut This directory contains raytrace shar my raytracer as it was posted to usenet s comp graphics group rpi tracer shar A raytracer written by George Kyriazis posted to comp graphics teapot nff Z compressed nff file of the famous teapot as patches for the above raytracer mini ray shar The winner to paul heckbert s minimal raytracing contest Wow Fits on a screen once it has been raped ohta tracer shar A REALLY FAST spheres only raytracer Was originally posted to comp graphics haines shar A slightly out of date version of Eric Haines NFF Standard Procedural Database stuff I am working on getting the latest and greatest from netlib but they seem to be slow Any questions or bugs with this software can be send to markv cs uoregon edu Thank you Mark back to contents Public Domain Ray Tracer Q A by Mark VandeWettering Reply To markv drizzle UUCP Mark VandeWettering Organization University of Oregon Computer Science Eugene OR Mark s public domain RT was posted to USENET a week or two ago This is a note he posted to USENET just recently First of all thanks to everyone who has expressed an interest in my raytracer I wish to address some questions globally rather than to each individual Q The raytracer seems to work but how do I display it on my XXX brand workstation A Well there are many answers to this We only have black and white sun workstations here so I have to display my images on an ancient and probably quite rare Tek4115 graphics terminal which has only 8 bitplanes What I do is take the output of this raytracer and pipe it through a program to convert it to the Utah Raster Toolkit format that we use here at the U of O We have several programs to display these files on a wide variety of devices The utah Raster Toolkit is available via anonymous FTP from cs utah edu or you can send them some amount of money and they can make you a tape I don t have exact details here The only problem with this is the guts of my conversion program are not original they consist of some code that Eugene Miya posted to this group awhile ago never write what you can beg borrow or steal and I would have to contact him before I distributed said program Also you would have to get the Utah Raster stuff as well If I get enough mail to warrant posting this stuff and if I can verify it with Eugene Miya I will post my programs My advice Don t bother hacking pic c too much Write a program to display general raster images of an rgb bitmap to whatever device you have on hand Use dithering if you want black and white And then POST such programs so that others can use improve them Q Where can I get Eric Haines NFF package A Simple I will be reposting it right after this message Q Does anyone have any nifty NFF file objects to trace A Well I just converted the teapot to NFF file format using faceted polygons but it is pretty big If someone can suggest an anonymous FTP site where I could put some of these as well as other revisions to my programs I would make them available from there Q What else am I working on Well I would like to add motion blur and statistically optimized anti aliasing I added code so that you can specify colors by name rather than by guessing colors Parametric patches tori and surfaces of revolution would be nice to add too As soon as I feel the raytracer has been significantly extended I will repost Finally a bug fix courtesy of Cameron Elliot Your program will crash on some machines unless you do the following The buf array was too small Modify screen c Was before cam Ed Gadzooks Mark can sure be stupid sometimes curbuf Pixel malloc xres sizeof Pixel 1 buf Pixel malloc xres sizeof Pixel 1 curbuf Pixel malloc xres 1 sizeof Pixel buf Pixel malloc xres 1 sizeof Pixel Cameron Elliott Portable Cellular Communications Path uw beaver tikal ptisea cam Thanks again for the bug fix and the nice comments Keep the mail coming Mark VandeWettering back to contents Public Domain Ray Tracer Utilities by Tom Vijlbrief From tom tnosoes UUCP Tom Vijlbrief Newsgroups comp graphics Organization TNO Institute for Perception Soesterberg The Netherlands In article 2683 uoregon uoregon edu markv drizzle UUCP Mark VandeWettering writes My advice Don t bother hacking pic c too much Write a program to display general raster images of an rgb bitmap to whatever device you have on hand Use dithering if you want black and white And then POST such programs so that others can use improve them This is a posting of two programs which convert the output of the raytracing program to Sun rasterfile format Ray2sun maps to greyscale Cray2sun maps to color 3 bit red 3 bit green and 2 bit blue The program Ray2sun works fine but Cray2sun should be much smarter to produce better quality pictures E g use dithering Tom Tom Vijlbrief TNO Institute for Perception P O Box 23 Phone 31 34 63 62 77 3769 DE Soesterberg E mail tnosoes tom mcvax cwi nl The Netherlands or uunet mcvax tnosoes tom Code is 200 lines so is left out Either check USENET or write Tom or me for the code Eric back to contents Sorting Unnecessary on Shadow Rays for Kay Kajiya by Eric Haines and Mark VandeWettering What follows is a discussion still ongoing please do add your two cents between Mark and I about the Kay Kajiya efficiency scheme Mark uses Kay Kajiya in his ray tracer for shadow rays which I feel is superfluous It s a minor point as the sorting as Mark points out is usually not a killer as far as where the time is spent However it was worth it to me as I found I misunderstood a part of the algorithm and found a better way I think to implement Kay Kajiya than was originally presented Tim Kay care to comment Eric s first note Note that Kay Kajiya sorting is unnecessary for shadow rays This is because you don t care about the closest object but rather whether any object blocks the light As soon as you get a shadow test hit you can skip the rest of the intersection test you re done Mark s reply Is this totally correct What we want to know is if there is a shadow between the light source and the point we hit If we sort the list we can stop when we find the first item but we can also stop when the bounding volumes or the intersection are greater than the distance to the shadow the point isn t shadowed Because the heap insertion deletion routines take so little time it would seem that this would be a good optimization But yes I agree that some optimization of shadow rays could be made Eric s response The way a sorted list is created is to intersect a BV get its distance and put its children on the list using this distance as a key For shadowing the distance to the light acts as the maximum cutoff from the start So when a BV is intersected it is either beyond the light or not If beyond its children are not put on the candidate list If not beyond the children can be placed anywhere within the candidate list since we want any intersection Essentially there should never be anything on the candidate list which is keyed as having a distance beyond the light Only when you actually test the candidate can you tell if it is beyond at which point you throw it out So there should never be a point where you can say all these candidates are beyond the light as such candidates should not be on the test list no matter whether the list is sorted or not QED the sorting is unneeded I should mention that Jeff Goldsmith also figured this out independently has anyone else noticed that sorting is unnecessary for shadowing Kay Kajiya is something of a Catch 22 but a great method nonetheless since the sort key is the candidate s parent s distance and what we really would like is to have the sort key be the candidate s distance To get this distance we intersect the candidate Now we have the distance if any we would have liked to used to sort the candidate but it s too late we ve intersected the candidate and so taken it off the candidate list possibly replacing it with its children However there might actually be a slight gain in practice if the list is sorted by distance for shadow rays Say you have two bounding volumes each with N objects If both BV s are intersected and the further bounding volume contains the light then it s probably worth intersecting the objects in the closer BV first This is because the further bounding volume probably contains objects which are beyond the light while the closer one has objects more or less between the light and the test point I believe this gain is negated by the following counter argument what if the closer BV contains the intersection point and the further does not contain the light or the intersection point By the previous logic we should intersect the further BV s children first Scene dependence seems to be the key phrase here are your shadowing objects closer to the intersection point e g a board with a bunch of nails pounded into it seems worth testing the closer nails first or closer to the light source e g the light source has a lampshade In light ho ho of this I maintain that Kay Kajiya sorting is unnecessary for shadow rays However there are certainly other interesting sorting strategies worth considering for shadow rays Some possibilities Object complexity i e if you have a choice try intersecting the sphere before trying the spline surface Object size big objects cast big shadows This idea actually helps enhance shadow caching where the last object to shadow a light is then tested first for the next shadow ray for that light A big object will have more shadow coherence and so will result in less having to find another shadowing object Say a light is blocked by both a sphere and a fine mesh of polygons The sphere will have much more shadow coherence than each polygon resulting in many fewer misses Function sorting I haven t thought about this much but one might be able to come up with a function which simulates the probability that a given object will be intersected The function could be based on the closest intersection distance or the farthest or some of each One possible theory BV s which neither overlap the light or the intersection point have a higher probability of containing a shadowing object for the reasons given earlier Anyway just some thoughts Eric Haines Mark s response The way a sorted list is created is to intersect a BV get its distance and put its children on the list using this distance as a key This isn t the way it is currently implemented in my raytracer and glancing back at Kay Kajiya it seems contrary to their intent as well If I intersect the parent volume I intersect with the bounding volume of each of the children and use THAT distance as the key for insertion This does seem to require alot more bounding box intersections but still has exactly the same number of ray object intersections Kay Kajiya is something of a Catch 22 but a great method nonetheless since the sort key is the candidate s parent s distance and what we really would like is to have the sort key be the candidate s distance To get this distance we intersect the candidate Now we have the distance if any we would have liked to used to sort the candidate but it s too late we ve intersected the candidate and so taken it off the candidate list possibly replacing it with its children I think that this argument falls in light of my correction above Each time an object is queued it is keyed by the actual distance to its own bounding volume not the distance to the parent My feeling is that if you add the proper cutoffs that Kajiya Kay testing for shadows is still just about the same cost as not bothering to sort I actually implemented early cutoffs within the framework of Kajiya Kay BVs and it only gave an improvement of 2 on average for the Standard Procedural Database objects This DOESN T mean that it is correct because I am uncertain just how typical the SPD stuff is but it would seem to be that for certain objects the gain is small Eric s response Well I made a semantic error Kay Kajiya calls a candidate an object real or BV whose bounding volume has been hit and whose children have not been intersected So you re right in that the algorithm does put an intersected BV on the list as a candidate and not its children In practical terms this will mean less sorting you only have to insert the intersected BV into the list and not all its children all of which have the same key My confusion arose from the fact that Kay Kajiya puts a bounding volume around every object which I don t a simple triangle or a sphere is about the same to intersect than a bounding box and a BV around a sphere which is a BV after all seems excessive Interestingly enough looking over the original paper I now have to agree with you sorting on shadow rays using their original algorithm makes sense However I have found that there is an inefficiency in the Kay Kajiya algorithm as presented at SIGGRAPH which I never noticed before in their figure 7 where they outline the algorithm page 275 of the SIGGRAPH 86 proceedings it is stated if the ray hits the BV insert the child into the heap Then when they get to the while loop they state that while heap is non empty and distance to top node If the ray hits the bounding volume and distance In other words if the distance to the BV is greater than the present t which is the closest intersection distance of a real object its child can immediately be discarded instead of inserting it into the heap Using this slight modification of Kay Kajiya now means that sorting is unnecessary In the original it was worth checking the distance because objects which were beyond the present t distance for shadowing the distance to the light were actually inserted on the heap By realizing that these children have no business on the heap they re beyond the light right and not inserting them in the first place there is then no reason to sort what is then actually put on the heap This is where things stand for now My original mistake of misreading Kay and Kajiya was partly due to my using a more efficient algorithm not adding to the heap if the child cannot possibly be hit I had never noticed that this was not how they wrote it up as I assumed they would compare all intersections against the closest real intersection distance Eric back to contents Summary of Replies to Vectorizing Ray Object Intersection Query by Tom Palmer From palmer ncifcrf gov Thomas Palmer Newsgroups comp graphics This is a summary of the replies I received to my query regarding vectorizing ray object intersection calculations From stan dodge dave boulder Colorado EDU Dave Plunkett You might try any of The Vectorization of a Ray Tracing Program for Image Generation with J M Cychosz and M J Bailey Cyber 200 Applications Seminar NASA Goddard October 1983 Ray Tracing on a Cyber 205 Conference Proceedings VIM 40 San Francisco CA April 1984 A Vectorized Ray Tracing Algorithm Masters Thesis Purdue University West Lafayette IN August 1984 The Vectorization of a Ray Tracing Algorithm for Improved Execution Speed with M J Bailey IEEE Computer Graphics and Applications Vol 5 No 8 August 1985 The last two of these are more readily accessible These papers describe my Master s research a vectorized ray tracing algorithm for use on csg objects that was written using explicit vector syntax on the 205 If you have any specific questions I d be glad to answer any that I can Dave Plunkett Solbourne Computer Inc Longmont CO 80501 303 772 3400 sun stan dave From 3ksnn64 ee ecn purdue edu Joe Cychosz I have developed a vectorized ray tracing package for the CYBER 205 Part of the work is discussed in Plunkett s CG A paper Nelson Max also had a paper on vectorized intersections of height fields used to produce Carlos Island Saul Youseff at Florida State has also been doing some work using raytracing for collector plate design Both Plunkett and myself use a ray queue to collect rays and then vectorize such that serveral rays are intersected with an object This approach does make it difficult to implement these accelerated ray traces such as Mike Kaplan s Constant Time Ray Tracing I have a variation of Kaplan s approach that sub divides the object space and uses bit operators to elliminate unnecessary intersection calculations Joe Cychosz From mcvax tokaido irisa fr priol uunet UU NET Thierry Priol Equipe Hypercubes There are few works on vectorization of the ray object intersection One of these works was done by Plunkett on a CDC CYBER The reference is reference same as in Plunkett s note Personally I work in ray tracing on a parallel MIMD hypercube iPSC 2 computer Thierry PRIOL Institut de Recherche en Informatique et Systemes Aleatoires Campus de Beaulieu 35042 RENNES CEDEX FRANCE e mail mcvax inria irisa priol From mbc a cs okstate edu Michael Carter The real problem in the inner ray tracing loop is not ray object intersections but ray bounding volume intersections If you refer to the article by Kay and Kajiya from SIGGRAPH 86 they describe a method of breaking down the OBJECT space into a hierarchical data structure and intersecting rays against simple bounding volumes constructed from sets of planes This method queries the objects in the order that they occur along the ray therefore NO SORTING IS NEEDED It takes at least three pairs of planes to completely enclose an object therefore this intersection calculation could be done efficiently in parallel on perhaps more than one object at a time on a vector machine Most of the time is spent in this ray bounding volume intersection loop and not in the ray object intersection algorithms I realize that this is not something that the C compiler can do on its own but remember no pain no gain Michael B Carter Department of Electrical and Computer Engineering Oklahoma State University UUCP cbosgd ea ihnp4 isucs1 mcvax pesnta uokvax okstate mbc ARPA mbc okstate csnet csnet relay arpa The statement NO SORTING IS NEEDED appears to be in error sorting is an integral part of the Kay Kajiya algorithm Eric H From spencer tut cis ohio state edu Stephen Spencer included in last issue back to contents The Ray Tracer I Wrote by George Kyriazis From kyriazis rpics George Kyriazis Newsgroups comp graphics Organization RPI CS Dept Since I had too many requests for my ray tracer I am posting it here USENET Hope that will help people that can t get mail to me I finally had the source put so people can read it but it s not definite that it ll stay where it is Right now it is on life pawl rpi edu 128 113 10 2 in pub ray Can you please comment back on it Thanks So here it is Deleted here again as it s another 900 lines of archive Check USENET write George or me or ftp it as above to get a copy What follows are excerpts from his README file Here is a simple ray tracing program developed here at RPI It incorporates shadows reflections and refraction together with one non directional light source The light source can diffuse on the surfaces and can also give specular reflections The illumination model used is by Phong The only objects supported right now are spheres but the data structure can be easily expanded to incorporate more objects The ray tracer is written so it can be easily understood at least that version and it is fully commented Nevertheless probably it won t be understood by a newcomer Can you please inform me with any bugs that the program might have or any features that you want the upcoming versions to have This software was written by me and the subsequent version will probably by produced by other members of the RPI chapter of the ACM Good luck George Kyriazis kyriazis turing cs rpi edu back to contents New Bitmaps Library Available Jef Poskanzer Reply To Jef Poskanzer jef rtsg ee lbl gov Organization Paratheo Anametamystikhood Of Eris Esoteric Ada Lovelace Cabal The third release of the Portable Bitmap package is ready for FTPing from expo lcs mit edu contrib pbm tar Z Answers to some frequently asked questions The decimal address of expo is 18 30 0 212 Please avoid ftp ing from expo lcs mit edu in between the hours of 9am and 6pm east coast USA time There may be other places to FTP it from but I don t know of them In particular you can t FTP it from lbl rtsg Don t even try Don t forget to set binary mode when you do the FTP Pbmtorast and rasttopbm depend on Sun s pixrect library and will compile only on suns Currently there is no way to get the package other than FTP However if comp sources misc ever gets going again perhaps PBM will get distributed there I have sent mail to the moderator about it and have received no reply Appended is the README for PBM It includes a list of the major enhancements in this version Jef Portable Bitmap Toolkit Distribution of 31aug88 Previous distribution 04apr88 Included are a number of programs for converting various bitmap formats to and from a portable format plus some tools for manipulating the portable bitmaps Major changes since the previous distribution The pbm format now has a magic number New conversion filters brushtopbm giftopbm pbmtolj pbmtomacp pbmtoxwd and pbmtox10wd Icontopbm converter has a better parser it knows to skip over any extraneous comments at the beginning of the icon file Pbmtops generates a different PostScript wrapper program it should handle huge bitmaps better Xwdtopbm now handles byte swapping correctly Pbmmake takes a flag to specify the color of the new bitmap Pbmpaste now implements or and and xor operations as well as the default replace Plus various minor bug fixes and enhancements Files in this distribution README this FORMATS descriptions of the various bitmap formats Makefile guess brushtopbm c convert from Xerox doodle brushes to portable bitmap cbmtopbm c convert from compact bitmap to portable bitmap giftopbm c convert from GIF to portable bitmap icontopbm c convert from Sun icon to portable bitmap macptopbm c convert from MacPaint to portable bitmap rasttopbm c convert from Sun raster to portable bitmap xbmtopbm c convert from X10 or X11 bitmap to portable bitmap xwdtopbm c convert from X10 or X11 window dump to portable bitmap xxxtopbm c convert from UNKNOWN BITMAP to portable bitmap pbmtoascii c convert from portable bitmap to ASCII graphic form pbmtocbm c convert from portable bitmap to compact bitmap pbmtoicon c convert from portable bitmap to Sun icon pbmtolj c convert from portable bitmap to HP LaserJet pbmtomacp c convert from portable bitmap to MacPaint pbmtops c convert from portable bitmap to PostScript pbmtoptx c convert from portable bitmap to Printronix pbmtorast c convert from portable bitmap to Sun raster pbmtoxbm c convert from portable bitmap to X11 bitmap pbmtox10bm c convert from portable bitmap to X10 bitmap pbmtoxwd c convert from portable bitmap to X11 window dump pbmtox10wd c convert from portable bitmap to X10 window dump pbmcatlr c concatenate portable bitmaps left to right pbmcattb c concatenate portable bitmaps top to bottom pbmcrop c crop a portable bitmap pbmcut c cut a rectangle out of a portable bitmap pbmenlarge c enlarge a portable bitmap N times pbmfliplr c flip a portable bitmap left for right pbmfliptb c flip a portable bitmap top for bottom pbminvert c invert a portable bitmap pbmmake c create a blank bitmap of a specified size pbmpaste c paste a rectangle into a portable bitmap pbmtrnspos c transpose a portable bitmap x for y libpbm c a few utility routines pbm h header file for libpbm macp h definitions for MacPaint files x10wd h definitions for X10 window dumps x11wd h definitions for X11 window dumps bmaliases csh script to make aliases for converting formats 1 manual entries for all of the tools pbm 5 manual entry for the pbm format bitreverse h useful include file Unpack the files edit Makefile and change the options to suit make and enjoy Note that if you re not on a Sun you won t be able to compile rasttopbm and pbmtorast I ve tested this stuff under 4 2 BSD 4 3 BSD and System V rel 2 and on both Suns and Vaxen Nevertheless I m sure bugs remain Feedback is welcome send bug reports enhancements checks money orders etc to the addresses below Jef Poskanzer jef rtsg ee lbl gov ucbvax lll crg sun pacbell apple hplabs well pokey back to contents Eric Haines erich acm org Ray Tracing News Volume 1 Number 9 Ray Tracing News Volume 1 Number 9 Ray Tracing News Volume 1 Number 9 Ray Tracing News Volume 1 Number 9 Ray Tracing News Volume 1 Number 9 Ray Tracing News Volume 1 Number 9 Ray Tracing News Volume 1 Number 9 Ray Tracing News Volume 1 Number 9 Ray Tracing News Volume 1 Number 9 Ray Tracing News Volume 1 Number 9 http www acm org tog resources RTNews html rtnews4b html http www acm org tog resources RTNews html rtnews4b html http www acm org tog resources RTNews html rtnews4b html http www acm org tog resources RTNews html rtnews4b html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews5a.html%%==%%Ray Tracing News, Volume 1, Number 10%%==%%Ray Tracing News "Light Makes Right" October 3, 1988 Volume 1, Number 10 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%37314%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right October 3 1988 Volume 1 Number 10 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1988 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Intro New Addresses and People Bitmap Stuff by Jeff Goldsmith More Comments on Kay Kajiya Questions and Answers for want of a better name More on MTV s Public Domain Ray Tracer features bug fixes etc Neutral File Format NFF by Eric Haines Intro This issue is something of a queue clearer for me a lot has been posted on USENET concerning Mark VandeWettering s public domain ray tracer I include all of this and more at the end If you re not interested I hope you can wade through it all until the end as I would appreciate comments on the neutral file format I use in the SPD package back to contents New Addresses and People Remember that you can ask me any time for the latest version of the RT News mailing list Andrew Glassner has settled down and bought some bookshelves and is at Andrew Glassner Andrew Glassner Xerox PARC 690 Sharon Park Drive 3333 Coyote Hill Road Apt 17 Palo Alto CA 94304 Menlo Park CA 94025 415 494 4467 415 854 4285 alias andrew glassner glassner xerox com For those of you who receive only the email version of the Ray Tracing News you should contact Andrew as he is the editor of the hardcopy version of the RT News The hardcopy contains many articles which do not appear in the email version so be sure to get both K R Subramanian The University of Texas at Austin Dept of Computer Sciences Taylor Hall 2 124 Austin Tx 78712 alias krs subramn cs utexas edu ARPA or alias krs uunet cs utexas edu subramn UUCP Interests in Ray Tracing Use of hierarchical search structures for efficient ray tracing investigating better space partitioning techniques trying to apply ray tracing to practical applications Currently a PhD student in Computer Sciences at The University of Texas at Austin One suggestion on the RT round table We must have a portion of time where we can talk to other RT people on a more personal basis At least I find it easier to talk to people On the RT news I would like to see practical applications of ray tracing described here What applications really require mirror reflections refraction etc Havent seen applications where ray tracing was the way to go From mcvax ecn nlerf com jack uunet UU NET Jack van Wijk Via my old colleagues at Delft University of Technology I received a copy of your Ray Tracing News I am delighted by this initiative since it provides a fast informal way to communicate with colleagues working in this sensational area At the moment I do not do research with respect to ray tracing but I expect that in the coming year the blood will creep again where it can t go old Dutch proverb The institute where I work now is very interested in high quality graphics scientific data visualization and parallellism so I expect that ray tracing can be made a topic here I would be very happy if you could put me on the mailing list Here is a short auto biography Jarke J Jack van Wijk Geometric modelling intersection algorithms parallel algorithms Netherlands Energy Research Foundation ECN P O Box 1 1755 ZG Petten NH The Netherlands alias jack van wijk ecn jack mcvax cwi nl I have done research on ray tracing at Delft University of Technology from 1982 to 1986 together with Wim Bronsvoort and Erik Jansen My thesis is On new types of solid models and their visualization with ray tracing Delft University Press 1986 which title summarizes my main interests I have developed intersection algorithms for sweep defined objects translational rotational sphere and blending Also research was done on curved surfaces modelling languages and on improving the efficiency Currently I am interested in intersection algorithms efficiency and parallel algorithms and the use of ray tracing for Scientific Data Visualization Linda Roy s mail address Linda Roy all aspects of ray tracing especially efficiency Silicon Graphics Inc 2011 Shoreline Blvd Mountain View California 94039 7311 415 962 3684 Mark VW s mail address Mark VandeWettering c o Computer and Information Sciences Dept University of Oregon Eugene OR 97403 back to contents Bitmap Stuff by Jeff Goldsmith The following is for VMS people UNIX C people should contact anyone at the University of Utah for information on their Utah RLE Toolkit which has all kinds of bitmap manipulation tools using pipes in the style of Tom Duff It s a nice toolkit and includes the famous mandrill picture and can be had by ftp from cs utah edu EAH I have some bitmap utilities that I can put somewhere if there s interest They aren t intended to be anywhere nearly so portable as poskbitmaps but they seem to have more tools I m pretty curious what a good total set of tools would be maybe this can spark such a list Mine work only under VMS does direct mapping to files FAST and use a bizarre format that is really just 1024 bytes of header followed by pixels Here s a list of the tools Cutout Cuts a rectangle out Dissolve Fades from one picture to another Gamma Channel independent contract change Filter 2x2 boxfilter Lumin Color to Black and White via luminosity Pastein Pastes a rectangle into another picture Poke Mess with header data e g offsets Resam Change from 1 1 to 5 4 aspect ratio fast Reverse Inverse video Switch Swap red green blue channels around Thresh Sets pixel By the way I ve used each of them in animations so the transformations are smooth Also they are clearly useful back to contents More Comments on Kay Kajiya From Jeff Goldsmith I do a quick check on the children to determine the key for the sort I just use the largest component of the current ray as the direction along which to check and then just use the minimum or maximum extent of the bounding volume to generate a key Tim Kay says that that is not what they meant in the paper but it s close enough and seems to work However before the sorter ever gets to deal with a new bounding volume I check to see if the leading edge of the bounding volume is beyond the current hit John Salmon added the trick that all illumination rays get a pseudo hit at the light source position so that automatically rejects all objects that cannot cast shadows Of course it deals with objects on the other side of the ray origin too I also of course don t sort the illumination rays bounding volumes A further note I did not find that the sorting cost was trivial in fact it made up for most of the time saved in avoiding bounding volume checking It was more useful before we added all the other hacks to avoid things though Good references for heap sort algorithms are Standish Data Structure Techniques and Knuth of course Heap sort is the right algorithm I think because a total order is not needed on all the objects We need to pull off one object bounding volume at a time from the head of the list and once we find a hit we discard the rest of the list There s no point in sorting stuff that we will never check I ended up tossing the heap sort version completely in order to save memory space Odd it s been a long time since I ve had to worry about code size I think that I could gain all of their savings and then some by just postprocessing the tree so that the left child is closer to the eye than the right child Most non illumination rays go in the general direction of away from the eye so that would help them I rays don t need sorting anyway Alternatively as you suggested putting the bigger boxes whatever on the left would work too maybe If I ever have time to futz with it I d like to try some of that My reply to Jeff Sorting on distance to eye sounds good in fact I was going to try it but I use the item buffer and so the eye rays are mostly taken care of If anything sorting with objects farther away might help me the reflection rays etc etc will probably be in a direction away from the eye rays Oh another good post process might be to sort each list of sons on the difficulty of sorting or did I mention this already try the sphere before the spline back to contents Questions and Answers for want of a better name Wood Texture Request Filled Jeff Goldsmith s request for wood texture bitmaps was generously filled by Rod Bogart who made four bitmaps wood img 1 4 available for ftp at cs utah edu These are still there I just grabbed them though I don t know how long they ll remain available These are scanned images from an artist s book of textures Efficiency Question From Mark VandeWettering How can we efficiently manage the intersect lists that get passed between the various procedures Heckbert statically allocates arrays within the stack frames of various procedures which seems a little odd because you never really know how much space to allocate Also merging them using Roth s CSG scheme requires alot of copying can this be avoided From Jack Ritter A simple method for fast ray tracing has occurred to me and I haven t seen it in the literature particularly Procedural Elements for Computer Graphics It is a way to trivially reject rays that don t intersect with objects It works for primary rays only from the eye It is Do once for each object compute its minimum 3D bounding box Project the box s 8 corners unto pixel space Surround the cluster of 8 pixel points with a minimum 2D bounding box a tighter bounding volume could be used To test a ray against an object check if the pixel through which the ray goes is in the object s 2D box If not reject it It sure beats line sphere minimum distance calculation Surely this has been tried hasn t it An Answer by Eric Haines It s true this really hasn t appeared in the literature per se However it has been done The idea of the item buffer has been presented by Hank Weghorst Gary Hooper and Donald P Greenberg in Improved Computational Methods for Ray Tracing ACM TOG Vol 3 No 1 January 1984 pages 52 69 Here they cast polygons onto a z buffer storing the ID of the closest item for each pixel During ray tracing the z buffer is then sampled for which items are probably hit by the eye ray These are checked and if one is hit you re done If none are hit then a standard ray trace is performed Incidentally this is the method Wavefront uses for eye rays when they perform ray tracing It s fairly useful as Cornell s research found that there are usually more eye rays than reflection and refraction rays combined There s still all those shadow rays which was why I created the light buffer but that s another story see IEEE CG A September 1986 if you re interested In the paper the authors do not describe how to insert non polygonal objects into the buffer In Weghorst s and I assume Hooper s too thesis he describes the process which is essentially casting the bounding box onto the screen and getting its x and y extents then shooting rays within this extent at the object as a pre process This is the idea you outlined However theirs avoids all testing of the extents by doing the work as a per object instead of per ray preprocess A per object basis means they don t have to test extents all they do is loop through the extent itself and shoot rays at the object for each pixel Efficient Polygon Intersection Question from Mark VandeWettering Another problem I have been considering arose from a profile of my raytracer when run on the gears database A large amount of time 40 was spent in the polygon intersection code which is greater than other scenes which used polygons The reason the polygon intersection routine which you described in the Siggraph Course Notes is linear in the number of sides of the object For the case of the gear the number of sides is 144 which is a very large number Perhaps a better way of trying to intersect polygons is to decompose the complex polygons into triangles and then arrange them in your favorite hierarchy scheme The simplest way would be to subdivide prior to the raytracing in a preprocessing step Several very quick algorithms exist for intersection with triangles and I think that this may be a better way to implement polygon intersection Back of the envelope calculations Haines method of intersection O n to intersect polygon Triangular decomposition O 1 to intersect triangle number of triangles searched inside your hierarchy scheme Assuming a good hierarchy you can expect O logn triangles to be searched The problem is finding the constants involved in this I do suspect that this method may in fact be superior because in the ground case intersect a triangle the two methods are equivalent actually since the code may be streamlined for triangles the second is probably better and I expect that as the number of sides grows the second will get better relative to the first I am torn between trying to formally analyze the run time and just going ahead and implementing the thing and gaining performance information from that Perhaps I will have some figures for you about my experience soon I would like to hear from anyone on the RT News who has information on ray tracing superquadrics I am especially interested in the numerical methods used to solve intersections but any information would be useful as I recall Preparata talks about preprocessing polygons into trapezoids in his book Computational Geometry leading to many fewer edge which need testing each trapezoid has but two sides which can intersect as the test ray is parallel to the other two edges Any other solutions anyone EAH Bug in Paul Heckbert s Ray Tracer From Mark VandeWettering As I might have mentioned before I modelled my raytracer after the one described in Heckbert s article Writing a RayTracer I have noticed some ambiguities anomolies bugs that might be interesting to examine In Heckbert s code there is some weirdness going on in the Shade procedure The part of the Shade procedure which handles tranparency is something has a comment like hit 0 medium and hit 1 medium are entering and exiting media The transmission direction is then calculated using the index of refraction of the two media But hit 0 medium should be the medium that the ray originates in not the medium of the object actually hit Therefore the index of refractions are incorrect and the Transmission direction also is incorrect Perhaps Paul could comment on this What seems to be correct is to keep hit 0 reserved to contain the type of material that the ray originates in and hit 1 be the first hit along this ray Was this what was intended A Tidbit from USENET From Ali T Ozer In article 10207 s ms uky edu sean ms uky edu Sean Casey writes Oh yeah I hear that some of the commercial Amiga ray tracing software is being ported to the Mac II These products have been around for a while so it s a good chance for Mac users to get their hands on some already evolved ray tracing software For a lot higher price though I read that the Mac version of Byte by Byte s Sculpt 3D and Animate 3D packages will start from 500 Ali Ozer aozer NeXT com back to contents More on MTV s Public Domain Ray Tracer features bug fixes etc Raytrace to Impress Postscript Converter by David Koblas Contained is a shar for converting MRGB pictures to either impress or postscript depending on your needs black and white I m looking for versatec plotter routines if you have some I d be interested Ed note there is also a patch for this program posted to USENET as usual the code is deleted for space Check USENET or contact David for the program EAH name David Koblas place MIPS Computers Systems phone 408 991 0287 uucp ames decwrl pyramid wyse mips koblas Raytrace to X Image converter by Paul Andrews Here s a somewhat primitive program to display one of Marks raytraced pic s on an X display There s no makefile but then there s only one source file paul torch UUCP Paul Andrews again code deleted for space Check USENET or write Paul Better Shading Model for Raytracer by David Koblas A better shading model for the MTV raytracer I probably should have posted this a while back while I was sure it all worked The two big changes this has are a better shading model including doing something diffrent with diffuse reflection You can specify the color of a light and surfaces have an ambiant and absorbance values default no ambiant and no absorbtion The shine value is now in the range from 0 0 1 0 instead of 0 infinity On balls I ran a sed script like this f s 35 0 2 and got close the the same results Also all componants of a surface can be specified with r g b values Give it a try and if you have any bugs problems sugestions let me know and I ll give them a try fix name David Koblas place MIPS Computers Systems phone 408 991 0287 uucp ames decwrl pyramid wyse mips koblas code deleted for space check USENET or write David for the new model From Irv Moy I have Mark VandeWettering s raytracer running on a Sun 3 260 and Version 2 4 of Eric Haines SPD I took the SPD that Mark posted and applied the patch that Eric posted to get Ver 2 4 I display the output of the raytracer on a Targa 32 I had to add an extra byte in the output file for the Targa s alpha channel The output of balls c looks great I now have my very own sphereflake I tried gears at a size factor of 4 and the resulting output is quite dark The background is a nice UNC blue but the gear surfaces are very dark and so is the reflecting polygon underneath the gears Has anyone else tried to raytrace gears with Mark s program yet Enquiring minds want to know BTW if you look closely at sphereflake you can see Elvis recursively of course Irv Moy UUCP chinet musashi Internet musashi chinet uucp From Ron Hitchens This may have some bearing on the problem vixen ray i gears nff o gears pic t ray 9345 prims 5 lights ray inputfile gears nff ray resolution 512 512 ray after adding bounding volumes 10516 prims From defs h define MAXPRIMS 10000 I ran gears nff last night and got the same results I bumped MAXPRIMS to 11000 and ran it again seemed to work fine I only ran a 128x128 version the resolution was so low that most of the gears looked like fuzzy blobs but it seemed to be properly lighted and plenty colorful I have a 512x512 run going now should be finished in about 12 hours I love my Sun 3 60FC but it sure would be handy to have a Cray now and then BTW if you look closely at sphereflake you can see Elvis recursively of course Naw that s the spirit of Tom Snyder Elvis is way too busy channelling through an unemployed truck driver in Muncie Indiana To Mark VandeWettering Hey thanks for the ray tracer I don t suppose you could send me a disk drive to store all these picture files on could you Ron Hitchens ronbo vixen uucp hitchens cs utexas edu From Steve Holzworth There is a bug in the screen c routine of Mark s raytracer Specifically everywhere he does a malloc the code is of the form foo Pixel malloc xres sizeof Pixel 1 The actual intent is to allocate xres 1 Pixels thusly foo Pixel malloc xres 1 sizeof Pixel There are three occurences of the former in the code they should be changed similarly to the later Note I never ran over this bug until I tried to run a 1024x1024 image It worked fine on 512x512 or less images Other than that its a good raytracer Congrats Mark I m working on a better lighting model and a better camera model I ll send them on when if I finish them Steve Holzworth rti tachyon sch Teapot Database for Ray Tracing by Ron Hitchens Subject Ray traced teapot Below is a modification of a program that Dean S Jones posted a few weeks ago that draws the well known teapot in wire frame using SunCore I changed it so that it would use the same data to produce an NFF file that Mark VandeWettering s ray tracer can use The result looks surprisingly good Using the default step value of 6 is satisfactory 12 looks very nice I d like to know what s causing the little specks on the spout and the handle I don t know if it s a problem with how this guy generates the NFF file or some glitch in Mark s ray tracer I don t have the time to investigate The original program that Dean posted was Sun specific since it used SunCore This one is not Sun specific all it does is some computation and spit out some text data so it should run most anywhere You ll probably need to remove the f68881 from the makefile spec if you compile it on a non Sun system though Enjoy Ron Hitchens ronbo vixen uucp hitchens cs utexas edu code deleted for space Check USENET or write Ron Hitchens for the code From Mark VandeWettering to me Your final comments regarding Kay Kajiya BVs were basically in line with the thinking that I have done and with the current state of my raytracer I now provide cutoffs for shadow testing and cull objects immediately if they are beyond the maximum distance that we need to look This also allows me to implement some of the shadow caching and other optimizations suggested by you in the March 28 1988 RT News Most of these were trivial to implement and will be incorporated in a better stronger faster version of my raytracer Gosh I just can t keep quiet can I I just wanted you to know that a new and improved version of my raytracer is available for anonymous ftp It employs some of the stuff regarding Kay Kajiya bounding volumes and shadow caches for an improvement in speed as well Roughly 30 improvement I can now do the sphereflake is less than 5 hours on a Sun 3 w 68881 coprocessor For the future I am thinking of CSG antialiasing and Goldsmith and Salmon style hierarchy generation Things that have been put off but I would like to include would be more complex primitives but I just can t deal with numerical analysis at the moment Soon it will be back to the world of functional programming and my thesis so I better get this all done sigh New Ideas an ObjectDesc NFF compiler One possible project that I have thought of doing is an Object to NFF compiler The compiler could be a procedural language which could be used to define hierarchical objects with facilities for rotation translation and scaling The output would be an NFF file for the scene For instance we might have primitive object types CUBE SPHERE POLYGON and CONE Each of these might represent the canonical unit primitive We could then build new objects out of these primitives A hypothetical example program to create a checkerboard might be checkboard obj define object check polygon 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 Check4 contains 4 squares define object check4 check color white check translate 1 0 0 0 0 0 color black check translate 0 0 1 0 0 0 color white check translate 1 0 1 0 0 0 color black Board 4 is 1 4 of a checkerboard define object board4 check4 check4 translate 2 0 0 0 0 0 check4 translate 0 0 2 0 0 0 check4 translate 2 0 2 0 0 0 Board is a full sized checkerboard define object board board4 board4 translate 4 0 0 0 0 0 board4 translate 0 0 4 0 0 0 board4 translate 4 0 4 0 0 0 the scene to be rendered define scene board I would also like it to support CSG and maybe even procedural looping constructs I don t know if I will get up enough steam to implement this but it would make scenes easier to specify for the average user Ideally such a language would be interesting to use for specifying motion as well although I have no real ideas about the ideal way to specify or implement this back to contents Neutral File Format NFF by Eric Haines This is a description of the format used in the SPD package Any comments on how to expand this format are appreciated Some extensions seem obvious to me e g adding directional lights circles and tori but I want to take my time gather opinions and get it more or less right the first time EAH Draft document 1 10 3 88 The NFF Neutral File Format is designed as a minimal scene description language The language was designed in order to test various rendering algorithms and efficiency schemes It is meant to describe the geometry and basic surface characteristics of objects the placement of lights and the viewing frustum for the eye Some additional information is provided for esthetic reasons such as the color of the objects which is not strictly necessary for testing rendering algorithms Future enhancements include circle and torus objects spline surfaces with trimming curves directional lights characteristics for positional lights CSG descriptions and probably more by the time you read this Comments suggestions and criticisms are all welcome At present the NFF file format is used in conjunction with the SPD Standard Procedural Database software a package designed to create a variety of databases for testing rendering schemes The SPD package is available from Netlib and via ftp from drizzle cs uoregon edu For more information about SPD see A Proposal for Standard Graphics Environments IEEE Computer Graphics and Applications vol 7 no 11 November 1987 pp 3 5 By providing a minimal interface NFF is meant to act as a simple format to allow the programmer to quickly write filters to move from NFF to the local file format Presently the following entities are supported A simple perspective frustum A positional vs directional light source description A background color description A surface properties description Polygon polygonal patch cylinder cone and sphere descriptions Files are output as lines of text For each entity the first line defines its type The rest of the first line and possibly other lines contain further information about the entity Entities include v viewing vectors and angles l positional light location b background color f object material properties c cone or cylinder primitive s sphere primitive p polygon primitive pp polygonal patch primitive These are explained in depth below Viewpoint location Description v from Fx Fy Fz at Ax Ay Az up Ux Uy Uz angle angle hither hither resolution xres yres Format v from g g g at g g g up g g g angle g hither g resolution d d The parameters are From the eye location in XYZ At a position to be at the center of the image in XYZ world coordinates A k a lookat Up a vector defining which direction is up as an XYZ vector Angle in degrees defined as from the center of top pixel row to bottom pixel row and left column to right column Resolution in pixels in x and in y Note that no assumptions are made about normalizing the data e g the from at distance does not have to be 1 Also vectors are not required to be perpendicular to each other For all databases some viewing parameters are always the same Yon is at infinity Aspect ratio is 1 0 A view entity must be defined before any objects are defined this requirement is so that NFF files can be used by hidden surface machines Positional light A light is defined by XYZ position Description b X Y Z Format l g g g All light entities must be defined before any objects are defined this requirement is so that NFF files can be used by hidden surface machines Lights have a non zero intensity of no particular value this definition may change soon with the addition of an intensity and or color Background color A color is simply RGB with values between 0 and 1 b R G B Format b g g g If no background color is set assume RGB 0 0 0 Fill color and shading parameters Description f red green blue Kd Ks Shine T index of refraction Format f g g g g g g g g RGB is in terms of 0 0 to 1 0 Kd is the diffuse component Ks the specular Shine is the Phong cosine power for highlights T is transmittance fraction of light passed per unit Usually 0 0 are considered to have two sides for algorithms that need these normally objects have one side The fill color is used to color the objects following it until a new color is assigned Objects all objects are considered one sided unless the second side is needed for transmittance calculations e g you cannot throw out the second intersection of a transparent sphere in ray tracing Cylinder or cone A cylinder is defined as having a radius and an axis defined by two points which also define the top and bottom edge of the cylinder A cone is defined similarly the difference being that the apex and base radii are different The apex radius is defined as being smaller than the base radius Note that the surface exists without endcaps The cone or cylinder description c base x base y base z base radius apex x apex y apex z apex radius Format c g g g g g g g g A negative value for both radii means that only the inside of the object is visible objects are normally considered one sided with the outside visible Note that the base and apex cannot be coincident for a cylinder or cone Sphere A sphere is defined by a radius and center position s center x center y center z radius Format s g g g g If the radius is negative then only the sphere s inside is visible objects are normally considered one sided with the outside visible Polygon A polygon is defined by a set of vertices With these databases a polygon is defined to have all points coplanar A polygon has only one side with the order of the vertices being counterclockwise as you face the polygon right handed coordinate system The first two edges must form a non zero convex angle so that the normal and side visibility can be determined Description p total vertices vert1 x vert1 y vert1 z etc for total vertices vertices Format p d g g g Polygonal patch A patch is defined by a set of vertices and their normals With these databases a patch is defined to have all points coplanar A patch has only one side with the order of the vertices being counterclockwise as you face the patch right handed coordinate system The first two edges must form a non zero convex angle so that the normal and side visibility can be determined Description pp total vertices vert1 x vert1 y vert1 z norm1 x norm1 y norm1 z etc for total vertices vertices Format pp d g g g g g g Comment Description string Format string As soon as a character is detected the rest of the line is considered a comment back to contents Eric Haines erich acm org Ray Tracing News Volume 1 Number 10 Ray Tracing News Volume 1 Number 10 Ray Tracing News Volume 1 Number 10 Ray Tracing News Volume 1 Number 10 Ray Tracing News Volume 1 Number 10 Ray Tracing News Volume 1 Number 10 Ray Tracing News Volume 1 Number 10 Ray Tracing News Volume 1 Number 10 Ray Tracing News Volume 1 Number 10 Ray Tracing News Volume 1 Number 10 http www acm org tog resources RTNews html rtnews5a html http www acm org tog resources RTNews html rtnews5a html http www acm org tog resources RTNews html rtnews5a html http www acm org tog resources RTNews html rtnews5a html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews5b.html%%==%%Ray Tracing News, Volume 1, Number 11%%==%%Ray Tracing News "Light Makes Right" November 4, 1988 Volume 1, Number 11 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%66867%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right November 4 1988 Volume 1 Number 11 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1988 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Intro New People Ray Triangle Intersection with Barycentric Coordinates by Rod Bogart Jeff Arenberg Transforming normals by David F Rogers 2D box test by Jack van Wijk Re Neutral File Format by Jeff Goldsmith RT and Applications by Cary Scofield Re Goldsmith and Eyes by K R Subramanian Wood Textures by Rod Bogart Shadows Mirrors and Virtual Lighting by Steve Stadnicki Re Basics of Raytracing by David Jevans Re What is Renderman Standard by Steve Upstill Free On Line Computer Graphics References by Eugene Miya Latest Mailing List Short Form by Eric Haines Intro For a switch there are no articles on MTV s ray tracer The major stuff this time is Rod Bogart s triangle intersector and the announcement of Baldev Singh s computer graphics reference resource There are also many letters and short articles along with the usual cullings of USENET Enjoy back to contents New People Professor David F Rogers Aerospace Engineering Department U S Naval Academy Annapolis MD 21402 USA Tel 301 267 3283 4 5 ARPANET dfr usna mil UUCP uunet usna dfr alias david rogers dfr cad usna mil Kelvin Thompson hierarchy schemes procedural objects animation The University of Texas at Austin 4412 Ave A 208 Austin TX 78751 3622 alias kelvin thompson kelvin cs utexas edu I m a PhD student in graphics at the University of Texas I received a BSEE from Rice University in 1983 and a Master s in EE from UT in 1984 My doctoral project is on hierarchical multi scale databases for computer graphics and I m building a ray tracer as part of my work on that project I m also interested in motion and animation I never plan on becoming President of the United States of America Kelvin Thompson Lone Rider of the Apocalypse kelvin cs utexas edu uunet cs utexas edu kelvin A T Campbell III shading models animation Department of Computer Sciences University of Texas Austin Texas 78712 512 471 9708 alias at campbell atc cs utexas EDU I am in the PhD program in Computer Sciences at the University of Texas My research area is developing a more sophisticated illumination model than those currently in widespread use A modified form of distributed ray tracing is one of the methods I am considering to evaluate my model Animation is another of my interests I am putting myself through school by producing computer graphics animations for a small engineering company Sometimes I am called upon to create special effects such as motion blur and atmospheric effects Based on what I heard at this year s ray tracing round table at SIGGRAPH it looks as if ray tracing can solve most of my problems Tim O Connor Staff Cornell Program of Computer Graphics 120 Rand Hall Ithaca NY 14853 alias tim oconnor toc wisdom tn cornell edu back to contents Ray Triangle Intersection with Barycentric Coordinates by Rod Bogart Jeff Arenberg From hpfcla bogart gr cs utah edu Rod G Bogart A while back there was a posting concerning ray triangle intersection The goal was to determine if a ray intersects a triangle and if so what are the barycentric coordinates For the uninitiated barycentric coordinates are three values r s t all in the range zero to one Also the sum of the values is one These values can be used as interpolation parameters for data which is known at the triangle vertices i e normals colors uv The algorithm presented previously involved a matrix inversion The math went something like this Since r s t are interpolation values then the intersection point P must be a combination of the triangle vertices scaled by r s t x1 y1 z1 r Px r Px x2 y2 z2 s Py s Py V x3 y3 z3 t Pz t Pz So by inverting the vertex matrix V V and given any point in the plane of the triangle we can determine r s t If they are in the range zero to one the point is in the triangle The only problem with this method is numerical instability If one vertex is the origin the matrix won t invert If the triangle lies in a coordinate plane the matrix won t invert In fact for any triangle which lies in a plane through the origin the matrix won t invert The vertex vectors don t span R3 The reason this method is so unstable is because it tries to solve a 2D problem in 3D Once the ray plane intersection point is known the barycentric coordinates solution is a 2D issue Another way to think of barycentric coordinates is by the relative areas of the subtriangles defined by the intersection point and the triangle vertices 1 If the area of triangle 123 is A then the area of P23 is rA Area 12P is sA and area 1P3 is tA With this image it is obvious that r s t must equal one If r s or t go outside the range zero to one t s P will be outside the triangle P r 3 2 By using the above are relationships the following equations define r s and t N triangle normal vec 1 2 cross vec 1 3 vec 1 P cross vec 1 3 dot N s length N vec 1 2 cross vec 1 P dot N t length N r 1 s t In actual code it is better to avoid the divide and the square root So you can set s equal to the numerator and then test if s is less than zero or greater than sqr length N For added efficiency preprocess the data and store sqr length N in the triangle data structure Even for extremely long thin triangles this method is accurate and numerically stable RGB Living life in the fast lane eight items or less ihnp4 decvax utah cs bogart bogart cs utah edu From arenberg trwrb UUCP Jeff Arenberg Subject Re Ray Triangle Intersection with Barycentric Coordinates from USENET Ok here is how I handle this calculation in my ray tracing program I think it is quite efficient Let a triangle be represented in the following manner p1 O p0 p2 where p0 is the vector from the origin to one vertex and p1 p2 are the vectors from the first vertex to the other two vertices Let N p1 X p2 be the normal to the triangle p1 X p2 Construct the matrices b p1 bb inv b bb 0 p2 bb 1 N bb 2 and store away bb Let the intersecting ray be parameterizes as r t D P Now you can quickly intersect the ray with the triangle using the following pseudo code means vector dot product Den D bb 2 if Den 0 then ray parallel to triangle plane so return Num p0 P bb 2 t Num Den if t p t D P p0 a p bb 0 b p bb 1 if a 1 0 then not in triangle and return b1 1 a b barycentric coordinates b2 a b3 b The idea here is that the matrix bb transforms to a coordinate frame where the sides of the triangle form the X Y axes and the normal the Z axis of the frame and the sides have been scaled to unit length The variable Den represents the dZ component of the ray in this frame If dZ is zero then the ray must be parallel to the X Y plane Num is the Z location of the ray origin in the new frame and t is simply the parameter in both frames required to intersect the ray with the triangle s plane Once t is known the intersection point is found in the original frame saved for latter use and the X Y coordinates of this point are found in the triangle s frame A simple comparison is then made to determine if the point is inside the triangle The barycenter coordinates are also easily found I haven t seen this algorithm in any of the literature but then I haven t really looked either If anyone knows if this approach has been published before I d really like to know about it Jeff Arenberg UUCP ucbvax ihnp4 uscvax trwrb csed pyramid arenberg GEnie shifty back to contents Transforming normals by David F Rogers hpfcla dfr USNA MIL G day Eric Was skimming the back issues of the RT News and your memo on transforming normals caught my eye Another way of looking at the problem is to recall that a polygonal volume is made up of planes that divide space into two parts The columns of the volume matrix are formed from the coefficients of the plane equations Transforming a volume matrix requires that you premultiply by the inverse of the manipulation matrix The components of a normal are the first three coefficients of the plane equation Hence the same idea should apply see PECG Sec 4 3 on Robert s algorithm pp 211 213 Surprising what you can learn from Roberts algorithm yet most people discount it Dave Rogers back to contents 2D box test by Jack van Wijk From mcvax ecn nlerf com jack uunet UU NET Jack van Wijk An answer to the question of Jack Ritter RT News October 3 1988 by Jack van Wijk Jack Ritter proposes a method to improve the efficiency by testing the ray point against a 2 D box This method has been published before Bronsvoort W F J J van Wijk and F W Jansen Two methods for Improving the Efficiency of Ray Casting in Solid Modelling Computer Aided Design 16 1 January 1984 pp 51 55 The method is used hierarchically here for CSG defined models in the spirit of Roth The gain of the method is significant but not dramatically Probably in our system the cost of the floating point intersection calculations was much bigger than the box test back to contents Re Neutral File Format by Jeff Goldsmith Yuk I don t think that the world needs another ugly scene description language unless it does something special I haven t seen renderman but other people seem to like it so maybe that ll be better Yours looks a lot like Wavefront s with the disadvantage that it doesn t support a binary representation I hate to say it but I use my own less I feel but still ugly text format that does have a binary format as well as an ascii numerical format You are welcome to it if you want but I would doubt it It s different in that algebraic expressions are possible in place of any constant plus it includes flow control tests some computer algebra type primitives and macros Plus a historyer command line editing etc It looks a lot like an interactive F77 interpreter with massive numbers of bizarre graphics commands Perhaps you can instigate an effort to create a sensible object description language and maybe supply an interpreter and some compiled formats It would be worthwhile Perhaps just setting up an effort to spec one out would be good enough Whatever Reply From Eric Haines I guess I didn t make it clear NFF has been in use about a year now It s the format that the SPD benchmarking package uses I should have written a better preface obviously I wanted to get the point across that this is supposed to be absolutely minimal and that no one should be using it for modeling but only for transferring the final database to a renderer There could indeed be an NFF language which would not be user hostile like NFF is Essentially I see NFF as incredibly stupid and brain damaged This makes it accessible to almost anyone who simply wants to read in a scene database without too much hassle even now though I m getting questions like what s hither from people on USENET Anyway I like your ideas for algebraic expressions I could use it right now in my other language which is a tad more user friendly and is what I use when I want to munge around by hand Reply From Jeff Goldsmith Hmmm If you are trying to find an interface that can be used by professionals then it is probably not the same interface that might be used by USENET types Both problems might be worth addressing but I d say from gross personal bias that the high end problem is worth doing more Simply so that I can trade databases more easily Simply so that code can be shared more easily I m really not all that concerned about getting computer graphics capabilities out to high schoolers and other randoms quite yet In fact I doubt that graphics will have that sort of distribution in its current modeler renderer form I suspect that Mac interface and high quality user interfaces will be the medium for that type of technology dissemination Eventually we ll have programs that are called Graphics Processors or some other nonsense and will be transmitting reasonably complex graphics capabilities to anyone who wants to do it Artists will be the primary users though managers and engineers will use them in both technical and non technical efforts Joe six pack just doesn t have that much use interest capacity for generating pictures out of thin air It would be really nice if there were a standardish graphics language kernel Since just about everybody has their own interpreter that does just about the same set of very basic things plus of course their set of enhancements why not create a spec that would still allow all the enhancements but cover the basics thoroughly It might stifle creativity a bit but I doubt it For transmission between modelers and renders why not use the same language as input to modelers Remove some options or don t and keep the files the same If you are worried about speed then a binary complied version is necessary in any event Case in point my current project is Hubble Space Telescope The uncompiled model takes 17 minutes to read in The compiled one takes about 35 seconds It might also be worth considering that some people out there do use Fortran and that some things are hard to parse NFF for example in Fortran In fact it s hard to parse anything that isn t fixed field formatted in Fortran I ve got an ugly version like that too Really ugly 7 Fixmans maybe even back to contents RT and Applications by Cary Scofield K R Subramanian UTexas at Austin asks On the RT news I would like to see practical applications of ray tracing described here What applications really require mirror reflections refraction etc Haven t seen applications where ray tracing was the way to go Applications for ray tracing besides realistic image synthesis MCAD 3D solids modeling Material property calculations mass center of gravity moments of inertia etc Lens design geometric optics Toolpath planning for numerical controlled milling Weapons research ballistics analysis Vulnerability assessments collision detection between a projectile and an object Nuclear reactors determination of neutron distributions in reactor cores Astrophysics eg diffusion of light through stellar atmospheres penetration of light through planetary atmospheres IN SUMMARY Just about anything that requires solving a linear and non linear w restrictions particle transport problem is a candidate application for ray tracing ray casting algorithms Cary Scofield Apollo Computer Inc Graphics Software R D UUCP decwrl decvax mit eddie attunix apollo scofield ARPA scofield apollo com USMAIL 270 Billerica Rd Chelmsford MA 01824 PHONE 508 256 6600 x7744 back to contents Re Goldsmith and Eyes by K R Subramanian subramn cs utexas edu on the automatic hierarchy scheme of Goldsmith and Salmon Somewhere in the RT news you mentioned that the hierarchy is optimized only for primary rays from the eye In their paper they mention that the probability of hitting a bounding volume is proportional to the solid angle of the bounding volume presented at the eye and if the eye is sufficiently far away then this can be approximated by the surface area of the bounding volume of the object s Is this the reason that the hierarchy is not the best for secondary rays If that is so what if the eye is somewhere within the scene In this case the assumption is again violated K R Subramanian Department of Computer Sciences The University of Texas at Austin Austin Tx 78712 subramn cs utexas edu uunet cs utexas edu subramn Reply From Eric Haines Jeff Goldsmith and I were discussing in the latest RT News whether the eye location might be used to help out the hierarchy made by the Goldsmith Salmon algorithm Essentially Jeff finds that since so many of his rays are eye rays he might want to try to test intersection of the objects closer to the eye first In other words after the G S hierarchy is created go through and sort the sons of each bounding volume by the additional criterion of distance to the eye This is an added fillip to the G S algorithm normally i e in the original article they do not pay attention to the order of the sons of a bounding volume The idea is that if you test the closer object first and hit it you can often quickly reject the further object when it is tested since you now have a maximum bound on the distance the ray is shot For example say you have a list polygon sphere The closest approach or the center or whatever criterion you decide to use of the sphere is closer than that of the polygon so you reorder the son list sphere polygon If you now test a ray against this list you get four possibilities 1 Sphere missed polygon missed no savings is accrued by sorting 2 Sphere missed polygon hit no savings is accrued by sorting 3 Sphere hit polygon missed by hitting the sphere we now have a maximum bound on the ray s really the line segment s length Now when the polygon is tested it might be quickly rejected Say we hit the polygon plane beyond the maximum distance In this case we can stop testing the polygon without doing the inside outside testing If we had intersected in the order polygon sphere we would have had to do this inside outside test then gone on to test the sphere extra work we could have avoided 4 Sphere hit polygon hit Pretty much the same as case 3 except even more so in this case time is saved by a not having to to do the inside outside test b not having to store information about the intersected polygon and c it is all the more likely that a polygon beyond the sphere which is actually hit has the intersection distance beyond the sphere s intersection distance vs a missed polygon where the intersection distance is somewhere on an infinite plane which could easily be in front of the sphere My idea for ordering the son lists was simply object size within a son list sort from largest to smallest area on the theory that larger objects will tend to get hit more often and so get you an intersection point quickly The savings are based more on probability of hits but the idea makes for G S hierarchy trees that are not eye dependent I use item buffering so eye rays are minimized Another idea is to order the lists by difficulty of calculation test spheres before splines test triangles before 100 sided polygons etc The idea of ordering lists by either size or difficulty is valid for other efficiency schemes too Octree lists and SEADS might benefit from ordering the lists in a sensible fashion Has anyone else out there tried such schemes Reply From subramn cs utexas edu K R Subramanian Yes I understood these discussions and they are all valid Somehow just trying to optimize the eye rays doesn t impress me very much because you yourself have mentioned the item buffer for eye rays and the light buffer for doing shadow rays from the first level intersections It is not very clear to me if the above schemes you mention will bear a great improvement Anyhow I am really interested in secondary rays since that s what ray tracing is all about In very complex scenes like the Cornell rings or Cornell mountain databases SPD data bases its the secondary rays that are dominant My real question was trying to figure out if Jeff s approximation in using the surface area of the bounding volumes to figure out the conditional probabilities was valid for all rays primary and secondary There he said something like if you are far away you can approximate Does this refer to the ray length K R Subramanian Department of Computer Sciences The University of Texas at Austin Austin Tx 78712 subramn cs utexas edu uunet cs utexas edu subramn Reply From Eric Haines Indeed Jeff s optimization for eye rays doesn t thrill me But how do you feel about optimizing on size or on intersection complexity or both Seems like this has a good chance of validity for secondary rays too I will pass on your comments to Jeff and see how he responds You might just want to write him directly at alias jeff goldsmith jeff hamlet caltech edu I should clear up an important point the SPD databases are in no way connected with Cornell I designed them in August 1987 more than a year and a half after leaving Cornell I hope that nowhere in the document I imply that Cornell is associated with these Why the fuss Partly because Don Greenberg my president at 3D Eye Inc is very firm about separating work done at 3D Eye and work done at the Cornell graphics lab which he also runs Another reason is that Cornell doesn t endorse these databases Don would be pretty bugged at me if it was said that they did So please just refer to the SPD databases or the 3D Eye SPD databases Nuff said and thanks Reply From KR Subramanian Indeed Jeff s optimization for eye rays doesn t thrill me But how do you feel about optimizing on size or on intersection complexity or both Seems like this has a good chance of validity for secondary rays too You are right Using size or intersection cost in ordering your intersections will do good especially in shadow ray computation As far as the pixel or reflection rays are concerned this depends on the method used I have a modified version of the BSP tree where the search goes very close to the path of the ray and only on collection of unordered objects can we take advantage of the above 2 facts Also this is basically a hack well I wouldn t go quite that far But size as presented to a ray depends on the direction of the ray since projected area on to a ray varies A polygon could present its entire area to a ray orthogonal to it or almost nothing if its parallel to it For shadow rays if you have a mix of complex objects patches splines etc and simple objects like polygons spheres you better do this in the order of their complexity That will definitely save a lot of work especially when there are multiple light sources and lots of spawned rays Reply From Jeff Goldsmith Ok Optimizations 1 The only reason that I suggest ordering from the eye is that there are eye rays in all scenes Not true for secondary Besides most secondary rays get other kludges More importantly they are somewhat random so it s tough to optimize for them 2 What he is confusing with the above is the heuristic for probability determination That is not based on eye rays but assumes a uniform distribution of ray directions throughout the scene This is not the case but we haven t dealt with more complicated heuristics other than to decide that they are a bit more tricky than they might seem 3 There is a factor in the tree combination heuristic the one that adds up the node costs into a tree cost that is biased for primary rays I call the tree cost the sum of the node costs This isn t strictly true for secondary rays because they emanate from a leaf node thereby adding some additional cost to the big nodes We tried accounting for this by using a formulation that takes internal emanation costs into account Yes it was more accurate Not by enough to bother with I think the difference was on the order of a few percent It was definitely well under the noise level We don t use it anymore for no particular reason Don t bother to code it except as an intellectual exercise Not a bad one at that back to contents Wood Textures by Rod Bogart As for the wood textures there really isn t a lot to say They were scanned with a Vicom frame grabber The data is 512x512 bytes The book they were taken from is Textures by Brodatz We do not have permission from the author or the publisher so thats why we haven t made the whole set available Yes we did scan the whole book over 100 images but without permission I dare not let out more than a handful So the images are on cs utah edu and they are wood 1234 img As for mailing them UUCP I d rather not A quarter meg uuencoded is a long mail message If you really really can t get them from a friend with ftp access then ask nice RGB back to contents Shadows Mirrors and Virtual Lighting by Steve Stadnicki from USENET I am currently working on a simple raytracer VERY simple so far it only models triangles and have a major problem For shadow calculations I need to know if there are any light sources which could shine on a point The problem With mirrors in the scene it s possible to have reflected light illuminate some section that would normally be in shadow e g Light O O M i r object r o SSSS r Then the area covered by the S s would not be in shadow even though it isn t directly illuminated by the light O I know how to solve the problem using virtual lights that is a light that you would obtain if you reflected the Light at O in the mirror above it would appear at O Multiple reflections can be handled by re reflecting virtual lights etc So what s my problem Simple if you have M mirrors and reflections can go up to depth K you need O M K virtual lights for each real light Is there any way I might be able to eliminate for a given point some combinations of reflections without having to do much testing Steven Stadnicki stadnism clutx clarkson edu P S The virtual lights idea came from a wonderful book A Companion to Concrete Analysis by Melzak back to contents Re Basics of Raytracing by David Jevans from USENET If anyone is looking for the analysis of a regular subdivision ray tracing method see journal Visual Computer July 1988 title Analysis of an Algorithm for Fast Ray Tracing Using Uniform Space Subdivision authors Cleary J and Wyvill G What the paper does is to describe the voxel traversal algorithm that Cleary developed and that I use in my ray tracer and then a theoretical analysis is presented It is a convincing argument for using regular voxel subdivision although my method submitted to CGI 89 in UK works better for scenes where polygons are not evenly distributed throughout a scene Visual Computer is published by Springer Verlag Unfortunately it doesn t enjoy the circulation of CG A or TOG so it is pretty outrageously expensive like 160 US for 6 issues The design of our Mesh Machine is in journal Proc CIPS Graphics Interface 83 33 34 Edmonton Alberta May title Design and Analysis of a Parallel Ray Tracing Computer authors John Cleary and Brian Wyvill and Graham Birtwistle and Reddy Vatti second article appended In article 4589 polyslo CalPoly EDU sjankows polyslo CalPoly EDU Mr Booga detonate writes I have a request similar to Randy Ray s Raytracing introduction I am starting a project in parallel raytracing using a Sequent Balance 8000 and a couple of color Sun 3 s running X I have virtually exhausted the local resources on raytracing and am in need of basic ray tracing algorithms and simple optimization algorithms Our university the U of Calgary has significant experience in parallel ray tracing Professors Cleary and Wyvill developed a mesh machine for raytracing several years ago Graduate student now working at Alias Andrew Pearce implemented a parallel raytracer for the mesh machine that also ran on a network of Corvus I implemented a parallel ray tracing algorithm for polygons and implicit surfaces earlier in the year on a BBN Butterfly I used regular spatial subdivision combined with adaptive octree subdivision to converge on the surfaces Up to 10 nodes I got almost linear speedup and on a 70 node system I was still getting 50 from each new node added If anyone else is interested in references on parallel raytracing the mesh machine articles Pearces Masters thesis or others such as Dippe in Siggraph 86 etc you can send me mail and I can send a list or copies of some of t behind these eyes that say I still exist David Jevans U of Calgary Computer Science Calgary AB T2N 1N4 Canada uucp ubc cs utai alberta calgary jevans From sdg helios cs duke edu Subrata Dasgupta Subject Re Basics of raytracing from USENET In article 77 cs spool calgary UUCP jevans cpsc ucalgary ca David Jevans writes Our university the U of Calgary has significant experience in parallel ray tracing Professors Cleary and Wyvill developed a mesh machine for raytracing several years ago Graduate student now working at Alias Andrew Pearce implemented a parallel raytracer for the mesh machine that also ran on a network of Corvus This all sounds very interesting A few articles back a person inquired about a paper on an algorithm analysis by Profs Wyvill and Cleary I am trying to track that paper down but the reason for sending you this letter is to request some info on the mesh machine for ray tracing developed at your univ If you can refer me to a recent paper on this machine it will be great At Duke we are developing what has come to be known as the Raycasting machine which computes intersection of an array of parallel rays with primitives and then uses constructive solid geometry to compute the shape volume and other parameters of an arbitrary object Thus I would be very much interested in any work in this area If anyone else is interested in references on parallel raytracing the mesh machine articles Pearces Masters thesis or others such as Dippe in Siggraph 86 etc you can send me mail and I can send a list or copies of some of t Any other info in this area would be very much appreciated Thanks Subrata Dasgupta Department of Computer Science Duke University Durham NC 27706 ARPA sdg cs duke edu CSNET sdg duke UUCP decvax duke sdg back to contents Re What is Renderman Standard by Steve Upstill Organization Pixar Marin County California from USENET I m writing the RenderMan book so I guess I m qualified to clear up a couple of things from this posting In article 25225 tut cis ohio state edu fish shape cis ohio state edu Keith Fish writes I m sure PIXAR is more than willing to send you a spec of Renderman just ask them Also there may be something available through the Siggraph 88 proceedings There s nothing in the SIGGRAPH 88 proceedings about RenderMan You can get a copy of the spec by sending 15 yes I know it s a pain but we ve sent out 1000 specs so far and it got kind of expensive this is the real cost to Pixar 3240 Kerner Blvd San Rafael Ca 94901 The following is MY understanding of Renderman Renderman is an attempt by PIXAR to force a de facto standard interface in the Graphics Rendering Imaging arena My understanding is that this interface is based on tools routines that they have developed throughout the years for use on their hardware Because it was not designed for general varying graphics architectures many companies wonder if it will only work well on their systems hence making their hardware also the de facto standard RenderMan is based on about six years research at Pixar and Lucasfilm on how to get quasi photographic realism into computer graphics The effort has encompassed algorithms software and hardware and much of what is in the standard has been proven to work by actually implementing it so in some sense the above is a correct statement However there is an implication here that RenderMan is some in house methodology that Pixar is trying to foist off on the rest of the industry That is definitely untrue Pat Hanrahan and Tom Porter spent about six months talking to other companies in the industry trying to establish a consensus and ensure that the standard is technically sound The best evidence I have of how much it changed as a result is the amount of work I had to put into changing my book between Versions 2 and 3 of the spec As for the standard being specific to some particular hardware or software configuration you just have to look at the standard itself From the geometric standpoint it is a simple protocol for describing scenes as generic as can be and deliberately so It is essentially a superset of PHIGS with two differences there is no provision for changing model descriptions once defined you have to respecify scenes from one frame to another and there are extensions for realism like the shading language motion blur and depth of field The hardware specificity is a canard pure and simple The current incomplete version of our software runs on Sun Silicon Graphics and 386 based Compaq machines as well as on Transputer based hardware accelerators in all three More specifically I can tell you that Pat went to a lot of trouble to make the interface standard independent of even the basic rendering algorithm That is RenderMan is consistent with scanline based methods as well as ray tracing standard shading models as well as radiosity techniques That wasn t easy More importantly PIXAR already has the software written for this standard so if this becomes a standard any competitor of PIXAR would have to make the investment to write this software a good way to limit your competition Sorry I m working closely with the software group in trying to generate pictures and example programs for my book and I can testify that the software while quite far along is not already written largely because of extensions to the standard that came out of discussions with other companies True enough we probably have a head start on others but the standard has been out there for five months now and will probably have been around for close to a year before Pixar has its stuff on the market Besides the standard specifies nine capabilities which are optional for any particular implementation No renderer should have any trouble meeting the RenderMan standard if it supports PHIGS primitives and performs such quality calculations as anti aliasing and gamma correction PIXAR made a big push for Renderman at Siggraph 88 Although a few companies agreed to endorse this package SUN of course they d endorse anything to get their name in lights many took a more intelligent approach and said that they would evaluate it PIXAR basically used a lot of marketing hype to get support initially and even listed supporters who when you would walk up to their booth at Siggraph and ask them said they did not support it This comment is borderline offensive to me partly because it is admittedly based on speculation and partly because I was around during the process I mentioned above and I know what a painful and elaborate job Pat had to get the proposal into shape to win the support of the companies he did There is a difference between endorsement and support Endorsement means we have evaluated this it is sound and we believe this is the way the industry should go Support means we have hardware and or software which implements this standard You would expect the latter to be a subset of the former Nineteen companies endorsed the RenderMan standard at rollout The main holdouts at this point are Silicon Graphics and Wavefront My personal suspicion not to be taken as the views of Pixar is that Wavefront perceives RenderMan as a threat to their rendering market because it supports features which would be difficult or impossible to implement using their rendering algorithm And Wavefront software runs on SGI machines Many most of the companies who looked at Renderman have decided that it still needs a lot of work before it can be considered as even a base to start the development of a standard in the rendering imaging arena Who are these many companies What is this lot of work We would love to hear about There is a RenderMan Advisory Council made up of industry representatives whose job it is to hear complaints like that I don t expect to hear too many of them however As I said before RenderMan is basically a simple minded extension of PHIGS read EXTENSION Meaning If PHIGS is good enough for you so should be RenderMan adding constructs for supporting realistic graphics It has gone through the mill of two major rewrites as a result of consultations with many companies There are several problems in the area of getting Renderman to mesh with other current standard graphics environments eg phigs cgi so that it becomes a natural extension to the less interesting fancy graphics people do today What are these problems Can you be more specific Even for the niche market of image rendering Renderman does not include many any ideas from the companies that have been in this business for years Wavefront Alias Research Neo Visuals Disney etc What are these ideas Come to think of it what ideas has Disney contributed to image rendering Keith Fish PS I m not cutting down PIXAR I think that the work they do is fantastic literally I just don t like marketing ploys to degrade what should be good technology and this is what the Renderman hype seems to be I appreciate your appreciation but I wish I knew where these impressions of yours came from I think that the industry can develop a good imaging interface standard if everyone animation software companies universities graphics hardware companies etc gets to contribute Again I thought that s exactly what we did If anyone on the net is interested in more information on RenderMan without investing 15 in a spec the current issue of Unix Review includes an article I wrote discussing the major aspects of the standard Also the November issue of Dr Dobb s Journal has a cover story on the shading language which is RenderMan s doorway for extensibility Steve Upstill back to contents Free On Line Computer Graphics References by Eugene Miya incidentally the latest version of the Ray Tracing Bibliography by Paul Heckbert and updated by myself is available from Mark Vandewettering s anonymous ftp site drizzle cs uoregon edu EAH From eugene eos UUCP Eugene Miya Subject A little announcement part 1 of 3 Organization NASA Ames Research Center Calif from USENET For a long time now a lot of people have been asking simple information queries in places like comp graphics This resulted in the inevitable repeating of topics flood of inane news messages many of which are wrong and a repeating cycle which bring disillusionment Computer graphics unlike a lot of disciplines has an overseer of the literature If you open up an ACM SIGGRAPH proceedings you will notice a reference to References to Baldev Singh currently at MCC Baldev has has published significant references in the Computer Graphics Quarterly for a couple of years and is preparing for another shortly These bibliographies A Baldev Singh T Computer Grap hics Literature for 1986 A Bibliography J Computer Graphics V 21 N 3 D June 1987 P 189 208 and A Baldev Singh A Gunther Schrack T Computer Grap hics Literature for 1985 A Bibliography J Computer Graphics V 20 N 3 D July 1986 P 85 145 Coverage in the field for graphics is quite good I know I am trying to maintain a comprehensive study of another field see postings in comp arch or comp parallel The problem is searching for literature on a paper database is difficult I won t get into details take my word Frequently entries are also wrong not as bad as the net however A machine readable form however solves many of these problems You can update a machine readable form The problem becomes then of distribution and search surprise something computers are good for It is with this back ground that we in the Bay Area Association for Computing Machinery s Special Interest Group on Computer Graphics announce the availability of Singh s ACM SIGGRAPH bibliography in a machine readable form While Baldev will oversee the collection and quality of entries we with a generous donation of cycles and disk space from the Digital Equipment Corporation DEC will help oversee the redistribution of the computer graphics bibliography This first article will describe how hosts on the Internet can retrieve the computer graphics bibliography Two other optional means for those not on the Internet will be presented over the next two days but clearly Internet is the superior way to do this THERE ARE TWO DANGERS inherent in all of these means The bibliography is kind of big It s not a megabyte but it s getting there IF YOU ARE at an Internet site with lots of users it s kind of dumb if you ALL made personal copies n megabytes So before you copy agree who at your site will oversee obtaining it One copy per site please The second danger is everybody copying at the same time The information which follows will illustrate the problem The DEC host which you be copying from is DEC s gateway to the Internet It will be a tragedy to abuse this gateway if every site tried to copy at once I know we provide the 9600 baud IMP port to DEC So let s not abuse this let s be patient and take our turns 1 copy the computer graphics bibliography only during the weekends or evenings Pacific Daylight or Standard time 2 copy on a randomly determined evening of the week How Flip a coin 3 times say HTH make Head 0 Tails 1 this translates to 010 binary or 2 base 10 Using Sunday as 1 make Monday 2 copy Monday evening P SD T HHH or 000 retry If this is confusing wait for the weekend AGAIN copy only in the evenings Now the questions you have all been patiently waiting for and I have been rambling where do I get and how do I get it The Internet host is the machine gatekeeper dec com 128 45 9 52 Please respect this machine hacker ethic for the assistance DEC is providing We don t wish to yank the bibliography from this machine Don t try to break in please Old time ARPAnet hackers will know where to go from here The how is a process called anonymous FTP File Transfer Protocol or Program hasn t changed since 1973 Don t all do this at once Below is a sample session with annotation as to how this works Catch the names of the subdirectories and files below A lot of people aren t familiar with distributed systems other than Email so we ve made the language oversimplistic if you have problems consult your local network guru Note the bibliographies exist in a data compressed binary form Use the Unix uncompress 1 command to decode them Not on a Unix system Tough for the time being Try to find one The further format of individual entries is Unix refer format a sample see the two references above This is how Singh has them and also how my bibliography is stored Refer has lots of advantages over other systems free format widely available on Unix systems uses a minimum of space ASCII fully machine and human readable it separates the binary data from the text fairly easy to learn easily converted to other formats like bib TeX Scribe etc Start script eos ftp gatekeeper dec com issue this command after some time you get Connected to gatekeeper dec com 220 gatekeeper dec com FTP server Version 4 28 Name gatekeeper dec com anonymous use this name 331 Guest login ok send ident as password Password does not echo I typed guest doesn t matter 230 Guest login ok access restrictions apply ftp cd pub graf bib change directory to pub graf bib 200 CWD command okay ftp binary very important you are getting compressed binary files 200 Type set to I ftp ls optional just to should you what you are getting dir is okay too 200 PORT command okay 150 Opening data connection for bin ls 128 102 21 2 1118 0 bytes bib85 Z bib86 Z 226 Transfer complete those two filenames are what you want 18 bytes received in 0 2 seconds 0 09 Kbytes s ftp mget asks for all star files mget bib85 Z mget bib86 Z you type y or n if you want them NOTE THIS WILL TAKE SOME TIME ftp quit done 221 Goodbye eos Now you can uncompress bib85 Z etc end script If you don t have a network guru send mail to siggraph not the poster of this note below Illiterates will type reply or follow up to news Sorry I m very tired of this That s why I m doing this Big thanks are due to Brian Reid and Jamie Painter at DEC for this work Rick Beach okay ed ACM copyrights This is not for profit Please ACK the above people and organizations in particular Baldev when citing As I hope you can tell we are really trying to advance the state of the art in computer graphics This should benefit experts as well as students alike It also shows the use of technologies other than graphics to our graphics benefit Subject A little announcement part 2 of 3 I described the advantages of searching and reformatting I described anonymous FTP This is the way to go if you are a major Internet site like most universities The problem is what about more casual users poor people with small disks Well the files reside of DEC s disk Just LEAVE THEM THERE Let Bay Area ACM SIGGRAPH and Singh maintain them Then how do you access it By electronic mail A similar system exists at the Argonne National Labs and AT T Bell Labs netlib numerical software distribution CACM ref if you need it A similar set up for benchmarks exists at the NBS See latest IEEE Computer Why not do this for graphics references With a generous donation of cycles and disk space from the Digital Equipment Corporation DEC and some software from CSIL at Stanford we have done just this THERE ARE TWO DANGERS inherent The bibliography is kind of big The second danger is everybody copying at the same time The DEC host which you be copying from is DEC s gateway to the Internet It will be a tragedy to abuse this gateway if every site tried to copy at once So let s not abuse this let s be patient and take our turns 1 retrieve references only during the weekends or evenings Pacific Daylight or Standard time 2 copy on a randomly determined evening of the week How Flip a coin 3 times say THT make Head 0 Tails 1 this translates to 101 binary or 5 base 10 Using Sunday as 1 make Thursday 5 copy Thursday evening P SD T HHH or 000 retry If this is confusing wait for the weekend AGAIN copy only in the evenings Where okay here goes the dangerous information send mail to graf bib server decwrl dec com This can also be your favorite UUCP path decwrl graf bib server or if you work for DEC and have ENET access DECWRL graf bib server Your mailer should ask for a Subject field This is important If your mailer doesn t and lots don t ask your system folk about mailrc file or mh profiles or how to invoke this field Because you should place the keywords in that subject field One special keyword is help You get a short little description Make the first alphanumeric don t give years Additional keywords are conjective and s causing a smaller and smaller search The contents aren t perfect but give us time Your mail is answered by the server daemon It searches and tries to find relevant cited keywords up to 6 significant first characters Choose carefully Don t ask for all references with computer graphics Hope you understand why Just try help as your first keyword unless you know what you are looking for The information comes back in the aforementioned yesterday refer format If you don t have a network guru send mail to siggraph not the poster of this note below Illiterates will type reply or follow up to news Sorry I m very tired of this That s why I m doing this Big thanks are due to Brian Reid and Jamie Painter at DEC for this work Rick Beach okay ed ACM copyrights This is not for profit Please ACK the above people and organizations in particular Baldev when citing As I hope you can tell we are really trying to advance the state of the art in computer graphics This should benefit experts as well as students alike It also shows the use of technologies other than graphics to our graphics benefit Our last note will concern one more way of getting references just asking for a floppy low tech We in the Bay Area ACM SIGGRAPH local group will be adding to these Reference contributions and corrections are welcome It s only possible if we work together to see this through From eugene eos UUCP Eugene Miya Subject Re bib notation question In article 3384 pt cs cmu edu pkh vap vi ri cmu edu Ping Kang Hsiung writes I got Eugene Miya s bib files over the weekend There are some notations used in the files that I don t understand 1 Some em or em in the J field What these mean and why they don t have the closing 2 In the key field there are some numbers K I3m educational computing K I3m mechanical engineering computing K I35 modeling systems How do I interpret use these I3m I35 numbers 3 Some acronyms CGF CAMP ISATA They are not defined in the files Oops Sorry I got other mail on this I forgot all about them The BACKSLASH macros are troff isms There are tools like deroff to take them out or r2bib to convert things into bibTeX These macros are 4 characters in size em is a slightly longer dash They aren t a significant problem write sed filter The I fields are ACM Classification codes You can either get them from ACM Computing Reviews blue and white things that most don t get or you can get the hardcopy versions of these bibliographies they have the CR classification scheme for graphics The acronyms are unfortunately a long term problems We can get a table to use use U AZ s bib program to fill them out I hope you are all finding some use of this stuff We NEED people around the country to help us update this There are earlier years Also new papers are being written all the time They have to get entered even finding them is hard I don t deserve the credit I m only pissed off that I have to read queries over and over The credit belongs to the crew of Bay Area ACM SIGGRAPH working on this project other volunteers are welcome especially key entry help Another gross generalization from eugene miya NASA Ames Research Center eugene aurora arc nasa gov ex Lame duck Prez Bay Area ACM SIGGRAPH resident cynic at the Rock of Ages Home for Retired Hackers Mailers HA If my mail does not reach you please accept my apology uunet hplabs ncar decwrl allegra tektronix ames aurora eugene Send mail avoid follow ups If enough I ll summarize back to contents Latest Mailing List Short Form by Eric Haines Here is the short form of the present mailing list showing just email paths from an ARPA node If you want the full list which includes additional info and snail mail addresses drop me a note Eric Haines alias jim arvo apollo arvo eddie mit edu alias al barr barr csvax caltech edu alias brian barsky barsky miro berkeley edu alias daniel bass daniel apollo com alias rod bogart bogart gr cs utah edu alias wim bronsvoort dutrun wim mcvax cwi nl alias at campbell atc cs utexas EDU alias john chapman fornax sfu cmpt chapman cornell uucp alias chuan chee ckchee dgp toronto edu alias michael cohen m cohen cs utah edu alias jim ferwerda jaf squid tn cornell edu alias fred fisher FISHER 3D dec decwrl dec com alias john francis apollo johnf eddie mit edu alias phil getto phil yy cicg rpi edu alias andrew glassner glassner xerox com alias jeff goldsmith jeff hamlet caltech edu alias chuck grant grant icdc llnl gov alias paul haeberli sgi paul pyramid pyramid com alias eric haines hpfcla hpfcrs eye erich hplabs HP COM alias roy hall roy wisdom tn cornell edu alias pat hanrahan pixar pat ucbvax berkeley edu alias paul heckbert ph miro berkeley edu alias michael hohmeyer hohmeyer miro berkeley edu alias jeff hultquist hultquis prandtl nas nasa gov alias erik jansen dutio fwj mcvax cwi nl alias ken joy joy ucdavis edu alias mike kaplan dana mrk hplabs hp com alias tim kay tim csvax caltech edu alias dave kirk dk csvax caltech edu alias roman kuchkuda megatek kuchkuda ucsd ucsd edu alias george kyriazis kyriazis turing cs rpi edu alias david lister lister dg rtp dg com alias pete litwinowicz litwinow apple com alias gray lorig gray rhea CRAY COM uc msc umn edu alias wayne lytle wtl cockle tn cornell edu alias tom malley esunix tmalley cs utah edu alias don marsh dmarsh apple apple com alias michael natkin mjn cs brown edu alias tim oconnor toc wisdom tn cornell edu alias masataka ohta mohta titcce cc titech junet utokyo relay csnet RELAY CS NET alias tom palmer palmer ncifcrf gov alias darwyn peachey pixar peachey ucbvax berkeley edu alias john peterson jp apple apple com alias frits post dutrun frits mcvax cwi nl alias pierre poulin poulin dgp toronto edu alias thierry priol inria irisa priol mcvax cwi nl alias panu rekola pre cs hut fi alias david rogers dfr cad usna mil alias linda roy lroy sgi com alias cary scofield apollo scofield eddie mit edu alias pete segal pls pixels research att com alias scott senften apctrc bigmac senften cornell uucp alias cliff shaffer shaffer vtopus cs vt edu alias susan spach spach hplabs hp com alias rick speer speer ucbvax berkeley edu alias stephen spencer spencer tut cis ohio state edu alias steve stepoway stepoway smu edu alias mike stevens apctrc zfms0a cornell uucp alias paul strauss pss cs brown edu alias kr subramanian subramn cs utexas edu alias kelvin thompson kelvin cs utexas edu alias russ tuck tuck cs unc edu alias greg turk turk cs unc edu alias ben trumbore wbt cockle tn cornell edu alias mark vandewettering markv cs uoregon edu alias jack van wijk ecn jack mcvax cwi nl alias greg ward gjward lbl gov alias bob webber webber aramis rutgers edu alias lee westover westover cs unc edu alias andrew woo andreww dgp toronto edu back to contents Eric Haines erich acm org Ray Tracing News Volume 1 Number 11 Ray Tracing News Volume 1 Number 11 Ray Tracing News Volume 1 Number 11 Ray Tracing News Volume 1 Number 11 Ray Tracing News Volume 1 Number 11 Ray Tracing News Volume 1 Number 11 Ray Tracing News Volume 1 Number 11 Ray Tracing News Volume 1 Number 11 Ray Tracing News Volume 1 Number 11 Ray Tracing News Volume 1 Number 11 http www acm org tog resources RTNews html rtnews5b html http www acm org tog resources RTNews html rtnews5b html http www acm org tog resources RTNews html rtnews5b html http www acm org tog resources RTNews html rtnews5b html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews6a.html%%==%%Ray Tracing News, Volume 2, Number 1%%==%%Ray Tracing News "Light Makes Right" January 6, 1989 Volume 2, Number 1 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%46074%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right January 6 1989 Volume 2 Number 1 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1988 1989 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction by Eric Haines New Members by David Jevans Subrata Dasgupta Darwin Thielman Steven Stadnicki Mark Reichert Multiprocessor Visualization of Parametric Surfaces by Markku Tamminen comments from many others Miscellany by K R Subramanian David F Rogers Steven Stadnicki Joe Smith Mark Reichert Tracey Bernath Supersampling Discussion by David Jevans Alan Paeth Andrew Woo Loren Carpenter Distributed Ray Tracer Available by George Kyriazis Ray Tracing Program for 3b1 by Sid Grange Map Archive by Gary L Crum Index of Back Issues by Eric Haines Introduction Well this has been a busy time around here First of all note my change of address it s in the header We ve moved to a larger building with much better environmental controls i e we don t have to cool the machines in the winter by opening the windows In the meantime I ve been trying to actually finish a product and maybe even make some money from it There s also those SIGGRAPH deadlines on January 10th Busy times so excuse the long delay in getting this issue out The other great struggle has been to try to get my new Cornell account to talk with the outside world DEC s EUNICE operating system has foiled me so far so this issue is being distributed by Michael Cohen who s now at the University of Utah Many thanks Michael Due to the length between issues my cullings from USENET have accumulated into an enormous amount of material As such the condensed version of these will be split between this and the next issue This issue contains what I felt was the best of the supersampling discussion If this material is old hat please write and tell us of your experiences with supersampling what algorithm do you use are you satisfied with it what kind of filtering is used and what are your subdivision criteria This issue is the first one that has a Volume X Number Y in the header This has been added partly for ease of reference but also more importantly for avoiding dropouts If you get Number 1 then Number 3 you know you ve missed something probably due to email failure At the end of this issue is a list of all the past issues If you are missing any please write and I ll send them on back to contents New Members From David Jevans jevans cpsc UCalgary CA I can be reached at the U of Calgary I work days at Jade Simulations International ph 403 282 5711 My interests in ray tracing are in multi process networks of SUNS BBN Butterfly and Transputers ray tracing space subdivision and ray tracing functionally defined iso surfaces I am working on optimistic multi processor ray tracing and combining adaptive and voxel spatial subdivision techniques I have implemented a parallel ray tracer on the University of Calgary s BBN Butterfly My ray tracers handle a variety of object types including polygons spline surfaces and functionally defined iso surfaces My latest projects are using TimeWarp to speed up multi processor ray tracing adding a texture language frame coherence for ray tracing animation and developing the ray tracing answer to radiosity David Jevans U of Calgary Computer Science Calgary AB T2N 1N4 Canada uucp ubc cs utai alberta calgary jevans Subrata Dasgupta raycasting of free form surfaces surface representations Duke University Dept of Computer Science Durham NC 27706 919 684 5110 alias subrata dasgupta sdg cs duke edu I am relatively new the field of ray tracing I am involved in the design of a raycasting system based on the original design by Gershon Kedem and John Ellis Proc 1984 Int l conference on Computer Design The original design uses Constructive Solid Geometry for building up a complex object out of simple primitives like cones cylinders and spheres The main drawback of such a system is that representing an object with cubic or higher order surfaces require numerous quadratic primitives and even then is at best an approximation to the original surface The raycasting machine uses an array of parallel rays and intersects them with primitives The applications of such a machine are potentially large like modeling surfaces for NC machines calculating volume and moment of inertia finding fast surface intersections to name just a few At present there are 2 working models of the raycasting machine one of which is in the Dept of Mechanical Engg at Cornell The other one is our experimental m c which is located at the U of N Carolina at Chapel Hill The operative word in this sentence is located Although my input may not be very frequent at the beginning I will be an avid reader of the raycasting news Thanks for inviting me in From Darwin G Thielman thielman cs duke edu Subject Duke ray casting group Darwin Thielman Writing software to control the raycasting machine at Duke Duke University Computer Science Dept Durham NC 27706 919 684 3048 x246 alias darwin thielman thielman duke cs duke edu At Duke we have designed a system that does ray casting on many primitives in parallel This is achieved with 2 types of processors a primitive classifier PC and a combine classifier CC The PC s solve systems of quadratic equations and the CC s combine these results I am the system software person I am writing micro code for an Adage 3000 machine The micro code is responsible for controlling the ray casting board and creating images from the output of the board In addition the following people also work on the ray casting system at Duke Gershon Kedem John Ellis Subrata Dasgupta Jack Briner Ricardo Pantazis Sanjay Vishin Also at UNC Chapel Hill there is a eng who is working on the hardware design of the system he is Tom Lyerly Since I do not want to attempt to explain what each one of these people is doing with the possibility of getting it wrong I will not try All of the above people will have access to the RTN and if any of them are interested they may respond Also If anyone want to get a hold of any of them just send me a message and I will forward it to the proper person We also have one of our boards at Cornell there is a group there that is working on solid modeling and hopes to use our hardware If you want you can contact Rich Marisa 607 255 7636 for more information on what they are doing His mail address is marisa oak cadif cornell edu Also I have talked to him and if you want to see a demo of our system he would be glad to show it to you If you have any questions or comments please feel free to contact me Darwin Thielman From Steven Stadnicki stadnism clutx clarkson edu Steven Stadnicki shadowing from reflected light sources tracing atomic orbitals massively parallel ray tracing 212 Reynolds Dormitory Clarkson University Potsdam NY 13676 315 268 4079 stadnism clutx clarkson edu Right now I m working on writing a simple ray tracer to implement my reflected shadowing model see the E mail version of RTNews Nov 4 and then I ll be trying a few texture models Texture mapping on to atoms the marble P orbital From hpfcla sunrock kodak supra reichert Sun COM Mark Reichert x25948 Subject RT News intro Mark Reichert diffuse interreflections Work Eastman Kodak Company Advanced Systems Group Building 69 Rochester NY 14650 716 722 5948 Home 45 Clay Ave Rochester NY 14613 716 647 6025 I am currently interested in global illumination simulation using ray tracing with auxiliary data structures for holding illuminance values I am also interested in ray tracing from the lights into the environment maybe just a few bounces then storing illuminance as above What I would really like is a ray tracer or whatever that would do a nice job of modeling triangular glass prisms alias mark reichert hpfcrs hpfcla hplabs sun sunrock kodak supra reichert back to contents Multiprocessor Visualization of Parametric Surfaces From Markku Tamminen I obtained the Ray Tracing News from Panu Rekola and sent the message below to some people on your distribution list interested in related matters I have done research in geometric data structures and algorithms in 1981 84 A practical result was the EXCELL spatial index like an octree with binary subdivision together with a directory allowing access by address computation My present interests are described below Charles Woodward has developed a new and efficient method for ray tracing parametric surfaces using subdivision for finding the ray patch intersection I am putting together a project proposal with the abstract below I would be interested in obtaining references to any new work you have done in ray tracing and hardware and later in an exchange of ideas I will send an acknowledgement to any message I get so if you don t see one something has gone wrong Email has often been very unreliable Looking forward to hearing something from you Markku Tamminen Helsinki University of Technology Laboratory of Information Processing Science 02150 ESPOO 15 FINLAND Tel 358 0 4513248 messages 4513229 home 710317 Telex 125161 HTKK SF Telefax 358 0 465077 ARPANET mit hutcs uucp fingate bitnet cunyvm cuny edu INTERNET mit hutcs hut fi BITNET mit hutcs uucp fingate UUCP mcvax hutcs mit Multiprocessor visualization of parametric surfaces Project proposal Markku Tamminen mit hutcs hut fi Charles Woodward cwd hutcs hut fi Helsinki University of Technology Laboratory of Information Processing Science Otakaari 1 A SF 02150 Espoo Finland ABSTRACT The proposed research aims at an efficient system architecture and improved algorithms for realistic visualization of complex scenes described by parametric surfaces The key components of such a system are a spatial index and a surface patch intersector For both very efficient uniproces sor solutions have been developed by the authors at the Hel sinki University of Technology However to obtain sufficient speed at least the latter should be based on a specialized ar chitecture We propose obtaining a balanced complete system by gradually as cending what we call a specialization hierarchy At its bottom are solutions based on multiprocessors or networks of independent computing units transputers In this case an important research problem is how to avoid duplicating the data base in the proses sors At the top of the hierarchy are specialized processors im plemented in VLSI The research will produce general insight into the possibilities of utilizing concurrency and specialized processors in geometric search and computation PREVIOUS WORK M Mantyla and M Tamminen Localized Set Operations for Solid Modeling Computer Graphics vol 17 no 3 pp 279 289 1983 M Tamminen The EXCELL Method for Efficient Geometric Access to Data Acta Polytechnica Scandinavica Ma 34 1981 Markku Tamminen Olli Karonen and Martti Mantyla Ray Casting and Block Model Conversion Using a Spatial Index Computer Aided Design vol 16 pp 203 208 1984 C Woodward Skinning Techniques for Interactive B Spline Surface Interpolation Computer Aided Design vol 20 no 8 pp 441 451 1988 C Woodward Ray Tracing Parametric Surfaces By Subdivision in Viewing Plane to Appear in Proc Theory and Practice of Geometric Modelling ed W Strasser Springer Verlag 1989 a later message from Markku Tamminen I thought I d send this summary of responses as feedback because some answers may not have found their way through the network I think mit hutcs hut fi might be the safest address to use for me Our project has not yet started I have just applied for funding with the proposal whose abstract I sent to you Also I am a software person but hope to get somebody hardware oriented involved in the project We will be using transputers to start with but so far I have just made some small experiments with them Our ray patch intersection method is based on subdivision It is a new method developed by Charles Woodward and quite a bit more efficient than Whitted s original one However it takes 3 ms for a complete ray patch intersection on a SUN4 Thus we d like to develop a specialized processor for this task the algorithm is well suited for that Our spatial index is EXCELL which I originally published in 1981 and whose 3D application was described in SIGGRAPH 83 by Martti Mantyla and me I have lately tuned it quite a bit for ray tracing and we are very satisfied with its performance EXCELL uses octree like but binary subdivision It has a directory which is an array providing direct access by address computation and a data part which corresponds to the leaf cells of an octree Binary subdivision leads to fewer leaf cells than 8 way There is an overflow criterion that decides when subdivision will be discontinued We have obtained best results when we store in the spatial index for each patch the bounding box of its control points and further cut it with a slab defined by two planes parallel to a mean normal of the patch Using this method we have to perform on the average less than 2 complete patch ray intersection tests Our method has not been as efficient as that of subdividing the patches to all the way to triangles However as much less storage is required we consider our technique more suited for distributed architectures In the proposed project we want to look both into developing a specialized co processor for the ray patch intersection task and into distributing the whole computation on several processors I think that the most difficult research problem is the partitioning of the data base in a loosely coupled system In our case the ray patch intersection task is so time consuming that it would help to begin with to keep the ray database traversal on the workstation and jost distribute the intersection task to other processors Some questions Does anybody know of HW work in the ray patch intersection area e g as a continuation of Pulleyblank Kapenga s article in CG A Does anybody know of somebody working with transputers in ray tracing We do know of the INMOS ray tracing demo How enthusiastic are you about the approach of using digital signal processors What other off the shelf processors would be specially suited as a basis for a ray tracing coprocessor What would be the specific computation to offload to a coprocessor I don t know what more to write now about our project Below is a short summary of the responses I got From kyriazis yy cicg rpi edu George Kyriazis Works with pixel machine and will transport RPI s ray tracer to it Main problem duplication of code and data From jeff CitIago Bitnet Jeff Goldsmith Has implemented ray tracer with distributed database on hypercube Communication between parts of database by RPC With 128 processors 50 utilization Ref 3rd Hypercube Concurrent Computation Proc A proposal to build custom silicon for intersection testing In this case the rest of the system could reside on a ordinary PC or workstation From gray rhea cray com Gray Lorig Your abstract sounds interesting From Frederik Jansen JANSEN ibm com Mike Henderson at Yorktown Heights is working on ray patch intersection problem software approach From Mark VandeWettering markv drizzle cs uoregon edu As to HW implementation my advice is NOT to take the path that I took but to implement one simple primitive a bilinear interpolated triangular patch Take a look at AT T s 12 DSP chip raytracing board Would like to experiment with implementing an accelerator based on Motorola DSP56001 From tim ducat caltech edu Hamlet Bitnet Tim Kay I am interested how fast a single general purpose processor can raytrace when it is assisted by a raytracing coprocessor of some sort there seems to be tremendous potential for adding a small amount of raytracing HW to graphics work stations I am quite capable of ray tracing over our TCP IP network From priol tokaido irisa fr I work on ray tracing on a MIMD computer like the Hypercube Partitions scene boundary as suggested by Cleary To do it well sub samples image before parallel execution With 30 40 processors 50 efficiency Part of work published in Eurographics 88 From toc wisdom TN CORNELL EDU Timothy F O Connor Abstract sounds interesting My main interest is in radiosity approach From Russ Tuck tuck cs unc edu My work is summarized in hardcopy RTnews vol 2 no 2 June 88 Interactive SIMD Ray Tracing That s it for now I hope there has been some interest in this multi feedback I ll get more meat of my own in the messages when our new work starts Thanks to you all Markku back to contents Miscellany From hpfcla subramn cs utexas edu Subject Ray Tracing articles I would like you to bring this to the attention of the RT news group if you consider it appropriate There are lots of conference proceedings and journals other than SIGGRAPH CG A which contain ray tracing articles At least here at our university we don t get all those journals for example the Visual Computer due to budget constraints It would be nice for someone to post relevant articles on ray tracing so that all of us will be aware of the work going on in ray tracing every where For instance I have found several articles in the Visual Computer that were relevant to what I was doing after being pointed at by someone else If these can be listed by someone who gets these journals then it would make it easier to get access to these articles K R Subramanian Dept of Computer Sciences The University of Texas at Austin Austin Tx 78712 subramn cs utexas edu uunet cs utexas edu subramn My two cents we don t get Visual Computer around here either I ve been helping to keep Paul Heckbert s Ray Tracing Bibliography up to date and would like to obtain relevant references preferably in REFER format for next year s copy for use in SIGGRAPH course notes See SIGGRAPH 88 notes from the Introduction to Ray Tracing course for the current version to see the state of our reference list Eric From David F Rogers dfr USNA MIL Subject Transforming normals Was skimming the back issues of the RT News and your memo on transforming normals caught my eye Another way of looking at the problem is to recall that a polygonal volume is made up of planes that divide space into two parts The columns of the volume matrix are formed from the coefficients of the plane equations Transforming a volume matrix requires that you premultiply by the inverse of the manipulation matrix The components of a normal are the first three coefficients of the plane equation Hence the same idea should apply see PECG Sec 4 3 on Robert s algorithm pp 211 213 Surprising what you can learn from Roberts algorithm yet most people discount it From stadnism clutx clarkson edu Steven Stadnicki 212 Reynolds 2684079 5186432664 Subject Some new thoughts on how to do caustics mirrored reflection etc source comp graphics Here s a new idea I came up with to do caustics etc by ray tracing from your point on some surface shoot out some number say 100 in random directions I would probably use a jittered uniform distribution on the sphere For each light source keep track of all rays that come within some distance some angle from the light source Then for each of these rays try getting closer to the light source using some sort of Newton type iteration method for example to do mirrored reflection o Light source M O i b r j r e o c r t X From point X shoot out rays in the 100 random directions mentioned above say one of them comes within 0 05 radians of the light source Do some sort of update procedure on the ray to see if it keeps getting closer to the light source if it does then you have a solution to the mirrored reflection problem and you can shade X properly This procedure will work for curved mirrors as well as planar ones unlike the previous idea I mentioned and will also handle caustics well It seems obvious to me that there will be bad cases for the method and it is certainly computationally expensive but it looks like a useful method Any comments Steven Stadnicki Clarkson University stadnism clutx clarkson edu stadnism clutx bitnet From jms antares UUCP joe smith Organization Tymnet QSATS San Jose CA Subject Re Ray Tracing Novice Needs Your Help source comp graphics In article 2399 ssc vax UUCP dmg ssc vax UUCP David Geary writes What I d really like is to have the source in C to a simple ray tracer one that I could port to my Amiga without too much difficulty David Geary Boeing Aerospace My standard answer to this question when it comes up is to locate the May June 1987 issue of Amiga World It s the one that has the ray traced robot juggler on the cover The article Graphic Scene Simulations is a great overview of the subject and it includes the program listing in C Well most of the program Details such as inputting the coordinates of all the objects are omitted From hpfcla sunrock kodak supra reichert Sun COM Mark Reichert x25948 Subject A call for vectors Imagine a unit sphere centered at the origin Imagine a vector the reference vector from the origin to any point on the surface of this sphere I would like to create n vectors which will evenly sample the surface of our sphere within some given angle about that reference vector I need to be able to jitter these vectors in such a way that no two vectors in a given bunch could be the same This appears to be a job for spherical coordinates but I can t seem to find a formula that can treat the surface of a sphere as a uniform 2D surface ie no bunching up at the poles I desire these vectors for generating soft shadows from spherical light sources and for diffuse illumination guessing I have something now which is empirical and slow neither of which trait I find very desirable I will have a need for these vectors often and seldom will either the angle or the number of vectors needed be the same across consecutive requests Can anyone help me From hoops watsnew waterloo edu HOOPS Workshop Subject Needing Ray Tracing Research Topic source comp graphics As a System Design Engineeering undergrad at University of Waterloo I am responsible for preparing a workshop paper each term I am fascinated with ray tracing graphics but what I really need is a good application that I can work into a workable research topic that can be completed in 1 or 2 terms If anyone in netland can offer any information on an implementation of ray tracing graphics for my workshop please email me Thanks in advance folks Tracey Bernath System Design Engineering University of Waterloo Waterloo Ontario Canada hoops watsnew uwaterloo ca Bitnet hoops water bitnet CSNet hoops watsnew waterloo edu uucp utai uunet watmath watsnew hoops back to contents Supersampling Discussion A flurry of activity arose when someone asked about doing supersampling in a ray tracer Below are some of the more interesting and useful replies Eric From jevans cpsc ucalgary ca David Jevans source comp graphics Summary blech In article 5548 thorin cs unc edu brown tyler cs unc edu Lurch writes In article 5263 cbmvax UUCP steveb cbmvax UUCP Steve Beats writes In article 1351 umbc3 UMD EDU bodarky umbc3 UMD EDU Scott Bodarky writes If you sample the scene using one pixel per ray you will get pretty severe aliasing at high contrast boundaries One trick is to sample at twice the vertical and horizontal resolution yielding 4 rays per pixel and average the resultant intensities This is a pretty effective method of anti aliasing From what I understand the way to achieve 4 rays per pixel is to sample at vertical resolution 1 horizontal resolution 1 and treat each ray as a corner of each pixel and average those values This is super cheap compared to sampling at twice vertical and horizontal Blech Super sampling as suggested in the first article works ok but is very slow and 4 rays pixel is not enough for high quality images Simply rendering vres 1 by hres 1 doesn t gain you anything All you end up doing is blurring the image This is VERY unpleasant and makes an image look out of focus Aliasing is an artifact of regular under sampling Most people adaptively super sample in areas where it is needed edges textures small objects Super sampling in a regular pattern often requires more than 16 rays per anti aliased pixel to get acceptable results A great improvement comes from filtering your rays instead of simply averaging them Even better is to fire super sample rays according to some distribution eg Poisson and then filter them Check SIGGRAPH proceedings from about 84 87 for relevant articles and pointers to articles Changing a ray tracer from simple super sampling to adaptive super sampling can be done in less time than it takes to render an image and will save you HUGE amounts of time in the future Filtering and distributing rays takes more work but the results are good David Jevans U of Calgary Computer Science Calgary AB T2N 1N4 Canada uucp ubc cs utai alberta calgary jevans From awpaeth watcgl waterloo edu Alan Wm Paeth Subject Re raytracing in supersampling speedup source comp graphics In article 5548 thorin cs unc edu brown tyler UUCP Lurch writes From what I understand the way to achieve 4 rays per pixel is to sample at vertical resolution 1 horizontal resolution 1 and treat each ray as a corner of each pixel and average those values This is super cheap compared to sampling at twice vertical and horizontal This reuses rays but since the number of parent rays and number of output pixels match this has to be the same as low pass filtering the output produced by a raytracer which casts the same number of rays one per pixel The technique used by Sweeney in 1984 while here at Waterloo compares the four pixel corner rays and if they are not in close agreement subdivides the pixel The recursion terminates either when the rays from the subpixel s corners are in close agreement or when some max depth is reached The subpixel values are averaged to form the parent pixel intensity though a more general convolution could be used in gathering up the subpieces This approach means that the subpixel averaging takes place adaptively in regions of pixel complexity as opposed to globally filtering the entire output raster which the poster s approach does implicitly The addition can be quite useful For instance a scene of flat shaded polygons renders in virtually the same time as a one ray per pixel implementation with some slight overhead well spent in properly anti aliasing the polygon edges no time is wasted on the solid areas Alan Paeth Computer Graphics Laboratory University of Waterloo From andreww dgp toronto edu Andrew Chung How Woo Subject anti aliasing source comp graphics With all these discussions about anti aliasing for ray tracing I thought I would get into the fun also As suggested by many people adaptive sampling is a good way to start dealing with anti aliasing suggested by Whitted For another quick hack on top of adaptive sampling you can add jitter suggested by Cook The jitter factor can be controlled by the recursive depth of the adaptive sampling This combination tends to achieve decent quality Another method which nobody has mentioned is stratified sampling This is also a rather simple method Basically the pixel is divided into a N size grid You have a random number generator to sample a ray at x y of the grid Then shoot another ray making sure that the row x and column y are discarded from further sampling etc Repeat this for N rays Note however no sharing of point sampling information is available here Andrew Woo From loren pixar UUCP Loren Carpenter Subject Re anti aliasing source comp graphics This is in response to Andrew Woo s article Eric Rob Cook did this too He didn t call it stratified sampling though The idea is suggested by the solutions to the 8 queens problem You want N sample points no 2 of which are in the same column and no 2 of which are in the same row Then you jitter on top of that p s You better not use the same pattern for each pixel Loren Carpenter ucbvax sun pixar loren By the way what kind of adaptive supersampling have people been using We ve had fairly good results with the simple check four corners algorithm and box filtering the values generated We find that for complex scenes an adaptive algorithm which shoots 5 more rays if the subdivision criteria is met shoots about 25 more rays overall a result that Linda Roy also obtained with her ray tracer What the subdivision criteria are affects this of course We ve been using 0 1 as the maximum ratio of R G or B channels of the four pixel corners How have you fared and what kinds of filtering have you tried Eric back to contents Distributed Ray Tracer Available From kyriazis rpics George Kyriazis source comp graphics During the last week I put myself together and managed to pull out a second version of my ray tracer the old one was under the subject Another simple ray tracer available Tis one includes most of the options described in R Cook s paper on Distributed ray tracing Capabilities of the ray tracer are Gloss blurred reflection Translucency blurred refraction Penumbras area light sources Motion Blur Phong illumination model with one light source Spheres and squares Field of view and arbitrary position of the camera The ray tracer has been tested on a SUN 3 and SUN 4 I have it available under anonymous ftp on life pawl rpi edu 128 113 10 2 in the directory pub ray under the name ray 2 0 shar There are some older version there if you want to take a look at them If you can t ftp there send me mail and I ll send you a copy I also have a version for the AT T Pixel Machine for the few that have access to one No speed improvements have been made yet but I hope I will have Goldsmith s algorithm running on it soon I know that my file format is not standard but people can try to write their own routine to read the file It s pretty easy Hope you have fun George Kyriazis kyriazis turing cs rpi edu kyriazis ss0 cicg rpi edu back to contents Ray Tracing Program for 3b1 From sid chinet UUCP Sid Grange Subject v05i046 ray tracing program for 3b1 source comp sources misc Posting number Volume 5 Issue 46 Archive name tracer This was posted to comp sources misc I include some of the documentation so you can get a feel for it Nothing special but it might be fun if you have a 3b1 it s supposed to work on other UNIX systems too Eric NAME tracer run a simple ray tracing procedure DESCRIPTION Tracer is a program developed originally to study how ray tracing works and was later modified to the present state to make it more compatible for animated film production It is capable of depicting a number of balls up to 150 and a plane that is covered with a tiling of any bitmapped picture PROGRAM NOTES This program generates a file containing a header with x and y sizes followed by the data in 8 bit greyscale one pixel to a character in scanlines There are two necessary input files ball data and a pattern bitmap The tiling bitmap can be digitized data it must be in the form of scan lines no longer than 512 bytes followed by newlines back to contents Map Archive From crum lipari usc edu Gary L Crum Subject DB ADD SITE panarea usc edu Internet archive for maps source comp archive and ftp An Internet archive for maps of geographic scale maps has been set up starting with data from the United States Geological Survey USGS National Cartographic Information Center NCIC specifically a map of terrain in USGS Digital Elevation Model DEM format The archive is on host panarea usc edu 128 125 3 54 in anonymous FTP directory pub map Gary Crum crum cse usc edu is maintainer The pub map directory is writable by anonymous ftp Approximately 50M bytes are available for the map archive as of this writing NOTES Files ending in the Z extension have been compressed with the compress program available on comp sources archives such as j cc purdue edu They should be transferred using the binary mode of ftp to UNIX systems Send mail to the maintainer to request format changes e g to uuencoded form split into small pieces Some maps e g DEM files from USGS contain long lines which have been observed to cause problems transferring with some FTP implementations In particular a version of the CMU TCP IP package for VAX VMS did not support these long lines Source code for UNIX tools that manipulate ANSI labeled tapes and VMS tapes is available as pub ansitape tar Z on the map archive host Index for Map Archive on Internet Host panarea usc edu 128 125 3 54 version of Mon Nov 14 09 41 10 PST 1988 NOTE This INDEX is descriptive to only the directory level in many cases rw r r 1 crum 1090600 May 26 09 33 dem MAP N0009338 rw r r 1 crum 278140 Nov 11 14 16 dem MAP N0009338 Z Digital Elevation Model 7 5 minute quad see dem README Ft Douglas quadrangle including part of Salt Lake City UT Southeast corner has coordinates 40 75 N 111 75 W drwxrwxrwx 2 crum 512 Nov 1 19 23 terrain old format MAP 37N112W drwxrwxrwx 2 crum 512 Nov 1 19 23 terrain old format MAP 37N119W drwxrwxrwx 2 crum 512 Nov 1 19 24 terrain old format MAP 38N119W USGS NCIC terrain maps in old format before DEM was introduced Files in these directories ending in extensions a s should be concatenated together after transfer rw rw rw 1 45 777251 Nov 11 11 10 world digitized world digitized tar Z drwxrwxr x 7 crum 512 Nov 11 10 56 world digitized extracted The extracted directory is produced from the tar file From world digitized expanded doc read me The World Digitized is a collection of more than 100 000 points of latitude and longitude When connected together these co ordinates form outlines of the entire world s coastlands islands lakes and national boundaries in surprising detail drwxrwxrwx 2 crum 1024 Nov 12 19 10 dlg 35N86W Digital Line Graph of area with top left coordinates 35 N 86 W See dlg README From roskos ida org Eric Roskos back to contents Index of Back Issues by Eric Haines This is a list of all back issues of the RT News email edition I m retroactively giving these issues numbers for quick reference purposes Topics are fully listed in the first issue in which they are discussed and follow up material is listed in braces I ve tried to summarize the main topics covered not the individual articles Volume 0 August December 1987 Standard Procedural Databases Spline Surface Intersection Abnormal Normals Volume 1 Number 1 1 15 88 Solid Modelling with Faceted Primitives What s Wrong and Right with Octrees Top Ten Hit Parade of Computer Graphics Books Comparison of Efficiency Schemes Subspaces and Simulated Annealing Volume 1 Number 2 2 15 88 Dore Volume 1 Number 3 3 1 88 comments on Octrees Simulated Annealing Efficiency Tricks More Book Recommendations Octree Bug Alert Volume 1 Number 4 3 8 88 Surface Acne Goldsmith Salmon Hierarchy Building more Efficiency Tricks Voxel Quadric Primitive Overlap Determination Volume 1 Number 5 3 26 88 more on Efficiency Voxel Quadric Linear Time Voxel Walking for Octrees more Efficiency Tricks Puzzle PECG Correction Volume 1 Number 6 4 6 88 more on Linear Time Voxel Walking Thoughts on the Theory of RT Efficiency Automatic Creation of Object Hierarchies Goldsmith Salmon Image Archive Espresso Database Archive Volume 1 Number 7 6 20 88 RenderMan Dore Commercial Ray Tracing Software Benchmarks Volume 1 Number 8 9 5 88 SIGGRAPH 88 RT Roundtable Summary more Commercial Software Typo in Intro to RT Course Notes Vectorizing Ray Object Intersections Teapot Database Archive Mark VandeWettering s Ray Tracer Archive DBW Render George Kyriazis Ray Tracer Archive Hartman Heckbert PostScript Ray Tracer source Volume 1 Number 9 9 11 88 much more on MTV s Ray Tracer and utilities Archive for Ray Tracers and databases SPD teapot Sorting on Shadow Rays for Kay Kajiya more on Vectorizing Ray Object Intersection more on George Kyriazis Ray Tracer Bitmaps Library Volume 1 Number 10 10 3 88 Bitmap Utilities more on Kay Kajiya Wood Texture Archive Screen Bounding Boxes Efficient Polygon Intersection Bug in Heckbert Ray Tracer more on MTV s Ray Tracer and utilities Neutral File Format NFF Volume 1 Number 11 11 4 88 Ray Triangle Intersection with Barycentric Coordinates Normal Transformation more on Screen Bounding Boxes comments on NFF Ray Tracing and Applications more on Kay Kajiya and eye rays more on Wood Textures Virtual Lighting Parallel Ray Tracing RenderMan On Line Computer Graphics References Archive Current Mailing List back to contents Eric Haines erich acm org Ray Tracing News Volume 2 Number 1 Ray Tracing News Volume 2 Number 1 Ray Tracing News Volume 2 Number 1 Ray Tracing News Volume 2 Number 1 Ray Tracing News Volume 2 Number 1 Ray Tracing News Volume 2 Number 1 Ray Tracing News Volume 2 Number 1 Ray Tracing News Volume 2 Number 1 Ray Tracing News Volume 2 Number 1 Ray Tracing News Volume 2 Number 1 http www acm org tog resources RTNews html rtnews6a html http www acm org tog resources RTNews html rtnews6a html http www acm org tog resources RTNews html rtnews6a html http www acm org tog resources RTNews html rtnews6a html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews6b.html%%==%%Ray Tracing News, Volume 2, Number 2%%==%%Ray Tracing News "Light Makes Right" February 20, 1989 Volume 2, Number 2 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%51304%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right February 20 1989 Volume 2 Number 2 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1989 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction by Eric Haines New Subscribers by Turner Whitted Mike Muuss The BRL CAD Package by Mike Muuss New Book Illumination and Color in Computer Generated Imagery by Roy Hall review by Eric Haines Uniform Distribution of Sample Points on a Surface Depth of Field Problem by Marinko Laban Query on Frequency Dependent Reflectance by Mark Reichert Best of comp graphics ftp Site by Raymond Brand Notes on Frequency Dependent Refraction Sound Tracing Laser Speckle Introduction by Eric Haines Whew things have piled up I ve culled my comp graphics findings as best as I can I ve decided to delete everything on the question of what a stored ray trace image should be called image bytemap pixmap and bitmap were some of the candidates It s a good question but the discussion just got too long to recap Paul Heckbert s original posting advocated not using bitmap for 24 bit images since bitmap denotes an M x N x 1 bit deep image in most settings It would be pleasant to get a consensus on acceptable usage but it s also interesting to me from a word history standpoint If you have an opinion you d like to share on this topic pass it on to me and I ll summarize them if possible a 25 word or less summation would be nice My own is I m a product of my environment Cornell used bitmap Hewlett Packard uses bitmap so I tend to use bitmap 24 bit deep bitmap or image I ve put all the comp graphics postings at the end and the good news is that the queue is now empty The Sound Tracing postings to comp graphics were many and wordy I ve tried to pare them down to references interesting questions that arose and informed or at least informed sounding to my naive ears opinions back to contents New Subscribers Turner Whitted Numerical Design Limited 133 1 2 E Franklin Street P O Box 1316 Chapel Hill NC 27514 alias turner whitted gould rti ndl jtw sun com this mail path is just a good guess does gould have an arpa connection The uucp path I use is turner whitted hpfcrs hpfcla hplabs sun gould rti ndl jtw Michael John Muuss ray tracing for predictive analysis of 3 D CSG models Leader Advanced Computer Systems Team Ballistic Research Lab APG MD 21005 5066 USA ARPANET mike BRL MIL 301 278 6678 telephone is discouraged use E mail instead alias mike muuss mike BRL MIL I lead BRL s Advanced Computer Systems Team ACST in research projects in a CSG solid modeling ray tracing and analysis b advanced processor architectures mostly MIMD of late c high speed networking and d operating systems We are the developers of the BRL CAD Package which is a sophisticated Combinatorial Solid Geometry CSG solid modeling system with ray tracing library several lighting models a variety of non optical lighting models eg radar available on request a device independent framebuffer library a collection of image processing tools etc This software totals about 150 000 lines of C code which we make available in source form under the terms of a limited distribution agreement at no charge My personal interests wander all over the map right now I m fiddling with some animation software some D A converters for digital music processing and some improvements to our network distributed ray tracer protocol Thanks for the invitation to join Best mike back to contents The BRL CAD PACKAGE Short Summary In FY87 two major releases of the BRL CAD Package software were made Feb 87 July 87 along with two editions of the associated 400 page manual The package includes a powerful solid modeling capability and a network distributed image processing capability This software is now running at over 300 sites It has been distributed to 42 academic institutions in twenty states and four countries including Yale Princeton Stanford MIT USC and UCLA The University of California San Diego is using the package for rendering brains in their Brain Mapping Project at the Quantitative Morphology Laboratory 75 different businesses have requested and received the software including 23 Fortune 500 companies including General Motors AT T Crysler Motors Corporation Boeing McDonnell Douglas Lockheed General Dynamics LTV Aerospace Defense Co and Hewlett Packard 16 government organizations representing all three services NSA NASA NBS and the Veterns Administration are running the code Three of the four national laboratories have copies of the BRL CAD package More than 500 copies of the manual have been distributed BRL CAD started in 1979 as a task to provide an interactive graphics editor for the BRL target description data base Today it is 100 00 lines of C source code Solid geometric editor Ray tracing utilities Lighting model Many image handling data comparison and other supporting utilities It runs under UNIX and is supported over more than a dozen product lines from Sun Workstations to the Cray 2 In terms of geometrical representation of data BRL CAD supports the original Constructive Solid Geometry CSG BRL data base which has been used to model 150 target descriptions domestic and foreign extensions to include both a Naval Academy spline Uniform B Spline Surface as well as a U of Utah spline Non Uniform Rational B Spline NURB Surface developed under NSF and DARPA sponsorship a facerted data representation called PATCH developed by Falcon Denver Research Institute and used by the Navy and Air Force for vulnerability and signature calculations 200 target descriptions domestic and foreign It supports association of material and other attribute properties with geometry which is critical to subsequent applications codes It supports a set of extensible interfaces by means of which geometry and attribute data are passed to applications Ray casting Topological representation 3 D Surface Mesh Generation 3 D Volume Mesh Generation Analytic Homogeneous Spline representation Applications linked to BRL CAD o Weights and Moments of Inertia o An array of Vulnerability Lethality Codes o Neutron Transport Code o Optical Image Generation including specular diffuse reflection refraction and multiple light sources animation interference o Bistatic laser target designation analysis o A number of Infrared Signature Codes o A number of Synthetic Aperture Radar Codes including codes due to ERIM and Northrop o Acoustic model predictions o High Energy Laser Damage o High Power Microwave Damage o Link to PATRAN TM and hence to ADINA EPIC 2 NASTRAN etc for structural stress analysis o X Ray calculation BRL CAD source code has been distributed to approximately 300 computer sites several dozen outside the US To obtain a copy of the BRL CAD Package distribution you must send enough magnetic tape for 20 Mbytes of data Standard nine track half inch magtape is the strongly preferred format and can be written at either 1600 or 6250 bpi in TAR format with 10k byte records For sites with no half inch tape drives Silicon Graphics and SUN tape cartridges can also be accommodated With your tape you must also enclose a letter indicating a who you are b what the BRL CAD package is to be used for c the equipment and operating system s you plan on using d that you agree to the conditions listed below This software is an unpublished work that is not generally available to the public except through the terms of this limited distribution The United States Department of the Army grants a royalty free nonexclusive nontransferable license and right to use free of charge with the following terms and conditions 1 The BRL CAD package source files will not be disclosed to third parties BRL needs to know who has what and what it is being used for 2 BRL will be credited should the software be used in a product or written about in any publication BRL will be referenced as the original source in any advertisements 3 The software is provided as is without warranty by BRL In no event shall BRL be liable for any loss or for any indirect special punitive exemplary incidental or consequential damages arising from use possession or performance of the software 4 When bugs or problems are found you will make a reasonable effort to report them to BRL 5 Before using the software at additional sites or for permission to use this work as part of a commercial package you agree to first obtain authorization from BRL 6 You will own full rights to any databases or images you create with this package All requests from US citizens or from US government agencies should be sent to Mike Muuss Ballistic Research Lab Attn SLCBR SECAD APG MD 21005 5066 If you are not a US citizen regardless of any affiliation with a US industry or if you represent a foreign owned or foreign controlled industry you must send your letter and tape through your Ambassador to the United States in Washington DC Have your Ambassador submit the request to Army Headquarters Attn DAMI FL Washington DC 20310 Best Wishes Mike Muuss Leader Advanced Computer Systems Team ArpaNet BRL ARPA p s from David Rogers If you have the Techniques in Computer Graphics book from Springer Verlag the frontispiece was done with RT the BRL ray tracer It is also discussed in a paper by Mike Muuss in that book p s from Eric Haines Mike Muuss was kind enought to send me the documentation some two inches thick for the BRL package I haven t used the BRL software sadly it does not seem to run on my HP machine yet I hope someone will do a conversion someday but the package looks pretty impressive Also such things as the Utah RLE package and Cake an advanced form of make come as part of the distribution There are also interesting papers on the system the design philosophy parallelism and many other topics included in the documentation back to contents Illumination and Color in Computer Generated Imagery by Roy Hall Springer Verlag New York 1989 282 pages article by Eric Haines Roy Hall s book is out and all I ll say about it is that you should have one The text what little I ve delved into so far is well written and complemented with many explanatory figures and images There are also many appendices about 100 pages worth filled with concise formulae and C code Below is the top level Table of Contents below to give you a sense of what the book covers The C code will probably be available publicly somewhere sometime soon I ll post the details here when it s ready for distribution 1 0 Introduction 8 pages 2 0 The Illumination Process 36 pages 3 0 Perceptual Response 18 pages 4 0 Illumination Models 52 pages 5 0 Image Display 40 pages Appendix I Terminology 2 pages Appendix II Controlling Appearance 10 pages Appendix III Example Code 86 pages Appendix IV Radiosity Algorithms 14 pages Appendix V Equipment Sources 4 pages References 8 pages Index 4 pages back to contents Uniform Distribution of Sample Points on a Surface Mark Reichert asked last issue how to get a random sampling of a sphere How to generate a uniformly distributed set of rays over the unit sphere Generate a point inside the bi unit cube Three uniform random numbers in 1 1 Is that point inside the unit sphere and not at the origin If not toss it and generate another not too often If so treat it as a vector and normalize it Poof a vector on the unit sphere This won t guarantee a isotropic covering of the unit sphere but is helpful to generate random samples Jeff Goldsmith One method is simply to do a longitude latitude split up of the sphere and randomly sampling within each patch but instead of making the latitude lines at even degree intervals put the latitude divisions at even intervals along the sphere axis instead of even altitude a k a theta angle intervals Equal axis divisions give us equal areas on the sphere s surface amazingly enough I didn t believe it was this simple when I saw this in the Standard Mathematics Tables book so rederived it just to be sure For instance let s say you d like 32 samples on a unit sphere Say we make 8 longitude lines so that now we want to make 4 patches per slice and so wish to make 4 latitudinal bands of equal area Splitting up the vertical axis of the sphere we want divisions at 0 5 0 and 0 5 To change these divisions into altitude angles we simply take the arcsin of the axis values e g arcsin 0 5 is 30 degrees Putting latitude lines at the equator and at 30 and 30 degrees then gives us equal area patches on the sphere If we wanted 5 patches per slice we would divide the axis of the unit sphere 1 to 1 into 5 pieces and so get 0 6 0 2 0 2 0 6 as inputs for arcsin This gives latitude lines on both hemispheres at 36 87 and 11 537 degrees The problem with the whole technique is deciding how many longitude vs latitude lines to make Too many longitude lines and you get narrow patches too many latitude and you get squat patches About 2 long lat seems pretty good but this is just a good guess and not tested Another problem is getting an even jitter to each patch Azimuth is obvious but you have to jitter in the domain for the altitude For example in a patch with an altitude from 30 to 90 degrees you cannot simply select a random degree value between 30 and 90 but rather must get a random value between 0 5 and 1 the original axis domain and take the arcsin of this to find the degree value If you didn t do it this way the samples would tend to be clustered closer to the poles instead of evenly Yet another problem with the above is that you get patches whose geometry and topology can vary widely Patches at the pole are actually triangular and patches near the equator will be much more squat than those closer to the poles If you would rather have patches with more of an equal extent than a perfectly equal area you could use a cube with a grid on each face cast upon the sphere radiosity uses half of this structure for hemi cubes The areas won t be equal but they ll be pretty close and you can weight the samples accordingly There are many other nice features to using this cast cube configuration like being able to use scan line algorithms being able to vary grid size per face or even use quadtrees being able to access the structure without having to perform trigonometry etc I use it to tessellate spheres in the SPD package so that I won t get those annoying clusterings at the poles of the sphere which can be particularly noticeable when using specular highlighting Eric Haines back to contents Depth of Field Problem From Marinko Laban via Frits Post dutrun frits mcvax cwi nl First an introduction I m a Computer Graphics student at the Technical University of Delft The Netherlands My assignment was to do some research about distributed ray tracing I actually implemented a distributed ray tracer but during experiments a very strange problem came up I implemented depth of field exactly in the way R L Cook described in his paper I decided to do some experiments with the shape of the f stop of the simulated camera First I simulated a square shaped f stop Now I now this isn t the real thing in an actual photocamera but I just tried I divided the square f stop in a regular raster of N x N sub squares just in the way you would subdivide a pixel in subpixels All the midpoints of the subsquares were jittered in the usual way Then I rendered a picture Now here comes the strange thing My depth of field effect was pretty accurate but on some locations some jaggies were very distinct There were about 20 pixels in the picture that showed very clear aliasing of texture and object contours The funny thing was that the rest of the picture seemed alright When I rendered the same picture with a circle shaped f stop the jaggies suddenly disappeared I browsed through my code of the square f stop but I couldn t find any bugs I also couldn t find a reasonable explanation of the appearance of the jaggies I figure it might have something to do with the square being not point symmetric but that s as far as I can get I would like to know if someone has experience with the same problem and does somebody has a good explanation for it Many thanks in advance Marinko Laban back to contents Query on Frequency Dependent Reflectance From hpfcla sunrock kodak supra reichert Sun COM Mark Reichert x25948 Hello I m adding fresnel reflectance to my shader I m in need of data for reflectance as a function of frequency for non polarized light at normal incidence I would like to build a stockpile of this data for a wide variety of materials I currently have some graphs of this data but would much prefer the actual sample points in place of the curve fitted stuff I have now not to mention the typing that you might save me If you have stuff such as this and can share it with me I would be most appreciative Also if there is some Internet place where I might look that would be fine too Thanks Mark back to contents Best of comp graphics ftp Site by Raymond Brand A collection of the interesting useful in my opinion articles from comp graphics over the last year and a half is available for anonymous ftp It contains answers to most of the most asked questions from that period as well as most of the sources posted to comp graphics Now that you know what is there you can find it in directory pub graphics at albanycs albany edu If you have anything to add to the collection or wish to update something in it or have have some ideas on how to organize it please contact me at one of the following There s also a subdirectory called ray tracers which has source code for you know whats and other software EAH Raymond S Brand rsbx beowulf uucp 3A Pinehurst Ave rsb584 leah albany edu Albany NY 12203 FidoNet 1 7729 255 518 489 8968 518 482 8798 BBS 518 489 8986 back to contents Notes on Frequency Dependent Refraction Newsgroups comp graphics In article 3324 uoregon uoregon edu markv uoregon uoregon edu Mark VandeWettering writes This has already been done by a number of people One paper by T L Kunii describes a renderer called Gemstone Fire or something It models refraction as you suggest to get realistic looking gems Sorry but I can t recall where or if it has been published I have also read several as yet unpublished papers which do the same thing in pretty much the same way David Jevans U of Calgary Computer Science Calgary AB T2N 1N4 Canada uucp ubc cs utai alberta calgary jevans From coifman yale UUCP Ronald Coifman This could be tough This is the easy part You fire say 16 rays per pixel anyway to do antialiasing and assign each one a color frequency When the ray is refracted through an object take into account the index of refraction and apply Snell s law A student here did that and it worked fine He simulated rainbows and diffraction effects through prisms Spencer Thomas U Utah or is it U Mich now also implemented the same sort of thing at about the same time Yep I got a Masters degree for doing that I was the student Rob is refer ring to The problem in modelling dispersion is to integrate the primary sample over the visible frequencies of light Using the Monte Carlo integra tion techniques of Cook on the visible spectrum yields a nice fairly simple solution albeit at the cost of supersampling at 10 20 rays per pixel where dispersive sampling is required Thomas used a different approach He adaptively subdivided the spectrum based on the angle of spread of the dispersed ray given the range of frequen cies it represents This can be more efficient but can also have unlimited growth in the number of samples Credit Spencer Thomas he was first As at least one person has pointed out perhaps the most interesting aspect of this problem is that of representing the spectrum on an RGB monitor That s an open problem I d be really interested in hearing about any solutions that people have come up with No the obvious CIE to RGB conversion doesn t work worth a damn My solution s can be found in A Realistic Model of Refraction for Computer Graphics F Kenton Musgrave Modelling and Simulation on Microcomputers 1988 conference proceedings Soc for Computer Simulation Feb 1988 in my UC Santa Cruz Masters thesis of the same title and hopefully in an upcoming paper Prisms and Rainbows a Dispersion Model for Computer Graphics at the Graphics Interface conference this summer I can e mail troff sources for these papers to interested parties but you ll not get the neat o pictures For a look at an image of a physical model of the rainbow built on the dispersion model see the upcoming Jan IEEE CG A About the Cover article Ken Musgrave Ken Musgrave arpanet musgrave yale edu Yale U Math Dept Box 2155 Yale Station Primary Operating Principle New Haven CT 06520 Deus ex machina back to contents Sound Tracing From ph miro Berkeley EDU Paul Heckbert Subject Re Sound tracing source comp graphics In article 239 raunvis UUCP kjartan raunvis UUCP Kjartan Pierre Emilsson Jardedlisfraedi asks Has anyone had any experience with the application of ray tracing techniques to simulate acoustics i e the formal equivalent of ray tracing using sound instead of light Yes John Walsh Norm Dadoun and others at the University of British Columbia have used ray tracing like techniques to simulate acoustics They called their method of tracing polygonal cones through a scene beam tracing even before Pat Hanrahan and I independently coined the term for graphics applications Walsh et al simulated the reflection and diffraction of sound and were able to digitally process an audio recording to simulate room acoustics to aid in concert hall design This is my four year old bibliography of their papers A Norm Dadoun A David G Kirkpatrick A John P Walsh T Hierarchical Approaches to Hidden Surface Intersection Testing J Proceedings of Graphics Interface 82 D May 1982 P 49 56 Z hierarchical convex hull or minimal bounding box to optimize intersection testing between beams and polyhedra for graphics and acoustical analysis K bounding volume acoustics intersection testing A John P Walsh A Norm Dadoun T The Design and Development of Godot A System for Room Acoustics Modeling and Simulation B 101st meeting of the Acoustical Society of America C Ottawa D May 1981 A John P Walsh A Norm Dadoun T What Are We Waiting for The Development of Godot II B 103rd meeting of the Acoustical Society of America C Chicago D Apr 1982 K beam tracing acoustics A John P Walsh T The Simulation of Directional Sound Sources in Rooms by Means of a Digital Computer R M Mus Thesis I U of Western Ontario C London Canada D Fall 1979 K acoustics A John P Walsh T The Design of Godot A System for Room Acoustics Modeling and Simulation paper E15 3 B Proc 10th International Congress on Acoustics C Sydney D July 1980 A John P Walsh A Marcel T Rivard T Signal Processing Aspects of Godot A System for Computer Aided Room Acoustics Modeling and Simulation B 72nd Convention of the Audio Engineering Society C Anaheim CA D Oct 1982 Paul Heckbert CS grad student 508 7 Evans Hall UC Berkeley UUCP ucbvax miro berkeley edu ph Berkeley CA 94720 ARPA ph miro berkeley edu From jevans ucalgary ca David Jevans Subject Re Sound tracing source comp graphics Three of my friends did a sound tracer for an undergraduate project last year The system used directional sound sources and microphones and a ray tracing like algorithm to trace the sound Sound sources were digitized and stored in files Emitters used these sound files At the end of the 4 month project they could digitize something like a person speaking run it through the system then pump the results through a speaker An acoustic environment was built just like you build a model for graphics You could get effects like echoes and such Unfortunately this was never published I am trying to convince them to work on it next semester David Jevans U of Calgary Computer Science Calgary AB T2N 1N4 Canada uucp ubc cs utai alberta calgary jevans From eugene eos UUCP Eugene Miya May I also add that you research all the work on acoustic lasers done at places like the Applied Physics Lab From riley batcomputer tn cornell edu Daniel S Riley Organization Cornell Theory Center Cornell University Ithaca NY In article 572 epicb UUCP david epicb UUCP David P Cook writes In article 7488 watcgl waterloo edu ksbooth watcgl waterloo edu Kelly Booth writes It is highly unlikely that a couple of hackers thinking about the problem for a few minutes will generate startling break throughs possible but not likely Ok I think most of us can agree that this was a reprehensible attempt at arbitrary censorship of an interesting discussion Even if some of the discussion is amateurish and naive The statement made above Is appalling Sound processing is CENTURIES behind image processing If we were to apply even a few of our common algorithms to the audio spectrum it would revolutionize the synthizer world These people are living in the stone age with the exception of a few such as Kuerdswell sp On the other hand I think David is seriously underestimating the state of the art in sound processing and generation Yes Ray Kurzweil has done lots of interesting work but so have many other people Of the examples David gives most xor ing contrast stretching fuzzing antialiasing and quantization are as elementary in sound processing as they are in image processing Sure your typical music store synthesizer sampler doesn t offer these features though some come close especially the E mu s but neither does your vcr And the work Kurzweil music and Kurzweil applied intelligence have done on instrument modelling and speech recognition go WAY beyond any of these elementary techniques The one example I really don t know about is ray tracing Sound tracing is certainly used in some aspects of reverb design and perhaps other areas of acoustics but I don t know at what level diffraction is handled and diffraction is a big effect with sound propagation You also have to worry about phases interference and lots of other fun effects that you can to first order ignore in ray tracing References anyone Perhaps I should resubscribe to comp music and try there off on a tangent does any one know of work on ray tracers that will do things like coherent light sources interference diffraction etc In particular anyone have a ray tracer that will do laser speckling right I m pretty naive about the state of the art in image synthesis so I have no idea if such beasts exist It looks like a hard problem to me but I m just a physicist No this is not a WELL RESEARCHED area as Kelly would have us believe The sound people are generally not attacking sound synthesis as we attack vision synthesis This is wonderful thinking KEEP IT UP Much work in sound synthesis has been along lines similar to image synthesis Some of it is proprietary and the rest I think just receives less attention since sound synthesis doesn t have quite the same level of perceived usefulness or the sexiness of image synthesis But it is there Regardless I agree with David that this is an interesting discussion and I certainly don t mean to discourage any one from thinking or posting about it Dan Riley dsr lns61 tn cornell edu cornell batcomputer riley Wilson Lab Cornell U From kjartan raunvis UUCP Kjartan Pierre Emilsson Jardedlisfraedi Newsgroups comp graphics We would like to begin by thanking everybody for their good replies which will in no doubt come handy We intend to try to implement such a sound tracer soon and we had already made some sort of model for it but we were checking whether there was some info lying around about such tracers It seems that our idea wasn t far from actual implementations and that is reassuring For the sake of Academical Curiosity and overall Renaissance like Enlightenment in the beginning of a new year we decided to submit our crude model to the critics and attention of this newsgroup hoping that it won t interfere too much with the actual subject of the group namely computer graphics The Model We have some volume with an arbitrary geometry usually simple such as a concert hall or something like that Squares would work just fine as primitives Each primitive has definite reflection properties in addition to some absorption filter which possibly filters out some frequencies and attenuates the signal In this volume we put a sound emitter which has the following form The sound emitter generates a sound sample in the form of a time series with a definite mean power P The emitter emits the sound with a given power density given as some spherical distribution For simplicity we tessellate this distribution and assign to each patch the corresponding mean power At some other point we place the sound receptor which has the following form We take a sphere and cut it in two equal halves and then separate the two by some distance d We then tessellate the half spheres not including the cut We have then a crude model of ears Now for the actual sound tracing we do the following For each patch of the two half spheres we cast a ray radially from the center and calculate an intersection point with the enclosing volume From that point we determine which patch of the emitter this corresponds to giving us the emitted power We then pass the corresponding time series through the filter appropriate to the given primitives calculate the reflected fraction attenuate the signal by the square of the distance and eventually determine the delay of the signal When all patches have been traced we sum up all the time series and output the whole lot through some stereo device A more sophisticated model would include secondary rays and sound shadowing The shadowing being a little tricky as it is frequency dependent pros cons Happy New Year Kjartan Dagur Kjartan Pierre Emilsson Science Institute University of Iceland Dunhaga 3 107 Reykjavik Iceland Internet kjartan raunvis hi is From brent itm UUCP Brent Organization In Touch Ministries Atlanta GA Ok here s some starting points check out the work of M Schroeder at the Gottingen Barbarian keyboard has no umlauts Also see the recent design work on the Orange County Civic Auditorium and the concert hall in New Zealand These should get you going in the right direction Dr Schroeder laid the theoretical work and others ran with it As far as sound ray tracing and computer acoustics being centuries behind I doubt it Dr S has done things like record music in stereo in concert halls digitized it set up playback equipment in an anechoic chamber bldg 15 at Murry Hill measured the path from the right speaker to the left ear and from the left speaker to the right ear digitized the music and did FFTs to take out the crossover paths he measured Then the music played back sounded just like it did in the concert hall All this was done over a decade ago Also on acoustic ray tracing sound is much nastier to figure than pencil rays of light One must also consider the phase of the sound and the specific acoustic impedance of the reflecting surfaces Thus each reflection introduces a phase shift as well as direction and magnitude changes I haven t seen too many optical ray tracers worrying about interference and phase shift due to reflecting surfaces Plus you have to enter vast world of psychoacoustics or how the ear hears sound In designing auditoria one must consider binaural dissimilarity Orange County and the much debated auditory backward inhibition see the Lincoln Center re designs Resonance how many optical chambers resonate outside lasers All in all modern acoustic simulations bear much more resemblance to Quantum Mechanic particle in the concert hall type calculations than to simple ray traced optics Postscript eye to source optical ray tracing is a restatement of Rayleigh s reciprocity principle of sound of about a century ago Acoustitions have been using it for at least that long happy listening brent laminack gatech itm brent Reply To trantow csd4 milw wisc edu Jerry J Trantow Subject Geometric Acoustics Sound Tracing Summary Not so easy but here are some papers Organization University of Wisconsin Milwaukee Some of the articles I have found include Criteria for Quantitative Rating and Optimum Design on Concert Halls Hulbert G M Baxa D E Seireg A University of Wisconsin Madison J Acoust Soc Am v 71 n 3 Mar 83 p 619 629 ISSN 0001 4966 Item Number 061739 Design of room acoustics and a MCR reverberation system for Bjergsted Concert hall in Stavanger Strom S Krokstad A Sorsdal S Stensby S Appl Acoust v19 n6 1986 p 465 475 Norwegian Inst of Technology Trondheim Norw ISSN 0003 682X Item Number 000913 I am also looking for an English translation of Ein Strahlverfolgungs Verafahren Zur Berechnung von Schallfelern in Raemem Ray Tracing Program for the calculation of sound fields of rooms Voralaender M Acoustica v65 n3 Feb 88 p 138 148 ISSN 0001 7884 Item Number 063350 If anyone is interested in doing a translation I can send the German copy that I have It doesn t do an ignorant fool like myself any good and I have a hard time convincing my wife or friends who know Deutch to do the translation A good literature search can discover plenty of articles quite a few of which are about architectural design of music halls With a large concert hall the calculations are easier because of the dimensions the wavelength is small compared to the dimensions of the hall The cases I am interested in are complicated by the fact that I want to work with relatively small rooms large sources and to top it off low 60hz frequencies I vaguely remember seeing a blurb somewhere about a program done by BOSE the speaker company that calculated sound fields generated by speakers in a room I would appreciate any information on such a beast The simple source for geometric acoustics is described in Beranek s Acoustic in the chapter on Radiation of Sound To better appreciate the complexity from diffraction try the chapter on The Radiation and Scattering of Sound in Philip Morse s Vibration and Sound ISBN 0 88318 287 4 I am curious as to the commercial software that is available in this area Does anyone have any experience they could comment on From markv uoregon uoregon edu Mark VandeWettering Subject More Sound Tracing Organization University of Oregon Computer Science Eugene OR I would like to present some preliminary ideas about sound tracing and critique hopefully profitably the simple model presented by Kjartan Pierre Emilsson Jardedlisfraedi Whew and I thought my name was bad I will abbreviate it to KPEJ CAVEAT READER I have no expertise in acoustics or sound engineering Part of the reason I am writing this is to test some basic assumptions that I have made during the course of thinking about sound tracing I have done little no research and these ideas are my own KJEP had a model related below We have some volume with an arbitrary geometry usually simple such as a concert hall or something like that Squares would work just fine as primitives Each primitive has definite reflection properties in addition to some absorption filter which possibly filters out some frequencies and attenuates the signal One interesting form of sound reflector might be the totally diffuse reflector Lambertian reflection It seems that if this is the assumption then the appropriate algorithm to use might be radiosity as opposed to raytracing Several problems immediately arise 1 how to handle diffraction and interference 2 how to handle relativistic effects caused by the relatively slow speed of sound The common solution to 1 in computer graphics is to ignore it Is this satisfactory in the audio case Under what circumstances or applications is 1 okay Point 2 is not often considered in computer graphics but in computerized sound generation it seems critical to accurate formation of echo and reverberation effects To properly handle time delay in radiosity would seem to require a more difficult treatment because the influx of energy at any given time from a given patch could depend on the outgoing energy at a number of previous times This seems pretty difficult any immediate ideas Now for the actual sound tracing we do the following For each patch of the two half spheres we cast a ray radially from the center and calculate an intersection point with the enclosing volume From that point we determine which patch of the emitter this corresponds to giving us the emitted power We then pass the corresponding time series through the filter appropriate to the given primitives calculate the reflected fraction attenuate the signal by the square of the distance and eventually determine the delay of the signal When all patches have been traced we sum up all the time series and output the whole lot through some stereo device One open question how much directional information is captured by your ears Since you can discern forward backward sounds as well as left right it would seem that ordinary stereo headphones are incapable of reproducing sounds as complex as one would like Can the ears be fooled in clever ways The only thing I think this model lacks is secondary rays or echo reverb effects Depending on how important they are radiosity algorithms may be more appropriate Feel free to comment on any of this it is an ongoing thought experiment and has made a couple of luncheon conversations quite interesting Mark VandeWettering From ksbooth watcgl waterloo edu Kelly Booth Organization U of Waterloo Ontario In article 3458 uoregon uoregon edu markv drizzle UUCP Mark VandeWettering writes 1 how to handle diffraction and interference 2 how to handle relativistic effects caused by the relatively slow speed of sound The common solution to 1 in computer graphics is to ignore it Hans P Moravec 3D Graphics and Wave Theory Computer Graphics 15 3 August 1981 pp 289 296 SIGGRAPH 81 Proceedings Trivia Question Why does the index for the proceedings list this as starting on page 269 Also something akin to 2 has been tackled in some ray tracers where dispersion is taken into account this is caused by the refractive index depending on the frequency which is basically a differential speed of light back to contents Laser Speckle From jevans cpsc ucalgary ca David Jevans In article 11390016 hpldola HP COM paul hpldola HP COM Paul Bame writes A raytracer which did laser speckling right might also be able to display holograms A grad student at the U of Calgary a couple of years ago did something like this He was using holographic techniques for character recognition and could generate synthetic holograms Also what about Pixar See IEEE CG A 3 issues ago David Jevans U of Calgary Computer Science Calgary AB T2N 1N4 Canada uucp ubc cs utai alberta calgary jevans From dave onfcanim UUCP Dave Martindale Organization National Film Board Office national du film Montreal Laser speckle is a particularly special case of interference because it happens in your eye not on the surface that the laser is hitting A ray tracing system that dealt with interference of light from different sources would show the interference fringes that occur when a laser light source is split into two beams and recombined and the interference of acoustic waves But to simulate laser speckle you d have to trace the light path all the way back into the viewer s eye and calculate interference effects on the retina itself If you don t believe me try this create a normal two beam interference fringe pattern As you move your eye closer the fringes remain the same physical distance apart becoming wider apart in angular position as viewed by your eye The bars will remain in the same place as you move your head from side to side Now illuminate a target with a single clean beam of laser light You will see a fine speckle pattern As you move your eye closer the speckle pattern does not seem to get any bigger the spots remain the same angular size as seen by your eye As you move your head from side to side the speckle pattern moves As the laser light reflects from a matte surface path length differences scramble the phase of light traveling by slightly different paths When a certain amount of this light is focused on a single photoreceptor in your eye or a camera the light combines constructively or destructively giving the speckle pattern But the size of the grains in the pattern is basically the same as the spacing of the photoreceptors in your eye basically each cone in your eye is receiving a random signal independent of each other cone The effect depends on the scattering surface being rougher than 1 4 wavelength of light and the scale of the roughness being smaller than the resolution limit of the eye as seen from the viewing position This is true for almost anything except a highly polished surface so most objects will produce speckle Since the pattern is due to random variation in the diffusing surface there is little point in calculating randomness there tracing rays back to the eye and seeing how they interfere just add randomness directly to the final image although this won t correctly model how the speckle moves as you move your head However to model speckle accurately the pixel spacing in the image has to be no larger than the resolution limit of the eye about half an arc minute For a CRT or photograph viewed from 15 inches away that s 450 pixels inch far higher than most graphics displays are capable of So unless you have that sort of system resolution you can t show speckle at the correct size back to contents Eric Haines erich acm org Ray Tracing News Volume 2 Number 2 Ray Tracing News Volume 2 Number 2 Ray Tracing News Volume 2 Number 2 Ray Tracing News Volume 2 Number 2 Ray Tracing News Volume 2 Number 2 Ray Tracing News Volume 2 Number 2 Ray Tracing News Volume 2 Number 2 Ray Tracing News Volume 2 Number 2 Ray Tracing News Volume 2 Number 2 Ray Tracing News Volume 2 Number 2 http www acm org tog resources RTNews html rtnews6b html http www acm org tog resources RTNews html rtnews6b html http www acm org tog resources RTNews html rtnews6b html http www acm org tog resources RTNews html rtnews6b html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews7a.html%%==%%Ray Tracing News, Volume 2, Number 3%%==%%Ray Tracing News "Light Makes Right" May 12, 1989 Volume 2, Number 3 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%25335%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right May 12 1989 Volume 2 Number 3 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1989 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction New People by Carl Bass Paul Wanuga QRT Ray Tracer and five other Amiga Ray Tracers by Steve Koren New Version of MTV Ray Tracer by Mark VandeWettering Re Ray Traced Bounding Spheres by Earl Culham Noise and Turbulence Function Code Pascal and C by Jon Buller William Dirks Introduction Well we re now at the point where there are six ray tracers for the Amiga Interestingly none of them have implicit efficiency schemes i e where the user does not have to intervene and create the efficiency structure himself Admittedly efficiency schemes are more code but I ve found that I was getting a factor of three speed up for a simple scene a ten ball sphereflake by using an efficiency scheme vs not using one When your computer is the speed of an Amiga efficiency schemes become vital Next time I ll include Tracing Tricks an article I edited for the latest and last Introduction to Ray Tracing course notes The article is a best of the RT News compendium of efficiency tricks By the way the course notes should be quite a bargain they ll consist of the book of our notes by Academic Press plus some new tidbits and reprints of classic articles I would like to put the Ray Tracing News back issues somewhere that people can FTP them Personally I don t have a computer that has an FTP site so if there are any volunteers that would like to store the back issues please contact me The entire archive is about 448K at this point not including this issue broken into 5 parts Can you volunteer back to contents New People Carl Bass hybrid shading models and quick er hidden surface methods Ithaca Software 902 West Seneca Street Ithaca NY 14850 607 273 3690 alias carl bass carl mssun1 msi cornell edu Carl is the co founder of Ithaca Software Inc once upon a time called Flying Moose Inc which sells the HOOPS package for all kinds of computers This is an object oriented system which I don t know much about beyond that their debugger is called WHOOPS Paul Wanuga Cornell Program of Computer Graphics 120 Rand Hall Ithaca NY 14853 607 255 4880 alias paul wanuga phw love tn cornell edu Erich Could you please include me in your list of wiz bango ray tracers It appears Don has me slated for research in ray tracing complex realistic non procedural environments back to contents QRT Ray Tracer and five other Amiga Ray Tracers by Steve Koren This package appeared on comp graphics a few months back I believe the latest version of the package is available from Mark VandeWettering s FTP site see next article Write to Steve for more info hpfela koren hplabs hp com The software is written in C and worked just fine on my system Below is an excerpt of the UserMan doc file of the QRT system which Steve extensively documented QRT is a ray tracing image rendering system that runs under a variety of operating systems It has a free format input language with extensive error detection and reporting capabilities QRT was developed on the Amiga personal computer so it will be compared to other Amiga ray tracers There are to my knowledge five other Amiga ray tracers each with its own strengths and weaknesses I will describe each system briefly and compare it to QRT All the Amiga ray tracers can operate in HAM 4096 color mode RT RT was the first ray tracer written for the Amiga by Eric Graham It will model a universe made of only spheres a sky and a checkered or solid ground It is relatively fast but not generally useful for realistic modeling because of the sphere limitation The input language is cryptic although some error checking is done The system will only generate low resolution images SILVER I have never seen SILVER so I cannot say much about this system SCULPT 4D This package incorporates an interactive editor for creating objects and is capable of quickly generating a preliminary image of the scene by using hidden surface techniques However every primitive is made of polygons and some primitives such as spheres require hundreds of polygons for a smooth texture so the ray tracing is very slow Also the package takes a large amount of memory to run and is prone to system crashes Its chief feature is the ability to create arbitrary shaped objects using a series of triangles Mirrored dull or shiny objects are supported CLIGHT This ray tracer also has an interactive editor but produces very poor quality images It is not capable of any patterning or reflection characteristics DBW This is possibly the most complete ray tracer for the Amiga It will support objects with arbitrary degrees of reflection and gloss depth of field effects some texturing wavy surfaces fractals transparent surfaces diffuse propagation of light from object to object and 5 primitive types sphere triangle parallelogram fractal and ring The input language however is so cryptic as to be nearly incomprehensible and if there is any error in the input file it will crash the system It is also painfully slow some images take 16 to 24 hours to complete QRT is meant to be a compromise between the fast simple ray tracers and the slow powerful systems It compares favorably in speed to RT and in power to Sculpt 3d or DBW It has a very friendly input language with extensive error checking Here are some features of QRT o Multiple primitive types including user defined quadratic surfaces o Arbitrary levels of diffuse reflection spectral reflection transmission ambient lighting and gloss o User defined pattern information for objects o Bounding boxes for groups of objects o Shadows o Multiple light sources with different characteristics o Arbitrary Phong spectral reflection coefficients o Color dithering to increase the apparent number of colors o Easy to use free format input language with error checking Parameters are by keyword and may appear in any order o Supports medium resolution 128k dots screen back to contents New Version of MTV Ray Tracer by Mark VandeWettering Mark VandeWettering s nice little ray tracer polygons spheres cones and cylinders Kay Kajiya efficiency scheme yacc lex parser for NFF format otherwise written in C was released on USENET in three parts on March 27 Others have interesting features but the selection of primitives and the speed of the code of the MTV ray tracer is a big plus It s currently my favorite public domain ray tracer the amazing BRL package I consider private The package is available at the usual comp sources unix archive sites or from Mark via anonymous ftp at drizzle cs uoregon edu Mark s address is markv drizzle cs uoregon edu back to contents Re Ray Traced Bounding Spheres by Earl Culham ECULHAM UALTAVM BITNET Organization University of Alberta VM CMS In article 17241 versatc UUCP ritter versatc UUCP Jack Ritter writes Given a cluster of points in 3 space is there a good method for finding the minimum radius sphere which encloses all the points If not minimum at least small Certainly it should be tighter than the sphere which encloses the minimum bounding box I have a feeling the solution is iterative If so I could provide a good initial guess for the center radius The solution is not iterative A simple solution is available in a two step process and is characterized by whether three or only two of the points are on the surface of the optimal sphere Given the points A B and C Searching for the center of the optimal sphere P with the smallest radius R Checking the midpoints set P point halfway between A and B set R 1 2 of length from A to B If length from C to P is less than or equal to R done Repeat with line A C and B C if needed Extending the midpoints at right angles build the line which intersects A B at a right angle through the midpoint of A B call the line D build the line which intersects A C at a right angle through the midpoint of A C call it E P is the point where D and E intersect Solve the simultaneous equations R is the length A P back to contents Noise and Turbulence Function Code Pascal and C by Jon Buller William Dirks Re Pixar s noise function by Jon Buller bullerj handel colostate edu Organization Colorado State University Ft Collins CO 80523 In article 3599 pixar UUCP aaa pixar UUCP Tony Apodaca writes In article 2553 ssc vax UUCP coy ssc vax UUCP Stephen B Coy writes My question Does anyone out there know what this noise function really is Three dimensional simulated natural textures using pseudorandom functions were simultaneously and independently developed by Darwyn Peachey and Ken Perlin in 1984 5 Both have papers in the 1985 Siggraph Proceedings describing their systems Perlin in particular describes in detail how noise is implemented and can be used creatively A description of the properties of the noise function goes here If you have ever been interested in realistic computer graphics do whatever it takes to get a look at Perlin s paper In 1985 his pictures were absolutely astounding In 1989 they are STILL astounding No kidding some of those pictures are INCREDIBLE Here is my code for a look alike to the Pixar Noise function and while I can t say anything about exactly what Pixar s looks like I think this is probably close After reading the 1985 SIGGRAPH papers on 3d texturing and seeing my prof s code to do a similar thing I wrote this It uses a quadratic B Spline instead of the cubic Hermite interpolant implied in the paper Also note that DNoise is just the x y and z derivatives of Noise which are also B Splines The hashing functions are from Knuth s Art of Computer Programming I don t remember which volume though I know the code is Pascal and all of you will hate it but I believe I write better Pascal than C One final note this was Lightspeed Pascal 2 0 for the Macintosh but things have been reformatted slightly to get it on the net I hope this is what you all wanted More One other thing you might notice Noise is C1 continuous DNoise is only C0 This means that DNoise will have creases in it along the planes of the random grid To see this crank out a square 0 Jon bullerj handel cs colostate edu ncar ccncsu handel bullerj These are my ideas and code nobody else SHOULD want these bugs I m just trying to graduate Apple Pixar HP etc take note I would like your job offers I have tired of the university life NOTE I have attached the Pascal code for the Turbulence functions The Noise functions are in the next message in C Sorry about the mixed languages but I haven t nicely translated these EAH cut here cut here cut here const MaxPts 512 Must be 2 n MPM1 MaxPts 1 type PtsTyp array 0 MaxPts of Extended var Points PtsTyp function Turb Size Integer ScaleFactor Extended Loc Vect Pts PtsTyp Extended var Scale Result Extended Cur Integer begin Result Noise Loc Pts Scale 1 0 Cur 1 while Cur C Versions of Noise and DNoise Routines by William Dirks dirks oak cis ohio state edu Organization Ohio State University Computer and Information Science It was suggested to me that some of you would be interested in my translated into C and corrected versions of noise and Dnoise So here they are Note that this is only noise and Dnoise The turbulence routines are not included cause I haven t translated them yet Oh yeah initnoise fills the pts array with random numbers between 0 and 1 Don t forget to initialize or noise will always return 0 That s been experimentally verified Bill Note that you should look over the rand function if you use this stuff Some rand s need initialization srand and some give numbers from 0 to 32767 and so should use this as a divisor EAH cut here cut here Noise and Dnoise routines Many thanks to Jon Buller of Colorado State University for these routines typedef struct vector double x y z Vector define NUMPTS 512 define P1 173 define P2 263 define P3 337 define phi 0 6180339 static double pts NUMPTS void initnoise int i for i 0 i x xa floor P1 xi phi floor xi phi xb floor P1 xi 1 phi floor xi 1 phi xc floor P1 xi 2 phi floor xi 2 phi yi floor p y ya floor P2 yi phi floor yi phi yb floor P2 yi 1 phi floor yi 1 phi yc floor P2 yi 2 phi floor yi 2 phi zi floor p z za floor P3 zi phi floor zi phi zb floor P3 zi 1 phi floor zi 1 phi zc floor P3 zi 2 phi floor zi 2 phi p000 pts xa ya za NUMPTS 1 p100 pts xb ya za NUMPTS 1 p200 pts xc ya za NUMPTS 1 p010 pts xa yb za NUMPTS 1 p110 pts xb yb za NUMPTS 1 p210 pts xc yb za NUMPTS 1 p020 pts xa yc za NUMPTS 1 p120 pts xb yc za NUMPTS 1 p220 pts xc yc za NUMPTS 1 p001 pts xa ya zb NUMPTS 1 p101 pts xb ya zb NUMPTS 1 p201 pts xc ya zb NUMPTS 1 p011 pts xa yb zb NUMPTS 1 p111 pts xb yb zb NUMPTS 1 p211 pts xc yb zb NUMPTS 1 p021 pts xa yc zb NUMPTS 1 p121 pts xb yc zb NUMPTS 1 p221 pts xc yc zb NUMPTS 1 p002 pts xa ya zc NUMPTS 1 p102 pts xb ya zc NUMPTS 1 p202 pts xc ya zc NUMPTS 1 p012 pts xa yb zc NUMPTS 1 p112 pts xb yb zc NUMPTS 1 p212 pts xc yb zc NUMPTS 1 p022 pts xa yc zc NUMPTS 1 p122 pts xb yc zc NUMPTS 1 p222 pts xc yc zc NUMPTS 1 xf p x xi x1 xf xf x2 0 5 x1 x1 0 5 xf x1 x0 0 5 xf x2 yf p y yi y1 yf yf y2 0 5 y1 y1 0 5 yf y1 y0 0 5 yf y2 zf p z zi z1 zf zf z2 0 5 z1 z1 0 5 zf z1 z0 0 5 zf z2 return z0 y0 x0 p000 x1 p100 x2 p200 y1 x0 p010 x1 p110 x2 p210 y2 x0 p020 x1 p120 x2 p220 z1 y0 x0 p001 x1 p101 x2 p201 y1 x0 p011 x1 p111 x2 p211 y2 x0 p021 x1 p121 x2 p221 z2 y0 x0 p002 x1 p102 x2 p202 y1 x0 p012 x1 p112 x2 p212 y2 x0 p022 x1 p122 x2 p222 Vector Dnoise p Vector p Vector v int xi yi zi int xa xb xc ya yb yc za zb zc double xf yf zf double x2 x1 x0 y2 y1 y0 z2 z1 z0 double xd2 xd1 xd0 yd2 yd1 yd0 zd2 zd1 zd0 double p000 p100 p200 p010 p110 p210 p020 p120 p220 double p001 p101 p201 p011 p111 p211 p021 p121 p221 double p002 p102 p202 p012 p112 p212 p022 p122 p222 xi floor p x xa floor P1 xi phi floor xi phi xb floor P1 xi 1 phi floor xi 1 phi xc floor P1 xi 2 phi floor xi 2 phi yi floor p y ya floor P2 yi phi floor yi phi yb floor P2 yi 1 phi floor yi 1 phi yc floor P2 yi 2 phi floor yi 2 phi zi floor p z za floor P3 zi phi floor zi phi zb floor P3 zi 1 phi floor zi 1 phi zc floor P3 zi 2 phi floor zi 2 phi p000 pts xa ya za NUMPTS 1 p100 pts xb ya za NUMPTS 1 p200 pts xc ya za NUMPTS 1 p010 pts xa yb za NUMPTS 1 p110 pts xb yb za NUMPTS 1 p210 pts xc yb za NUMPTS 1 p020 pts xa yc za NUMPTS 1 p120 pts xb yc za NUMPTS 1 p220 pts xc yc za NUMPTS 1 p001 pts xa ya zb NUMPTS 1 p101 pts xb ya zb NUMPTS 1 p201 pts xc ya zb NUMPTS 1 p011 pts xa yb zb NUMPTS 1 p111 pts xb yb zb NUMPTS 1 p211 pts xc yb zb NUMPTS 1 p021 pts xa yc zb NUMPTS 1 p121 pts xb yc zb NUMPTS 1 p221 pts xc yc zb NUMPTS 1 p002 pts xa ya zc NUMPTS 1 p102 pts xb ya zc NUMPTS 1 p202 pts xc ya zc NUMPTS 1 p012 pts xa yb zc NUMPTS 1 p112 pts xb yb zc NUMPTS 1 p212 pts xc yb zc NUMPTS 1 p022 pts xa yc zc NUMPTS 1 p122 pts xb yc zc NUMPTS 1 p222 pts xc yc zc NUMPTS 1 xf p x xi x1 xf xf x2 0 5 x1 x1 0 5 xf x1 x0 0 5 xf x2 xd2 xf xd1 1 0 xf xf xd0 xf 1 0 yf p y yi y1 yf yf y2 0 5 y1 y1 0 5 yf y1 y0 0 5 yf y2 yd2 yf yd1 1 0 yf yf yd0 yf 1 0 zf p z zi z1 zf zf z2 0 5 z1 z1 0 5 zf z1 z0 0 5 zf z2 zd2 zf zd1 1 0 zf zf zd0 zf 1 0 v x z0 y0 xd0 p000 xd1 p100 xd2 p200 y1 xd0 p010 xd1 p110 xd2 p210 y2 xd0 p020 xd1 p120 xd2 p220 z1 y0 xd0 p001 xd1 p101 xd2 p201 y1 xd0 p011 xd1 p111 xd2 p211 y2 xd0 p021 xd1 p121 xd2 p221 z2 y0 xd0 p002 xd1 p102 xd2 p202 y1 xd0 p012 xd1 p112 xd2 p212 y2 xd0 p022 xd1 p122 xd2 p222 v y z0 yd0 x0 p000 x1 p100 x2 p200 yd1 x0 p010 x1 p110 x2 p210 yd2 x0 p020 x1 p120 x2 p220 z1 yd0 x0 p001 x1 p101 x2 p201 yd1 x0 p011 x1 p111 x2 p211 yd2 x0 p021 x1 p121 x2 p221 z2 yd0 x0 p002 x1 p102 x2 p202 yd1 x0 p012 x1 p112 x2 p212 yd2 x0 p022 x1 p122 x2 p222 v z zd0 y0 x0 p000 x1 p100 x2 p200 y1 x0 p010 x1 p110 x2 p210 y2 x0 p020 x1 p120 x2 p220 zd1 y0 x0 p001 x1 p101 x2 p201 y1 x0 p011 x1 p111 x2 p211 y2 x0 p021 x1 p121 x2 p221 zd2 y0 x0 p002 x1 p102 x2 p202 y1 x0 p012 x1 p112 x2 p212 y2 x0 p022 x1 p122 x2 p222 return v back to contents Eric Haines erich acm org Ray Tracing News Volume 2 Number 3 Ray Tracing News Volume 2 Number 3 Ray Tracing News Volume 2 Number 3 Ray Tracing News Volume 2 Number 3 Ray Tracing News Volume 2 Number 3 Ray Tracing News Volume 2 Number 3 Ray Tracing News Volume 2 Number 3 Ray Tracing News Volume 2 Number 3 Ray Tracing News Volume 2 Number 3 Ray Tracing News Volume 2 Number 3 http www acm org tog resources RTNews html rtnews7a html http www acm org tog resources RTNews html rtnews7a html http www acm org tog resources RTNews html rtnews7a html http www acm org tog resources RTNews html rtnews7a html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews7b.html%%==%%Ray Tracing News, Volume 2, Number 4%%==%%Ray Tracing News "Light Makes Right" June 21, 1989 Volume 2, Number 4 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%30738%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right June 21 1989 Volume 2 Number 4 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1989 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Hardcopy News New and Used People Minimum Bounding Sphere continued by Jack Ritter Comments on A Review of Multi Computer Ray Tracing by Thierry Priol Net News Cullings Query Dataflow architectures and Ray Tracing by George Kyriazis Re Pixar s noise function by Jon Buller Re DBW render for SUN 3 by Tad Guy Re Steel Colors by Eugene Miya Dirty Little Tricks by Jack Ritter Obfuscated Ray Tracer by George Kyriazis Contents of FTP archives skinner cs uoregon edu by Mark VandeWettering Introduction First off please note that I now have a second mail address eye erich wrath cs cornell edu This is a lot more direct than hopping the HP network through Palo Alto and Colorado just to get to Ithaca We have the connection courtesy of the Computer Science Dept at Cornell and they have asked us to try to keep our traffic down So please don t be a funny guy and send me image files or somesuch I just noticed that Andrew and I are out of sync his hardcopy version is on Volume 4 and I m on Volume 3 One excuse is that the first year of the email edition is labeled Volume 0 since it wasn t even called The Ray Tracing News at that point An alternate excuse is that I program in C and so start from 0 Anyway until maybe the new year I ll stick with the current scheme hey no one even noticed that last issue was misnumbered and corrected on the USENET copy back to contents Hardcopy News by Andrew Glassner The latest issue of the hardcopy Ray Tracing News Volume 3 Number 1 May 1989 goes into the mail today 31 May Everyone who is on the softcopy mailing list should receive a copy If you don t get a copy in a week or two please let me know glassner pa xerox com It would help if you include your physical mailing address so I can at least confirm that your issue was intended to go to the right place Contributions are now being solicited for Vol 4 No 2 Start working on those articles back to contents New and Used People The Cornell Program of Computer Graphics computers have all changed their addresses Any computer with the name tn cornell edu is now graphics cornell edu Stuart Green multiprocessor systems for realistic image synthesis Department of Computer Science University of Bristol Queen s Building University Walk Bristol BS8 1TR ENGLAND green uk ac bristol compsci I am working on multiprocessor implementations of algorithms for realistic image synthesis So far this has been restricted to straightforward ray tracing but I hope to look at enhanced ray tracing algorithms and radiosity I ve implemented a ray tracer on a network of Inmos Transputers which uses mechanisms for distributing both computation and the model data amongst the processors in a distributed memory MIMD system Craig Kolb and Ken Musgrave My primary interests include modeling natural phenomena realistic image synthesis and animation I can be reached at Dept of Mathematics Yale University P O Box 2155 Yale Station New Haven CT 06520 2155 203 432 7053 alias craig kolb craig weedeater math yale edu alias ken musgrave musgrave forest yale edu I ve just started looking into ray spline intersection We do a lot of heightfield tracing round here and in the past have rendered them using a triangle tessellation I m giving splines a shot in order to render some pictures of eroded terrain for our SIGGRAPH talk I notice that you list spline intersection among your primary interests What sort of methods have you investigated At the moment I ve implemented what I assume is the standard Newton s method in tandem with a DDA based cell traversal scheme as per our SIGGRAPH paper Although this works it s not exactly blindingly fast Do you know of any interesting references Kaveh Kardan Visual Edge Software Ltd 3870 Cote Vertu Montreal Quebec H4R 1V4 514 332 6430 larry mcrim mcgill edu vedge kaveh I graduated with a BS in Math from MIT in 1985 did some work in molecular graphics at the Xerox Research Centre of Canada XRCC wrote the renderer at Neo Visuals now known as SAS Canada which included a raytracer and the animation stuff at Softimage I m currently working at Visual Edge on the UIMX package an X Windows user interface design system Regarding the Softimage raytracer it was written by Mike Sweeney who used to be at Abel and who did Crater Lake at Waterloo I will also be acting as a mail forwarder for Mike as Softimage is not on any networks So in effect you should probably include Mike in the mailing list as well with my address or somehow let people know that he can be reached tc o me If I may make some comments about the stuff I have read so far in the back issues Jeff Goldsmith writes I don t get it Why doesn t every CG Software vendor supply a ray tracer It s definitely the easiest renderer to write Yes they are slo o o o o o w but they sound glitzy and I bet would stimulate sales even if buyers never used them Having worked at two CG Software companies I know firsthand how the to do list grows faster than you can possibly implement features no matter how many programmers you have c f The Mythical Man Month Jeff is right that ray tracing sounds glitzy and yes it is another factor to toss into the sales pitch but it is not at all clear that it is worth the effort Most if not all ray tracers assume either infinite rendering time or infinite disk space In the real world a 68020 and a 144Meg disk this is not the case The raytracer I wrote at Neo Visuals was written in Fortran ergo no dynamic memory allocation so I had to work on optimizing it without significantly increasing the memory used This mostly involved intelligently choosing when to fire rays The renderer performs a Watkins style rendering and fires secondary rays from a pixel only if the surface at that pixel needs to be raytraced Memory constraints prevented me from using any spatial subdivision methods Yes ray traced images are great sales tools They are also sometimes not entirely honest novice users I want a system to animate Star Wars quality images about ten minutes of animation a day on my XT are not aware of the expense of raytracing and very few salesmen go out of their way to point this out However these same users unsure of the technology put together a list of buzzwords amongst them raytracing and go out to find that piece of software which has the most features on their list Hence I coined the phrase buzzword compatible while at Neo Visuals and also polygons for polygons sake but that s another story I have also seen demos animations and pictures at trade shows presented by hardware and software vendors which were extremely and deliberately misleading A very common example is to show nice animation that was not really created with your software product The animation having been typically created by special programs and add ons An obvious example was Abel marketing their Generation 2 software with Sexy Robot Gold Hawaiian Punch etc I only mention Abel because they are no longer in business I don t want to mention any names of existing companies I hadn t intended this to be a flame But that sums up why not all software vendors bother with raytracing and how it can be abused if not handled carefully On Steve Upstill s remarks on the Renderman standard Disclaimer I have not read the Renderman specs and have spoken to people who liked it and people who didn t I would like to say that while I was at Neo Visuals Tom Porter and Pat Hanrahan did indeed drop by to ask us about our needs and to ensure that the interface would be compatible with our system As I recall we asked that the interface be able of handling arbitrary polygons n vertices concave etc As I recall I was playing devil s advocate at the meeting questioning whether rendering had settled down enough to be standardized So yes at least Neo Visuals did get to have a say and contribute to the interface I spoke to one rendering person at Siggraph who didn t appreciate the way Pixar had handed down the interface and said thou shalt enjoy Well the alternative would be a PHIGS like process years spent in committees trying to hash out a compromise which will in all likelihood be obsolete before the ink is dry In fact two hardware vendors decided to take matters into their own hands and came up with PHIGS Yes the interface is probably partly a marketing initiative by Pixar Why would they do it otherwise Why should they do it otherwise I would guess that Pixar hopes to have the standard adopted then come out with a board which will do Renderman rendering faster than anyone else s software This seems a natural progression More and more rendering features have been appearing in hardware 2D 3D flat shaded Gouraud and now Phong and texture maps It is very probable that in a few years renderers will be hardware except for experimental research and prototype ones back to contents Minimum Bounding Sphere continued by Jack Ritter ames apple sun pyramid versatc ritter I noticed in The Ray Tracing News an answer to my query about minimum bounding spheres The answer following my question assumes there are 3 points Search for Ray Traced Bounding Spheres This is wrong I meant n points in 3 space Since then Lyle Rains Wolfgang Someone and I have arrived at a fast way to find a tight bounding sphere for n points in 3 space 1 Make 1 pass through pts Find these 6 pts pt with min x max x min max y min max z Pick the pair with the widest dimensional span This describes the diameter of the initial bounding sphere If the pts are anywhere near uniform this sphere will contain most pts 2 Make 2nd pass through pts for each pt still outside current sphere update current sphere to the larger sphere passing through the pt on 1 side and the back side of the old sphere on the other side Each new sphere will barely contain its previous pts plus the new pt and probably some new outsiders as well Step 2 should need to be done only a small fraction of total num pts The following is code untested as far as I know to increment sp typedef double Ordinate typedef double Distance typedef struct Ordinate x Ordinate y Ordinate z Point typedef struct Point center Distance radius Sphere Distance separation pa pb Point pa Point pb Distance delta x delta y delta z delta x pa x pb x delta y pa y pb y delta z pa z pb z return sqrt delta x delta x delta y delta y delta z delta z Sphere new sphere s p Sphere s Point p Distance old to p Distance old to new old to p separation s center p if old to p s radius could test vs r 2 here s radius s radius old to p 2 0 old to new old to p s radius s center x s radius s center x old to new p x old to p s center y s radius s center y old to new p y old to p s center z s radius s center z old to new p z old to p return s Jack Ritter S W Eng Versatec 2710 Walsh Av Santa Clara CA 95051 Mail Stop 1 7 408 982 4332 or 408 988 2800 X 5743 UUCP ames apple sun pyramid versatc ritter This looks to be a good quick algorithm giving a near optimal solution Has anyone come up with an absolutely optimal solution The three point solution in last issue gives us a tool to do a brute force search of all triplets but this is insufficient to solve the problem For example a tetrahedron s bounding sphere cannot be found by just searching all the triplets as all such spheres would leave out the fourth point EAH back to contents Comments on A Review of Multi Computer Ray Tracing by Thierry Priol I read with a great interest in the hardcopy Ray Tracing News May 1989 A Review of Multi Computer Ray Tracing But D A J Jevans said that our work presented in CGI may even serve to cloud the important issues in multi computer ray tracing I do not agree with this remark The presentation at CGI describes only a first step in using multi processor ray tracing algorithms It is true that there were no interesting results in this paper D A J Jevans also said that a hypercube architecture is hardware specific I do not agree This kind of architecture represents a great part of distributed memory architectures Our algorithm is not specific for this topology and can work on a SYMULT 2010 which uses a mesh topology However I agree when he said that our algorithm provides little in the way of new algorithms since we used Cleary s algorithm But we think that for the moment the main problem is not to create new algorithms but to make experiments with some algorithms presented by several authors because most of them have been simulated but not implemented Our experiments show that many problems due to distributed computing not only load and memory balancing were not solved by the authors At present our algorithm has been modified to take into account load balancing and we have several results not yet published These new results may give some important conclusions about the Cleary approach processor volume association We are working now on a new algorithm based on a global memory on distributed memory architectures For my mind it is the best solution to obtain load and memory balancing The ray coherence property is a means to have a sort of locality when data is read in the global memory best use of caches We are very interested D Badouel K Bouatouch and myself in submitting to the Ray tracing News a short paper which summarizes our work in parallel ray tracing algorithm for distributed memory architecture This contribution should present two ray tracing algorithms with associated results This work has not been yet published outside France back to contents USENET cullings follow Query Dataflow architectures and Ray Tracing by George Kyriazis kyriazis rpics Newsgroups comp arch comp graphics Organization RPI CS Dept Hi I am wondering if anybody knows if there have been any attempts to port a ray tracing algorithm on a dataflow computer or if there has been such a machine especially built for ray tracing I am posting to both comp arch and comp graphics since I think that it concerns both newsgroups It seems to me that a dynamic dataflow architecture is more appropriate to this problem because of the recursiveness and parallelism of the algorithm Thanks in advance for any info back to contents Re Pixar s noise function by Jon Buller bullerj handel colostate edu UUCP Summary my noise better described I hope Reply To bullerj handel colostate edu UUCP Jon Buller Organization Colorado State University Ft Collins CO 80523 In article jamesa arabian Sun COM James D Allen writes In article aaa pixar UUCP Tony Apodaca writes In article coy ssc vax UUCP Stephen B Coy writes My question Does anyone out there know what this noise function really is Conceptually noise is a stochastic three dimensional function which is statistically invariant under rotation and translation and has a narrow bandpass limit in frequency paraphrased from Perlin1985 This means that you put three space points in and you get values back which are basically random But if you put other nearby points in you get values that are very similar The differences are still random but the maximum rate of change is controlled so that you can avoid aliasing If you put a set of points in from a different region of space you will get values out which have the same amount of randomness Anyone willing to post a detailed description of such an algorithm Jon Buller posted one but I couldn t figure it out what is Pts Sorry about not really describing my program to anyone I know what it does and I never expected anyone else to see it isn t it obvious What it does is pass a location in space and an array of random numbers this is Pts I fill the array with 0 0 1 0 but any values or range will work I have other textures which color based on distance to the nearest point of a random set hence the name It has 4 values per entry at times Step 1 change the location to a group of points to interpolate This is where xa xb xc zc come in any location with the same coords when trunc ed will produce the same xa zc values making the same values for the interpolation at the end These xa zc are then hashed in to the Pts array to produce p000 P222 these 27 random numbers are then interpolated with a Quadratic 3d B Spline the long ugly formula at the end The variables based on xf yf and zf I believe they are x0 z2 are the B Spline basis functions notice to get DNoise just take the partial derivatives of the basis functions and re evaluate the spline Step 2 now you have a value that is always smaller than the largest random number in Pts equal to in the odd case that major bunches of the numbers are also the maximum in the range By the same argument all numbers returned are larger than the smallest number in the array this can be handy if you don t want to have to clip your values to some limit I hope this explains the use of the routine better Sorry I didn t realize that earlier If you have any other questions about it mail them to me and I ll do my best to explain it Jon back to contents Re DBW render for SUN 3 by Tad Guy tadguy cs odu edu Newsgroups comp graphics Organization Old Dominion University Norfolk VA daniel unmvax unm edu writes Has anyone converted the public domain ray trace program called DBW render to run on a SUN workstation Ofer Licht ofer gandalf berkeley edu has done just that His modified DBW Render is available via anonymous ftp from xanth cs odu edu as amiga dbw zoo It is also designed to use DistPro to distribute the computations between many machines this is available as well as amiga distpro zoo His address Ofer Licht ofer gandalf berkeley edu 1807 Addison St 4 Berkeley CA 94703 415 540 0266 back to contents Re Steel Colors by Eugene Miya eugene eos UUCP Newsgroups comp graphics Organization NASA Ames Research Center Calif In article jwl ernie Berkeley EDU UUCP James Wilbur Lewis writes In article jep oink UUCP James E Prior writes I ve noticed that when I look closely at reasonably clean bare steel in good sunlight that it appears to have a very fine grain of colors What is this due to Probably a diffraction grating type effect due to scratches roughness or possibly crystalline structure at the surface Funny you should mention this I was sitting with my officemate George Michael he says Hi Kelly and we were talking about stuff and he brought up the subject of polish He said there were people at Livenomore who were researching the issue of polish for big mirrors but that polish really isn t well understood still open interesting physical science questions Polish consists of minute scratches which have a set of interesting properties You can probably write to them and get TRs on the topic Polish is more than iridescence Also since somebody asked the date on the Science article by Greenberg on Light reflection models for graphics is 14 April 1989 page 166 It will provide simple models for this type of stuff back to contents Dirty Little Tricks by Jack Ritter ritter versatc UUCP Newsgroups comp graphics Organization Versatec Santa Clara Ca 95051 I ve come up with a fast approximation to 3D Euclidean distance sqrt dx dx dy dy dz dz It s probably not original but 1 find these 3 values abs dx abs dy abs dz 2 Sort them 3 compares 0 3 swaps 3 Approx E D max 1 4 med 1 4 min error 13 max 5 16 med 1 4 min has 9 error max 11 32 med 1 4 min has 8 error As you can see only shifts adds are used and it can be done with integer arithmetic It could be used in ray tracing as a preliminary test before using the exact form We all have our dirty little tricks back to contents Obfuscated Ray Tracer by George Kyriazis kyriazis turing cs rpi edu Newsgroups comp graphics Organization RPI CS Dept A while ago while it was still snowing I was feeling adventurous and a nice weekend I decided to write an obfuscated ray tracer A friend of mine told me that is not too obfuscated for the Obfuscated C Contest I had already wasted one whole day so I gave up Today I was cleaning up my account and I thought it would be a very appropriate posting for comp graphics It is a hacker s approach to ray tracing produces a text image on the screen No shading different characters represent different objects The source code is 762 bytes long I KNOW that I ll get flamed but who cares Have fun people So here it is Compile with cc ray c o ray lm c 1988 by George Kyriazis include define Q define define O return define T struct G if A a b a b define D double F for define P void printf Q define S x x 1 p hello 6 comment x T oo D q r s t int m 1 2 T oo o 2 10 10 10 18 15 15 17 27 int x y D I i D b c s1 s2 int p 0 q 1 b i p 1 P 1 x x erf M PI i 1 q sin p b 2 i o s c S x i o q S y o i r S i o s o i t A s1 S b G s2 S b 4 c 0 unix s1 b s2 2 s2 s1 s2 s1 s1 1 i A i i 1 G z back to contents Contents of FTP archives skinner cs uoregon edu by Mark VandeWettering markv tillamook cs uoregon edu Newsgroups comp graphics Organization University of Oregon CIS Dept Recently the ftp archive of raytracing stuff was moved from our dying VAX 750 drizzle cs uoregon edu to our new fileserver which is called skinner cs uoregon edu or just cs uoregon edu There is more diskspace available and I have expanded the archives to contain several new items I thought I would post the README here to let people know of its availability skinner cs uoregon edu contains information largely dealing with the subject of raytracing although a radiosity tracer or solid modeler would be a welcome addition to the contents there I am always busy looking for new software aquisitions so if you have anything you wish to put there feel free to send me a note Mark VandeWettering cut cut cut cut cut cut cut cut cut cut cut cut cut cut cut cut cut cut cut cut The old README was dated so I thought I would update this new one dr xr xr x 2 ftp 512 Feb 11 18 53 bibs contains bibliographies for fields that I am interested in such as graphics and functional programming drwxrwxr 2 ftp 512 May 13 23 44 gif fmt descriptions of the gif format Too many people wanted this so I thought I would make it available drwxrwxr x 2 root 512 May 24 22 25 grafix utils Utilities for converting among graphics formats etc Now includes fuzzy bitmap should also include pbm and utah raster toolkit soon drwxrwxr 2 ftp 1024 May 14 15 45 hershey The Hershey Fonts Useful PD fonts drwxrwxr x 2 root 512 May 24 22 26 mtv tracer My raytracer albeit a dated version dr xr xr x 2 ftp 512 Feb 16 17 24 musgrave Copies of papers on refraction by Kenton Musgrave drwxrwxr x 2 root 512 May 24 22 26 nff Haines SPD raytracing package with some other NFF images created by myself others Useful for the mtv raytracer drwxr xr x 2 ftp 1536 May 24 11 44 off objects Some interesting PD or near PD images from the OFF distribution dr xr xr x 2 ftp 512 Feb 15 22 48 polyhedra Polyhedra from the netlib server I haven t done anything with these dr xr xr x 2 ftp 512 Mar 6 17 45 qrt The popular raytracer for PCs dr xr xr x 2 ftp 512 May 24 22 26 rayfilters Filters to convert the MTV output to a number of devices drwxrwxr x 2 root 512 May 24 22 26 raytracers Other raytracers rw r r 1 ftp 323797 May 24 01 47 sunrpc tar Z SUN RPC v 3 9 All issues of the email version of The RT News have been put in the directory RTNews since this posting back to contents Eric Haines erich acm org Ray Tracing News Volume 2 Number 4 Ray Tracing News Volume 2 Number 4 Ray Tracing News Volume 2 Number 4 Ray Tracing News Volume 2 Number 4 Ray Tracing News Volume 2 Number 4 Ray Tracing News Volume 2 Number 4 Ray Tracing News Volume 2 Number 4 Ray Tracing News Volume 2 Number 4 Ray Tracing News Volume 2 Number 4 Ray Tracing News Volume 2 Number 4 http www acm org tog resources RTNews html rtnews7b html http www acm org tog resources RTNews html rtnews7b html http www acm org tog resources RTNews html rtnews7b html http www acm org tog resources RTNews html rtnews7b html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews7c.html%%==%%Ray Tracing News, Volume 2, Number 5%%==%%Ray Tracing News "Light Makes Right" August 29, 1989 Volume 2, Number 5 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%39231%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right August 29 1989 Volume 2 Number 5 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1989 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction A SIGGRAPH Report by Eric Haines Ray Tracing Poll from the roundtable discussion An Introduction to Ray Tracing Announcement and Errata Graphics Gems Call for Contributions by Andrew Glassner New People and Address Changes Bugs in MTV s Ray Tracer by Eric Haines Bug in SPD from Pete Segal Solid Textures Tidbit by Roman Kuchkuda Sundry Comments by Jeff Goldsmith Texture Mapping Question by Susan Spach Net News Cullings Ray Traced Image Files Prem Subramanyan Image Collection by Paul Raveling MTV Raytracer on ATARI ST precision error report by Dan Riley Question on Ray Tracing Bicubic Parametric Patches by Robert Minsk Introduction Now that the RT News is posted on comp graphics I d like to make a few changes First of all you really don t need to get on the subscription list of the RT News if you re an avid reader of comp graphics However I do want to maintain an emailing list of people interested in ray tracing So I ll be keeping a single address list of interested people which I will call the contact list and only some of the people on this list need to be sent copies of the RT News Furthermore it would be nice if various schools etc would make a single email address the place where they will receive the RT News For example Duke has raycasting duke cs duke edu as the address to which I should send the RT News They also have individuals on the address list but individual copies are not sent to them Instead the raycasting account they have remails the RT News to all people that are interested at Duke In this way I can cut down on having issues sent out unnecessarily of worrying about bounced mail of maintaining a long mailing list currently about 100 people etc etc To summarize there are then a few different ways you can be listed 1 Individual subscriber You don t read comp graphics and want to get the RT News Your name is put on the subscriber list and the contact list To subscribe simply send me your name email and snail mail addresses and a one line summary that I ll put next to your name describing any special areas you re interested in e g parallelism radiosity filtering might be one You might also send me a few paragraphs about what you re up to nowadays and I ll include this in the News 2 Group subscriber Like Duke This way you have full control over who will automatically get an issue and I won t have to change my subscriber list each time someone else wants to get the RT News Some people have already switched over I just received this We went ahead and implemented the local alias It s raytrace which you can reach as raytrace cpsc ucalgary ca or calgary raytrace At the moment Dave Jevans and I Bill Jones are the only subscribers 3 Contact list only You read comp graphics and so do not need to subscribe However you want to be on the list of people interested in ray tracing Another advantage of the contact list is that people may send you mail for instance I wrote all the people on the list and invited them to come to a get together for ray tracers at SIGGRAPH more on this later Everyone who is a subscriber is also automatically on the contact list but not vice versa You can also be listed as an individual on the contact list if you re a group subscriber 4 The silent majority You don t need to be on any list and are happy just reading comp graphics or have hit the n key by now Currently almost everyone on the contact list is also a subscriber So if you read comp graphics fairly constantly and are on the subscriber list please tell me to put you on only the contact list Clear as mud Good I ll probably send the above to all people asking for subscriptions just to make sure they know what s what so don t be offended if you get one Whew Well with that done I should mention that anyone can ask for a copy of the contact list If you want to subscribe to the RT News hardcopy edition that s another coastline entirely contact Andrew Glassner at glassner pa xerox com for details as he s the editor of that one The email and hardcopy journals are mostly non overlapping so it s worth your while to get both if you re seriously interested in the subject I can t afford to send out the back issues of the email RT News but they are available via anonymous FTP from cs uoregon edu in pub also has lots of other ray tracing stuff etc freedom graphics cornell edu in pub also has Xcu menu creator One other resource I ve been updating Paul Heckbert s ray tracing bibliography while he s been busy at grad school If you would like the latest copy of this list or have anything to add or change in it just write me I also will be posting it to the two ftp sites realsoonnow back to contents A SIGGRAPH Report by Eric Haines Another SIGGRAPH has come and gone and I had a good time My only frustration was meeting many researchers for a minute and not getting to talk with them I noticed that although the ray tracing session had but three papers there were about nine others throughout the proceedings that used ray tracing techniques in various ways Ray tracing and ray casting as a graphics tool has come into its own A few more ray tracers are out on the market such as Sculpt 3D by Byte by Byte for the Macintosh and Amiga and LazerRays by Lazerus Hewlett Packard is now shipping radiosity and ray tracing software bundled in with every high end graphics workstation Intergraph has been getting a fair bit of airplay out of their new ray tracing package though I haven t gotten details yet Alias should be offering a ray tracer sometime soon Ray tracing researchers got together informally for a ray tracing roundtable for an hour and some Like last year it was a large gathering with around 50 people attending We went around the group with each person giving a brief introduction I took an informal poll on a few questions Andrew noted that the ray tracing book was out and asked for contributions to Graphics Gems more later then we broke up and talked about this and that Given the size of the gathering it was a bit frustrating there are all these people that I ve wanted to meet and talk with in the same room and after half an hour they re all gone and I ve spoke with only a few Basically the roundtable meeting is too big for my tastes One possibility that you all might consider is to invite people in your own special interest to a lunch or dinner For example I went to a pleasant global illuminators lunch this SIGGRAPH where there were about twelve people a good size Oh some nice books came out this SIGGRAPH I ll plug the ray tracing book later Others worth note i e I bought them are Mathematical Elements for Computer Graphics Second Edition by Rogers and Adams which has been expanded to more than twice its original length and The RenderMan Companion by Steve Upstill which looks like a nice book no matter what your feelings on RenderMan itself I m looking forward to the much expanded second edition of Foley Van Dam s Fundamentals of Interactive Computer Graphics which should be out early next year back to contents Ray Tracing Poll from the roundtable discussion At the roundtable people were polled on a few questions 1 What efficiency schemes have you used Grids 20 Octree BSP 26 4 were specifically BSP Bounding Volume Hierarchy 22 Hybrid 17 Greater than 3D 4D or 5D 13 Other 5 what were these anyway 2 How many processors have you used One processor 21 1 Multiprocessor 29 1 More than 10 processors 21 More than 100 processors 4 The most processors used was 1024 2 people 3 How long do you usually wait for a picture Less than a minute 1 Less than ten minutes 6 Less than an hour 13 Less than ten hours 25 4 What is your favorite background color UNC Carolina Blue 12 Black 15 back to contents An Introduction to Ray Tracing Announcement and Errata Well the book is finally out It is edited by Andrew Glassner and sells for 49 95 from Academic Press It includes sections by Andrew Pat Hanrahan Rob Cook Paul Heckbert Jim Arvo Dave Kirk and myself The book is essentially the same as the 1988 SIGGRAPH Course Notes with the addition of some figures and images and some minor corrections Incidentally if you have the book and find any glaring errors please notify Andrew Glassner enough copies sold at SIGGRAPH that another edition will be printed soon Considering that the authors are scattered around the country the book flows fairly well and covers most areas of ray tracing theory and practice Also there s finally a text to suggest when someone wants to know whether a point is inside a polygon Sedgewick s Algorithms didn t solve it efficiently If you don t have a copy buy a few and make us all fabulously wealthy beyond our wildest dreams i e then I could afford the Sears hibachi instead of the K Mart version Incidentally the 1989 Intro to RT Course Notes included the book and some additional notes The notes included reprints of classic articles the code for the SPD package God forbid that anyone have to type it in though and an article I whipped off called Tracing Tricks which I ll post sometime soon maybe during a slow month Some bugs have already been reported to me about my section so I ll pass them on From Tim O Connor If you ll flip to page 66 you ll note a little algorithm for ray box testing About halfway through you say If T1 Tnear set T1 Tnear If T2 Tfar set T2 Tfar Then you never use T1 or T2 again in that loop The example bears out my suspicion that one should actually set Tnear T1 and set Tfar T2 From Ehood Baratz In chapter 2 page 52 on formula C9 it is written If Pn Rd 0 then I think it should be if Vd back to contents Graphics Gems Call for Contributions by Andrew Glassner CONTRIBUTE TO A NEW BOOK FOR COMPUTER GRAPHICS PROGRAMMERS Contributions are solicited for a new book tentatively titled GRAPHICS GEMS This book will be a collection of short notes by and for computer graphics programmers and researchers The basic idea is to create a book similar to the CRC Mathematics Handbook only tailored to the subject of computer graphics The motivation for Graphics Gems comes from a desire to document and share the many techniques that are a necessary part of every graphics programmer s toolbox yet don t appear in the standard literature Each Gem represents a solution to a problem not necessarily a research result nor even a deep observation but simply a good practical technique for dealing with a typical computer graphics programming problem A typical Gem may be a code fragment a short analysis of an interesting problem a bit of mathematics a data structure or a geometric relationship Here are some appropriate topics for Gems this list contains only a few suggestions for topics that might be covered by interesting Gems and is far from complete Two Dimensions Fill smooth blur dither 2d plots line drawing curve drawing bounding boxes overlapping boxes efficient bitblit example automatic selection of tick marks on a plot Three Dimensions Scan conversion highlight detection shading isosurfaces ray intersection form factor calculation visibility texturing transformations deformations smoothing 3d plotting parameterizations surface subdivision texturing functions bounding boxes example fast shading formulae Graphics Colormap hacking object manipulations sampling filtering optics interaction techniques modelling primitives efficient rendering edge detection example reconstruction from stochastic sampling General Math Algebra calculus geometry e g why normals don t move under the same transformations as surfaces Programming Numerical integration root finding root polishing data structures objects data structures programs inner loops interactive debugging graphical debugging color map hacking over and under flow detection and correction unusual functions e g polynomial root finding Most Gems will be about 1 or 2 final printed pages 4 or 5 pages of typewritten double spaced manuscript though if you choose to include source code the listings may run longer Rough figures and equations will be professionally redrawn by the publisher Each contributor will have a chance to review the final copy for his or her Gems before publication Each Gem will be clearly identified with the name and affiliation of its contributor s If you have developed a nice solution to a problem that others might encounter be it a data structure an inner loop or even an algebraic simplification that makes your programs shorter and more robust then it would probably make a splendid Graphics Gem Write it up and send it to the editor at the address below either in hardcopy or electronic mail Acceptable formats are plain text nroff TeX MacWrite and Microsoft Word Macintosh I would like to receive a rough draft of all Gems by November 1989 Contribute and share your favorite tricks and techniques with the rest of the community Send your Graphics Gems to Andrew Glassner Editor Graphics Gems Xerox PARC 3333 Coyote Hill Road Palo Alto CA 94304 USA email glassner pa xerox com phone 415 494 4467 back to contents New People and Address Changes There were many new people at the roundtable at SIGGRAPH In the interest of brevity only new people who ve sent an intro are listed If any of you or anyone else out there would like to send in a paragraph or two of introduction it will be printed here You can always request the latest contact list from me We just received the 7 editions of The Ray Tracing News you posted recently at USENET This is exactly the kind of information we need in our research project an rendering software Not just the latest research news but also discussion on the results of them So PLEASE put us on your mailing list Just let me describe our past and future work to justify the costs for you We are a working group at the Institute for Interactive Graphic Systems at the University of Tuebingen West Germany and are part of the faculty of physics The main future research aspect will go in direction of combining raytracing and radiosity We come from the background of geometric modelling and graphics hardware here Phong shading in realtime I will start working on this project 4Q89 as my PhD If you can give any additional information that might be interesting to us including other research going on in this area please let us know Surface mail Wilhelm Schickard Institut fuer Informatik Graphisch Interaktive Systeme z Hd Philipp Slusallek Auf der Morgenstelle 10 D 7400 Tuebingen Email philipp infotue uucp Tel x49 7071 296356 internet zmel02 trc amoco com usenet uunet apctrc mlee snail mail Mark Lee Amoco Production Company Tulsa Research Center PO Box 3385 Tulsa OK 74102 phone 918 660 3556 or 918 660 3000 for operator A short introduction My interests lie in the areas of illumination models faster ray tracing photorealism numerical and statistical methods My real work is more in the area of rendering algorithms and scientific visualization The areas that I enjoy working in I pursue whenever I can squeeze it in Incidentally did you find a copy of the article by Levner Tassinari and Marini A Simple Method for Ray Tracing Bicubic Surfaces no Is this in a textbook or such How could I find of copy of this paper Can anyone help Has anyone seen it and can at least summarize Some questions to post to the mailing list Did the paper The Ray Tracing Kernel by Jim Arvo Dave Kirk and Olin Lathrop ever get published Does anyone have a copy of Blinn s notes from the Siggraph 84 tutorial notes on The Mathematics of Computer Graphics that they could send to me hey I d like one too I was a student volunteer at this course and they ran out of course notes and I never got a copy I am now doing a dissertation on realistic rendering for complex scenes with extensions for nonisotropically scattering gasses I am also part of a project that uses raytracing for visualization of volumes of scalar data Peter Shirley University of Illinois at Urbana Champaign shirley cs uiuc edu pur ee convex inhp4 uiucdcs shirley 816 E Oakland 206 Urbana IL 61801 217 328 6494 Mike Sweeney rendering splines object oriented languages Softimage Inc 3510 Blvd St Laurent Suite 214 Montreal Canada H2X 2V2 514 845 1636 write to Kaveh Kardan at larry mcrcim mcgill edu vedge kaveh to reach Mike Hello net land it s been a while Eric says he wants an introduction so here goes I ve been writing renderers for the last 6 years The Waterloo CGL Raytracing Package was your basic naive ray tracer It did contain an iterative solution to ray bspline intersection but I no longer believe in this approach it s much faster to break the spline into triangles My second attempt the Alias renderer war a raycaster It was slow period Then came Abel where I started playing with octrees The code was about twice as fast as any implementation of Kay Kajiya slabs I could come up with and at least ten times as fast as my implementation of Fujimoto s algorithm After Abel folded I wound up at Softimage I added a modified Watkin s front end and rewrote the tracer to make the maximum use of empty space I ve not tried to implement the Kirk Arvo algorithm yet but have an instinctive distrust of anything that mixes preprocessing with the rendering the cost will go up with the sampling rate What is the group s experience with this method Jerry Quinn PhD research in raytracing at Dartmouth Dartmouth College Department of Math Comp Sci Hanover NH 03755 603 646 2565 quinn sunapee dartmouth edu I am a PhD student in computer science at Dartmouth and am in my second year I m currently interested in increasing efficiency in raytracing I m also looking at parallelism in RT radiosity and the combination of both I have taken a job at Princeton and thought I d send you my new address for the purposes of the RT News Mark VandeWettering markv acm princeton edu c o Program in Applied and Computational Math Fine Hall Princeton University Princeton NJ 08544 Another question you might know off the top of your head Alvy Ray Smith has written a tech memo on Volumetric Rendering at Pixar Do you have his e mail address or otherwise know how I might request Pixar Tech Memos does anyone else know EAH The ray tracing archive on skinner cs uoregon edu still will remain there I have permission from the higher ups at the U of O to keep it there If I lose that permissions at some future date it will probably move to Princeton somewhere Pat Hanrahan has also moved to Princeton and is now at hanrahan princeton edu And one more for Princeton alias marshall levine mplevine phoenix princeton edu I asked about the ray tracing demo at SGI The ray tracing demo that you saw on an IRIS at SIGGraph is called Flyray It was written by Benjamin Garlick in June August 1988 The underlying voxel ray tracer was written by Paul Haeberli in July 1983 The demo is standard around here it should be on every demo machine I would guess that it would be in the usr src cmd demo directory on most demo machines but it depends on that particular machine s configuration It is easily accessible through Buttonfly the SGI menu program Buttonfly displays menus of demos on 3D buttons that twist flip and fly towards the screen when selected with text on them You will probably find Flyray on Buttonfly under the SGI CPU Intensive button it will be listed as Ray Tracer or Flyray If you have any questions or want a description of the demo just let me know and I ll send you any information that I can dig up While you re at SIGGraph you should take a look at the newest version of Flight By Rob Mace one of the guys in my group on the IRIS 4D computers Take a look at the F 14 I ll let it be a surprise and trust me you ll be very surprised Please change my email address to palmer ncsc org was palmer ncifcrf gov Thomas C Palmer North Carolina Supercomputing Center Cray Research Inc Phone 919 248 1117 PO Box 12732 Arpanet palmer ncsc org 3021 Cornwallis Road Research Triangle Park NC 27709 Another address change Mark Reichert Program of Computer Graphics 120 Rand Hall Cornell University Ithaca NY 14853 alias mark reichert mcr venus graphics cornell edu back to contents Bugs in MTV s Ray Tracer by Eric Haines Craig Kolb mentioned that he was having problems with Mark VandeWettering s ray tracer Since I ve been touting it all this time but having run it only once I felt obligated to find the bugs There were two one was that the up vector was sometimes not perpendicular to the view vector which results in the balls image having a comin at ya kind of distortion kind of interesting but incorrect The other was that the frustum width was affected by the distance to the hither which it should not be One result is that the mountain scene would get zoomed in on something fierce Finally I changed the statistics output a bit to give information that I like e g the number of reflected and refracted rays actually shot are counted separately Anyway at least apply the fixes to main c and the first part of screen c diff old main c new main c 109c112 printf number of eye rays 6d n nRays diff old screen c new screen c 50d49 Make sure the up vector is perpendicular to the view vector VecCross viewvec leftvec upvec VecNormalize upvec 71c77 view dist Flt tan view view angle frustrumwidth Flt tan view view angle 129c135 Trace 0 1 0 ray color nRays 173c179 Trace 0 1 0 ray color nRays 238c244 Trace 0 1 0 ray color nRays diff old shade c new shade c 112d111 surf ks weight tray tcol Trace level 1 surf surf ks weight tray tcol nReflected 120d119 surf kt weight tray tcol Trace level 1 surf surf kt weight tray tcol nRefracted diff old trace c new trace c 19c19 Trace level weight ray color nr 23a24 int nr 34c35 nr back to contents Bug in SPD from Pete Segal pls pixels att com Pete Segal reported a particularly subtle bug in my Standard Procedural Databases package Turns out a w component needs to be initialized If you have a machine that initializes everything to 0 you d never notice it The patches to the README and lib c files are below I should be putting the latest and greatest version on cs uoregon edu soon diff old README new README 4 5c4 5 Version 2 6 as of 8 28 89 address 3D Eye Inc 2359 N Triphammer Rd Ithaca NY 14850 22a23 24 Version 2 6 released August 1989 lib output cylcone fix start norm w was not initialized 68a71 72 The SPD package is also available via anonymous FTP from cs uoregon edu diff old lib c new lib c 5c5 Version 2 6 8 28 89 437a438 start norm w 0 0 back to contents Solid Textures Tidbit by Roman Kuchkuda One piece of research that you might mention in RTN I had used procedural wood textures for a while and wondered whether you could use real wood textures Through some connections at the UNC hospital I had a block of pine CT scanned Sure enough the grain showed up very well The resulting pictures were more interesting than procedural texture The structure is more complex than the procedural model There were a few problems though 1 There is a lot of data in the CT scans and memory paging slows down the ray tracing like crazy 2 Reality doesn t look nearly as real as a neat clean procedural model of it does The results were so mixed that I never tried to get this published anywhere back to contents Sundry Comments by Jeff Goldsmith jeff Iago Caltech Edu About the ray tracing as a sleazy sales gimmick idea The whole point about my suggestion to include a ray tracer as part of a CG system is that it is in fact mostly useless and most buyers don t know that Thus it works as a great gimmick which is exactly promising someone something that they think they want but don t really No one will use it after finding out how long it takes so it doesn t have to have as many features as the rest of the system Yes this is a very cynical view but sales is a non technical problem and at least around here expensive systems are usually purchased by people who know nothing about them so it ought to be an effective technique with not a whole lot of resource expenditure Besides most CG programmers enjoy hacking ray tracers so you boost morale at the company at the same time by the way this is not entirely a joke but Euclidean distance calculation Iterative approaches work great on this problem A short summary and code for one is in Tom Duff s SIGGRAPH 84 Tutorial on Numerical Analysis a terrific article by the way as is his spline piece in the same place most of which he got from Moler and Morrison s Replacing Square Roots by Pythagorean Sums IBM Journal of Research and Development 27 6 Nov 1983 The method he describes has cubic convergence so it works well to unroll the loop and do a set number of iterations 4 iterations 2 4 2 yield 62 digits of precision back to contents Texture Mapping Question by Susan Spach What are good techniques for implementing texture mapping within raytracing Is point sampling with a good sampling strategy most commonly used Has mipmapping been extended to secondary rays I m interested too back to contents USENET cullings follow Ray Traced Image Files Prem Subramanyan Reply To prem geomag UUCP Prem Subramanyan Organization Florida State University Computing Center We have quite a collection of rasterfiles of all sizes here at geomag You can use the fbm package by Michael Mauldin to convert from Sun rasterfiles to GIF files The main reason why I have chosen to keep them as rasterfiles rather than convert them to GIF is that on the Sun the rasterfile viewers are neater In any case anonymous ftp to geomag gly fsu edu 128 186 10 2 cd to pub pics and download any pics you want In the future once I get the latest fbm package I will post it there as well We have a good collection of files ray traced on the eta 10g with QRT by Steve Koren The longest time taken for blue rst Z was 1 1 2 hrs The small ones 640x400 went in usually under 15 minutes In any case they are quite interesting back to contents Image Collection by Paul Raveling From raveling venera isi edu Paul Raveling Organization USC Information Sciences Institute With gobs of satisfaction I d like to announce the addition of some pictures of my own to the Img collection available on venera isi edu Along with this go sincere thanks to Nic Lyons and HPLabs for the opportunity to digitize these photos venera s pub directory now contains 2 compressed files to facilitate retrieval of images in this collection and of the imglib code These are pub img ls RAlF Z Directory listing of everything in the ftp images hierarchy pub img tar Z Code for imglib and the various simple programs using it The root directory ftp images and each of the four subdirectories containing images has its own README file with additional info Credits for 2 images that weren t from my own pictures are Window Rock My wife spotted and captured the natural spiral pattern at Window Rock Arizona Solings This is from the 1982 International Soling Association calendar I used to own and race one of these but wouldn t risk taking a camera aboard Here s a subject summary of the new images in images color mapped aspens Aspens in San Juan Mts between Ouray Silverton blue tigers Blue Angels in F11F Tigers ds train Durango Silverton narrow gauge train elk An elk in Banff National Park ghost house House in ghost town somewhere between Ouray and Silverton graycard Kodak gray card grayscale and color patches halfdome Halfdome in polarized infrared light Yosemite Nat l Park harvey Harvey an African lion who lived at the L A Zoo high line Durango Silverton narrow gauge train on the high line model Model at one of Frank s photo day shows probably in 1978 model fullscale Model at one of Frank s photo day shows probably in 1978 old497 Old 497 One of Durango Silverton s narrow gauge steamers porcupine Porcupine ranger cabin Mosquito Flats Banff puff1 puff2 Puff the cat not the dragon san juans San Juan Mountains between Ouray and Silverton smurf1 smurf4 Whitesmith aka The Smurf another cat snake Non digital snake not an adder solings Solings from 1982 International Soling Association calendar stream Stream in San Juan Mountains between Ouray and Silverton tbirds Thunderbirds window rock Window Rock x 1e X 1E at NASA Ames Dryden Flight Research Center Edwards AFB back to contents MTV Raytracer on ATARI ST precision error report by Dan Riley From riley batcomputer tn cornell edu Daniel S Riley Organization Cornell Theory Center Cornell University Ithaca NY In article 1171 laura UUCP wagener unidocv UUCP Roland Wagener writes I have ported the MTV Raytracer on the ATARI ST using the Turbo C Compiler The Program works fine and it uses about 3 hours CPU Time to create the Balls Picture in 320x200 Resolution But there is a bug somewhere in the program There are white spots in all reflecting surfaces This bug does not appear on a IBM PC programmed with Zortech C But the PC needs 5 hours for a 200x200 Picture This sounds like a floating point precision problem I ve been playing with a number of ray tracers including MTV on my Amiga I ve seen white spots and other sorts of splotches if I use the Motorola ffp format floating point routines which are single precision 32 bit only They go away if I use IEEE math libraries all calculations done with 64 bit doubles 3 hours cpu for a 320x200 picture on an 8 MHz 68000 sounds like single precision to me but I don t know the ST or Turbo C that well I suppose there must be papers on controlling round off errors in ray tracing algorithms but none of the ray tracers I ve seen make any special efforts in that regard Of course all the ones I have source code to are meant to be clean and simple not fast and convoluted Dan Riley riley tcgould tn cornell edu cornell batcomputer riley Wilson Lab Cornell U back to contents Question on Ray Tracing Bicubic Parametric Patches by Robert Minsk From ccoprrm pyr gatech edu UUCP Robert E Minsk Organization Georgia Institute of Technology Does anyone have a routine of know of any pointers to articles to find a intersection between a ray and a bicubic parametric patch besides a recursive subdivision algorithm I am trying to speed things up a bit in my ray tracer back to contents Eric Haines erich acm org Ray Tracing News Volume 2 Number 5 Ray Tracing News Volume 2 Number 5 Ray Tracing News Volume 2 Number 5 Ray Tracing News Volume 2 Number 5 Ray Tracing News Volume 2 Number 5 Ray Tracing News Volume 2 Number 5 Ray Tracing News Volume 2 Number 5 Ray Tracing News Volume 2 Number 5 Ray Tracing News Volume 2 Number 5 Ray Tracing News Volume 2 Number 5 http www acm org tog resources RTNews html rtnews7c html http www acm org tog resources RTNews html rtnews7c html http www acm org tog resources RTNews html rtnews7c html http www acm org tog resources RTNews html rtnews7c html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews8a.html%%==%%Ray Tracing News, Volume 2, Number 6%%==%%Ray Tracing News "Light Makes Right" September 20, 1989 Volume 2, Number 6 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%31543%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right September 20 1989 Volume 2 Number 6 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1989 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction New People and Address Changes Q A on Radiosity Using Ray Tracing by Mark VandeWettering and John Wallace Dark Bulbs by Eric Haines MTV Ray Tracer Update and Bugfix by Mark VandeWettering DBW Ray Tracer Description Net News Cullings Wanted Easy Ray Torus Intersection by Jochen Schwarze Polygon to Patch NFF Filter by Didier Badouel Texture Mapping Resources by Eric Haines Prem Subrahmanyam Ranjit Bhatnagar and Jack Ritter Introduction There are a lot of new people with some interesting fields of study There s been a lot of talk about texture mapping and the DBW ray tracer on the net This discussion will probably continue into next issue but I felt Jack Ritter s posting a good way to end it for now I ve also been toying with texturing again making my version of Mount Mandrillbrot fractal mountain with everyone s favorite beasty textured onto it which some clever person invented at the University of Waterloo I think some years ago does anyone know who There are also other useful snippets throughout However one major reason that I m flushing the queue right now is that the node hpfcrs is disappearing off the face of the earth So please note my only valid address is the wrath path at the top of the issue Thanks back to contents New People and Address Changes Panu Rekola pre cs hut fi To update my personal information in your files Surface mail Panu Rekola Mannerheimintie 69 A 7 SF 00250 Helsinki Finland Phone 358 0 4513243 work 358 0 413082 home Email pre cs hut fi Interests illumination models texture mapping parametric surfaces You may remove one of the names you may have in the contact list Dr Markku Tamminen died in the U S when he was returning home from SIGGRAPH How his project will go on is still somewhat unclear Andrew Pearce pearce alias I wrote my MS thesis on Multiprocessor Ray Tracing then moved to Alias where I sped up Mike Sweeney s ray caster I ve just completed writing the Alias Ray Tracer using a recursive uniform subdivision method see Dave Jevans paper in Graphics Interface 89 Adaptive Voxel Subdivision for Ray Tracing with additional bounding box and triangle intersection speed ups Right now I m fooling around with using the guts of the ray tracer to do particle object collision detection with complex environments and particle particle interaction with the search space reduced by the spatial subdivision No I don t use the ray tracer to render the particles In response to Susan Spach s question about mip mapping we use mip maps for our textures we get the sample size by using a cone size parameter which is based on the field of view aspect ratio distance to the surface and angle of incidence For secondary rays this size parameter is modified based on the tangents to the surface and the type of secondary ray it is reflection or refraction This may be difficult to do if you are not ray tracing surfaces for which the tangent information is readily available smooth shaded polygonal meshes Andrew Pearce Alias Research Inc Toronto Ontario Canada pearce alias csri utoronto ca pearce alias UUCP allegra ihnp4 watmath utai utcsri alias pearce Brian Corrie bcorrie uvicctr uvic ca I am a graduate student at the University of Victoria nearing the completion of my Masters degree The topic of my thesis is producing realistic computer generated images in a distributed network environment This consists of two major research areas providing a distributed in the parallel computing sense system for ray tracing as well as a workbench for scene description and image manipulation The problems that need to be addressed by a system for parallel processing in a distributed loosely coupled system are quite different than those addressed by a tightly coupled parallel processor system Because of the likely very high cost of communication in a distributed processing environment most parallel algorithms currently used are not feasible due to the high overhead The gains of parallel ray tracing in a distributed environment are the obvious speedup by bringing more processing power to bear on the problem the flexibility of distributed systems and the availability of the resources that will become accessible as distributed systems become more prominent in the computer community Whew what a mouthful In a nutshell I am interested in ray tracing in general parallel algorithms distributed systems for image synthesis any one know of any good references and this new fangled radiosity stuff Joe Cychosz Purdue University CADLAB Potter Engineering Center W Lafayette IN 47906 Phone 317 494 5944 Email cychosz ecn purdue edu My interests are in supercomputing and computer graphics Research work is Vectorized Ray Tracing Other interests are Ray tracing on MIMD tightly coupled shared memory machines Algorithm vectorization Mechanical design processes Music synthesis and Rendering in general Jerry Quinn Department of Math and Computer Science Bradley Hall Dartmouth College Hanover NH 03755 sunapee dartmouth edu quinn My interests are currently ray tracing efficiency parallelism animation radiosity and whatever else happens to catch my eye at the given moment Marty Barrett octrees parametric surfaces parallelism mlb6 psuvm bitnet Here is some info about my interests in ray tracing I m interested in efficient storage structures for ray tracing including octree representations and hybrid regular subdivision octree grids I ve looked at ray tracing of parametric surfaces in particular Bezier patches and box spline surfaces via triangular tessellations Parallel implementations of ray tracing are also of interest to me Charles A Clinton Sierra Geophysics Inc 11255 Kirkland Way Kirkland WA 98033 USA Email uw beaver sumax ole steven cac Voice 206 822 5200 Telex 5106016171 FAX 206 827 3893 I am doing scientific visualization of 3D seismic data To see the kind of work that I am doing check out A Rendering Algorithm for Visualizing 3D Scaler Fields Paolo Sabella Schlumberger Doll Research Computer Graphics Vol 22 Number 4 SIGGRAPH 88 Conference Proc pp 51 58 In addition I try to keep up with ray tracing and computer graphics in general I occasionally try my hand at doing some artistic ray tracing I would like to extend my thanks to Mark VandeWettering for distributing MTV It has provided a wonderful platform for experimentation Jochen Schwarze I ve been developing several smaller graphics packages e g a 3D visualization of turning parts etc Now I m implementing the 2nd version of a ray tracing program that supports modular programming using a description language C vector analysis and body class hierarchy CSG trees texture functions and mapping a set of body primitives including typeface rendering for logos and a network ipc component to allow several cpu s to calculate a single image My interests lie of course in speedup techniques and the simulation of natural phenomena clouds water etc Just starting with this Jochen Schwarze Domain schwarze isaak isa de ISA GmbH Stuttgart West Germany UUCP schwarze isaak uucp Bang uunet unido isaak schwarze S Mail ISA GmbH c o Jochen Schwarze Azenberstr 35 7000 Stuttgart 1 West Germany back to contents Q A on Radiosity Using Ray Tracing by Mark VandeWettering and John Wallace From Mark VandeWettering I am currently working on rewriting my ray tracer to employ radiosity like effects Your paper with Wallace and Elmquist is very nice and suggests a really straightforward implementation I just have a couple of questions that you might be able to answer When you shoot energy from a source patch it is collected at a specific patch vertex How does this energy get transferred to a given patch for secondary shooting In particular is the vertex shared between multiple patches or is each vertex only in a single patch I can imagine the solution if each vertex is distinct but have trouble with the case where vertices are shared Any quick insights The only other question I have is HOW DO YOU GET SUCH NICE MODELS TO RENDER We use ME30 HP s Romulus based solids modeler EAH Is there a public domain modeling package that is available for suns or sgi s that I can use to make more sophisticated models Something cheap even The BRL modeler and ray tracer runs on a large number of machines and they like having universities as users see Vol 2 No 2 archive 6 According to Mike Muuss write up some department in Princeton already has a copy The Simple Surface Modeler SSM works on SGI equipment It was developed at the Johnson Space Center and since they are not supposed to make any money off it is being sold cheap by a commercial distributor COSMIC at 404 542 3265 can send you some information on it It also runs on a Pixel Machine which is what I saw it running on at SIGGRAPH 88 though I don t believe support for this machine will be shipped It s evidentally not shipping yet red tape the product is done but should be realsoonnow More information when I get the abstract Does anyone else know any resources Reply from John Wallace Computing the patch energy in progressive radiosity using ray tracing Following a step of progressive radiosity every mesh vertex in the scene will have a radiosity Energy is not actually collected at the mesh vertices What is computed at each vertex is the energy per unit area radiosity leaving the surface at that location The patch radiosity is the average energy per unit area over the patch Finally the patch energy is the patch radiosity times the patch area energy per unit area times area The vertex radiosities can be considered a sampling of the energy per unit area at selected points across the patch To obtain the average energy per unit area over the patch take the average of the vertex radiosities This assumes that the vertices represent uniform sub areas of the patch This is not necessarily true and when it is not a more accurate answer is obtained by taking an area weighted average of the vertex radiosity The weight given to a vertex is equal to the area of the patch that it represents In our work we used a uniform mesh and weighted all vertices equally It doesn t matter whether vertices are shared by neighboring patches since we re talking about energy per unit area Picture four patches that happen to all share a particular vertex The energy per unit area leaving any of the patches at the vertex is not affected by the fact that other patches share that vertex If we were somehow collecting energy at the vertex then it would have to be portioned out between the patches Once the patch radiosity is know the patch energy is obtained by multiplying patch radiosity times patch area back to contents Dark Bulbs by Eric Haines An interesting idea mentioned to me by Andrew Glassner was the concept of darkbulbs in computer graphics This idea is a classic joke technology in which the darkbulb sucks light out of an area For example if you want to sleep during the daytime you simply turn on your negative 100 watt dark bulb and your bedroom is flooded in darkness Andrew noted that this technology is entirely viable in computer graphics and would even be useful in obtaining interesting results I happened to mention the idea to Roy Hall and he told me that this was an undocumented feature of the Wavefront package Last year Wavefront came out with an image of two pieces of pottery behind a candle with wonderful texturing on the objects It turns out that the artist had wanted to tone down the brightness in some parts of the image and so tried negative intensity light sources This turned out to work just fine and the artist mentioned this to Roy who as an implementer of this part of the package had never considered that anyone would try this and so never restricted the intensity values to be non negative back to contents MTV Ray Tracer Update and Bugfix by Mark VandeWettering this was extracted by me from personal mail with parts appearing on comp graphics EAH As was recently pointed out to me by Mike Schoenborn the cylinder code in the version of the MTV raytracer is broken somewhat severely Or at least it appeared to be so what actually happens is that I forgot to normalize two vectors which leads to interesting distortions and weird looking cylinders Anyway the bug is in cone c in the function MakeCone After the vectors cd cone u and cd cone v are created they should be normalized A context diff follows at the end of this This makes the SPD tree look MUCH better And all this time I thought it was Eric s fault This bugfix will be worked into the next release and I should also update the version on cs uoregon edu SOMETIME REAL SOON NOW read don t hold your breath TOO anxiously Hope that this program continues to be of use Somebody has some texture mapping code that they are sending me I will probably try to integrate it in before I make my next release I am also trying to get in spline surfaces but am having difficulty to the point of frustration Any recommendations on implementing them tmp cone c Fri Aug 25 20 25 52 1989 cone c Fri Aug 25 21 31 04 1989 240 247 240 251 find two axes which are at right angles to cone w VecCross cd cone w tmp cd cone u VecCross cd cone u cd cone w cd cone v VecNormalize cd cone u VecNormalize cd cone v cd cone min d VecDot cd cone w cd cone base cd cone max d VecDot cd cone w cd cone apex back to contents DBW Ray Tracer Description A ray tracer that has been mentioned in these pages screens before is DBW Not having an Amiga and not being able to deal with zoo files I never got a copy Prem Subrahmanyam has now made it available via anonymous FTP from geomag gly fsu edu in pub pics DBW src Output is four bits for each channel The original program was written by David B Wecker translating from a Vax 11 750 to the Amiga with a conversion to Sun workstations by Ofer Licht ofer gandalf berkeley edu EAH Below is an excerpt from the documentation RAY DOC The RAY program knows how to create images composed of four primitive geometric objects spheres parallelograms triangles and flat circular rings disks with holes in them Some of the features of the program are Diffuse and specular reflections with arbitrary levels of gloss or polish Rudimentary modeling of object to object diffusely reflected light is also implemented that among other things accurately simulates color bleed effects from adjacent contrasting colored objects Mirror reflections including varying levels of mirror smoothness or perfection Refraction and translucency which is akin to variable microscopic smoothness like the surface of etched glass Two types of light sources purely directional parallel rays from infinity of constant intensity and spherical sources like light bulbs which cast penumbral shadows as a function of radius and distance where intensity is determined by the inverse square law Photographic depth of field That is the virtual camera may be focused on a particular object in the scene and the virtual camera s aperture can be manipulated to affect the sharpness of foreground and background objects Solid texturing Normally a particular object say a sphere is considered to have constant properties like color over the entire surface of the object often resulting in fake looking objects Solid texturing is a way to algorithmically change the surface properties of an object thus the entire surface area is no longer of constant nature to try and model some real world material Currently the program has built in rules for modelling wood marble bricks snow covered scenes water with arbitrary wave sources plus more abstract things like color blend functions Fractals The program implements what s known as recursive triangle subdivision which creates all manners of natural looking surface shapes like broken rock mountains etc The character of the fractal surface degree of detail roughness etc is controlled by parameters fed to the program AI heuristics to complete computation of a scene within a user specified length of time back to contents USENET cullings follow Wanted Easy Ray Torus Intersection by Jochen Schwarze What I want to do is to turn a path consisting of line and arc segments around an axis and then ray trace the generated turning part The rotated line segments produce cylinders or cones that are easy to intersect with a ray whereas the arcs produce tori To evaluate the intersection of the ray with a torus I d have to numerically solve a polynomial equation of fourth degree Does anybody know a way that avoids solving a general fourth degree equation Perhaps something that respects torus geometry and allows to split the equation into two quadric ones Any other fast way to do it Thanks very much Jochen Schwarze Domain schwarze isaak isa de ISA GmbH Stuttgart West Germany UUCP schwarze isaak uucp Bang uunet unido isaak schwarze back to contents Polygon to Patch NFF Filter by Didier Badouel This is a new filter program for NFF databases it converts polygons p into patches pp computing normal vector for vertices Didier BADOUEL badouel irisa fr INRIA IRISA Phone 33 99 36 20 00 Campus Universitaire de Beaulieu Fax 99 38 38 32 35042 RENNES CEDEX FRANCE Telex UNIRISA 950 473F Code removed Find it at cs uoregon edu or write him EAH back to contents Texture Mapping Resources by Eric Haines Prem Subrahmanyam Ranjit Bhatnagar and Jack Ritter From Eric Haines Robert Minsk had a question about how to do inverse mapping on a quadrilateral This was my response For the inverse bilinear mapping of XYZ to UV see p 59 64 of An Introduction to Ray Tracing edited by Andrew Glassner Academic Press hot off the press Tell me if you find any bugs since I need to send typoes to AP This same info is in the Intro to RT SIGGRAPH course notes from 1987 1988 with one important typo fixed see old issues of the Ray Tracing News to find out the typo An excellent discussion of the most popular mappings affine bilinear and projective and for a discussion on why to avoid simple Gouraud interpolation get a copy of Paul Heckbert s Master s Thesis again hot off the press Fundamentals of Texture Mapping and Image Warping It s got what you need and is also a good start on sampling filtering problems Order it as Report No UCB CSD 89 516 June 1989 from Computer Science Division Dept of Electrical Engineering and Computer Sciences University of California Berkeley California 94720 It was 5 50 when I ordered mine Oh I should also note it has source code in C for most of the algorithms described in the text From prem geomag fsu edu Prem Subrahmanyam Newsgroups comp graphics Subject Re Texture mapping Organization Florida State University Computing Center I would strongly recommend obtaining copies of both DBW Render and QRT as both have very good texture mapping routines DBW uses absolute spatial coordinates to determine texture while QRT uses a relative position per each object type mapping DBW has some really interesting features like sinusoidal reflection to simulate waves a turbulence based marble wood texture based on the wave sources defined for the scene It as well has a brick texture checkerboard and mottling turbulent variance of the color intensity Writing a texture routine in DBW is quite simple since you re provided with a host of tools like a turbulence function noise function color blending etc I have recently created a random color texture that uses the turbulence to redefine the base color based on the spatial point given which it then blends into the object s base color using the color blend routines Next will be a turbulent color marble texture that will modify the marble vein coloring according to the turbulent color Also in the works are random color checkerboarding this will require a little more thought variant brick height and mortar color presently they are hard wired the list is almost endless I would think the ideal ray tracer would be one that used QRT s user definable texture patches which are then mapped onto the object as well as DBW s turbulence wave based routines The latter would have to be absolute coordinate based while the former can use QRT s relative position functions In any case getting copies of both of these would be the most convenient as there s no reason to reinvent the wheel From ranjit grad1 cis upenn edu Ranjit Bhatnagar 4211 Pine St Phila PA 19104 Newsgroups comp graphics Subject Re Texture mapping by spatial position Organization University of Pennsylvania The combination of 3 d spatial texture mapping where the map for a particular point is determined by its position in space rather than its position on the patch or polygon with a nice 3 d turbulence function can give really neat results for marble wood and such Because the texture is 3 d objects look like they are carved out of the texture function rather than veneered with it It works well with non turbulent texture functions too like bricks 3 d checkerboards waves and so on However there s a disadvantage to this kind of texture function that I haven t seen discussed before as generally proposed it s highly unsuited to animation The problem is that you generally define one texture function throughout all of space If an object happens to move its texture changes accordingly It s a neat effect try it but it s not what one usually wants to see The obvious solution to this is to define a separate 3 d texture for each object and further cause the texture to be rotated translated and scaled with the object DBW does not allow this so if you want to do animations of any real complexity with DBW you can t use the nice wood or marble textures This almost solves the problem However it doesn t handle the case of an object whose shape changes Consider a sphere that metamorphoses into a cube or a human figure which walks bends and so on There s no way to keep the 3 d texture function consistent in such a case Actually the real world has a similar defect so to speak If you carve a statue out of wood and then bend its limbs around the grain of the wood will be distorted If you want to simulate the real world in this way and get animated objects whose textures stay consistent as they change shape you have to use ordinary surface mapped 2 d textures But 3 d textures are so much nicer for wood stone and such There are a couple of ways to get the best of both worlds I assume that an object s surface is defined as a constant set of patches whether polygonal or smooth and though the control points may be moved around the topology of the patches that make up the object never changes and patches are neither added to or deleted from the object during the animation 1 define the base shape of your object and sample its surface in the 3 d texture You can then use these sample tables as ordinary 2 d texture maps for the animation 2 define the base shape of your object and for each metamorphosized shape keep pointers to the original shape Then whenever a ray strikes a point on the surface of the metamorphed shape find the corresponding point on the original shape and look up its properties i e color etc in the 3 d texture map Note I use ray tracing terminology but the same trick should be applicable to other techniques The first technique is perhaps simpler and does not require you to modify your favorite renderer which supports 2 d surface texture maps You just write a preprocessor which generates 2 d maps from the 3 d texture and the base shape of the object However it is susceptible to really nasty aliasing and loss of information The second technique has to be built into the renderer but is amenable to all the antialiasing techniques possible in an ordinary renderer with 3 d textures such as DBW Since the notion of the same point on a particular patch when the control points have moved is well defined except in degenerate cases the mapping shouldn t be a problem though it does add an extra level of antialiasing to worry about Why Imagine that a patch which is very large in the original base shape has become very small sub pixel size in the current animated shape Then a single pixel sized sample in the current shape could be mapped to a large part of the original using for instance stochastic sampling or analytic techniques If anyone actually implements these ideas I d like to hear from you and get credit heh heh if I thought of it first I doubt that I will have the opportunity to try it From ritter versatc UUCP Jack Ritter Organization Versatec Santa Clara Ca 95051 Commenting on Ranjit s posting It seems to me that you could solve this problem by transforming the center orientation of the texture function along with the object that is being instantiated No need to store values no tables etc The texture function must of course be simple enough to be so transformable Example wood grain simulated by concentric cylindrical shells around an axis the core of the log Imagine the log s center line as a half line vector plus a position if necessary making it transformable Imagine each object type in its object space BOLTED to the log by an invisible bracket As you translate and rotate the object you also sling the log around But be careful some of these logs are heavy and might break your teapots I use only natural logs myself Jack Ritter S W Eng Versatec 2710 Walsh Av Santa Clara CA 95051 Mail Stop 1 7 408 982 4332 or 408 988 2800 X 5743 UUCP ames apple sun pyramid versatc ritter back to contents Eric Haines erich acm org Ray Tracing News Volume 2 Number 6 Ray Tracing News Volume 2 Number 6 Ray Tracing News Volume 2 Number 6 Ray Tracing News Volume 2 Number 6 Ray Tracing News Volume 2 Number 6 Ray Tracing News Volume 2 Number 6 Ray Tracing News Volume 2 Number 6 Ray Tracing News Volume 2 Number 6 Ray Tracing News Volume 2 Number 6 Ray Tracing News Volume 2 Number 6 http www acm org tog resources RTNews html rtnews8a html http www acm org tog resources RTNews html rtnews8a html http www acm org tog resources RTNews html rtnews8a html http www acm org tog resources RTNews html rtnews8a html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews8b.html%%==%%Ray Tracing News, Volume 2, Number 7%%==%%Ray Tracing News "Light Makes Right" October 13, 1989 Volume 2, Number 7 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%58793%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right October 13 1989 Volume 2 Number 7 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1989 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction New People and Address Changes Solid Surface Modeler Information by Eric Haines Minimum Bounding Sphere Program by Marshall Levine Parallelism Modeler Info Request by Brian Corrie Net News Cullings Ray Tracer Available by Craig Kolb Source from Roy Hall s Book by Tim O Connor More on Texture Mapping by Spatial Position by Paul Lalonde Procedural Bump mapping Query by Prem Subrahmanyam Ray Tracer Performance on Machines by Gavin A Bell Steve Lamont Projective Mapping Explanation by Ken Turk Turkowski Intersection Calculation Problem Request Jari Toivanen Mathematical Elements for Computer Graphics Call for Errata by David Rogers Raytracing on NCUBE Request by Ping Kang Hsiung Intersection Between a Line and a Polygon UNDECIDABLE by Dave Baraff Tom Duff Introduction It s October the time when the air turns chilly the leaves turn red and people s minds turn towards releasing a public domain version of their ray tracer Holy smokes there s a lot of them coming out lately This month Craig Kolb s ray tracer has become available along with the first PD ray tracer from Australia by David Hook Paul Lalonde mentions that his will be coming out soon and will include spline surfaces Also David Kirk and Jim Arvo have created a ray tracer which they used in their workshop in Australia and which may be released to the general public soon Other code that has been made available is that printed in Roy Hall s Illumination and Color in Computer Generated Imagery book Next month I hope to collect various timing information from all sorts of ray tracers on all sorts of machines I hope to do a trace off sometime soon comparing MTV s Craig s DBW QRT ART mine and any others I can get up and running If anyone else has any timings or observations on performance of ray tracers and various machines please send them to me back to contents New People and Address Changes David Hook dgh munnari OZ AU Dept Of Engineering Computer Resources University Of Melbourne Parkville Vic 3052 Australia G day Our major area of interest in ray tracing is CSG modeling and we have a locally developed ray tracer which is a step towards this as a department we are also involved with the Faculty of Architecture at this University so we are starting to look at special effects somewhat more seriously than before This has also led to a greater interest in acceleration techniques Personally I am currently doing a masters degree in the area of CSG and ways of introducing patches into the model The rendering technique being used is ray tracing And a further note from David Hook The mailing list has been set up on munnari so if you send it to rtnews munnari OZ AU it will should travel around Oz to the people who want it I am asking people who subscribe if they wish to be on the contact list etc As a bit of additional info I have written a ray tracer which does CSG and renders algebraic surfaces ala Pat Hanrahan although in this case it s built around Sturm Sequences and we occasionally use CSG to take cross sections of the surfaces The interest in algebraic surfaces began because a friend of mine was struggling with a 6th order surface known as the Hunt Surface getting a good feel for the cusps on it was turning out to be awful using polygonal subdivision In any case there is a public domain version of all this sitting in pub on munnari OZ AU 128 250 1 21 which can be got by anonymous ftp The file is vort tar Z Knowing a bit more about the whole business now it s a bit of an embarrassment Still it may be of interest to someone and constructive criticism is always welcome From a README file in his ray tracing distribution By the by for people who are interested there are an excellent series of papers on ray tracing and computer graphics in general published in the NATO ASI Series of books The volume in question is in Vol 40 series F and is titled Theoretical Foundations of Computer Graphics and CAD It was published in 1988 Springer Verlag Roman Kuchkuda s paper in it An Introduction To Ray Tracing would be the best introductory paper we have seen to date Apart from that it was the first paper we found that actually said what a superquadric was NAME Hench Stephen D SNAIL MAIL 2621 C Stewart Drive E MAIL hench csclea ncsu edu Raleigh NC 27603 BRIEF Undergrad in Mathematics and Computer Science at NCSU Interested in ray tracing would I want to subscribe if I wasn t radiosity and rendering in general Marshall Levine 136 1937 Hall Wilson College Princeton University Princeton NJ 08544 609 734 6061 Home Marshall Levine 5212 Louise Avenue Encino California 91316 818 995 6528 818 906 7068 E mail 1 mplevine phoenix princeton edu or 2 mplevine gauguin princeton edu or 3 mplevine bogey princeton edu My main interests are helicopters and computer graphics Within graphics I am interested in animation and motion control While I think it is great to see a ray traced magnifying glass sitting on top of a cicuit board I would rather see the magnifying glass fly smoothly over a spinning board while the camera flies smoothly through the scene I am currently designing a flexible graphics language with a friend of mine Chris Williams Princeton U 92 If anyone is interested I can say more about that later Cornell Program of Computer Graphics A ray tracing mailing list has been set up by Tim O Connor ray tracing news wisdom graphics cornell edu Program of Computer Graphics 120 Rand Hall Cornell University Ithaca NY 14853 People on this list who ve already been intro ed here include Roy Hall Mark Reichert Ben Trumbore and Tim O Connor New people and brief bio sketches Wash Wawrzynek paw squid graphics cornell edu Current interest are user interfaces and visualization for computational mechanics Len Wanger lrw freedom graphics cornell edu My sketch is on a piece of paper but my interests are I am a graduate student in the department of computer graphics at Cornell University I am interested in modeling and visual perception Filippo Tampieri fxt freedom graphics cornell edu Areas of interest parallel distributed ray tracing fast algorithms for ray tracing Ricardo Pomeranz rxp venus graphics cornell edu Interests constructive solid geometry and rendering Paul Wanuga phw neptune graphics cornell edu Masters student at Cornell s Computer Graphics Lab Interests rendering realistic complex environments in realistic times Kathy Kershaw kershaw hope graphics cornell edu I m Kathy Kershaw I did the ray tracing thing once Maybe it ll have something to do w my master s thesis maybe not Colin Summers colin scarpa graphics cornell edu Just recently interested in computer graphics and heading into the abyss from the architecture side I have a background in personal computers and spent a year out of the design studio to computer consult in Manhattan Glad to be back in the world of academia As soon as someone comes across with a Macintosh like text processor for xWindows let me know Ted Himlan thh squid Graphics Cornell EDU Color science radiometric measurement array camera interest detailed measurements on an environment for comparison to simulation Julie O Brien Dorsey job hope graphics cornell edu Computer aided design applications radiosity lighting design Francois Sillion fxs bruno graphics cornell edu I am currently on a Post Doc position at Cornell after having completed my PhD at the Ecole Normale Superieure in Paris France where my work included the development of a two pass method for lighting calculations combining ray tracing and radiosity My interests are illumination models local and global animation and interactivity back to contents Solid Surface Modeler Information by Eric Haines The Solid Surface Modeler from NASA finally came out The disappointing news is that even though it s a non profit unit of the University of Georgia the thing is priced at 1250 for a cartridge tape and documentation which is 43 separately The reason I mention it is this newsletter is that it was used for some rather elaborate databases that were both modeled and ray traced on the AT T Pixel Machine Unfortunately it s unclear whether the Pixel Machine driver program is included in the distribution The modeler itself sounds reasonable source code comes on the tape and there seems to be no restrictions on the use of the software It s a pity that it s pricey when compared to say FSF stuff but I guess someone has to pay for those glossy advertisement folders From their literature SSM was written in standard C with Silicon Graphic s Iris Graphics Library calls and AT T PicLib calls The program is available for the Silicon Graphics IRIS workstation running version 3 1 of IRIX and a Sun Workstation with AT T PXM964 running 4 2 BSD For more information contact COSMIC The University of Georgia 382 East Broad Street Athens GA 30602 404 542 3265 back to contents Minimum Bounding Sphere Program by Marshall Levine I think you will be interested in the following program It is a minimum bounding sphere program As the explained in the header comments the main algorithm seems to solve the problem in linear time Please let me know what you think clusters p Written by Marshall Levine Princeton University 92 e mail mplevine phoenix princeton edu Algorithm designed by Marshall Levine and Chris Williams Princeton U 92 This program searches through a 3 dimensional space of randomly distributed points for a cluster of 10 stars within the smallest radius possible I first implemented a pri list This is a linked list of real numbers representing distances The list is kept in order However when a number that would go farther into the list than the number of points per sphere NUMINSPHERE tries to go into the list the insert procedure stops it This is done because the distance is useless For example if NUMINSPHERE is 5 and a number would be inserted into the 7th slot in the list it is not inserted The minimum radius of a sphere with 5 points would be determined by the 5th element of the list not including the header so any number inserted after the 5th element is useless and is therefore not inserted If there are not NUMINSPHERE elements in the pri then there are not enough points to fill the sphere The brute force algorithm loops through every point in space For each point the algorithm finds the distance between that point and every other point and puts that distance into the pri When all points have been compared against this point the NUMINSPHERE th element is taken to be the minimum radius of a sphere centered at this point containing NUMINSPHERE points However points are not compared against themselves so the exact number of comparisons is N 2 N making this an N 2 algorithm The efficient algorithm designed by Chris Williams and me divides the space into a 3 dimensional grid If the grid is divided into NUMPOINTS NUMINSPHERE sectors then at least one of the sectors must have at least NUMINSPHERE points Now make spheres with the same volume as the sectors At least one sphere surrounding one point will have at least NUMINSPHERE points It turns out that the tradeoff between fewer computations and more overhead is minimized by choosing the grid to have enough sectors such that each sector is r 2 on each side where r is the radius of the aforementioned sphere Our algorithm starts with a sphere radius equal to the distance from one corner of the unit cube to another 3 5 Given the first point in the list we compare that point against every other point in sectors touching the sphere In this case every other point in space By storing the distances and then taking the NUMINSPHERE th number from the pri list as in the brute algorithm we frequently reduce the size of the sphere Then we check the next point with the new smaller sphere size and continue in this way until we have tested every point As we go along the minimum sphere size keeps shrinking until for any given point we only check a few neighboring sectors if any In practice this radius shrinks so quickly that the algorithm displays LINEAR BEHAVIOR NOTE This program was written for clarity not for efficiency If it is to be used in any real applications there are many ways to speed it up Bruteforce Our algorithm Average of 3 runs Points Comparisons comps points Comparisons comps points 50 2450 49 000 958 19 160 75 5550 74 000 1241 16 547 100 9900 99 000 2111 21 110 150 22350 149 000 2785 18 567 200 3689 18 445 250 5120 20 480 300 6010 20 033 350 7149 20 426 400 7658 19 145 600 11404 19 007 800 16781 20 976 1000 20438 20 438 Testing 50 points Brute force Best sphere 0 3067962678 Number of comparisons 2450 Efficient Algorithm Best sphere 0 3067962678 Number of comparisons 946 time cumsecs call ms call name 31 6 0 10 1 100 01 brutecluster Testing 300 points Brute force Best sphere 0 1569231423 Number of comparisons 89700 Efficient Algorithm Best sphere 0 1569231423 Number of comparisons 5617 time cumsecs call ms call name 44 2 3 27 1 3267 00 brutecluster program clusters input output const MAXNUMPOINTS 501 The maximum of points we can handle NUMINSPHERE 10 stars to find inside sphere INFINITY 999999 9 Larger than largest distance possible MAXUSESPACE 20 Maximum length per edge of space grid PI 3 1415926535 type datatype real point record The type of a point x real y real z real data datatype end ptr node node record Linked list for a distances list called pri data real next ptr end sptr spacenode Linked list for each sector in the space grid spacenode record index integer Stores index of that point in points next sptr end var rndnm integer Needed for the random number generator points array 1 MAXNUMPOINTS of point All points in space listhead ptr List head for distances list called pri space array 0 MAXUSESPACE 0 MAXUSESPACE 0 MAXUSESPACE of sptr The space grid hereafter called grid spacesize usespace integer Size per edge of grid NUMPOINTS integer The number of points we have in space Support routines for random generators procedure seed Seed the random number generator begin writeln seed readln rndnm end function rndom scale integer real Make random real from 0 to scale begin rndnm abs abs rndnm 921 1 mod 32749 rndom rndnm scale 32749 end procedure randompoint var pt point Generate a random point within begin a unit cube pt x rndom 1 pt y rndom 1 pt z rndom 1 end procedure generatepoints Generate NUMPOINTS points in space var x integer begin for x 1 to NUMPOINTS do randompoint points x end Support routines for the pri list procedure initprilist Initialize the pri list begin new listhead listhead data 0 0 new listhead next listhead next data INFINITY listhead next next nil end procedure clearprilist Clear the pri list var p oldp ptr begin p listhead while p nil do begin oldp p p p next dispose oldp end new listhead listhead data 0 0 new listhead next listhead next data INFINITY listhead next next nil end procedure insertprilist r real Insert a distance into pri list var p oldp temp ptr pri is just a linked list of distances x integer kept in low high order The catch is begin that if a number should be inserted after x 1 the NUMINSPHERE th node we don t bother p listhead next inserting it because it isn t in the oldp listhead smallest sphere with NUMINSPHERE points while r p data and x nil do begin x x 1 p p next end if x nil do begin writeln p data 15 10 p p next end writeln nil end Miscellaneous support routines procedure printpoint pt point Print out a point begin writeln pt x 8 5 pt y 8 5 pt z 8 5 end function cube x real real Return cube root of a number begin cube exp 1 3 ln x end Brute Force algorithm procedure brutecluster Find minimum sphere containing NUMINSPHERE points by testing the distance between every point var distx disty distz dist real Find distance between two points bestsphere trysphere real Find minimum sphere numcomps integer comparisons thispoint againstpoint integer Counters begin clearprilist Kill the priority list bestsphere INFINITY numcomps 0 for thispoint 1 to NUMPOINTS do Test every point begin clearprilist for againstpoint 1 to NUMPOINTS do against every other point if thispoint againstpoint then Don t compare point against self begin distx points thispoint x points againstpoint x disty points thispoint y points againstpoint y distz points thispoint z points againstpoint z dist sqrt distx distx disty disty distz distz numcomps numcomps 1 if dist MAXUSESPACE then writeln NOT ENOUGH MEMORY FOR GRID for x 0 to usespace do for y 0 to usespace do for z 0 to usespace do space x y z nil Clear the grid for thispoint 1 to NUMPOINTS do Go through every point begin new temp temp index thispoint x trunc points thispoint x spacesize y trunc points thispoint y spacesize z trunc points thispoint z spacesize temp next space x y z Put this point into proper space x y z temp sector in grid end end procedure elegantcluster Find smallest sphere containing NUMINSPHERE points by looping through every point checking ROUGHLY only the points within a radius less than or equal to the minimum radius found so far var bestsphere trysphere real xmin xmax ymin ymax zmin zmax integer Dimensions of box to check thispoint integer The current point to test against x y z integer The current grid we are testing distx disty distz dist real For computing distances numcomps integer comparisons cpindex sptr Pointer into point list for a grid sector begin makespace bestsphere 1 732050808 Start with radius of distance from one numcomps 0 corner of unit cube to other 3 5 for thispoint 1 to NUMPOINTS do Loop for every point begin clearprilist xmin trunc points thispoint x bestsphere spacesize xmax trunc points thispoint x bestsphere spacesize ymin trunc points thispoint y bestsphere spacesize ymax trunc points thispoint y bestsphere spacesize zmin trunc points thispoint z bestsphere spacesize zmax trunc points thispoint z bestsphere spacesize if xmin usespace then xmax usespace grid that we want to check if ymax usespace then ymax usespace against the current point if zmax usespace then zmax usespace for x xmin to xmax do for y ymin to ymax do for z ymin to ymax do Loop through every sector in this box begin cpindex space x y z while cpindex nil do Test against every point in this sector begin if thispoint cpindex index then Don t test point against begin itself distx points thispoint x points cpindex index x disty points thispoint y points cpindex index y distz points thispoint z points cpindex index z dist sqrt distx distx disty disty distz distz numcomps numcomps 1 if dist back to contents Parallelism Modeler Info Request by Brian Corrie bcorrie uvicctr UVic ca soon to be a posting on USENET but it hadn t reached my node yet Howdy folks It s survey time again and I would appreciate your participation in this version of twenty questions I am interested in parallel algorithms for ray tracing and I am curious about a couple of things Please note that I have most of the standard references that get cited in the literature but I am interested in some of the OTHER stuff that is out there The papers that I have Cleary et al Multiprocessor Ray Tracing Internal Report 83 128 17 Department of Computer Science University of Calgary Calgary Alberta Canada Dippe et al An Adaptive Subdivision Algorithm and Parallel Architecture for Realistic Image Synthesis Computer Graphics Volume 18 Number 3 Gaudet et al Multiprocessor Experiments for High Speed Ray Tracing ACM TOG Volume 7 Number 3 etc What I am interested in are references to some of the goodies that are out there in the real world Are there any papers on the hardware Pixar uses How about the AT T pixel machine the Connection Machine there is a piece on it in Scientific American Volume 256 Number 6 that I already have and other bizarre architectures Dave Jevans from the University of Calgary Hi Dave remember me I met you at SIGGRAPH this year mentioned at one point he implemented some stuff on a BBN Butterfly I think Any more info on that Dave Did you write it up Anybody else doing anything similar Here is the info I want 1 What architecture do you run on 2 Parallel vectorized etc For parallel systems 3 How many processors do you use 4 How tightly coupled are they 5 Do you perform any load balancing and if so how 6 Architectural requirements memory node communications etc 7 Anything else you can think of that might be useful Thanks in advance for any help you can give me Replies by email are of course the best route to take but I read comp graphics every morning so a reply here will be seen I will post a summary to the net if I get enough information Question number two This should be quick and easy I would like to know what kind of modelling software people use out there in the real world We have all seen the pretty pictures but how do they get created I would appreciate a quick or not so quick review of what kind of software is used at your site to model 3D scenes For those of you in the RT News mailing list and don t read the net like I do I will send a copy of both this and the summary to Eric Thanks Brian back to contents USENET cullings follow Ray Tracer Available by Craig Kolb From craig weedeater math yale edu Newsgroups comp graphics Organization Math Department Yale University All of this talk of solid texturing and the like has convinced me to pull together my raytracer for public consumption Although I m calling this a beta release relatives of this version of rayshade have been making pretty pictures for about a year now For examples see slides 32 and 57 from the SIGGRAPH 89 technical slide set and slides 67 68 from the stereo slide set If there s enough interest I ll post rayshade to comp sources unix once the bugfixes stop rolling in I would like to add that Craig s ray tracer is fairly nice and most of the portability problems and minor bugs have been fixed since its release Its input language is much more full featured than NFF which I ll say again was made only for testing ray tracers not photorealism and looks more mainstream than some of the other public domain ray tracers I ve seen If you re looking for a reasonable input language check his out His latest and greatest version i e newer that 2 21 might be available via ftp by now EAH Rayshade a raytracing program is available for Beta testing Rayshade reads a multi line ASCII file describing a scene to be rendered and produces a Utah Raster RLE format file of the raytraced image Features Primitives boxes cones cylinders height fields planes polygons spheres triangles flat or Phong shaded he forgot to mention there are also superquadrics EAH Composite objects Point directional and extended area light sources Solid texturing and bump mapping of primitives objects and individual instances of objects Antialiasing through adaptive supersampling or jittered sampling Arbitrary linear transformations of primitives instances of objects and texture bump maps Use of uniform spatial subdivision and or hierarchy of bounding volumes to speed rendering Options to facilitate rendering of stereo pairs Support for the Linda parallel programming language An awk script is provided to translate NFF format scripts to rayshade format Rayshade is written in C with parsing support provided through lex and yacc The C lex and yacc files comprise approximately eight thousand lines of code Sites without lex and yacc can make use of the C source files produced by lex and yacc which are included in this distribution Rayshade has been tested on a number of UNIX based machines including Vaxes Sun Workstations Iris 4D Workstations Encore Multimax AT T 3B2 310 Cray XMP and IBM RTs In addition support is provided for the Amiga using the Aztec C compiler Rayshade makes use of the Utah Raster toolkit a package consisting of a large number of useful image manipulation programs test images and a library to read and write images written using the toolkit s RLE format The toolkit is available via anonymous FTP from cs utah edu or from weedeater math yale edu Those sites that cannot or do not want to use the Utah Raster toolkit can make use of a compile time option to produce images written using a generic file format identical to that used in Mark VandeWettering s MTV raytracer This version of rayshade is a beta release The first real release will include an updated manual page and additional documentation as well as any bugfixes or extensions born out of this release Rayshade is copyrighted in a Gnu like manner Rayshade is available via anonymous ftp from weedeater math yale edu 192 26 88 42 in pub Rayshade 2 21 tar Z The Utah Raster toolkit is available in pub UtahToolkit tar Z back to contents Source from Roy Hall s Book by Tim O Connor From toc batcomputer tn cornell edu Newsgroups comp graphics Straight from the dragon s mouth so to speak comes the source from Illumination and Color in Computer Generated Imagery by Roy Hall It s now available via anonymous ftp from freedom graphics cornell edu 128 84 247 85 It s under pub Hall and comes in two files 1 README of course which also contains some code necessary to convert 2 code tar Z a which contains the actual code So as always read README first Those of you who do not have ftp access may wish to drop me a short line a Subject of gimme roy s source is adequate If there s enough interest I ll post to this group if not I ll shudder attempt to mail it right to you Also of interest on freedom are the Ray Tracing News archives under pub RTNews and the Xcu Widget Set Sorry this code available only in stores no mailing fishing in McElligot s Pool to c back to contents More on Texture Mapping by Spatial Position by Paul Lalonde From lalonde ug cs dal ca Newsgroups comp graphics Organization Math Stats CS Dalhousie University Halifax NS Canada This is a continuation of last issue s discussion The idea here I would consider the most popular solution to the problem I published most all of the discussion because some of the answers were more interesting for the ideas they generated than for practicality EAH In article ranjit grad1 cis upenn edu UUCP Ranjit Bhatnagar writes Talk about 3 d texture maps deleted for brevity I haven t seen discussed before as generally proposed it s highly unsuited to animation The problem is that you generally define one texture function throughout all of space If an object happens to move its texture changes accordingly It s a neat effect try it but it s not what one usually wants to see The obvious solution to this is to define a separate 3 d texture for each object and further cause the texture to be rotated translated and scaled with the object DBW does not allow this so if you want to do animations of any real complexity with DBW you can t use the nice wood or marble textures I get around this be keeping not only the general texture stored with the object but also an x y z triple pointing to where the texture is to be evaluated I also keep some orientation information with the object The texturing routine then only has to translate the scene coordinate of the point being textured into texture coordinates It comes down to keeping the textures in object coordinates This allows you to carve more than one object out of the same chunk of marble which can be quite pleasing It also requires very little extra manipulation of the texture For shape changes you just keep track of your deformation function and apply it to the point whose texture you are evaluating Another congruent way of describing this is to use modeling matrices to describe the location and even deformation of animated objects Since the object itself without the modeling matrix does not move the texturing of its surface does not change EAH Paul Ps My raytracer implementing this and other goodies should be available as soon as I finish up my spline surfaces Real Soon Now Paul A Lalonde UUCP uunet watmath dalcs dalcsug lalonde Phone 902 423 4748 BITNET 05LALOND AC DAL CA back to contents Procedural Bump mapping Query by Prem Subrahmanyam From prem geomag fsu edu Newsgroups comp graphics Organization Florida State University Computing Center I am going to attempt to employ a few procedural bump map textures to DBW Render I have no idea how they will turn out I would like to start with some basics like maybe a golf balling algorithm that will give the surface small spherical pits Also a cross hatching one would be nice as well one that would produce furrows in a surface These should work for both planar surfaces as well as spherical ones So here s the basic request given a point the normal to the surface at that point as well how can I perturb the normal position of the point etc to create reasonable bump maps One that I d particularly like to reproduce is found in an old issue of IEEE Computer Graphics Applications the one with the Martian Magnolia in it Well there s this cross hatching on the spheres on the previous page These would be very nice to try to implement in DBW Render Can anyone point me to real code or at least pseudocode that will tell me how to generate these types of textures Eventually with all these textures bump mapping etc in tow DBW will be the most kick butt ray tracer available to the general public back to contents Ray Tracer Performance on Machines by Gavin A Bell Steve Lamont Note Didier Badouel s timings will appear next issue as I will be focussing on metrics then From gavin krypton sgi com Gavin A Bell Newsgroups comp graphics In article pkh vap vi ri cmu edu Ping Kang Hsiung writes Does anyone have a collection of performance timing data based on running a raytracer preferably a publicly available raytracer e g mtv or qrt on various machines I believe that the BRL CAD ray tracer is sometimes used as a standard benchmark with specific input files A number is generated which they call the Ray tracing figure of merit the higher the number the better The whole BRL CAD package is public domain it s not see below but big crufty and pretty ancient as ray tracing packages go I know all this because I m in the Demo Benchmarks group here at Silicon Graphics and this ray tracing benchmark is one of the few in which our 4D 280 outperformed a Cray ray tracing being an easily multi processed but not vectorizable application If people are interested I could send them the results From phil sem BRL MIL Phil Dykstra The BRL CAD package is not public domain It is Copyright by the U S Army in order to control commercialization of it We do distribute the source code at no charge however as long as the recipient agrees in writing to the conditions but big crufty and pretty ancient as ray tracing packages go Being one of the authors I had to put in at least two cents worth of defense Big yes Crufty parts of it Pretty ancient some of it But I wouldn t call things like CSG NURBs arbitrary bounding planes non uniform space partitioning parallel and network distributed capability very ancient From spl mcnc org Steve Lamont Subject Re Raytracer performance on machines Organization Foo Bar Brewers Cooperative In article 6224 pt cs cmu edu pkh vap vi ri cmu edu Ping Kang Hsiung writes For example my experience indicates that mtv runs on a Cray Y MP hintrinsic o level3 2 6x than on a PMAX is this Cray time the fastest turn around one can expect Will a Connection Machine do better than this What about an Intel iPSC The Meiko transputer array Silicon Graphics s Power series Well it depends on what other things you feel prepared to do I have both an IRIS 4D 120 and a Y MP here we just installed a Stardent Titan yesterday also and see the same sort of numbers I ll run a couple of experiments today and get back to you with actual bench marks if you d like I am currently working on a parallelized version of MTV and should be able to give you some results from that in a couple of days barring getting blown away by Hurricane Hugo that is In any case in order to take advantage of any parallelism on an MPP like a CM you ll probably have to do a lot of recoding The CM is a SIMD machine which does not really lend itself directly to ray tracing I understand that TMC has done some interesting algorithmic development to actually do ray tracing but the code certainly would not look anything like MTV as it stands right now Barry are you out there lurking Any comments The iPSC and Meiko systems would probably be more straightforward If you re interested in results contact me by private email and I ll be glad to share my thoughts with you back to contents Projective Mapping Explanation by Ken Turk Turkowski From turk Apple COM Newsgroups comp graphics Organization Advanced Technology Graphics Apple Computer Cupertino CA In article ccoprrm pyr gatech edu ROBERT E MINSK writes I am currently trying to add texture mapping to my ray tracer The problem I am having is texture mapping and normal interpolation to convex quadrilaterals and triangles The situation is as follows Given 4 points forming a convex planer quadrilateral the texture vertices associated with each point and the intersection point on the quadrilateral find the associated u v mapping coordinates for the intersection point For example 4 points the associated texture vertices p1 5 1 2 t1 2 4 p2 2 3 6 t2 4 2 p3 2 1 4 t3 8 3 p4 1 4 1 t4 7 5 intersection point 2 1 4 find the u v mapping coordinates I assume a triangle will be the same mapping with two vertices sharing the same points and mapping coordinates For suitably well behaved texture mappings i e no bowtie quadrilaterals there is a projective mapping that maps quadrilaterals to quadrilaterals This is represented by a 3x3 matrix unique up to a scale factor x y z uw vw w M 1 where w is a homogeneous coordinate and M is the 3x3 matrix Since the 4 points must obey 1 we have the nonlinear system of equations x0 y0 z0 u0 w0 v0 w0 w0 x1 y1 z1 u1 w1 v1 w1 w1 x2 y2 z2 u2 w2 v2 w2 w2 M 2 x3 y3 z3 u3 w3 v3 w3 w3 This represents 12 equations in 13 unknowns but one of the w s may be arbitrarily chosen as 1 System 2 can be solved for the matrix M by any nonlinear system equation solver such as those available in the Collected Algorithms of the ACM When this matrix is inverted it gives the mapping you desire 1 uw vw w x y z M 3 You just plug the desired x y z into 3 and divide by w For triangles the mapping 1 is affine x y z u v 1 M 4 and the resulting system is linear x0 y0 z0 u0 v0 1 x1 y1 z1 u1 v1 1 M 5 x2 y2 z2 u2 v2 1 This linear equation 9 equations in 9 unknowns can easily be solved by LU decomposition Note that this matrix computed in 2 and 5 depends only on the parametrization so its only needs to be computed once offline at the time the texture is assigned Take note that the texture parameters are not interpolated linearly or bilinearly but projectively Also note that unlike standard bilinear interpolation such as that used for Gouraud interpolation this method of interpolation is rotation invariant For more information on projective mappings see the the book Projective Geometry and Applications to Computer Graphics by Penna and Patterson I hope this reference is correct I m doing it from memory For more detail on this approach to texture mapping including texture mapping by scan conversion request a copy of the following paper Turkowski Ken The Differential geometry of Texture Mapping Apple Technical Report No 10 May 10 1988 from Apple Corporate Library Apple Computer Inc 20525 Mariani Avenue Mailstop 8 C Cupertino CA 95014 The e mail address for the library is corp lib1 applelink apple com but the gateway is one way so don t expect an electronic reply back to contents Intersection Calculation Problem Request Jari Toivanen From toivanen tukki jyu fi Newsgroups comp graphics Organization University of Jyvaskyla Finland I would like to know is there any simple and effective solution to following problem I have curve c 0 1 R R Curve c is cubic and it s following form 3 2 3 2 c t a t b t c t d a t b t c t d x x x x y y y y Now I rotate curve c around vector v so that I get surface or what ever I should call it Let vector v be v x y z up up up Now I should calculate intersection of this surface and given line l Let line l be l k u x k u y k u z u 0 x 0 y 0 z 0 This should be done as fast as possible because it would be part of ray tracer I also need surface s normal in the intersection point I ve been calculating this but the solution seems to be quite complicated Is there any other easier way to do something like this Could anyone tell me good books which would help me deal with this kind of problems and bicubic surfaces and stuff like that back to contents Mathematical Elements for Computer Graphics Call for Errata by David Rogers From dfr usna MIL Newsgroups comp graphics Organization U S Naval Academy Annapolis MD MATHEMATICAL ELEMENTS FOR COMPUTER GRAPHICS 2nd edition David F Rogers J Alan Adams McGraw Hill Book Co 1990 hardcover ISBN 0 07 053529 9 My own interest is in asking those of you who use the book for some assistance No matter how careful the authors and proofreaders are all books have typos If you use the book and find a typo or something that you think is wrong please send a bug report and tell me about it I will have a chance to correct these typos in about June 1990 In a few months I ll summarize those that I have received and publish an errata list to the net Thanks in advance Dave Rogers back to contents Raytracing on NCUBE Request by Ping Kang Hsiung From pkh vap vi ri cmu edu Newsgroups comp graphics Organization Carnegie Mellon University CS RI Has anyone had ported run raytracing on NCUBE I would like to learn about your experience including raytracer name NCUBE node number NCUBE 2 or 1 port time performance features tricks etc back to contents Intersection Between a Line and a Polygon UNDECIDABLE by Dave Baraff Tom Duff From deb charisma graphics cornell edu Newsgroups comp graphics Keywords P NP Jordan curve separation Ursyhon Metrization Theorem Organization Program of Computer Graphics In article ncsmith ndsuvax UUCP Timothy Lyle Smith writes I need to find a formula algorithm to determine if a line intersects a polygon I would prefer a method that would do this in as little time as possible I need this for use in a forward raytracing program I think that this is a very difficult problem To start with lines and polygons are semi algebraic sets which both contain uncountable number of points Here are a few off the cuff ideas First we need to check if the line and the polygon are separated Now the Jordan curve separation theorem says that the polygon divides the plane into exactly two open and thus non compact regions Thus the line lies completely inside the polygon the line lies completely outside the polygon or possibly but this will rarely happen the line intersects the polyon Now the phrasing of this question says if a line intersects a polygon so this is a decision problem One possibility the decision model approach is to reduce the question to some other well known problem Q and then try to solve Q An answer to Q gives an answer to the original decision problem In recent years many geometric problems have been successfully modeled in a new language called PostScript See PostScript Language by Adobe Systems Incorporated ISBN 0 201 10179 3 co 1985 So given a line L and a polygon P we can write a PostScript program that draws the line L and the polygon P and then outputs the answer By output we mean the program executes a command called showpage which actually prints a page of paper containing the line and the polygon A quick examination of the paper provides an answer to the reduced problem Q and thus the original problem There are two small problems with this approach 1 There is an infinite number of ways to encode L and P into the reduced problem Q So we will be forced to invoke the Axiom of Choice or equivalently Zorn s Lemma But the use of the Axiom of Choice is not regarded in a very serious light these days 2 More importantly the question arises as to whether or not the PostScript program Q will actually output a piece of paper or in other words will it halt Now PostScript is expressive enough to encode everything that a Turing Machine might do thus the halting problem for PostScript is undecidable It is quite possible that the original problem will turn out to be undecidable I won t even begin to go into other difficulties such as aliasing finite precision and running out of ink paper or both A couple of references might be 1 Principia Mathematica Newton I Cambridge University Press Cambridge England Sorry I don t have an ISBN for this 2 An Introduction to Automata Theory Languages and Computation Hopcroft J and Ulman J 3 The C Programming Language Kernighan B and Ritchie D 4 A Tale of Two Cities Dickens C From td alice UUCP Tom Duff Summary Overkill Organization AT T Bell Laboratories Murray Hill NJ The situation is not nearly as bleak as Baraff suggests he should know better he s hung around The Labs for long enough By the well known Dobbin Dullman reduction see J Dullman D Dobbin J Comp Obfusc 37 ii pp 33 947 lemma 17 a line polygon intersection can be reduced to Hamiltonian Circuit without the use of Grobner bases so LPI to coin an acronym is probably only NP complete Besides Turing completeness will no longer be a problem once our Cray 3 is delivered since it will be able to complete an infinite loop in 4 milliseconds with scatter gather From deb svax cs cornell edu David Baraff Well sure its no worse than NP complete but that s ONLY if you restrict yourself to the case where the line satisfies a Lipschitz condition on its second derivative I think there s an 89 SIGGRAPH paper from Caltech that deals with this back to contents Eric Haines erich acm org Ray Tracing News Volume 2 Number 7 Ray Tracing News Volume 2 Number 7 Ray Tracing News Volume 2 Number 7 Ray Tracing News Volume 2 Number 7 Ray Tracing News Volume 2 Number 7 Ray Tracing News Volume 2 Number 7 Ray Tracing News Volume 2 Number 7 Ray Tracing News Volume 2 Number 7 Ray Tracing News Volume 2 Number 7 Ray Tracing News Volume 2 Number 7 http www acm org tog resources RTNews html rtnews8b html http www acm org tog resources RTNews html rtnews8b html http www acm org tog resources RTNews html rtnews8b html http www acm org tog resources RTNews html rtnews8b html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnews9a.html%%==%%Ray Tracing News, Volume 2, Number 8%%==%%Ray Tracing News "Light Makes Right" October 27, 1989 Volume 2, Number 8 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%21453%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right October 27 1989 Volume 2 Number 8 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1989 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Tracing Tricks edited by Eric Haines Ambient Light Efficiency Schemes Bounding Volume Hierarchy Octree Bounding Box Intersection Spline Surface Intersection Acknowledgements Bibliography Introduction I ve decided to pass on an article published in the SIGGRAPH 89 Introduction to Ray Tracing course notes It s something of a best of the Ray Tracing News compendium of ideas Since the notes are not easy for everyone to access and the article probably will not be printed elsewhere I thought it worthwhile to reprint here back to contents Tracing Tricks edited by Eric Haines previous discussion of topic Over the years I have learnt a variety of tricks to increase the performance and image quality of my ray tracer It s almost a cliche that today s successful trick is tomorrow s established technique Photorealistic computer graphics is after all concerned with figuring out shortcuts and approximations for rendering various physical phenomena i e tricks For whatever reason many of the tricks mentioned here are not common knowledge Some have been published and sometimes overlooked some have been discussed informally and have never made it into research papers and others seem to have appeared out of nowhere It s most likely that there are tricks that are commonly known that have not percolated over to me yet When possible I have tried to give appropriate references or attributions if not attributed the ideas are my own I think My apologies if I have overlooked anyone Only references that do not appear in the book s Ray Tracing Bibliography are included at the end of this article For more general rendering hacks see Whitted85 which originally inspired me to attempt to pass on some ideas from my bag of tricks back to contents Ambient Light One common trick origins unknown is to put a light at the eye to do better ambient lighting Normally if a surface is lit by only ambient light its shading is pretty crummy For example a non reflective cube totally in shadow will have all of its faces shaded the exact same shade All edges disappear and the cube becomes a hexagonal blob The light at the eye gives the cube definition Note that a light at the eye does not need shadow testing wherever the eye can see the light can see and vice versa However this trick can lead to various artifacts e g there will always be a highlight near the center of every specular sphere in the image back to contents Efficiency Schemes There are any number of efficiency schemes out there including Bounding Volume Hierarchy Octree Grid and 5D Ray Classification See Jim Arvo s section of the book for an excellent overview of all of these The most important conclusion is that any efficiency scheme is better than none Even on the simplest scenes an efficiency scheme will help execution For example in one test scene with only ten objects using an efficiency scheme made the job take only one third the time Grid subdivision is probably the quickest to implement though the others are not that much harder While at the University of Utah John Peterson and Tom Malley actually implemented Whitted Rubin Kay Kajiya and an octree scheme and found that all three schemes were within 10 20 of each other speedwise In an informal survey at SIGGRAPH 88 the BV Hierarchy Octree Grid and 5D schemes all had about the same number of users all the 5D users were from Apollo on the other hand 5D is the new kid on the block There are a number of techniques I have found to be generally useful for all efficiency schemes 1 When shadow testing keep the opaque object if any which shadowed each light for each ray tree node Try this object immediately during the next shadow test at that ray tree node Odds are that whatever shadowed your last intersection point will shadow again If the object is hit you can immediately stop testing because the light is not seen This was first published in Haines86 2 When shadow testing save transparent objects for later intersection Only if no opaque object is hit should the transparent objects be tested The idea here is to avoid doing work on transparent filters when in fact the light does not reach the surface 3 Don t calculate the normal for each intersection Get the normal only after all intersection calculations are done and the closest object for each node is known After all each ray can have only one intersection point and one normal Saving intermediate results is worthwhile for some intersection calculations which are then used if the object is actually hit This idea was first mentioned in Whitted85 Similarly other calculations about the surface can be delayed such as u v location etc 4 One other idea which I have not tested is sorting each intersection list by various criteria Most efficiency schemes have in common the idea of lists of objects to be tested For a given list the order of testing is important For example all else being equal if a list contained a spline surface and a polygon I would want to test the polygon first since it is usually a quicker intersection test Given an opaque object and a bounding box in a list I probably want to test the opaque object first when doing shadow testing since I want to find any intersection as soon as possible If two polygons are on the list I probably want to test the larger one first as it is more likely to cast a shadow or give me a maximum depth see next section There are many variations on this theme and at this point little work has been done on these possibilities back to contents Bounding Volume Hierarchy I have a strong bias towards this scheme since it handles a wide variety of object sizes types and orientations in a robust fashion Other schemes will often be faster but this scheme has the fewest crippling pathological cases e g a grid subdivision scheme is useless whenever most of the objects fall into one grid box I favor the automatic bounding volume generation technique described by Goldsmith87 I have found a number of tricks to speed up hierarchy traversal most of which are simple to implement Some of the ideas can also be useful for other efficiency schemes 1 Keep track of the closest intersection distance Whenever an object is hit keep its distance as the maximum distance to search During further intersection testing use this distance to cut short the intersection calculations if an object or bounding box is beyond the maximum distance no further testing of it needs to be done Note that for shadow testing the distance to the light provides an initial maximum 2 When building a ray intersection tree keep the ray tree which was previously built For each ray tree node intersect the object in the old ray tree then proceed to intersect the bounding box object tree By intersecting the old object first you can usually obtain a good maximum distance immediately which can then be used to aid trick 1 3 When shooting rays from a surface e g reflection refraction or shadow rays get the initial list of objects to intersect from the bounding volume hierarchy For example a ray beginning on a sphere must hit the sphere s bounding volume so include all other objects in this bounding volume in the immediate test list The bounding volume which is the parent of the sphere s bounding volume must also automatically be hit and its other children should automatically be added to the test list and so on up the object tree Note also that this list can be calculated once for any object and so could be created and kept around under a least recently used storage scheme Another advantage of this scheme is that nearby neighbors of the object are tested for shadowing first These neighbors are more likely to cast a shadow on the point than any random object I first saw this trick used in Weghorst and Hooper s ray tracer at Cornell s Program of Computer Graphics 4 Similar to trick 3 the idea is simply to do the same list making process for the eye position Check if the eye position is inside the topmost node of the hierarchy If it is check the children which are boxes Continue to check and unwrap until you are left with a list of objects to intersect Again the idea is to avoid wasting time shooting a ray against boxes which you know must be hit For light sources since the farthest endpoint of the ray is also known it can also be used to open some boxes early on The tradeoff here however is that for shadow testing we want to find any intersection we can Wasting time opening boxes near the light or ray origin might be better spent trying to find an intersection as fast as possible 5 An improvement to trick 3 is also to use trick 4 to open more boxes initially You work up the hierarchy opening all parent boxes any children of the parent except the original one of course are then tested against the ray position However this can be done only when the trick is done on the fly since the ray s origin will change Kay Kajiya s hierarchy scheme Kay86 is about the best overall traversal method However Jeff Goldsmith and others note that if you do use Kay Kajiya s heapsort on bounding volumes in order to get the closest don t bother to do it for illumination rays In shadowing you don t care about the closest intersection but just whether anything blocks the light back to contents Octree There are a few tips on accessing and moving through the octree Olin Lathrop and others have pointed out that there is a faster method than Glassner s hashing scheme for finding which octree voxel contains a point Quickest is to simply transform the point into the octree s 0 0 0 to 1 1 1 space Say you allow your octree a maximum of eight levels This means you ll want to convert from world coordinates to eight bits in X Y and Z For example if the octree box went from 3 0 to 6 0 along the X axis in world space you would convert 5 25 into the binary fraction 0 11000000 which is equal to 0 75 decimal which is where 5 25 lies between 3 0 and 6 0 The most significant bit of each binary fraction for each coordinate is then combined and used to access the correct topmost octree voxel i e 0 through 7 similar to Glassners scheme The next most significant three bits are then stripped off and the corresponding subordinate octree voxel is accessed on down until a leaf voxel is found In practice each octree voxel notes whether it is a parent of further voxels or is a leaf and contains a list of objects to hit If it is a parent it stores a list of 8 pointers to its subordinate octrees with null pointers meaning that the subordinate octree is empty otherwise a list of objects is used One problem with building octrees is deciding when enough is enough You want to subdivide an octree voxel if the number of objects is too many but you may find that these further subdivisions do not gain you anything Olin Lathrop has an interesting method for octree subdivision First the biggest win is to subdivide on the fly Never subdivide anything until you find there is a demand for it this same idea was used by Arvo and Kirk Arvo87 in their 5D efficiency scheme His subdivision criteria are in order of precedence 1 Do not subdivide if subdivision generation limit is hit 2 Do not subdivide if a voxel contains less than X objects These first two criteria were first proposed in Glassner84 Olin uses X 1 3 Do not subdivide if less than N rays passed through this voxel but did not hit anything Olin uses N 4 4 Do not subdivide if M K N where M is the number of rays that passed through this voxel that did hit something and K is a parameter you chose Olin uses K 2 but suspects it should be higher This step seeks to avoid subdividing a voxel that may be large but has a good history of producing real intersections anyway Keep in mind that for every ray that did hit something there are probably shadow test rays that did not hit anything This can distort the statistics and make a voxel appear less tight than it really is hence the need for larger values of K Another possible criterion is to base the subdivision generation limit criterion 1 on the number of objects in the octree If you had say 6 objects and 5 of them are clustered tightly together you may find your octree reaching its maximum depth without the subordinate octrees actually splitting up the 5 objects These octree voxels are useless costing extra time and memory They could be avoid by setting the limit based on the total number of objects I use something along the lines of the depth limit being equal to log sub 4 of number of objects Andrew Glassner has a better method to avoid this problem When you subdivide a voxel look at its children If only one child is non empty replace the original voxel with its non null child Do this recursively until the subdivision criterion is satisfied He does this in his spacetime ray tracer and the speedup can be large Note that this scheme means adding a field to the octree structure to identify what level in the hierarchy it represents An idea to speed octree traversal was first mentioned to me by Andrew Glassner and later by Mike Kaplan The idea is to place a pointer on each face of each octree voxel If a voxel s face is next to a larger or same size voxel a pointer to this neighbor is stored If the voxel face s neighbors are smaller then the face pointer is set to point at the bordering voxel of the same size which is these neighbors common parent If there are no neighbors i e the face is on the exterior a null pointer is stored When a ray exits a voxel the voxel face is accessed and the next voxel found directly This voxel may have to be descended but this trick saves having to descend the octree from the top Mike Kaplan independently arrived at a similar method in which he stores quadtrees at the faces so that he can immediately access the next voxel and avoid any descent altogether back to contents Bounding Box Intersection The fastest method in general is Kay and Kajiya s slab intersection method Kay86 As they point out precompute as much as you can for the ray i e check whether the ray is parallel to any of the axes and for whichever axes it is not computing the multiplicative inverse of the ray direction vector However there are other tests which can actually improve the performance of the box intersector For example I have found that for my particular ray tracer if we first do a quick inside outside test with the ray origin and the box the overall box intersection time goes down for a related trick which is something of a preprocess version of this method see 4 under Bounding Volume Hierarchy back to contents Spline Surface Intersection There are three camps on this question the numerical analysts the polygon meshers and the synthesists who do a little of each The following comments are distilled from John Peterson s thoughts on the subject The analytic methods are often slow and there are many nightmares involved in finding roots of two equations see section 9 6 of Press86 To find the quadrilaterals John recommends subdividing the surfaces by using the Oslo Algorithm due to its generality Bartels87 Sweeney86 Easiest to implement is simply subdividing the surface by a given step size then ray tracing the mesh of polygons produced throwing these polygons into an octree or grid efficiency scheme is recommended Another method is to use adaptive subdivision with a quadtree structure checking a flatness criteria to see whether a given quadrilateral should be subdivided into four sub quadrilaterals Peterson s subdivision criterion is to use a bounding box around each quad generated subdividing until the box is smaller than a certain number of pixels A drawback of this method is that it does not elegantly handle objects that are part of the scene yet do not appear in the viewing frustum e g if the teapot is only seen in a mirror we cannot get a good sense of how much to subdivide it Snyder and Barr Snyder87 have some good recommendations on this process and they use the change in the tangent vector between the quad s points as a subdivision criterion This article also points out other pitfalls of tessellation and of rendering polygons with a normal at each vertex If adaptive techniques are used one problem to guard against is cracking Say there are two adjacent quadrilaterals and one has been subdivided into four smaller quads Something must be done along the seam between the two large quadrilaterals as normally the subdivision point between the two common vertices will not lie on the large undivided quad If rendered from some angle there will be a noticeable crack between the large quad and the two neighboring smaller quads back to contents Acknowledgements This article owes a large debt to Andrew Glassner who began The Ray Tracing News an informal journal for ray tracing researchers to share ideas He has kept the hardcopy version moving along while I have had the pleasure of running the electronic edition Most of the ideas given a personal attribution in this article are from contributions to the News and I thank all those who have contributed to it over the years Finally my thanks to Kells Elmquist and Andrew Glassner for their comments on this paper back to contents Bibliography Bartels87 Bartels Richard H John C Beatty Brian A Barsky An Introduction to Splines for Use in Computer Graphics Morgan Kaufmann Los Altos California 1987 Press88 Press William H et al Numerical Recipes in C Cambridge University Press Cambridge 1988 back to contents Eric Haines erich acm org Ray Tracing News Volume 2 Number 8 Ray Tracing News Volume 2 Number 8 Ray Tracing News Volume 2 Number 8 Ray Tracing News Volume 2 Number 8 Ray Tracing News Volume 2 Number 8 Ray Tracing News Volume 2 Number 8 Ray Tracing News Volume 2 Number 8 Ray Tracing News Volume 2 Number 8 Ray Tracing News Volume 2 Number 8 Ray Tracing News Volume 2 Number 8 http www acm org tog resources RTNews html rtnews9a html http www acm org tog resources RTNews html rtnews9a html http www acm org tog resources RTNews html rtnews9a html http www acm org tog resources RTNews html rtnews9a html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv3n1.html%%==%%Ray Tracing News, Volume 3, Number 1%%==%%Ray Tracing News "Light Makes Right" January 2, 1990 Volume 3, Number 1 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%57893%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right January 2 1990 Volume 3 Number 1 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1989 1990 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction New People Archive Site for Ray Tracing News by Kory Hamzeh Ks T 1 by Craig Kolb and Eric Haines Quartic Roots and Intro to RT Errata by Larry Gritz and Eric Haines More on Quartics by Larry Spence Question Kay and Kajiya Slabs for Arbitrary Quadrics by Thomas C Palmer Ambient Term by Pierre Poulin Book Reviews on Hierarchical Data Structures of Hanan Samet by A T Campbell III Comparison of Kolb Haines and MTV Ray Tracers Part I by Eric Haines Raytracer Performance of MTV by Steve Lamont BRL CAD Ray Tracer Timings by Gavin Bell BRL CAD Benchmarking and Parallelism by Mike Muuss Net News Cullings Rayshade Patches Available by Craig Kolb Research and Timings from IRISA by Didier Badouel Concerning Smart Pixels by John S Watson Input Files for DBW Render by Tad Guy Intersection with Rotated Cubic Curve Reference by Richard Bartels Needed Quartz surface characteristics by Mike Macgirvin Solution to Smallest Sphere Enclosing a Set of Points by Tom Shermer True Integration of Linear Area Lights by Kevin Picott Introduction This issue s focus is on timings from various people using a wide selection of hardware and software Much of the delay in getting out this issue was my desire to finish up my own timing tests of MTV s Kolb s and my own ray tracers on the same machine I hope some of you will find this information of use Another feature of this issue is a pair of book reviews One of the purposes of the RT News is to provide people with sources of information relevant to ray tracing So I would like to see more reviews or even just brief descriptions of articles and books that you come across Keeping up to date in this field is going to take more time as the years go by so please do pass on any good finds you may have Also if you re an author please feel free to send a copy of the abstract here for publication This service is already provided to a certain extent by SIGGRAPH for thesis work However even a duplication of their efforts is worthwhile since an electronic version is much easier to search and manipulate back to contents New People Kory Hamzeh 6640 Nevada Ave Canoga Park Ca 91303 Email UUCP avatar kory or uunet psivax quad1 avatar kory INTERNET avatar kory quad com alias kory hamzeh quad com avatar kory I m not professionally involved in ray tracing Just personally fascinated by it I have written a couple of ray tracers who hasn t yet and I m in the midst of designing a 24 bit frame buffer Since I don t do this on a professional level I lack some of the resources required to develop real products I maintain a archive site with a lot of graphics related items including Ray Tracing News If you need to access the archive anonymous uucp only please send me mail Steve Lamont sciViGuy parallelism NCSC Box 12732 Research Triangle Park NC 27709 alias steve lamont cornell spl mcnc org Bob Kozdemba novice tracer futures also radiosity Hewlett Packard Co 7641 Henry Clay Blvd Liverpool NY 14450 315 451 1820 x265 alias bob kozdemba hpfcla hpfcse hpurvmc koz I work for HP in Syracuse NY as a systems engineer I will be attending SU starting in Jan 89 working toward my BS with a focus in computer graphics My job responsibilities are to provide technical support to customers and sales in the areas of Starbase graphics and X Windows Lately I have been experimenting with HP s SBRR product radiosity and ray tracing part of the HP graphics package and trying to keep abreast of futures in graphics I have written an extremely primitive ray tracer and I am looking for ideas on how to implement reflections and transparency Robert Goldberg Queens College of CUNY Comp Sci Dep t 65 34 Kissena Blvd Flushing N Y 11367 0904 Work 3d Modeling algorithms with appl to graphics and image processing Phone Work 718 520 5100 alias robert goldberg rrg acf8 nyu edu John Olsen refraction radiosity antialiasing stereo images Hewlett Packard Mail Stop 73 3404 E Harmony Road Ft Collins CO 80525 303 229 6746 email olsen hq HP COM hplabs hpfcdq olsen alias john olsen hpfcdq hp com olsen Currently I ve been spending some time tinkering with the DBWrender ray tracer making it produce 24 bit pixel QRT format images I like the QRT output format but I like some of the features of DBWrender such as antialiasing and fading to a background color I ve thought about writing my own ray tracer with all the features I want but so far I ve resisted this evil temptation and only looked for fancier ones already done by others who could not resist the temptation I ve just installed an alias for a local ray tracing news distribution You can send it to raylist hpfcjo HP COM or if you can t reach try something like hplabs hpfcdq hpfcjo raylist Andrew Hunt andrew erm oz Earth Resource Mapping 130 Hay St Subiaco Western Australia 6008 Phone 61 9 388 2900 Fax 61 9 388 2901 ACSnet andrew erm oz alias andrew hunt uunet munnari erm erm oz au andrew In 1987 I implemented a Three Dimensional Digital Differential Analyser 3D DDA algorithm along the lines of Fujimoto and Iwata s and used it to speed up a raytracing system under development at the Computer Science Department at Curtin University of Technology Recently I have got a bit busy developing commercial image processing software to devote much time to Ray Tracing Sometime during 1990 I plan to try to port our Ray Tracing system to a Transputer based platform Nick Beadman Distributed Ray Tracing Efficiency School of Information Systems University of East Anglia Norwich Norfolk United Kingdom alias nick beadman cmp7112 sys uea ac uk At the moment I m trying to implement a distributed ray tracer on 8 t800s on a meiko computing surface using C with little success I should add It all part of a big third year computing project worth a sixth of my degree Peter Miller algorithms realism 18 Daintree Cr Kaleen ACT 2617 AUSTRALIA CONTACT LIST ONLY subscription through melbourne Phone 61 62 514611 W 61 62 415117 H UUCP uunet mcvax ukc munnari neccan oz pmiller ARPA pmiller neccan oz uunet uu net CSNET pmiller neccan oz australia ACSnet pmiller neccanm oz alias peter miller cornell uunet munnari neccan necisa oz au peter I have been interested in ray tracing since 1984 when I wrote a ray tracer before I knew it was called ray tracing Since then I have been reading journals and tinkering with my ray tracer The last 3 years were spent marooned off the net with very poor graphics output devices so while some work was done on the ray tracer I now have a lot of catching up to do Mike J McNeill VLSI and Graphics Research Group EAPS II University of Sussex Falmer BRIGHTON East Sussex BN1 9Qt TEL 44 273 606755 x 2617 EMAIL JANET mikejm syma sussex ac uk UUCP mcsun ukc syma mikejm alias mike mcneill mike syma sussex ac uk I am currently researching into parallelising the RT algorithm on a multiprocessor architecture I m using object space subdivision using a fast octree traversal algorithm At the moment I m simulating the architecture using C via TCP IP protocols on a distributed Apollo network Interested in all aspects of speed up parallel architectures coherency and radiosity dare I mention animation and Linda Also does anyone know of a modelling package for use on the Apollos back to contents Archive Site for Ray Tracing News by Kory Hamzeh Avatar is an archive site which archives Ray Tracing News comp source unix comp sources misc and other goodies Archived files can be access by any one using anonymous uucp file transfers A list of all files in the archive can be found in avatar usr archive index Note that this file is quite large about 40K If you are only interested in the graphics related archives snarf the file avatar usr archive comp graphics gfx index All Ray Tracing News Archives except for the first few are stored in usr archive comp graphics directory They are named in the following fashion RTNewsvXXiYY Z Where XX is the volume number YY is the issue number Note that all files except index and gfx index are compressed Before trying to access avatar your L sys file or Systems file depending on which flavor of UUCP you have must be edited to contain the following info L sys entry for avatar NOTE BREAK tells uucico to send a break on the line This keyword may vary from one flavor of UUCP to another Contact your system administrator if your not sure 1200 baud avatar Any ACU 1200 18188847503 BREAK BREAK ogin anonuucp 2400 baud avatar Any ACU 2400 18188847503 BREAK ogin anonuucp 19200 baud PEP mode for Telebit Trailblazers only avatar Any ACU 19200 18188847503 ogin n ogin anonuucp After the previous lines are entered in you L sys file you may use the following command to get the index file uucp avatar usr archive index usr spool uucppublic index This command will grab the file from avatar and put it in your usr spool uucppublic directory using the name index For example to get Ray Tracing News Volume 2 Issue 5 execute the following command uucp avatar usr archive comp graphics RTNewsv02i05 Z tmp RTnewsv02i05 Z NOTE that some shells like csh use the as an escape character so use a before the If you experience problems getting to any of the files I can be reached via e mail at UUCP avatar kory or uunet psivax quad1 avatar kory INTERNET avatar kory quad com soon to be kory avatar avatar com Enjoy Kory Hamzeh back to contents Ks T 1 by Craig Kolb and Eric Haines From Craig Kolb craig weedeater math yale edu While adding adaptive tree pruning to rayshade and discovering a bug I came across a question I ve had regarding the SPD for a while Some objects have Ks T 1 How can this be For example the spheres in mountain have Ks 9 and T 9 Unless I m completely out to lunch which is possible ths means that subsequent specularly reflected rays are weighted by 9 and that transmitted rays are also weighted by 9 This leads to glowing objects pretty quickly What s wrong in the above description Be warned that in nff2shade awk I set the specular reflectance to be min Ks 1 T My reply Actually true enough Ks T 1 does occur in the SPD stuff I use T in a funny way since I was trying to make databases that would display both using hidden surface and ray tracing algorithms Hmmm how to explain Well imagine you have a glass ball under the hidden surface system without transparency you d like the ball to appear opaque and so a high Kd is in order Now if the thing s transparent you don t want Kd to be high So what I do is lower Kd and Ks by 1 T An admittedly weird shading model which I ve now changed a bit i e reflectance and transmittance are now entirely separate So your solution of turning down the reflectance is fine I should add that I didn t really explain all this as it s irrelevant for timings all we care about is what rays get generated not the final color but I agree it would be nicer to get a good resulting picture as a check I ll change that in the next update of SPD actually thanks for pointing it out Craig s reply Ah I get it I brought it up because it does make a difference timing wise if you re using adaptive tree pruning Although you say in the SPD stuff that pruning shouldn t be used Mark s raytracer currently has no option to turn it off I was comparing pruned vs pruned and noticed that I had many fewer reflected rays since my reflectance for the transparent gears was 05 rather than 95 back to contents Quartic Roots and Intro to RT Errata by Larry Gritz vax5 cit cornell edu cfwy I was trying to find the solution to a quartic equation to solve a ray torus intersection test I ve gotten lots of replies but generally fall into one of two categories either solve the quartic equation I forget the reference now but I ll send you either a reference or the formula if you want It s in the CRC Standard Math Tables book EAH or by some iterative method Everybody says and I have confirmed this experimentally that solving the equation is very numerically unstable I have chosen to use the Laguerre method from Press et al Numerical Recipes in C which is slow but seems to work and finds all roots without needing to specify brackets for the roots An advantage since although I can bracket all possible real roots with the bounding box test that I already do I m not really sure how many roots lie within the brackets What actually turns out to be a bigger problem is that I got the quartic coefficients from the SIGGRAPH 88 Ray Tracing Course Notes on page 3 14 of Pat Hanrahan s section Larry and I thrashed this out over a number of passes boy I wish I had access to Mathematica or somesuch and came out with the following corrected equation set for those on page 93 of An Introduction to Ray Tracing a4 a3 Pat s are OK a2 2 x1 2 y1 2 z1 2 x0 2 y0 2 z0 2 a 2 b 2 4 x0x1 y0y1 z0z1 2 4a 2z1 2 a1 4 x0x1 y0y1 z0z1 x0 2 y0 2 z0 2 a 2 b 2 8a 2 z0 z1 a0 x0 2 y0 2 z0 2 a 2 b 2 2 4a 2 b 2 z 2 actually WRONG see RTNv3n2 for the right answer EAH back to contents More on Quartics by Larry Spence From larry csccat UUCP Newsgroups comp graphics Subject Re Solution to quartic eqn I didn t ask the question but thanks for your input However Ferrari s theorem yields a fast and very accurate answer Are you sure about this If it s the same closed form solution that you find in the CRC books etc doesn t it use trig functions and cube roots Seems to me there was a paper by Kajiya in the early 80s on numerical ray tracing and there have been several in the last few years My advice would be to go look at SIGGRAPH proceedings from 1981 on Certainly a closed form solution like the one suggested wouldn t take advantage of any coherence in the problem unless you wrote all the trig stuff yourself Comments anyone I never saw any replies EAH back to contents Question Kay and Kajiya Slabs for Arbitrary Quadrics by Thomas C Palmer palmer mcnc org Here s a question regarding slabs for arbitrary quadrics Kay Kajiya 86 discusses computing slabs for polygons and implicit surfaces The method for implicit surfaces using Lagrange multipliers and gives an example using spheres This is easy and works quite nicely for canonical i e centered and axis aligned quadrics K K handle object rotations and translations during the slab computation What about quadrics that have been transformed by some arbitrary matrix prior to input and look like this ax 2 2bxy 2cxz 2dxw ey 2 2fyz 2gyw hz 2 2izw jw 2 0 The xy xz and yz terms prevent a simple solution via Lagrange multipliers Has anyone done this How do you handle quadric bounding planes Note that K K cheated for the tree branchs in the tree models Each cylinder has endpoint capping spheres so the cylinder s extent is just the combined extent of the two spheres Thanks for your help Tom Thomas C Palmer North Carolina Supercomputing Center Cray Research Inc Phone 919 248 1117 PO Box 12732 Arpanet palmer ncsc org 3021 Cornwallis Road Research Triangle Park NC 27709 back to contents Ambient Term by Pierre Poulin poulin dgp toronto edu I just read your Tracing tricks in the latest Ray Tracing News Thanks for passing that on to us this was very interesting One trick you mentioned was to put a light source at the eye position in order to eliminate the ambient term This is a simple trick I did not know However you noted that highlights appears as artifacts Since you know that this light does not need any shadow rays you could use only the diffuse intensity created by this light to approximate the ambient term hence creating no undesirable highlights I know this is very easy and everyone probably knows that But just in case you would not have thought about it I wanted to indicate it to you I just hope I am not the 10 000th to tell you My reply I m glad to hear that you enjoyed the Tracing Tricks article sometimes I worry that I m just publishing ideas that everyone already knows I ve tried having the ambient light have no highlight and it s sort of interesting but the lack of highlight can look a little strange for those objects where there really would be a highlight it sort of makes them look less shiny though it also depends upon the other lights in the scene Nonetheless turning it off is definitely worth exploring You re the first person to comment on this actually Thanks for taking the time to write and do keep in touch back to contents Book Reviews on Hierarchical Data Structures of Hanan Samet by A T Campbell III atc cs utexas edu The Design and Analysis of Spatial Data Structures and Applications of Spatial Data Structures by Hanan Samet Addison Wesley 1990 Reviewed by A T Campbell III This two volume series of books is one man s effort to provide a guide to the study of hierarchical data structures The topic has extensive influence on many fields particularly computer graphics image processing and computational geometry Hanan Samet is a well established expert in the field with literally dozens of publications As a computer graphics researcher I eagerly anticipated the books publication A close examination of both volumes leads to one conclusion the books are extremely worthwhile The integration of diverse material is remarkable Comprehensive research results throughout the spectrum of science are drawn together seamlessly Samet has really done a thorough job of pulling together literature from a vast collection of conferences and journals both major and minor The level of explanation is good Samet has obviously read all of his references thoroughly The descriptions of algorithms reflect an understanding of what is really going on Even algorithms mentioned briefly are given a good essential description Numerous topics are covered Algorithms for such problems as proximity searching efficient storage of image and volume data constructive solid geometry data structure conversion hidden surface removal and ray tracing fill the books Pseudo ALGOL code examples present detailed explanations of how to build and traverse many of the data structures Ray tracing enthusiasts in particular will enjoy a detailed description of how to trace a path through an octree There are however a few problems with the presentation Despite the ambitious titles of the volumes there is nowhere near as much theory or practical advice as one might expect The emphasis is instead on explaining literally everything at an understandable level While this makes the books a wonderful introduction to all sorts of stuff the reader still needs guidance in choosing what techniques to actually use The title of the first volume The Design and Analysis of Spatial Data Structures obviously invokes comparison with the classic text The Design and Analysis of Computer Algorithms by Aho Hopcroft and Ullman However Samet s approach differs greatly from that of Aho et al While the data structures are described and discussed in detail the analysis is not very formal Theorems and proofs as well as detailed algorithm analysis are not much in evidence A more appropriate title might simply be An Introduction to Spatial Data Structures The second book Applications of Spatial Data Structures covers basically every research result in hierarchical algorithms major or minor It is exceptionally good at explaining techniques succinctly The depth is not sufficient enough to implement the techniques without referring to the original papers however Additionally the reader is given no good feel for which results should actually be used If a technique is commonly used in industry or never used because of impracticality Samet never says so The reader who expects a cookbook solution to his problem will be disappointed The books are primarily of use for two purposes First they provide a good introduction to those aspects of computational geometry and image processing which are most likely to be of interest to a person working in graphics Second they provide a very complete guidebook to the literature I would suggest that researchers and practitioners have these volumes on their reference shelves Due to the sheer volume of material presented I would not recommend them for use as course textbooks back to contents Comparison of Kolb Haines and MTV Ray Tracers Part I by Eric Haines I decided to compare the MTV ray tracer the Kolb rayshade software and my own modified SBRR ray tracing package to see the efficiency of each My goal was to see what sort of performance was obtained by each ray tracer and note the strengths and weaknesses of each This first section of the report marks the state of current results consisting of timings from the gprof command for each package using the Standard Procedural Database SPD package All three packages were run on an HP 350 workstation with a floating point accelerator board The compiler options were g G ffpa debug profile with special floating point only compile using HP UX 6 5 The three ray tracers were selected from all the existing packages by having the following properties 1 Each could handle all the primitives in the SPD package and 2 each had some automatic efficiency scheme Other packages do not support all the primitives e g DBW does not have cylinders cones or n sided polygons or do not have automatic efficiency generation e g QRT lets you explicitly create bounding boxes but has no way for this to happen automatically The MTV ray tracer was created by Mark VandeWettering and uses the Kay Kajiya hierarchy approach i e sorting objects along X Y Z and splitting each group recursively To make it conform to the requirements of the SPD tests minweight was set to 0 0 in order to disable tree pruning a la Hall s method Craig Kolb s rayshade ray tracer uses a 22x22x22 grid on all scenes Because of the use of grids i e 3DDDA it was found to be sensitive to the background polygons used in the SPD package In four of the SPD scenes balls gears rings and tree there is a ground polygon The rayshade software allows some user intervention in how the database is structured It was found that faster timings sometimes strikingly quicker could be obtained by leaving this background polygon out of the grid structure Changing the database in this manner is forbidden by the SPD tests but both sets of results are presented because of the difference in timings The SBRR package is not public domain but rather is part of the graphics software in all HP workstations using the Turbo SRX graphics accelerator It uses the Goldsmith and Salmon automatic bounding volume hierarchy method It should also be noted that this package is full featured which has a corresponding slowdown effect when intersection computations are performed For example polygons can be single or double sided with different materials colors per vertex normals per vertex and other combinations available Since the package has a hardware assist by using the graphics engine as an item buffer see Weghorst and Hooper timings are given both with and without this assist The times without are the fairer of the two for comparison Without further ado here are the timings MTV Basic balls 12604 gears 38123 mount 9307 rings 24286 tetra 1081 tree 8056 Kolb Basic Modified balls 14871 3224 gears 12601 11449 mount 2989 2989 i e same no modification needed rings 8348 8103 tetra 836 836 i e same no modification needed tree 18957 2505 SBRR Basic Item Bfr balls 5027 4126 gears 13561 12776 mount 5440 3749 rings 11044 10446 tetra 1187 457 tree 3229 2719 So considering the MTV ray tracer as 1 00 here are the relative performance times of each tracer MTV time RT time i e higher is faster and can be thought of as how many times faster it is SPD MTV Base Kolb Bas Kolb Mod SBRR Bas SBRR Bfr balls 1 00 0 85 3 91 1 40 3 05 gears 1 00 3 02 3 32 2 81 3 33 mount 1 00 3 11 Some interesting phenomena are revealed by the statistics The tetra database is pretty much the same absolute speed for everyone However given the performance for other scenes it is noteworthy that MTV performs relatively faster on this than others I ve noticed this too when trying Kay Kajiya myself this scheme just soars on tetra though I am not sure why Perhaps it is the smallness and regularity of the objects which would go well with Kay Kajiya s assumption that using the centroid of these is reasonable For other databases one can imagine better hierarchies that those constructed by Kay Kajiya For example with mount the four spheres above the fractal mountain should be in their own cluster just off the top of the hierarchy tree The tetra scene is a strange test in that most around 81 of the scene is background so what we tend to test here is affected more by how fast one can traverse a scene set up rays shade and store values in a file It will take further analysis to see where the time is spent The Kolb ray tracer is interesting in how much its efficiency scheme is affected by the geometry of the scene The teapot in a football stadium effect I ve written about previously hits grid efficiency schemes with a vengeance For example moving the ground polygon from the grid subdivision to outside of it makes rayshade perform 4 6 times faster for balls and 7 7 times faster for tree The point is that grids perform best when the scene is relatively compact The large ground polygons in these scenes cause the entire grid to get larger in two directions and so make many more objects fall inside but a few grid squares thereby ruining much of the efficiency of the grid Comparing Kolb to MTV we see that overall Kolb is faster Kolb does worse on balls and tree using the unmodified database but otherwise outperforms MTV being about twice as fast When the ground polygon is taken out of the grid subdivision Kolb is more than 3 times faster for all cases except tetra Comparing SBRR and MTV shows SBRR to be faster for most cases with MTV being slightly faster for tetra Overall SBRR is almost twice as fast with its basic performance and about 2 75 times faster when the item buffer is used Comparing SBRR and Kolb is a bit tricky since there are two tests of each Taking the basic tests in each Kolb and SBRR are comparable Kolb outperforms SBRR in four cases and SBRR outperforms Kolb in two and for one of those tree it is almost 6 times faster SBRR has some things to learn from Kolb which is why I m doing all this anyway as Kolb s modified database results point towards the fact that faster performance is possible So on the basis of pure raw timings Kolb and SBRR without modifications or accelerators are of comparable speed With user intervention into the database structure Kolb can become noticeably faster It should also be noted that Kolb uses a default of 22x22x22 grid cells which is under user control and so could be tuned to further improve performance Actually this is an interesting open question what heuristics can be used to determine a reasonable grid size for a scene Also is there a reasonable way to determine if such performance destroyers such as ground polygons are present automatically and so remove them from the grid subdivision itself David Jevans and Brian Wyvill s work on nested grid subdivisions Adaptive Voxel Subdivision for Ray Tracing Proceedings of Graphics Interface 89 p 164 172 might lead to a less variable performance and to greater overall speed Craig and I have discussed this but unfortunately he has no time to try this out perhaps someone out there can experiment and compare results As mentioned this is research in progress My next step will be to analyze the statistics generated by each program and see where time is spent back to contents Raytracer Performance of MTV by Steve Lamont Could you pass on your timings on ray tracer performance on various machines and any thoughts or experiences you want to share about the subject The parallelization was done in a brute force manner forking processes and dividing the work by the number of processes The parent process remains behind and reads the scanlines in a round robin fashion from pipes There is no communication from the parent to the child processes once the forking has been done the ray tracing routines simply march down the scan lines This approach works well on a homogeneous architecture where all processes run at approximately the same speed and no process dries up or runs out of work to do This works well for single frames However my approach for a large animation is to simply parcel out work on a frame per processor basis I ve built the MTV raytracer on the Cray the IRIS and the Ardent Titan and here are some preliminary results on a 128 x 128 test image the balls image with reflections but no refractions 3 light sources 11 primitives 16 with bounding volumes processes CPU seconds Machine 1 4 Notes Y MP 8 432 4 0 1 0 hopt intrinsics vector IRIS 4D 240 8 2 2 1 O2 MIPS R3000 3010 Titan P2 30 0 7 7 O3 MIPS R2000 prop vector fp unit Titan P3 7 2 Run by vendor MIPS R3000 3010 proprietary vector unit Wall clock times improved by a factor of 2 5 to 3 which squares pretty well with Amdahl s law as extended for small parallel architectures These are preliminary results with respect to the Titan we ve only had it for a couple of weeks On none of the machines did MTV vectorize in any way to speak of In fact turning off vectorization improves performance for several short vector loops e g loops of vector length 3 Timings were done on a fairly heavily loaded Cray and an empty IRIS and Titan The Cray is a Y MP with four processors upgradable to 8 hence the 8 4 and 32 mWords of central memory There is also a 128 mWord SSD Solid state storage device We also have 40 gBytes of rotating storage a combination of DS 40s and DD 49s Actually this machine is a CDC Cyber 910 624 but the only difference between it and a genuine Silicon Graphics IRIS 4D 240 is the color of its box and the binding on the manuals Disclaimer These comments are solely the responsibility of the author and no endorsement by the North Carolina Supercomputing Center should be inferred Steve Lamont sciViGuy EMail spl ncsc org NCSC Box 12732 Research Triangle Park NC 27709 back to contents BRL CAD Ray Tracer Timings by Gavin Bell gavin krypton sgi com These results are third hand I can vouch for the accuracy of our machine s results but the BRL people may have more recent results to share The only experience I have with ray tracing timing on our machines is with a simple interactive ray tracer demo called flyray I modified it to be fully parallelized it uses one CPU to display a real time display of the scene being ray traced complete with rays shooting into and bouncing around the scene and the other N 1 CPUs to compute ray object intersections these results are shown in a separate window As for timing runs REAL fast on an 8 CPU system What follows is a form letter I ve been sending to people who asked for ray tracing timings This is a response to all of those people who asked me for the BRL CAD ray tracing benchmark results I m surprised at how many of you there are First a little bit about myself I work in Technical Marketing the Demos and Benchmarks group here at Silicon Graphics I m not usually involved in benchmarks I work mainly on our demos The rest of this text comes directly from a SGI Benchmark Summary prepared by one of our Marketing people The numbers are communicated to him by the software engineer who did the benchmark These benchmark summaries are communicated to salespeople in a weekly newsletter as soon as the results come in Other summaries done include INDUSTRY STANDARD Dhrystones Digital Review Labs Linpack Livermore Fortran Kernals MUSBUS Whetstones OTHERS LES50 computational fluid dynamics Moldflow finite element analysis Molecular Dynamics Nord UFLA GROMOS all computational chemistry If you want more information on any of these benchmarks please see a SGI sales rep I can t keep typing in all of these numbers Also please remember that these benchmarks were done for a specific customer who was interested in a specific machine so most of them were not benchmarked on our whole product line the Industry Standard benchmarks however are usually run on all of our products APPLICATION BENCHMARK NAME CUSTOMER Rendering BRL CAD 3 7 US Army Ballistic Research Lab LANGUAGE SUMMARY DATE C 9 5 89 DESCRIPTION The BRL CAD benchmark is a part of the US Army Ballistic Research Laboratory s BRL CAD package The core of the BRL CAD benchmark is a ray tracing program which consists of about 150 000 lines of C code Computations are performed in double precision floating point Five separate data bases are input to the ray tracing program resulting in six performance ratings one for each plus a total which is the mean of the other five When rendered each data base will produce a 512x512x24 bit color shaded image The images are of increasing complexity and are identified as Moss World Star Bldg and M35 RESULTS The result of this benchmark is reported as rays traced per second and referred to as Ray Tracing Figure of Merit RTFM Higher numbers indicate better performance The code was parallelized by inserting user directives to create multiple processes to trace rays RESULTS FOR SGI MACHINES Note The actual report has nice graphs here Machine RTFM 1x16 4D 80 714 2x16 4D 120 1358 4x25 4D 240 5034 8x25 4D 280 7434 Note NxMM numbers refer to the number of processors in the machine N running at MM MHZ COMPETITIVE RESULTS Machine Processors RTFM Relative Performance Vax 780 1 77 1 0 Sun3 1 88 1 1 Convex C120 1 163 3 6 Sun4 1 435 5 6 SGI 4D 120S 2 1358 17 5 Alliant FX 80 8 2783 33 6 SGI 4D 240S 4 4456 70 4 Cray X MP 48 4 7217 116 1 SGI 4D 280 8 7434 119 7 ANALYSIS The BRL CAD benchmark exhibits excellent speedup as processors are added This is due to the coarse granularity inherent in the ray tracing problem being solved Each ray is processed independently with no data dependencies among the rays This means that multiple processors can each work on separate rays simultaneously with minimal need for synchronization among processors While the code is highly parallelizable it is not efficiently vectorizable because of short vector lengths The combination of these two characteristics explain the phenomenal performance of Silicon Graphics machines relative to vector machines like Cray and Alliant The characteristics of this benchmark that lead to high performance by the Silicon Graphics machines are common to all ray tracing applications Here is another note from Gavin My only experience with the BRL ray tracer came when I was at Princeton University I installed it on Silicon Graphics machines there for the Graphics Lab That was two years ago as far as I could tell it didn t use octrees or any other space partitioning algorithm I used a ray tracer written at Princeton the precursor of what is now Craig Kolb s rayshade program Craig and I had the same thesis advisor which did do octrees it was infinitely faster than the BRL beast back to contents BRL CAD Benchmarking and Parallelism by Mike Muuss mike BRL MIL I m sort of on vacation right now so I m going to cop out and just send you the TROFF input for several things that I have handy about how we benchmark ray tracing in the BRL CAD Package The first one is our benchmark summary paper The second one is a portion of a paper that I wrote called Workstations Networking Distributed Graphics and Parallel Processing You may publish and or redistribute both documents as you wish Note that the United States Government holds the copyright ie it is not permissible to copyright this material These papers are rather lengthy so I won t include them in this issue If you would like copies look at the archive sites for Muuss benchmrk and Muuss parallel or write me EAH back to contents USENET cullings follow Rayshade Patches Available by Craig Kolb From craig weedeater math yale edu Newsgroups comp graphics Organization Math Department Yale University Patches 1 3 for rayshade v3 0 are available via anonymous ftp from weedeater math yale edu new address 130 132 23 17 in directory pub rayshade 3 0 patches The patches fix several minor bugs clean up the documentation and provide new features Several people have expressed an interest in trading rayshade input files If you have an interesting input file that you d like to share feel free to deposit it in the incoming directory on weedeater or send it to me via email I will make these files available in the pub Rayinput directory on weedeater Rayshade is supposedly on the verge of appearing in comp sources unix patches and all back to contents Research and Timings from IRISA by Didier Badouel From badouel irisa irisa fr badouel irisa irisa fr badouel irisa irisa fr Newsgroups comp graphics Organization IRISA Rennes Fr We have a parallel raytracer called PRay at IRISA which as MTV uses NFF description databases This raytracer has been implemented on an iPSC 2 on a SEQUENT BALANCE and also on serial computers SUN3 GOULD NP1 to make better comparisons I give you the various synthesis times for the well known Teapot database The image has been rendering with a 512X512 resolution with 3 light sources Results are as follows PEs Time in sec SUN3 8877 2h27mn GOULD NP1 1642 27mn SEQUENT BALANCE 1 37121 10h18mn 2 18567 3 12381 4 9285 5 7431 6 6197 7 5311 8 4656 9 4138 1h9mn iPSC 2 1 6294 1h45mn 2 3332 4 1700 8 860 16 440 32 224 64 119 2mn The code running on the iPSC 2 emulates a virtual shared memory over the local PEs The database is not duplicated but all the local memories are used The remaining memory after loading code and data is used as a cache to speed up low global accesses In order to benchmark our parallel raytracer running on an iPSC 2 which use Eric Haines NFF file format as input we would like to know if other people have a parallel raytracer using these databases in order to make some comparisons One of our goals is to render the largest possible database For the moment we have rendered the tetra10 database the database contains more than 1 million polygons 1048576 polygons the size of the database with its object access structure a grid is 140 MO the synthesis time is 526 seconds on the iPSC 2 with 64 nodes and 4 MO node memory however on account of using NFF text file format reading the input is very slow more than 3 hours for tetra10 when using YACC and LEX Furthermore our iPSC 2 configuration does not have I O node system Didier BADOUEL badouel irisa fr INRIA IRISA Phone 33 99 36 20 00 Campus Universitaire de Beaulieu Fax 99 38 38 32 35042 RENNES CEDEX FRANCE Telex UNIRISA 950 473F back to contents Concerning Smart Pixels by John S Watson From watson ames arc nasa gov John S Watson Newsgroups comp graphics Organization NASA Ames Research Center In article 207400033 s cs uiuc edu mccaugh s cs uiuc edu writes Does anyone know of a system with smart pixels Once upon a time I wrote a ray tracer in which the pixels used heuristics to determine their sampling rate Since the reason for doing it was to speed things up the heuristic had to be simpler than casting a ray s if sub sampling I used difference in previous pixels values with a little randomness tossed in So pixels changing quickly were sampled every frames while pixels that were hardly ever changing were sampled only once every 10 frames The results much faster but with a graininess on the edges of moving objects I needed to make the pixels more aware of what was happening with its neighbors Never got around to doing that Another problem is big pictures have lots of pixels 512x512 0 25 million To be smart you must have a memory To save memory I combined the above with an Area of Interest Variable Acuity AOIVA Ray Tracer Hope this helps John S Watson Civil Servant from Hell ARPA watson ames arc nasa gov NASA Ames Research Center UUCP ames watson Any opinions expressed herein are like solely the responsibility of the like author and do not like represent the opinions of NASA or the U S Government back to contents Input Files for DBW Render by Tad Guy From tadguy cs odu edu Tad Guy Newsgroups comp graphics Organization Old Dominion University Norfolk VA In article 6475 pt cs cmu edu te07 edrc cmu edu Thomas Epperly writes I was wondering if anyone had any neat input files for DBW Render available for anonymous ftp xanth cs odu edu as amiga dbw zoo If you have a network of say sun workstations you might as well get amiga distpro zoo which will allow to distribute the computations over many machines back to contents Intersection with Rotated Cubic Curve Reference by Richard Bartels From rhbartels watcgl waterloo edu Newsgroups comp graphics Organization U of Waterloo Ontario In article 1445 tukki jyu fi toivanen tukki jyu fi Jari Toivanen writes I would like to know is there any simple and effective solution to following problem intersecting a ray with a rotated cubic curve Jari Toivanen Segments are for worms University of Jyvaskyla Finland Internet toivanen tukki jyu fi Look at the article Ray Tracing Objects Defined By Sweeping Planar Cubic Splines Jarke J van Wijk ACM Transactions on Graphics Vol 3 No 3 July 1984 pp 223 237 I believe that the author subsequently wrote a whole book on the subject Incidentally this article also has a method for quickly intersecting a tight fitting bounding volume around such curves I ve found this test useful for use as a torus bounding volume Also does anyone know of the existence and the name of the book Richard mentions EAH back to contents Needed Quartz surface characteristics by Mike Macgirvin From mike relgyro stanford edu Newsgroups comp graphics Organization Stanford Relativity Gyro Experiment GP B I am in need of the surface characteristics for fused quartz Ambient diffuse and specular color characteristics Phong coefficent reflectance and transparency I have the index of refraction Well I have to average it c est la vie I have attempted to derive these experimentally but find the resulting traced image lacking in many ways and a simulation visualization I am working on requires accuracy I am using Kolb s rayshade if it affects your responses Please respond via e mail if possible back to contents Solution to Smallest Sphere Enclosing a Set of Points by Tom Shermer From shermer cs sfu ca Newsgroups comp graphics Organization School of Computing Science SFU Burnaby B C Canada I need the solution for the following problem find the smallest sphere that encloses a set of given points in both 2 D and 3 D or even n D if you like This problem can be solved in linear time in any fixed dimension by the technique of prune and search sometimes called Megiddo s Technique either directly or by first converting the problem to a linear program The most relevant reference for 2d 3d is Linear time Algorithms for Linear Programming in R 3 and Related Problems Nimrod Megiddo SIAM J Comput v 12 No 4 Nov 1983 pp 759 776 Other related references Linear time algorithms for two and three variable linear programs M E Dyer SIAM J Comput v 13 1984 31 45 On a multidimensional search technique and its application to the Euclidean one center problem M E Dyer Dept Math and Stats TR Teesside Polytechnic Middlesbrough Cleveland TS1 3BA UK 1984 Linear programming in linear time when the dimension is fixed N Megiddo JACM 31 1984 114 127 The weighted Euclidean 1 center problem N Megiddo Mathematics of Operations Research 8 1983 498 504 On the Ball Spanned by Balls N Megiddo manuscript this may have appeared in the literature by now back to contents True Integration of Linear Area Lights by Kevin Picott From kpicott alias UUCP Newsgroups comp graphics Organization Alias Research Inc Has anyone seen any work done on evaluating the diffuse and specular illumination produced by linear and or area lights I have checked all the standard sources and all information I find gets to the point where the integration is set up and then a little hand waving is performed accompanied by the magical words numerically integrated This works but is too slow for my purposes Does anyone know of any work done in different directions ie faster evaluation Thanks to all who replied to my query about linear and area lights In the area of linear lights two papers on analytical solutions were found The first by John Amanatides and Pierre Poulin has been submitted to Eurographics 90 and I ll hopefully get a look at that soon The second Shading Models for Point and Linear Sources ACM TOGS 4 2 April 1985 pp 124 146 by T Nishita I Okamura E Nakamae proposes an analytic solution to the diffuse component but only under certain circumstances The latter unfortunately reduces to numerical integration in the majority of cases where spline surfaces are involved although a method of optimization is given that reduces computation time for the numerical integration This method would seem to be suited to lighting parallel and perpendicular to the illuminated surfaces There was also a paper entitled A Comprehensive Light Source Description for Computer Graphics IEEE CG A July 1984 by Channing P Verbeck and Donald P Greenberg that approximates both linear and area light sources as a series of point sources This is a compromise to numerical integration but is still computationally expensive In summary the analytical solution to linear sources exists and is calculable at least for the diffuse component The specular component exists but direct calculation is almost expensive as numerical integration As far as area light sources are concerned no analytical solutions were found In fact from the work examined I was left with the impression that even if the solution existed it would not be very useful from a light illumination point of view ie non radiosity Comments Kevin Picott aka Socrates aka kpicott alias csri toronto edu Alias Research Inc R D Toronto Ontario like downtown back to contents Eric Haines erich acm org Ray Tracing News Volume 3 Number 1 Ray Tracing News Volume 3 Number 1 Ray Tracing News Volume 3 Number 1 Ray Tracing News Volume 3 Number 1 Ray Tracing News Volume 3 Number 1 Ray Tracing News Volume 3 Number 1 Ray Tracing News Volume 3 Number 1 Ray Tracing News Volume 3 Number 1 Ray Tracing News Volume 3 Number 1 Ray Tracing News Volume 3 Number 1 http www acm org tog resources RTNews html rtnv3n1 html http www acm org tog resources RTNews html rtnv3n1 html http www acm org tog resources RTNews html rtnv3n1 html http www acm org tog resources RTNews html rtnv3n1 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv3n2.html%%==%%Ray Tracing News, Volume 3, Number 2%%==%%Ray Tracing News "Light Makes Right" March 20, 1990 Volume 3, Number 2 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%110835%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right March 20 1990 Volume 3 Number 2 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1990 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction New People Address Changes etc FTP Site List by Eric Haines RayShade Posting and Patches and Whatnot by Craig Kolb Common Rendering Language by Eric Haines Avoiding Re Intersection Testing by Eric Haines Torus Equation Correction by Pat Hanrahan Introduction to Ray Tracing Shading Model Errata by Kathy Kershaw Comments on Last Issue by Mark VandeWettering An Improvement to Goldsmith Salmon by Jeff Goldsmith Fiddling with the Normal Vector by H ZAP Anderson A Note on Texture Sampling by Eric Haines Unofficial MTV Patches by Eric Haines Net News Cullings OFF Databases by Randi Rost VM pRAY is now available by Didier Badouel Superquadrics by Prem Subrahmanyam Patrick Flynn Ron Daniel and Mark VandeWettering Graphics Textbook Recommendations by Paul Heckbert Mark VandeWettering and Kent Paul Dolan Where To Find U S Map Data by Dru Nelson References for Rendering Height Fields Mark VandeWettering RayShade 3 0 Released on comp sources unix by Craig Kolb Bibliography of Texture Mapping Image Warping by Paul Heckbert More Texturing Functions by Jon Buller Ray Cylinder Intersection by Mark VandeWettering C Code for Intersecting Quadrics by Prem Subrahmanyam Parallel Ray Tracing on IRISs collected by Doug Turner Introduction Well it s been awhile I ve been detoured by making demos for NCGA but now that s over and I can catch up with editing the RT News Actually doing demos was interesting this time around I wrote a personal visualizer personal is definitely the right word so far only I can use it for setting up the view light sources materials and positions of objects i e no modeling capability per se along with some animation tools Beats the daylights out of my old visualizer aka known as Unix s vi editor Anyway interactive graphics is pretty enjoyable I d forgotten Nice to have an image come up in less than an hour let alone less than a second I ve heard from a few people that Silicon Graphics new machine is pretty hot surface and reflection environmental texturing in hardware and it s pretty fast at it Intergraph evidentally has some kind of ability to change material attributes of objects in a ray traced image and have the changes to the image compute and display quite rapidly They claim to NOT be storing the intersection trees for all of the pixels so I m looking forward to seeing this myself and figure out how they do it my current theories of it s just a videotape shown on the screen and they ve made a pact with the devil not being the most scientific By the way the Introduction to Ray Tracing book is not out of print Evidentally there was a temporary shortage but they ve reprinted it and it should be back in stock now back to contents New People Address Changes etc Eric Chet acceleration 4047 Forest Hill Drive Lorain Ohio 44053 alias eric chet chet cis ohio state edu My main interest in ray tracing now is acceleration I m developing a ray tracer in 680x0 assembler to make it as efficient as possible with the algorithms I m implementing Spatial subdivision and ray coherence are the techniques I m working with John McMillan Department of Physics University of Leeds Leeds LS2 9JT West Yorks Great Britain phy6jem cms1 ucs leeds ac uk My interest is slightly different from your normal application of raytracing I m not interested in images at all I design scintillation detectors in which light is produced in a medium in response to a charged particle passing through Some of this light eventually makes its way to a photomultiplier circular window where it is converted into an electrical signal I m interested in following rays through various geometries of materials with different refractive indices and reflection coefficients So I guess you can probably see why I m interested in Ray Tracing News Marinko Laban shading anti aliasing CSG Modelling K T I BV Bredewater 26 2700 AB Zoetermeer The Netherlands 079 531521 Don t know the USA access code e mail address hp4nl hp4nl nluug nl ktibv ml During my University study I obtained various copies of your Ray Tracing Newsletter These copies were given to me by the supervisor of my Master project M Frits Post Tech University of Delft Holland Under his supervision I ve written my Master Thesis about distributed ray tracing and I also wrote an implementation of one I ve got my Master degree for a few months now and I m currently working as a CAD software engineer at Kinetics Technology International My professional tasks are developing evaluating CAD Engineering software for Industrial Plant Design I also keep myself busy with our UNIX computers and all sorts of small bits and pieces When I have the opportunity time I have some SPARC s do some ray tracing from me I also keep my personal Amiga busy doing all kinds of graphics stuff David Tonnesen Dept of Computer Science University of Toronto Toronto Ontario M5S 1A4 416 978 6986 and 978 6619 research modeling and rendering e mail davet dgp toronto edu UUCP CSNET ARPANET davet dgp utoronto BITNET I am a Ph D student at the University of Toronto and interested in a variety of graphic topics including ray tracing Other areas I am interested in include models of deformable models global illumination models models of natural phenomena physically based modeling etc Basically modeling and rendering Jim Arvo of Apollo has the new email address arvo apollo hp com Carl Bass of Ithaca Software is moving to California He should have a new mailing address soon His latest address has been updated to carl mssun7 msi cornell edu back to contents FTP Site List by Eric Haines This is my own collection of sites which have ftp able software or documents that have some relevance to ray tracer If you don t know how to use ftp see Didier Badouel s article in this issue for an example Recall that it s considered polite to download large amounts of stuff only after business hours If a site has a software name with asterisks around it e g RT News this means that the site is the home of this stuff or is updated often enough by the site that the site s offering is usually the most current version The archive manager more or less is listed at the end of each entry Please do send on any corrections or clarifications you have Sites are always changing so please do keep me posted I m not going to bother with gif image file sites though they are useful for texturing as the list would double in size The sites below are listed more or less in the order of most to least extensive ray trace related material stored Mark VandeWettering s MTV ray tracer was posted to comp sources unix and is postings v18i070 072 Sid Grange s ray tracer is v05i046 Craig Kolb s RayShade has just been posted to comp sources unix v21i008 Note patch4 is now available for RayShade cs uoregon edu 128 223 4 13 pub MTV ray tracer RT News RT bibliography other raytracers including RayShade QRT VM pRAY SPD NFF OFF objects musgrave papers some Netlib polyhedra Roy Hall book source code Hershey fonts old FBM Mark VandeWettering markv acm princeton edu hanauma stanford edu 36 51 0 16 pub graphics Comp graphics best of comp graphics very extensive ray tracers DBW MTV QRT and more weedeater math yale edu 130 132 23 17 Rayshade 3 0 ray tracer color quantization code Utah raster toolkit newer FBM Craig Kolb kolb yale edu freedom graphics cornell edu 128 84 247 85 RT News back issues source code from Roy Hall s book Illumination and Color in Computer Generated Imagery SPD package Heckbert Haines ray tracing article bibliography Muuss timing papers uunet uu net 192 48 96 2 graphics RT News back issues other graphics related material life pawl rpi edu 128 113 10 2 pub ray Kyriazis stochastic Ray Tracer George Kyriazis kyriazis turing cs rpi edu geomag gly fsu edu 128 186 10 2 pub pics DBW src and DBW microray src DBW Render source ray traced images Prem Subramanyan prem geomag fsu edu xanth cs odu edu 128 82 8 1 amiga dbw zoo DBW Render for the Amiga zoo format Tad Guy tadguy cs odu edu munnari oz au 128 250 1 21 pub graphics vort tar Z CSG and algebraic surface ray tracer pub DBW pbmplus David Hook dgh munnari oz au cs utah edu 128 110 4 21 pub Utah raster toolkit Spencer Thomas thomas cs utah edu gatekeeper dec com 16 1 0 2 pub DEC off tar Z OFF objects pub misc graf bib graphics bibliographies incomplete Randi Rost rost granite dec com expo lcs mit edu 18 30 0 212 contrib pbm tar Z portable bitmap package poskbitmaptars bitmap collection Raveling Img xloadimage Jef Poskanzer jef well sf ca us venera isi edu 128 9 0 32 pub Img tar z and img tar z some image manipulation pub images RGB separation photos Paul Raveling raveling venera isi edu ftp ee lbl gov 128 3 254 68 pbmplus tar Z ucsd edu 128 54 16 1 graphics utah rle toolkit pbmplus fbm databases MTV DBW and other ray tracers world map other stuff Not updated much recently okeeffe berkeley edu 128 32 130 3 pub TIFF software and pics Sam Leffler sam okeeffe berkeley edu curie cs unc edu 128 109 136 157 pub DBW pbmplus pub graphics vort Jeff Butterworth butterwo cs unc edu irisa fr 131 254 2 3 iPSC2 VM pRAY ray tracer NFF some non SPD NFF format scenes Didier Badouel badouel irisa irisa fr hc dspo gov 192 12 184 4 have never connected Images netlib automatic mail replier UUCP research netlib Internet netlib ornl gov SPD package polyhedra databases Send one line message send index for more info UUCP archive avatar RT News back issues For details write Kory Hamzeh kory avatar avatar com Non sites places which used to have graphics stuff but do no longer albanycs albany edu 128 204 1 4 no longer carries graphics stuff nl cs cmu edu 128 2 222 56 usr mlm ftp fbm tar Z not found Michael Maudlin mlm nl cs cmu edu panarea usc edu 128 125 3 54 not found archive for maps back to contents RayShade Posting and Patches and Whatnot by Craig Kolb Craig s excellent public domain ray tracer RayShade 3 0 has been posted to comp sources unix He has also just recently posted patch4 a set of fixes for this program EAH On the ray tracing front I m mulling over a total rewrite of rayshade in an attempt to make it more flexible extensible Mark and I are talking about tying together the scanline rendered he s working on with a new version of rayshade It would be nice if they shared a common modeling texturing language etc I think it could be quite nice if done correctly back to contents Common Rendering Language by Eric Haines One question which I ve received and seen posted on comp graphics with some frequency is what input format language should I use for scene description As the inventor of NFF Neutral File Format I recommend AGAINST this language as your first choice Hey I made for testing efficiency schemes at one point I considered not even allowing the user to specify colors but esthetics got the best of me You currently cannot specify light intensity As it stands I don t plan on extending NFF the language is supposed to be as minimal as possible and is for testing efficiency schemes I d recommend anyone interested in this question to look at Craig Kolb s RayShade language It s much fuller includes many more primitives texture functions instancing etc You could always pick a subset that you have implemented if the language is too extensive for your tastes One very nice thing provided with RayShade is an Awk script which translates NFF files to his format If you plan on making some money off of whatever you re doing it s wise to look at RenderMan There are definitely some grey areas in the spec as to how certain functions actually perform i e what algorithm is used as well as some procedures which force the use of certain algorithms e g shadow maps But most of the language is reasonable and well thought out the RenderMan Companion is readable at least you won t have to write documentation if you choose this language and certainly other companies are signing on to using this language Caveat good luck beating Pixar at its own game in the marketplace especially with their years of lead time back to contents Avoiding Re Intersection Testing by Eric Haines The problem when shooting a ray through a grid 3DDDA or octree or any other scheme which can put an object into more than one reference location you encounter the problem of how to avoid performing the intersection test more than once for the same ray and same object For example imagine you have a cylinder which overlaps two grid boxes Your ray enters the first grid box and is tested against the cylinder missing it So now your ray moves into the next grid box and the cylinder is listed in this second box Obviously the ray missed this cylinder on the previous test You would like to avoid testing the cylinder against the ray again to save time How to do it There are some fairly bad solutions to this problem One is to keep a list of flag bits one per object When an object is tested for intersection the flag bit is checked if off then it is set and the full test is performed If on then we know we ve tested the ray against the object already and can move on The problem with this solution is that you must reset the flag bits after each ray which can be a costly procedure For example imagine you have 32000 objects in a scene Even with 32 bit words used for the flags you have to reset 1000 words to zero before EACH ray There are variants on this scheme e g you could store the locations to reset in a list then simply reset just those in this list before the next ray but happily there is a better solution with much less overhead Note if you re really strapped for memory you might still want to go with the above algorithm The algorithm keep a list of integers one per object call this the hit list alternately simply add this field to each object Initialize this list to zeroes Also keep a counter which counts the total number of rays generated i e when a new ray is generated the counter is incremented When a ray is to be tested against an object check the object s hit list value If this value does not match the ray s counter number then set the hit list value to the ray s counter number and test the object If the hit list value matches the ray s number then this object has already been tested by the ray If you use 32 bit words in the list you probably won t have to worry about the ray counter overflowing 2 32 rays is a lot However you could even use byte length integers for the hit list When the ray counter reaches 256 then you reset the whole hit list to zero and reset the count to 1 In some ways this technique is an extension of the flag bit technique with the cost of a little more storage offset by the time savings of rarely if ever having to reset the flags Over the past few months I ve noticed that there are still a few researchers who do not know about this technique Personally I had to invent this algorithm for my own use and others have no doubt done the same Asking around for references I can see why people would not know about it The only reference that I know which mentions this algorithm is A Bruno Arnaldi A Thierry Priol A Kadi Bouatouch T A New Space Subdivision Method for Ray Tracing CSG Modelled Scenes J The Visual Computer V 3 N 3 D August 1987 P 98 108 K CSG back to contents Torus Equation Correction by Pat Hanrahan Pat took up my request last RTN to derive the ray torus intersection equation on Mathematica He found that in fact Larry Gritz s my derivation still had one small bug I left out the subscript of z0 in the very last term of a0 So here s the final correct equation I hope EAH a4 a3 Pat s are OK a2 2 x1 2 y1 2 z1 2 x0 2 y0 2 z0 2 a 2 b 2 4 x0x1 y0y1 z0z1 2 4a 2z1 2 a1 4 x0x1 y0y1 z0z1 x0 2 y0 2 z0 2 a 2 b 2 8a 2 z0 z1 a0 x0 2 y0 2 z0 2 a 2 b 2 2 4a 2 b 2 z0 2 I left this out Pat sent me all of the equations in eqn format here they are EQ define x0 x sub 0 define x1 x sub 1 define y0 y sub 0 define y1 y sub 1 define z0 z sub 0 define z1 z sub 1 define r11 x1 sup 2 y1 sup 2 z1 sup 2 define r01 x0 x1 y0 y1 z0 z1 define r00 x0 sup 2 y0 sup 2 z0 sup 2 define r00ab r00 a sup 2 b sup 2 EN EQ a sub 4 r11 sup 2 EN C EQ a sub 3 4 r01 r11 EN C EQ a sub 2 2 r11 r00ab 4 r01 sup 2 4 a sup 2 z sub 1 sup 2 EN C EQ a sub 1 4 r01 r00ab 8 a sup 2 z sub 0 z sub 1 EN C EQ a sub 0 r00ab sup 2 4 a sup 2 b sup 2 z sub 0 sup 2 EN back to contents Introduction to Ray Tracing Shading Model Errata by Kathy Kershaw p 148 section on distribution term D 8th line should say that alpha is the angle between N and H p 156 section 5 4 2nd paragraph I think Andrew meant specular transmission curve p 158 in F dt lambda and eq 24 it says diffuse reflection instead of diffuse transmission and diffuse reflectance instead of diffuse transmittance back to contents Comments on Last Issue by Mark VandeWettering Glad to see that you spent the time to include the MTV raytracer in your timings I was meaning to compare them myself at some time but lacked the time to do so You might be interested to know that I have eeked out a little time to make some modifications to the MTV raytracer In particular I too have switched to an Goldsmith Salmon hierarchy generating scheme It s been a while since I benchmarked this one against the one that is available for ftp but I did realize significant speedups I added some primitive support for super ellipsoids and blocks as well The main reason that I haven t released these changes is simple Craig Kolb s raytracer is too good It really is a slick piece of programming If it had 2 d texture mapping it would be ideal for a large variety of image rendering tasks I also think that more adaptive methods particularly K K bounding volumes are better under a wide variety of image rendering tasks Maybe I should construct an nff file for the teapot in a stadium idea and restore some of the dignity that the MTV raytracer had by kicking some sand back in Craig s face Another place where the MTV raytracer probably falls short is that for primitive objects I still take the trouble to intersect their bounding volumes For simple tightly bounded objects like spheres this is pretty wasteful Craig s code is fairly careful to weed those out If I had a good block of time I would like to go back and do it all over with texture mapping primitives and other niceties But now that I am out in the pseudo real world of Princeton such blocks of time are hard to come by Ah if one only had infinite time Anyway just an update from this side of the world back to contents An Improvement to Goldsmith Salmon by Jeff Goldsmith Background as written Goldsmith Salmon s automatic bounding volume hierarchy generation algorithm ABVH has two insertion methods for an object an object can become a new sibling of an existing bounding box or a new bounding box can be created which replaces one of the existing siblings and the existing sibling and object are put in this new bounding box A new case for the ABVH programs First insertion check consider the new node to be a sibling of the current root node That is consider making a new root with two children one being the current root and the other the new node This should have a cost of 2 Area new root Everything else is the same but this adds a case that I forgot and allows for less bushy roots when you need them I haven t tested this and I m not completely convince that 2A is the right cost but I think it is Since you use this algorithm I d appreciate some trials to see if it ever happens and if it has a predicted at least beneficial result on the final tree By the way Pete Segal inspired the idea In fact I tried this out some time ago The thrust of Jeff s comments are that at the root node the root can only get bushier more sons added or else objects are added to existing sons which have little relation to those existing sons His third case is to consider the root node itself a sibling of some imaginary father of the root which has only the root as its son and is the same dimensions In this way the object could also be added to this father and not cause the root to become bushy This explanation implies a simple change to existing code simply create this father of the root node at the start and any time the above condition of a sibling being added to this father occurs again create the father for this new root i e that used to be the father of the root As an example imagine some complicated scene that contains five spheres as light sources The light sources are some distance outside the rest of the scene i e not in the bounding volume containing this data You now try to add these light sources Under the old algorithm these lights would normally get added as separate siblings of the root node So when ray tracing you would always attempt to intersect all of these light sources when you first looked in the root box The new algorithm should cause the root to be less bushy and the lights may become a subcluster At least in theory I still want to think about it some more EAH back to contents Fiddling with the Normal Vector by H ZAP Anderson y88 l karvonen linus ida liu se When I Wrote my first raytracer it was in Basic only spheres one lightsource checkered ground and rather primitive A while has passed since then and I have put behind me quite a few years of Raytracing both in my mind and in my computer Not being fortunate enough to own a Cray III or even a VAX 11 780 but a mere CompaQ 386 20e I have a certain passion for tricks that enhance the picture quality without adding to the calculation time So besides Texture Mapping my favorite hat trick is Fiddling with the Normal Vector My first trick is the simplest and in my opinion the best isn t it always so But first some history WHAT is it the human eye want s to see WHAT make s a picture look real What makes a picture feel realistic There are of course MANY answers but one of them is Specular Highlights I was at a demo at Hewlett Packard in Stockholm and they showed me with badly hidden pride their TurboSRX solids rendering engine When the demo guy started to spin nurbs and superquadrics in realtime before my very eyes those eyes fell upon the specular highlights on the surfaces They moved along as the surface twisted and i thought gosh THAT looks real Something VERY important for the eye and our mind to really feel the solidity of an object is when the specular highlights crawl around it s surface as we twist them sorry for you Radiosity fans But WHY does a computer image need more specular highlights Aren t those only seen on cylinders and spheres and perhaps in a lucky instance on another surface The answer is a very very big NO Consider a coin Place it on the table in front of you Basically this coin is a rather short cylinder And if we would render it as such it would look no way like a coin Why is that Clue The microscope As we watch closely we see that the coins edge is a bit rounded by years of transfer on the black market The coin on your table almost ALWAYS have SOME part of it s edge in a direction that mirrors light and you have a specular highlight Taken further this applies to ALL edges NO edge in natural life is an exact 90 degree edge ALL edges are a bit rounded and therefore has a big probability of generating a specular highlight Just look around the room and you ll know I m right Here goes the simple trick Imagine a cylinder in the XY plane with a radius of 10 and a height of 10 When we want to obtain the normal vector we normally get one pointing straight up for the top face and one pointing in one direction in the XY plane depending on intersection point This gives us the simple cylinder and nothing like the coin mentioned above BUT if we now twiddle a bit with our famous Normal Vector so IF we hit the cylinder close to the top face say 1 of cylinder height we gently tweak the normal vector upwards scaled such that when we reach the top face exactly we have twisted it UP along the Z axis 45 degrees Now do the same for the top face When you approach the edge of the cylinder maybe 9 of the radius you gently twiddle the little N vector outwards again scaled to obtain 45 degrees exactly at the edge The result A cylinder with a rounded edge without extra calculation time or extra surfaces I have implemented this myself and the resulting increase in image quality is stunning Everything that once looked like synthetic and unreal cylindric objects now turns out to look VERY real once they get that little extra shine on the edge This of course applies to ALL edges and are just as simple to implement on other primitives Another Normal Vector Tricky is the Modified surface smoothing I use Consider a staircase looking surface and standard smoothing with one normal per vertex now watch Fig 1 Fig 1 Fig 2 I N12 N23 I I I N1 N2 I I I I I I I I I I N3 I I Imagine the standard smoothing applied to this surface The surface between the vertex normals N12 and N23 would be shaded as if it ALL had a normal vector same as N12 or N23 That isn t correct is it Behold Fig 2 With one normal vector per surface but smoothing from the center of surface 1 to the center of surface 2 then smooth onwards from surf 2 to surf 3 you will get a better result PLUS you save yourself the trouble of keeping interpolated vertex normals Now no real surfaces are perfect Take a close look at your neighbours ferrari in sunlight You will see that even if it isn t a perfect spline nurb or anything like that This can be simulated with gentle surface rippling a la DBW render or by actually MAKING the surface non perfect But there is another way When interpolating normals you may use other functions than standard linear interpolation Maybe use the square root of the distance to the normals or the distance squared This will yield a surface not so smooth as a perfectly smoothed may be something to consider Another thing I am currently trying to implement in my tracer is something I have called profile mapping you may have been using a different term where I supply a 2d description of normal vector tweaking as a function of local surface coordinates Simply put Texture mapping for the Normal I may be able to generate the engravings on our coin in the previous example or other subtle surface characteristics Has anyone any experience in this field Please let me know And finally a question I would very much like to implement Octrees in my tracer but I haven t REALLY understood how this works Could somebody in a few words explain the basics for little o l me ThanX in advance H ZAP back to contents A Note on Texture Sampling by Eric Haines this is edited from a note I wrote to Zap Anderson about sampling texture maps I hope it helps someone out there to understand the problem a bit better There are two problems that need solving when using texture maps interpolation aka magnification and decimation Interpolation is needed whenever less than one texel a sample on a texture map covers a pixel Decimation is needed when more than one texel falls into a pixel Actually the number is really 2 texels or less more due to the Nyquist frequency see Heckbert s thesis but forget that for now Interpolation is relatively easy if a texel covers more than one pixel then we should consider the texture map if it s an image to be representing a continuous sampling of something e g the mandrill So each texel is just a sample along a continuous function In this case when we hit such a texel we take the exact location on the function and interpolate the color from the nearby texels e g you could use bilinear interpolation which usually works well enough Note that you might not always want to interpolate e g if your map is a checkerboard then you may want the sharp edges between the squares not blurred edges Decimation is where the fun begins you want to take the values of all the texels in the pixels and blend them You also want to do this quickly i e if 10 000 texels fall in the pixel you want to quickly get the sum of all of these samples This usually means doing some preprocess like mipmapping see Lance Williams paper in SIGGRAPH 83 first article There are lots of other schemes this topic is one of the great paper generators see Paul Heckbert s thesis highly recommended on this Zap talked about what you should use as your criteria for anti aliasing edge detection or luminosity differential i e color change Edge vs luminosity difference detection is an interesting question you actually probably want both sorta Doing all the edges might be overkill since you could have something like a car body made of 36 000 polygons with each polygon being almost exactly the shade of the next one esp with interpolated normals at the corners In this case edges are a waste of time and you probably also want a threshhold luminosity to use for checking if the edge is worth antialiasing back to contents Unofficial MTV Patches by Eric Haines These are the patches I ve personally made to the MTV ray tracer from bugs that Mark VandeWettering has noticed and from my own experience They are unofficial patches and Mark hopes to have official ones out sometime The patches fix a cylinder rendering bug and a coredumping bug in the box intersector There are also fixes to make the statistics more descriptive old data c new data c 32a33 Mark s default prune value 33a35 36 Flt minweight 0 0 no pruning old antialiasing c new antialiasing c 23a24 24a26 27 define MAXRAND 32767 0 28a32 29a34 35 return Flt rand Flt MAXRAND old main c new main c 43a44 46 srand 10001 109c112 printf number of eye rays 6d n nRays 121a125 152 char rindex sp c register char sp c register char r r NULL do if sp c r sp while sp return r char index sp c register char sp c do if sp c return sp while sp return NULL old cone c new cone c 242a243 244a246 248 VecNormalize cd cone u VecNormalize cd cone v old intersect c new intersect c 61a62 64 check if ray is not parallel to slab if den i 0 0 80a84 89 else ray is parallel to slab see if it is inside slab if obj o dmin i num i obj o dmax i num i 0 0 return 104a114 Flt dendot 113c123 128 D Slab i dendot VecDot ray D Slab i if dendot 0 0 den i 1 0 dendot else den i 0 0 old screen c new screen c 50d49 Make sure the up vector is perpendicular to the view vector VecCross viewvec leftvec upvec VecNormalize upvec 71c77 view dist Flt tan view view angle frustrumwidth Flt tan view view angle 129c135 Trace 0 1 0 ray color nRays 173c179 Trace 0 1 0 ray color nRays 238c244 Trace 0 1 0 ray color nRays old shade c new shade c 112d111 surf ks weight tray tcol Trace level 1 surf surf ks weight tray tcol nReflected 120d119 surf kt weight tray tcol Trace level 1 surf surf kt weight tray tcol nRefracted old trace c new trace c 19c19 Trace level weight ray color nr 23a24 int nr 34c35 nr back to contents USENET cullings follow OFF Databases by Randi Rost Wondering where to get the famous teapot data As a service to the graphics community Digital Equipment Corporation has donated disk space and established an archive server to maintain a library of somewhat interesting objects The objects collected are in OFF format Documentation on OFF a library of useful OFF routines and one or two useful OFF utilities are also available through this archive server The archive server lets you obtain ASCII files across the network simply by sending electronic mail To obtain help about using this service send a message with a Subject line containing only the word help and a null message body to object archive server decwrl dec com To get an index of all that is available through this server use a subject line of send index instead of help To get a list of objects that are available use a subject line of send index objects and a null message body In order to save disk space and transmission time the more lengthy files available through this archive are compressed using the UNIX compress utility and then uuencoded so that they may be sent as ASCII files For those of you who don t have access to these utilities buddy up to someone who does As with other archive servers it is only possible to get small portions of the database at a time Small requests have priority over large ones If you have ftp access you can copy all of the objects and OFF programs from the file pub DEC off tar Z on the machine gatekeeper dec com Please respect the copyright notices attached to the objects in the off header files The original author usually worked pretty hard to create the model and deserves some credit when it is displayed If anyone out there knows something about any of the objects I ve left uncredited please let me know so that I can include the appropriate credits We d LOVE to add to this collection of useful programs and objects If you d like to submit an object an OFF program or an OFF converter of some type for inclusion in the archive send mail to object archive submit decwrl dec com We cannot guarantee anything about when submissions will be made available as part of the object archive since maintaining the archive is an after hours activity We can only promise that an interesting or useful object that is already in OFF format will make it into the archive more quickly than one that has to be converted from another format and then tested To report problems with the archive server send mail to object archive manager decwrl dec com This same archive server will also be used to distribute Benchmark Interface Format BIF files for the Graphics Performance Characterization GPC Picture Level Benchmark PLB These files contain commands that define how a picture or sequence of pictures is to be drawn The time it takes to process the BIF file on a particular platform can be measured It is therefore possible to create a BIF file that mimics the behavior of your favorite application area process it on several platforms to which the PLB code has been ported and get an apples to apples comparison of exactly the type of graphics performance that interests you most It is planned to release the PLB code and a sample set of BIF files at NCGA 90 When this happens these things will be available as part of the object archive server as well as by ftp access from gatekeeper People that are interested in finding out more about PLB and BIF should contact Dianne Dean at NCGA 2722 Merrilee Drive Suite 200 Fairfax VA 22031 703 698 9600 and request the most current BIF spec We are also interested in redistributing interesting BIF files that people develop or programs that convert other database types to BIF Such submissions should also be mailed to object archive submit decwrl dec com Finally we have added to the graphics bibliography that is also available through decwrl Bibliographies from the years 1976 1981 1983 and 1985 1986 are now available for use with the graf bib server This server can be accessed in the same manner as the object archive server by sending mail to graf bib server decwrl dec com The years 1982 and 1984 have been received and await further editing before they can be included We hope to make them available by the end of the month as well The bibliographies will also be available for ftp access from gatekeeper once they are all ready to go For more information on using the graf bib server see the April 1989 issue of Computer Graphics pp 185 186 Randi J Rost rost granite dec com Workstations Advanced Technology Development Digital Equipment Corporation back to contents VM pRAY is now available by Didier Badouel From badouel irisa irisa fr Didier Badouel VM pRAY Virtual Memory parallel RAYtracer is a parallel raytracer using NFF file format running on an iPSC 2 and emulating a read only shared memory VM pRAY is now available from our site irisa fr 131 254 2 3 by anonymous ftp access ftp 131 254 2 3 Name 131 254 2 3 yourname anonymous Password ftp cd iPSC2 VM pRAY ftp ls VM pRAYjan90 tar Z spirale nff Z teapot nff Z ftp mget ftp quit uncompress tar xvf VM pRAYjan90 tar If you don t have ftp access send me an e mail I will send you this software by return As I refer in the README file I maintain a mailing list to inform interested persons of future VM pRAY releases or patches For this reason I would like to get feedback from those who get this software Thanks Didier BADOUEL badouel irisa fr INRIA IRISA Phone 33 99 36 20 00 Campus Universitaire de Beaulieu Fax 99 38 38 32 35042 RENNES CEDEX FRANCE Telex UNIRISA 950 473F back to contents Superquadrics by Prem Subrahmanyam Patrick Flynn Ron Daniel and Mark VandeWettering From daniel a cs okstate edu Daniel Ronald E Newsgroups comp graphics Subject Re Superquadrics Organization Oklahoma State Univ Stillwater From article 5991 cps3xx UUCP by flynn pixel cps msu edu Patrick J Flynn In article 438 fsu scri fsu edu prem geomag gly fsu edu Prem Subrahmanyam writes One of the new shapes that DBW render supports is called a superquadric Now I ve attempted to look up info in IEEE CG A about them and found out that the first issue ever to come out had an article about these however our library does not have this issue So can anyone point out another source for info about these the full equation used for them and how to do a ray superquadric intersection complete with normal calculation for a given point Thanks in advance Parametric form for a point on a superquad Let c e x cos x e s e x sin x e x u v y u v z u v c e1 u c e2 v c e1 u s e2 v s e1 u u and v are parameters of latitude and longitude The parameters e1 and e2 control the shape of the primitive obtained when you sweep u and v over the sphere The normal can be obtained by differentiation Patrick Flynn CS Mich State U flynn cps msu edu The nice thing about superquadrics is that a wide range of shapes can be represented by varying only two parameters e1 and e2 Cubes cylinders spheres octahedrons and double ended cones are all special cases of a superquadric All of the intermediate shapes are also available The equation for the normal vector of a superquadric SQ as a function of longitude and latitude is Nx u v Ny u v Nz u v c 2 e1 u c 2 e2 v a1 c 2 e1 u s 2 e2 v a2 s 2 e1 u a3 where e1 e2 u and v are as before and a1 a2 a3 are the scale factors for the x y and z dimensions of the SQ Unfortunately both these equations require knowledge of u and v which is not available for ray tracing algorithms A more useful formulation is the implicit equation for superquadrics F x y z x a1 2 e1 y a2 2 e2 e2 e1 z a3 2 e1 Note that if e1 e2 0 this degenerates to the implicit equation for a sphere This equation is for a superquadric centered at the origin use standard transformations to translate and rotate it into world coordinates If the point x y z is on the surface of the SQ F 1 If x y z is inside the SQ surface F 1 Ray object intersections can be solved by finding zeros of the function F 1 Standard techniques such as Newton or secant methods can be used to find the zeros but they need some help Depending on the values of e1 and e2 there can be from 0 to 4 roots Finding the closest root can be difficult The 89 SIGGRAPH proceedings has an article on restricting the search space of the root finder to an area that bounds the first intersection This technique will work for any implicit surface not just superquadrics The article is Devendra Kalra and Alan Barr Guaranteed Ray Intersections with Implicit Surfaces Computer Graphics Vol 23 No 3 July 1989 pp 297 306 The expression for the normal vector as a function only of x y z not u v is more complex It can be obtained from the cross product of the tangent vectors along the lines of latitude and longitude The derivation is presented in an appendix of Franc Solina Shape Recovery and Segmentation with Deformable Part Models GRASP Lab Tech Rept 128 Dept Comp and Info Sci U Penn Philadelphia PA Dec 1987 This is Franc s PhD dissertation so it should also be available from University Microfilms The results of the normal vector derivation are nx 1 x 1 z a3 2 e1 x a2 y a1 2 e2 1 x a2 y a1 2 e2 ny 1 y 1 z a3 2 e1 1 1 x a2 y a1 2 e2 nz 1 z z a3 2 e1 If your library does not have the first issue of IEEE CG A you should have them issue an Inter Library loan request for a copy of Barr s article It has a lot of good stuff in it about other superquadric shapes such as super toroids There is also another article that same year by Franklin and Barr sorry that I don t have that reference handy it is at the office However it deals more with generating fast polyhedral tilings of SQs rather than with Ray traced rendering of them Hope this helps Ron Daniel Jr Electrical and Computer Engineering 405 744 9925 202 Engineering South daniel a cs okstate edu preferred Oklahoma State University daniel rvax ecen okstate edu Stillwater OK 74078 From markv gauss Princeton EDU Mark VandeWettering Organization Princeton University Ron Daniels gave a very good article on super quadrics very informative I thought I would just toss in the probably obvious information Super ellipsoids are a useful special subcase of the general super quadric equations Their interesting geometric property is that they are all convex The following ray intersection strategy works rather well and was implemented by me so I know it works The only real limitation is that you eye should be outside the superquadric For a sphere its implicit equation is F x y z x 2 y 2 z 2 If F x y z 1 finding the close approach of the ray with the origin call this xc yc zc 2 if F xc yc zc You can perform the analogous algorithm on superquadrics and it works the same way The implicit function for superquadrics was given by Daniels as F x y z x a1 2 e1 y a2 2 e2 e2 e1 z a3 2 e1 error should be e2 For simplicity we can pretend that a1 a2 a3 1 0 These scale in each of the 3 directions and we can handle that easier with transformation matrices which we would need to have to rotate these anyway so no loss F x y z x 2 e2 y 2 e2 e2 e1 z 2 e1 If F x y z 1 determine the ray closest approach to the origin call this point xc yc zc 2 if F xc yc zc is In practice your eye may be far away from the super ellipsoid to start you can substitute any outside point for you eye I use the point where the ray intersected the bounding box which I have anyway As long as you stick to the convex forms spheres rounded boxes cylinders octahedra this method works quite well back to contents Graphics Textbook Recommendations by Paul Heckbert Mark VandeWettering and Kent Paul Dolan From ph miro Berkeley EDU Paul Heckbert It s been a while now since Newman Sproull and Foley van Dam came out and most of the graphics textbooks since then are either good but non comprehensive e g Rogers or were written by typographic idiots for a readership of PC hacking kindergarteners So I was pleasantly surprised to run across a couple of new graphics textbooks that are at the same time 1 current 2 comprehensive and 3 competent 4 not overloaded with graphics standards pap They are A Alan Watt T Fundamentals of Three Dimensional Computer Graphics I Addison Wesley C Wokingham England D 1989 Discusses radiosity functionally based modeling stochastic sampling and Fourier theory among other topics A Peter Burger A Duncan Gillies T Interactive Computer Graphics Functional Procedural and Device Level Methods I Addison Wesley C Wokingham England D 1989 Discusses color image quantization quaternions and soft blobby objects among many other topics I haven t read these books but I was favorably impressed while browsing them in the bookstore Has anybody else run across these books Are there other undiscovered gems out there Paul Heckbert CS grad student 508 7 Evans Hall UC Berkeley INTERNET ph miro berkeley edu Berkeley CA 94720 UUCP ucbvax miro berkeley edu ph Aye I was actually going to suggest that they be added above all others to the Frequently Asked Questions Posting but you beat me to it I really like the Watt book and Burger and Gillies is also a good introductory text much better than the old Foley Van Dam or Rogers my old standby in my opinion I liked Watt s book so much when my sister s dog ate it over Christmas break I immediately replaced it Both books have good sections about raytracing and would make a good addition to your reference shelf Mark T VandeWettering After a brief gloss over the book I looked at the contents figures listings appendices read the intro this is the perfect transition for me from moving clipped 3D wireframe graphics which I ve done to rendering Watt takes the reader step by step through the basics a simple 3D model transformations deformations viewing systems the viewing pipeline reflection models Phong Cook Torrance shading Gouraud Phong rendering rasterization hidden surface composite models parametric representations curves surfaces scan conversion ray tracing recursion intersections reflections refraction illumination shadows distributed processing anti aliasing adaptive depth control fancy bounding volumes first hit speed up spatial coherence octrees BSP trees diffuse illumination and radiosity shadows texture and environment mapping functionally based modelling particle systems fractal systems 3D texture functions anti aliasing artifacts and Fourier theory supersampling or postfiltering prefiltering or area sampling stochastic sampling animation key frame parametric programmed with scripting model driven simulated and temporal anti aliasing color science application monitors NTSC models colorimetry the CIE standard realistic rendering and reflection models and appendices covering viewing transformations wireframes implementation of a renderer the Utah Teapot data set a bit of theory and highlight detection There I didn t quite type in the whole table of contents Algorithms are in Pascal Coding tricks for speed are mentioned occasionally but the main emphasis is on clarity and correspondence to the theory a deliberate choice by the author Graphics standards PHIGS PHIGS GKS 3D are mentioned here and there in passing but the model used throughout the book uses just two implementation dependent calls paint pixel xy in color rgb and inquire color rgb of pixel xy much too simple a graphics system to require a standard I am too much of a newbie here to recommend a book I ve barely opened but I m sure going to enjoy this one it covers exactly what I wanted to know and seems to have the right level of detail too xanthian well sf ca us xanthian ads com Kent Paul Dolan back to contents Where To Find U S Map Data by Dru Nelson From dnelson mthvax cs miami edu Dru Nelson Newsgroups comp graphics I have searched far and wide and have come up with a couple sources for U S Map data HANAUMA STANFORD EDU 36 51 0 16 has the world map as does the UCSD EDU Anonymous FTP site This database is the CIA World Bank II and it contains the data and some source files explaining the format The World Bank II is Public Domain Oh yes I believe it also has the coordinates to some major cities The data has the land boundaries rivers political boundaries and one other thing I can t remember The U S Map and state lines can also be purchased from Austin Code Works for a small fee This is also public domain data At UCSD edu there is also a mercator projection One last interesting database is on uunet uu net There is a large Census file I didn t get it but it might help somebody out I read an article in Byte showing that the census has maps of all the roads on CD and this might be one of their files It might be handy to play with if you don t have the most recent CD of the data yet back to contents References for Rendering Height Fields Mark VandeWettering Newsgroups comp graphics Could anyone recommend some good papers or books discussing the rendering of height fields A friend of mine is implementing a height field raytracer and any references would be extremely useful I liked the following paper when I first read it it proved useful in a couple of ways A Sabine Coquillart A Michael Gangnet T Shaded Display of Digital Maps J IEEE Computer Graphics and Applications P 35 42 D July 1984 K maps terrain ray tracing priority list X Several methods for displaying height fields are presented Bilinear interpolation of patches is used to define the surface Efficient algorithms and quite elegant Reminiscent of Kajiya s cut planes for surfaces of revolution Also Musgrave had this Yale tech report I ordered it from Yale Dept of Computer Science but don t have who to contact over there anymore Perhaps someone else has the information Musgrave s approach was basically to make an adaptation of 3DDA uniform subdivision algorithms for height fields I believe this code is also implemented in Craig Kolb s rayshade program A F Kenton Musgrave T Grid Tracing Fast Ray Tracing For Height Fields J Research Report YALEU DCS RR 639 D July 1988 back to contents RayShade 3 0 Released on comp sources unix by Craig Kolb Submitted by Craig Kolb craig weedeater math yale edu Posting number Volume 21 Issue 8 Archive name rayshade part01 This is version 3 0 of rayshade a raytracing program Rayshade reads a multi line ASCII file describing a scene to be rendered and produces a Utah Raster RLE format file of the raytraced image Rayshade features Eight types of primitives box cone cylinder height field polygon sphere superquadric flat and Phong shaded triangle Composite objects Point directional and extended area light sources Solid procedural texturing and bump mapping of primitives objects and individual instances of objects Antialiasing through adaptive supersampling or jittered sampling Arbitrary linear transformations on primitives instances of objects and texture bump maps Use of uniform spatial subdivision or hierarchy of bounding volumes to speed rendering Options to facilitate rendering of stereo pairs Support for the C Linda parallel programming language Rayshade has been tested on many different UNIX based computers If your machine has a C compiler and enough memory at least 2Mb rayshade should be fairly easy to port Be warned that rayshade uses yacc and lex to process input files If you do not have lex and yacc try to get flex and bison from the Free Software Foundation folks ftp to prep ai mit edu back to contents Bibliography of Texture Mapping Image Warping by Paul Heckbert From ph miro Berkeley EDU Paul Heckbert Organization University of California at Berkeley Here is a fairly complete bibliography on texture mapping and image warping About a year ago I posted a request for such references to comp graphics in order to help me with my Master s thesis and I got a number of helpful responses Incidentally I finished my Master s thesis in May and if you re interested in the properties of simple geometric mappings such as affine bilinear and projective perspective or the signal processing theory of resampling involved in texture filtering and image warping you might want to check it out Paul S Heckbert Fundamentals of Texture Mapping and Image Warping Master s thesis UCB CSD 89 516 CS Dept UC Berkeley May 1989 order from CS Dept UC Berkeley Berkeley CA 94720 I highly recommend it EAH The bibliography that follows includes articles on computer graphics terms texture synthesis geometric mapping texture filtering image processing terms image warping geometric correction distortion image transformation resampling image interpolation and decimation image pyramid I ve excluded references on rendering and signal processing in general and most textbooks since they re generally derivative The list is in UNIX refer 1 format K is keywords Z is my comments Please email me any additions corrections Since this list is so long I ll make recommendations The best papers to read first are Blinn Newell76 Feibush Levoy Cook80 Catmull Smith80 and good surveys are Heckbert86 IMHO Wolberg88 Paul Heckbert Computer Science Dept Evans Hall UC Berkeley INTERNET ph miro berkeley edu Berkeley CA 94720 UUCP ucbvax miro berkeley edu ph E A Rosenfeld T Multiresolution Image Processing and Analysis O Leesberg VA July 1982 I Springer C Berlin D 1984 K image pyramid A Narendra Ahuja A Bruce J Schachter T Pattern Models I John Wiley C New York D 1983 K tessellation Voronoi diagram triangulation point process stochastic process texture synthesis height field A Masayoshi Aoki A Martin D Levine T Computer Generation of Realistic Pictures J Computers and Graphics V 3 P 149 161 D 1978 K texture mapping Z planar parametric mapping no filtering A Alan H Barr T Decal Projections B SIGGRAPH 84 Mathematics of Computer Graphics seminar notes D July 1984 K texture mapping ray tracing A Eric A Bier A Kenneth R Sloan Jr T Two Part Texture Mappings J IEEE Computer Graphics and Applications V 6 N 9 D Sept 1986 P 40 53 K texture mapping Z projection parameterizations A James F Blinn A Martin E Newell T Texture and Reflection in Computer Generated Images J CACM V 19 N 10 D Oct 1976 P 542 547 Z early paper on texture mapping discusses spherical sky textures K texture mapping reflection ray tracing A James F Blinn T Computer Display of Curved Surfaces R PhD thesis I CS Dept U of Utah D 1978 O TR 1060 126 Jet Propulsion Lab Pasadena K texture mapping bump mapping shading patch A James F Blinn T Simulation of Wrinkled Surfaces J Computer Graphics SIGGRAPH 78 Proceedings V 12 N 3 D Aug 1978 P 286 292 K bump mapping A Carlo Braccini A Giuseppe Marino T Fast Geometrical Manipulations of Digital Images J Computer Graphics and Image Processing V 13 P 127 141 D 1980 K image warp A Peter J Burt T Fast Filter Transforms for Image Processing J Computer Graphics and Image Processing V 16 P 20 51 D 1981 Z gaussian filter image pyramid A Brian Cabral A Nelson Max A Rebecca Springmeyer T Bidirectional Reflection Functions from Surface Bump Maps J Computer Graphics SIGGRAPH 87 Proceedings V 21 N 4 D July 1987 P 273 281 A Richard J Carey A Donald P Greenberg T Textures for Realistic Image Synthesis J Computers and Graphics V 9 N 2 D 1985 P 125 138 K texture mapping texture synthesis A K R Castleman T Digital Image Processing I Prentice Hall C Englewood Cliffs NJ D 1979 K geometric correction A Edwin E Catmull T A Subdivision Algorithm for Computer Display of Curved Surfaces R PhD thesis I Dept of CS U of Utah D Dec 1974 Z bicubic patches 1st texture mapping A Edwin E Catmull A Alvy Ray Smith T 3 D Transformations of Images in Scanline Order J Computer Graphics SIGGRAPH 80 Proceedings V 14 N 3 D July 1980 P 279 285 K texture mapping Z two pass image warp A Alan L Clark T Roughing It Realistic Surface Types and Textures in Solid Modeling J Computers in Mechanical Engineering V 3 N 5 D Mar 1985 P 12 16 K shading Z implementation of Cook Torrance81 A James J Clark A Matthew R Palmer A Peter D Lawrence T A Transformation Method for the Reconstruction of Functions from Nonuniformly Spaced Samples J IEEE Trans on Acoustics Speech and Signal Processing V ASSP 33 N 4 D Oct 1985 P 1151 1165 K signal processing antialiasing Z reconstruct from nonuniform samples by warping the samples to be uniform A Robert L Cook T Shade Trees J Computer Graphics SIGGRAPH 84 Proceedings V 18 N 3 D July 1984 P 223 231 K shading texture mapping A Robert L Cook A Loren Carpenter A Edwin Catmull T The Reyes Image Rendering Architecture J Computer Graphics SIGGRAPH 87 Proceedings V 21 N 4 D July 1987 K rendering A S Coquillart T Displaying Random Fields J Computer Graphics Forum V 4 N 1 D Jan 1985 P 11 19 K texture A Ronald E Crochiere A Lawrence R Rabiner T Multirate Digital Signal Processing I Prentice Hall C Englewood Cliffs NJ D 1983 K resampling Z rational scale affine 1 D resampling A Franklin C Crow T Summed Area Tables for Texture Mapping J Computer Graphics SIGGRAPH 84 Proceedings V 18 N 3 D July 1984 P 207 212 K antialiasing A William Dungan Jr A Anthony Stenger A George Sutty T Texture Tile Considerations for Raster Graphics J Computer Graphics SIGGRAPH 78 Proceedings V 12 N 3 D Aug 1978 P 130 134 K image pyramid A Karl M Fant T A Nonaliasing Real Time Spatial Transform Technique J IEEE Computer Graphics and Applications D Jan 1986 P 71 80 Z two pass image warp trivial A Eliot A Feibush A Marc Levoy A Robert L Cook T Synthetic Texturing Using Digital Filters J Computer Graphics SIGGRAPH 80 Proceedings V 14 N 3 D July 1980 P 294 301 K texture mapping Z antialiasing polygon edges and textures A Eliot A Feibush A Donald P Greenberg T Texture Rendering Systems for Architectural Design J Computer Aided Design V 12 N 2 D Mar 1980 P 67 71 K texture mapping A Leonard A Ferrari A Jack Sklansky T A Fast Recursive Algorithm for Binary Valued Two Dimensional Filters J Computer Vision Graphics and Image Processing V 26 N 3 D June 1984 P 292 302 Z summed area table generalized to rectilinear polygons A Leonard A Ferrari A Jack Sklansky T A Note on Duhamel Integrals and Running Average Filters J Computer Vision Graphics and Image Processing V 29 D Mar 1985 P 358 360 Z proof of algorithm in their 1984 paper A Leonard A Ferrari A P V Sankar A Jack Sklansky A Sidney Leeman T Efficient Two Dimensional Filters Using B Spline Functions J Computer Vision Graphics and Image Processing V 35 D 1986 P 152 169 Z b spline filtering by repeated integration A Eugene Fiume A Alain Fournier A V Canale T Conformal Texture Mapping B Eurographics 87 D 1987 P 53 64 K geometric mapping parameterization A Alain Fournier A Eugene Fiume T Constant Time Filtering with Space Variant Kernels J Computer Graphics SIGGRAPH 88 Proceedings V 22 N 4 D Aug 1988 P 229 238 Z variant of pyramid techniques precompute convolutions with patch fragments note memory required is O 1 with minor mods not O m 2 as they say A Donald Fraser A Robert A Schowengerdt A Ian Briggs T Rectification of Multichannel Images in Mass Storage Using Image Transposition J Computer Vision Graphics and Image Processing V 29 N 1 D Jan 1985 P 23 36 Z texture mapping two pass image warp just like Catmull Smith 80 see corrigendum vol 31 p 395 A D E Friedmann T Operational Resampling for Correcting Images to a Geocoded Format B Proc 15th Intl Symp Remote Sensing of Environment C Ann Arbor D 1981 P 195 212 Z two pass image warp A A Gagalowicz T Texture Modelling Applications J The Visual Computer V 3 N 4 D 1987 P 186 200 A Andre Gagalowicz A Song de Ma T Model Driven Synthesis of Natural Textures for 3 D Scenes B Eurographics 85 D 1985 P 91 108 K texture synthesis A Michel Gangnet A Didier Perny A Philippe Coueignoux T Perspective Mapping of Planar Textures B Eurographics 82 D 1982 P 57 71 K texture mapping antialiasing O reprinted in Computers and Graphics Vol 8 No 2 1984 pp 115 123 A Michel Gangnet A Djamchid Ghazanfarpour T Techniques for Perspective Mapping of Planar Textures I Colloque Image de Biarritz CESTA D May 1984 P 29 35 K texture mapping antialiasing Z in french A Geoffrey Y Gardner T Simulation of Natural Scenes Using Textured Quadric Surfaces J Computer Graphics SIGGRAPH 84 Proceedings V 18 N 3 D July 1984 P 11 20 K tree cloud Z 3 D fourier series texture function A Geoffrey Y Gardner T Visual Simulation of Clouds J Computer Graphics SIGGRAPH 85 Proceedings V 19 N 3 D July 1985 P 297 303 K quadric texture A Andrew S Glassner T Adaptive Precision in Texture Mapping J Computer Graphics SIGGRAPH 86 Proceedings V 20 N 4 D Aug 1986 P 297 306 Z adaptive texture filter according to local variance uses summed area table A W B Green T Digital Image Processing A Systems Approach I Van Nostrand Reinhold C New York D 1983 K geometric correction A Ned Greene A Paul S Heckbert T Creating Raster Omnimax Images from Multiple Perspective Views Using The Elliptical Weighted Average Filter J IEEE Computer Graphics and Applications V 6 N 6 D June 1986 P 21 27 K texture mapping image warp antialiasing A Ned Greene T Environment Mapping and Other Applications of World Projections J IEEE Computer Graphics and Applications V 6 N 11 D Nov 1986 K reflection mapping Z revised from Graphics Interface 86 version A Shinichiro Haruyama A Brian A Barsky T Using Stochastic Modeling for Texture Generation J IEEE Computer Graphics and Applications D Mar 1984 P 7 19 O errata Feb 1985 p 87 K texture mapping bump mapping texture synthesis fractal A Paul S Heckbert T Texture Mapping Polygons in Perspective I NYIT Computer Graphics Lab R TM 13 D Apr 1983 K antialiasing A Paul S Heckbert T Filtering by Repeated Integration J Computer Graphics SIGGRAPH 86 Proceedings V 20 N 4 D Aug 1986 P 317 321 K filter integration convolution Z generalizes Perlin s selective image filter and Crow s summed area table A Paul S Heckbert T Survey of Texture Mapping J IEEE Computer Graphics and Applications V 6 N 11 D Nov 1986 P 56 67 Z revised from Graphics Interface 86 version A Paul S Heckbert T Fundamentals of Texture Mapping and Image Warping R Master s thesis UCB CSD 89 516 I CS Dept UC Berkeley D May 1989 A Berthold K P Horn T Hill Shading and the Reflectance Map J Proc IEEE V 69 N 1 D Jan 1981 P 14 47 K shading terrain illumination map Z exhaustive survey of ad hoc and theoretical terrain shading methods A J C Hourcade A A Nicolas T Inverse Perspective Mapping in Scanline Order onto Non Planar Quadrilaterals B Eurographics 83 D 1983 P 309 319 K texture mapping antialiasing A James T Kajiya T Anisotropic Reflection Models J Computer Graphics SIGGRAPH 85 Proceedings V 19 N 3 D July 1985 P 15 21 K texture mapping levels of detail Z frame mapping A James T Kajiya A Timothy L Kay T Rendering Fur with Three Dimensional Textures J Computer Graphics SIGGRAPH 89 Proceedings V 23 N 3 D July 1989 P 271 280 Z solid texture A A Kaufman A S Azaria T Texture Synthesis Techniques for Computer Graphics J Computers and Graphics V 9 N 2 D 1985 P 139 145 A Douglas S Kay A Donald P Greenberg T Transparency for Computer Synthesized Images J Computer Graphics SIGGRAPH 79 Proceedings V 13 N 2 D Aug 1979 P 158 164 Z 2 5 D ray tracing refraction by warping background image contains better refraction formula than Whitted K ray tracing A Wolfgang Krueger T Intensity Fluctuations and Natural Texturing J Computer Graphics SIGGRAPH 88 Proceedings V 22 N 4 D Aug 1988 P 213 220 A J P Lewis T Algorithms for Solid Noise Synthesis J Computer Graphics SIGGRAPH 89 Proceedings V 23 N 3 D July 1989 P 263 270 Z solid texture A Song de Ma A Andre Gagalowicz T Determination of Local Coordinate Systems for Texture Synthesis on 3 D Surfaces B Eurographics 85 D 1985 P 109 118 K texture synthesis A Nadia Magnenat Thalmann A N Chourot A Daniel Thalmann T Colour Gradation Shading and Texture Using a Limited Terminal J Computer Graphics Forum C Netherlands V 3 N 1 D Mar 1984 P 83 90 K dither A R R Martin T Recent Advances in Graphical Techniques B 1985 European Conference on Solid Modeling O London 9 10 Sept 1985 I Oyez Sci and Tech Services C London D 1985 K texture mapping ray tracing A Nelson L Max T Shadows for Bump Mapped Surfaces B Advanced Computer Graphics Proc of CG Tokyo 86 E Tosiyasu Kunii I Springer Verlag C Tokyo D 1986 P 145 156 A Gene S Miller A C Robert Hoffman T Illumination and Reflection Maps Simulated Objects in Simulated and Real Environments B SIGGRAPH 84 Advanced Computer Graphics Animation seminar notes D July 1984 Z reflection maps how to make and use them K ray tracing illumination map A Alan Norton A Alyn P Rockwood A Philip T Skolmoski T Clamping A Method of Antialiasing Textured Surfaces by Bandwidth Limiting in Object Space J Computer Graphics SIGGRAPH 82 Proceedings V 16 N 3 D July 1982 P 1 8 K texture mapping A D A O Handley A W B Green T Recent Developments in Digital Image Processing at the Image Processing Laboratory of the Jet Propulsion Laboratory J Proc IEEE V 60 N 7 P 821 828 D 1972 K geometric correction A Alan W Paeth T A Fast Algorithm for General Raster Rotation B Graphics Interface 86 D May 1986 K image warp texture mapping two pass three pass P 77 81 A Darwyn R Peachey T Solid Texturing of Complex Surfaces J Computer Graphics SIGGRAPH 85 Proceedings V 19 N 3 D July 1985 P 279 286 K 3 D texture A Ken Perlin T A Unified Texture Reflectance Model B SIGGRAPH 84 Advanced Image Synthesis seminar notes D July 1984 K texture mapping bump mapping Z making microfacet distribution functions consistent with normal perturbations hash function A Ken Perlin T Course Notes B SIGGRAPH 85 State of the Art in Image Synthesis seminar notes D July 1985 K antialiasing filter blur Z generalizing Crow s summed area tables to higher order filter kernels A Ken Perlin T An Image Synthesizer J Computer Graphics SIGGRAPH 85 Proceedings V 19 N 3 D July 1985 P 287 296 Z texture functions pixel stream editor A Ken Perlin A Eric M Hoffert T Hypertexture J Computer Graphics SIGGRAPH 89 Proceedings V 23 N 3 D July 1989 P 253 262 Z using solid texture as an implicit function to define density surfaces A H J Reitsema A A J Word A E Ramberg T High fidelity image resampling for remote sensing J Proc of SPIE V 432 D 1984 P 211 215 A Marcel Samek A Cheryl Slean A Hank Weghorst T Texture Mapping and Distortion in Digital Graphics J Visual Computer V 2 N 5 D 1986 P 313 320 A Michael Shantz T Two Pass Warp Algorithm for Hardware Implementation J Proc SPIE Processing and Display of Three Dimensional Data V 367 D 1982 P 160 164 K two pass image warp A S Shlien T Geometric Correction Registration and Resampling of Landsat Imagery J Canad J Remote Sensing V 5 D 1979 P 74 89 A Alvy Ray Smith T Planar 2 Pass Texture Mapping and Warping J Computer Graphics SIGGRAPH 87 Proceedings V 21 N 4 D July 1987 P 263 272 A Alvy Ray Smith T TEXAS Preliminary Report I NYIT Computer Graphics Lab R TM 10 D July 1979 K texture mapping A Alvy Ray Smith T Incremental Rendering of Textures in Perspective B SIGGRAPH 80 Animation Graphics seminar notes D July 1980 K texture mapping A A Tanaka A M Kameyama A S Kazama A O Watanabe T A Rotation Method for Raster Image Using Skew Transformation B Proc IEEE Conf on Computer Vision and Pattern Recognition D June 1986 P 272 277 K texture mapping image warp A S L Tanimoto A Theo Pavlidis T A Hierarchical Data Structure for Picture Processing J Computer Graphics and Image Processing V 4 N 2 D June 1975 P 104 119 K image pyramid A D Thalmann T A Lifegame Approach to Surface Modelling and Texturing J The Visual Computer V 2 N 6 D 1986 P 384 390 A Nuio Tsuchida A Yoji Yamada A Minoru Ueda T Hardware for Image Rotation by Twice Skew Transformations J IEEE Trans on Acoustics Speech and Signal Processing V ASSP 35 N 4 D Apr 1987 P 527 532 K image warp A Ken Turkowski T The Differential Geometry of Texture Mapping R Technical Report No 10 I Apple Computer C Cupertino CA D May 1988 K mapping filter A Douglass Allen Turner T A Taxonomy of Texturing Techniques R Master s thesis I Dept of Computer Science U of North Carolina Chapel Hill D 1988 A Carl F R Weiman T Continuous Anti Aliased Rotation and Zoom of Raster Images J Computer Graphics SIGGRAPH 80 Proceedings V 14 N 3 D July 1980 P 286 293 K image warp line drawing digital line texture mapping A Lance Williams T Pyramidal Parametrics J Computer Graphics SIGGRAPH 83 Proceedings V 17 N 3 D July 1983 P 1 11 K texture mapping antialiasing A George Wolberg T Geometric Transformation Techniques for Digital Images A Survey R TR CUCS 390 88 I Dept of CS Columbia U D Dec 1988 A George Wolberg T Skeleton Based Image Warping J Visual Computer V 5 D 1989 P 95 108 A George Wolberg A Terrance E Boult T Separable Image Warping with Spatial Lookup Tables J Computer Graphics SIGGRAPH 89 Proceedings V 23 N 3 D July 1989 P 369 377 A Geoff Wyvill A Brian Wyvill A Craig McPheeters T Solid Texturing of Soft Objects B CG International 87 C Tokyo D May 1987 A John F S Yau A Neil D Duffy T A Texture Mapping Approach to 3 D Facial Image Synthesis J Computer Graphics Forum V 7 N 2 D June 1988 P 129 134 Z face back to contents More Texturing Functions by Jon Buller From jonb vector Dallas TX US Jon Buller Organization Dallas Semiconductor Last April when there were many raging requests for the RenderMan Noise function I posted the one that I got from Gary Herron one of my Profs at the time After I had fixed the hashing it used so that there would not be rows upon rows of blobs of the same shape I posted it to comp graphics I didn t have it documented in the best form since I posted it quickly to hopefully stem the tide of requests There was a bug in it that I knew about but forgot to tell everyone about and it needed several followups to explain how it worked and how to initialize it etc Well I would like to get some various texture routines from the net at large just to see what others are doing and for a bit of fun Of course I don t just want take things without some sort of return so to get your collections of new unusual tm textures started I have included one of my favorites The Planet Texture It does not need watering food or specular reflection just take a dot product of the surface normal and the light source direction to add shadows and have fun It is written in Pascal No I do not yet have a C compiler for my Mac but that WILL change in a couple of months So you must translate it to your language of choice but I believe it is a bit better documented than the first Anyway I would like to see your favorite textures call or write today and if there is a tremendous response I may or may not compile them into a list summarize and post Two textures I would REALLY like to see are 1 a good Marble texture like the one in Perlin85 guess what this paper is and 2 something like the Wood Burl texture I saw applied to your favorite teapot and mine in a book by or maybe edited by Andrew Glassner I don t remember the title Computer Graphics for Artists maybe If you don t have a Noise function of your own mine was translated and should be around or you can link it to whatever function you like if it returns a Real er float 8 Get Noise From UUNET Is it still there I can t find out anymore or a friend Change it to initialize the random array pts to fill with 1 0 to 1 0 instead of 0 0 to 1 0 like it says My Thanks to Bill Dirks for doing that translation BTW You may also notice that I am no longer a student at Colorado State University I included my Turb function with this because last time I checked UUNET April 89 the noise file there said that Bill had not translated the Turb function yet and in the interest of completeness and reducing mail volume 8 it is here but you must translate it yourself Perlin85 An Image Synthesizer Ken Perlin Proceedings of SIGGRAPH 85 If you haven t guessed after reading the code of course 8 Add x1 y1 z1 x2 y2 z2 x1 x2 y1 y2 z1 z2 Subtract x1 y1 z1 x2 y2 z2 x1 x2 y1 y2 z1 z2 Scale s x y z s x s y s z Color and Vector coerce the given type of a 3 vector into the other kind of 3 vector cut here Planet Turb p cur here function Turb Size Integer ScaleFactor Real Loc Vector Real Size Size of largest feature Smallest feature size 1 ScaleFactor is related to the fractal dimension of the turbulence Loc point of turbulence to compute var CurScale Result Real Cur Integer begin Result Noise Loc CurScale 1 0 Cur 1 while Cur 0 25 The sphere I use is 430 pixels across Then C Land Else C Sea Amt Turb 18 0 6 Scale 24 0 Loc Clouds I like are 18 pixels across If Amt 0 25 Then C Color Add Vector C Scale Amt 0 25 Subtract Vector Cloud Vector C I Wish I could do it like this C C Amt 0 25 Cloud C End Jon Buller jonb vector dallas tx us texbell vector jonb back to contents Ray Cylinder Intersection by Mark VandeWettering From markv gauss Princeton EDU Mark VandeWettering Newsgroups comp graphics Organization Princeton University I am trying to do ray tracing of light through a cylinder coming at different angle to the axis of the cylinder Could some one give me some pointers Ray cylinder intersection is conceptually just as easy as hitting a sphere Most of the problems come from clipping the cylinder so it isn t infinite I can think of several ways to do this but first let me mention that you should consult Introduction to Ray Tracing edited by Andrew Glassner Articles by Pat Hanrahan and Eric Haines go over most of this stuff It s easiest to imagine a unit cylinder formed by rotating the line x 1 in the xy plane about the y axis The formula for this cylinder is x 2 z 2 1 If your ray is of the form P t D with P and D three tuples you can insert the components into the original formula and come up with px t dx 2 pz t dz 2 1 0 or px 2 2 t dx px t dx 2 pz 2 2 t dz pz t dz 2 or px 2 pz 2 2 t dx px dz pz t 2 dx 2 dz 2 which you can then solve using the quadratic formula If there are no roots then there is no intersection If there are roots then these give two t values along the ray Figure out those points using P t D Now clipping We wanted to have a finite cylinder say within the cube two units on a side centered at the origin Well gosh ignore any intersections that occur outside this box Then take the closest one Now to intersect with an arbitrary cylinder work up a world transformation matrix that transforms points into the objects coordinate system Transform the ray origin and direction and voila You do need to be careful to rescale it appropriately but its really not all that hard You might instead want to implement general quadrics as a primitive or choose any one of a number of different ways of doing the above Homogeneous coordinates might make this simpler actually Hmmm And there is a geometric argument that can also be used to derive algorithms like this Think about it It shouldn t be that difficult back to contents C Code for Intersecting Quadrics by Prem Subrahmanyam From prem geomag fsu edu Prem Subrahmanyam Newsgroups comp graphics Organization Florida State University Computing Center Here is the code I wrote in C for doing 3 dimensional quadratics The derivations are rather complex so I tried to comment the code as best I could but that s all I could do I hope people find this interesting define TINY float 1e 3 int hitconic offset eye v p t a b c d e f g start stop offset is the triple representing where the conic is to be moved from 0 0 0 eye and v represent the ray with eye being the start point and v being the direction vector p is the point into which the intersection point value will be copied t is the value into which the line parameter will be copied for the ray a b c d e f g are values for the 3 dimensional quadratic equation a x 2 b y 2 c z 2 d x e y f z g start and stop represent the bounds when the equation is centered at 0 0 0 in which to test the conic example if the bound around a conic were set at 1 1 1 to 1 1 1 and the offset was 4 5 6 then the actual spatial extent of the object would be from 3 4 5 to 5 6 7 So the conic 3 d quadratic should contain within its own data structure the offset extent values start stop and a b c d e f g constants vector offset eye v p float t a b c d e f g vector start stop this code is a little messy but it does work create some local points to use in testing vector m p2 float radical Ay Be Ce t1 t2 constants for quadratic formula generated for solving for the intersection of the equations for the line and the equation for the quadratic subtract offset from the ray start position to align ray and quadratic m 0 eye 0 offset 0 m 1 eye 1 offset 1 m 2 eye 2 offset 2 Now using the constant values create values for the intersection test formula Ay a v 0 v 0 b v 1 v 1 c v 2 v 2 Be 2 a m 0 v 0 2 b m 1 v 1 2 c m 2 v 2 d v 0 e v 1 f v 2 Ce a m 0 m 0 b m 1 m 1 c m 2 m 2 d m 0 e m 1 f m 2 g radical Be Be 4 Ay Ce if radical p 0 start 1 p 1 start 2 p 2 if it lies within the bounds add offset back on and return point p 0 p 0 offset 0 p 1 p 1 offset 1 p 2 p 2 offset 2 t t2 return TRUE else point does not lie within the bounds return FALSE else t2 a bad parameter as well return FALSE if t2 p 0 start 1 p 1 start 2 p 2 same as above see if point lies within bounds p 0 p 0 offset 0 p 1 p 1 offset 1 p 2 p 2 offset 2 t t1 return TRUE else return FALSE else return FALSE if the program has gotten here t1 and t2 are greater than 0 and greater than TINY p 0 m 0 v 0 t1 p 1 m 1 v 1 t1 p 2 m 2 v 2 t1 p2 0 m 0 v 0 t2 p2 1 m 1 v 1 t2 p2 2 m 2 v 2 t2 see if the first point is within bounds if start 0 p 0 start 1 p 1 start 2 p 2 now see if second point is as well if start 0 p2 0 start 1 p2 1 start 2 p2 2 both points are within bbox if t1 p2 0 start 1 p2 1 start 2 p2 2 see if t2 is within bbox t t2 p 0 p2 0 offset 0 p 1 p2 1 offset 1 p 2 p2 2 offset 2 return TRUE else neither is within bounding box return FALSE HERE IS THE PORTION OF THE CODE THAT RETURNS THE NORMAL TO THE QUADRATIC void findnormal np p n node np vector p n np is the pointer to the object node p is the point of intersection and n is the normal vector returned vector point switch np kind conic section a la Prem case CONIC point 0 p 0 cptr np offset 0 point 1 p 1 cptr np offset 1 point 2 p 2 cptr np offset 2 n 0 2 0 cptr np a point 0 cptr np d n 1 2 0 cptr np b point 1 cptr np e n 2 2 0 cptr np c point 2 cptr np f normalize n break back to contents Parallel Ray Tracing on IRISs collected by Doug Turner From Douglass Turner Here is the collection of responses that I got from various people kind enough to respond to my query about doing parallel ray tracing on the IRIS This is from George Drettakis I m just finishing my MSc here and I designed and implemented a hierarchical scheme that uses several IRIS connected over an ethernet The rendering algorithm is a global illumination approach developed locally that goes one step further than radiosity and ray tracing combined The approach is based on space subdivision that splits the original 3 d scene into cubes adaptively depending on the difficulty in each volume I assign a group of sub volumes to each iris and then do the processing for the volume on each IRIS in parallel This actually includes a bit of ray casting that we do for various purposes in our algorithm I use the taskcreate taskdestroy calls to implement this and I use the usnewsema and usnewlock call for locking and synchronization The man pages are pretty straightforward but if you have trouble I can put together a sample program and send it to you I found using the m get myid function from the sequent compatibility library was also useful as it gives you a unique 1 to n 1 proc id for n procs For ray tracing all you need to do is to split the screen and give each pixel to a processor and you re done The key is to avoid using any global variables and speaking from painful experience other peoples code is full of it no pun intended as they didn t have parallelism in mind George Drettakis 416 978 5473 Dynamic Graphics Project Internet dret dgp toronto edu Computer Systems Research Institute Bitnet dret dgp utoronto Toronto Ontario M5S 1A4 CANADA This is from Steve Lamont I use brute force forking off multiple processes This is probably not optimum but is guaranteed to work on a number of platforms including a Cray Y MP running UNICOS no shared memory between processes a Stardent Titan a Convex C 220 and a SGI 4D 280GTX If you re interested I ll be glad to send you the code it is based on the MTV ray tracer with extensions Steve Lamont sciViGuy 919 248 1120 EMail spl ncsc org NCSC Box 12732 Research Triangle Park NC 27709 This contribution is from Gavin Bell EAH at SGI not Gavin Miller In it he mentions a demo tape that IRIS users can purchase 100 00 that contains source code for numerous demos including the flyray demo he discusses I haven t gotten my copy yet but intend to soon The demos and source code for other interesting looking stuff is listed in a pamphlet you can get from IRIS its free called IRIS software exchange I recommend it Have you seen the flyray interactive ray tracer demo running on a GTX It used to be a two processor ray tracer one processor computing ray scene intersections the other feeding the graphics pipe until I fully parallelized it It will now use one processor to do send scene data showing the ray trace going on to the geometry subsystem and the other N 1 to compute the ray scene intersections if running over the Ethernet using the Distributed Graphics Library all processors compute the ray scene intersections with an extra process called on every once in a while to send the results down wire Excellent demo by the way see it EAH I used the sproc system call to fork off processes and set up a queue which the main program responsible for displaying the bitmap produced and showing the rays being traced reads from and all the child processes write into This queue is protected using the hardware lock feature of GTX systems see the usinit usnewlock ussetlock and usunsetlock manual pages Rays are traced in blocks of up to 256 at a time 16x16 chunks which cuts down on the overhead associated with accessing the queue The program runs amazingly fast on a 8 processor system but could benefit from tracing even larger chunks Source code to the flyray program is available from Silicon Graphics Monica Schulze is the person to contact she handles distribution of demo source code Try calling her at 415 962 3320 For your application you probably don t need to do any inter process synchronization each process will be busy computing its quarter of the image and storing it in memory You might want to look at the m fork manual page your application will look something like initialize stuff create the voxel space etc m fork child process m kill procs save image or whatever you want to do with it exit and each child process does int mynum m get myid int np m get numprocs based on mynum and numprocs do part of the screen here return The m fork commands are nice because you get automatic synchronization the m fork command returns after all child processes are finished and it figures out how many processors the system has for you Re Distributed Graphics library Yes it is very easy to use instead of linking with lgl s you link with ldgl and possibly some other libraries depending on your networking situation usually you need to add lsun lbsd also After doing a little setup you have to tell inetd to listen for DGL requests on a particular port number and start up the DGL daemon you put your program on the machine that will execute it and rlogin in to that machine from the SGI machine on which you want the graphics to appear Then run the program All the graphics get sent over the network and appear on the machine you are sitting at However ethernet speeds are fairly slow so if you so a lot of drawing you can easily overwhelm the ethernet bandwidth and slow down The best way around this is to use the GL display list commands the object will be stored on the display machine and only one call needs to be sent over the network to get it displayed Of course as networks get faster this will become unnecessary Feel free to redistribute any of this information gavin gavin krypton sgi com This is source code from Michael John Muuss I haven t looked at it closely His email path is mike brl mil M A C H I N E C Machine specific routines for doing raytracing Includes parallel and vector support replacement library routines etc Author Michael John Muuss for brevity this issue is already a monster I ve deleted this code look on the net or contact Doug Turner or Michael Muuss if you are seriously interested Heres a plug from Frank Phillips for SGI s course on writing parallel applications just for reference SGI offers a very good class in Mt View on writing parallel applications using several different methods Definitely recommended fap sgi com frank phillips SGI inSane Diego I hope people find this info useful I know I will Thanks to all who responded so quickly A big unthank you to myself for waiting so long to post Cheers Doug Turner turner apple com 408 974 0484 back to contents Eric Haines erich acm org Ray Tracing News Volume 3 Number 2 Ray Tracing News Volume 3 Number 2 Ray Tracing News Volume 3 Number 2 Ray Tracing News Volume 3 Number 2 Ray Tracing News Volume 3 Number 2 Ray Tracing News Volume 3 Number 2 Ray Tracing News Volume 3 Number 2 Ray Tracing News Volume 3 Number 2 Ray Tracing News Volume 3 Number 2 Ray Tracing News Volume 3 Number 2 http www acm org tog resources RTNews html rtnv3n2 html http www acm org tog resources RTNews html rtnv3n2 html http www acm org tog resources RTNews html rtnv3n2 html http www acm org tog resources RTNews html rtnv3n2 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv3n3.html%%==%%Ray Tracing News, Volume 3, Number 3%%==%%Ray Tracing News "Light Makes Right" July 13, 1990 Volume 3, Number 3 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%86866%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right July 13 1990 Volume 3 Number 3 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1990 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Ray Tracing Roundtable Announcement New People Address Changes etc Jarke van Wijk Thesis Availability by Erik Jansen New Name For Distributed Ray Tracing by Paul Heckbert et al NFF Files from Thierry Leconte RADIANCE Software Available by Greg Ward Rayshade Updates SPD Bug by Craig Kolb New Version of Vort Ray Tracer by David Hook Graphics Interface 90 by Eric Haines Real3d Review by Haakan ZAP Andersson Bits From a Letter by David Jevans On Antialiasing Light and Such by Haakan ZAP Andersson Net News Cullings Summary Uniform Random Distribution of Points on Sphere s Surface Marshall Cline Ray Tracing Radiosity by Frank Vance Mark VandeWettering Ray Tracing the Torus by Prem Subrahmanyam Bob Webber Need Help on Superquadrics by Wayne McCormick Robert Skinner Ray Tracing Penumbral Shadows Prem Subrahmanyam Ray with Bicubic Patch Intersection Problem Wayne Knapp John Peterson Lawrence Kesteloot Mark VandeWettering Thomas Williams Rendering Intersecting Glass Spheres by John Cristy Craig Kolb DKBPC Raytracer by Tom Friedel New release of IRIT solid modeller by Gershon Elber Easier Use of Ray Tracers by Philip Colmer Mark VandeWettering Jack Ritter Raytracer Glass by F Ken Musgrave Michael A Kelly Ray Intersection with Grid by Alasdair Donald Robert McIntyre Rick Speer Database for DBW Render by Prem Subrahmanyam Introduction Well I ve been absorbed in quality assurance for the updated version of the radiosity ray tracing software we ve done with HP One thing we ve added is texture mapping and I definitely feel a sense of deja vu since my second graphics project at Cornell was to integrate Rikk Carey s texture mapping software into the modeller and ray tracer Here it is six years later and we re finally using texture mapping in a commercial product I should mention some resources for all of you who have scanners Phil Brodatz s Textures book Dover is definitely recommended it s mostly nicely photographed images of sand gravel fur wood paper straw matting etc etc perfect for scanning Another Dover book The Grammar of Ornament by Owen Jones has many colorful designs from a large variety of cultures There are also many other Dover collections of designs which are worth looking over A related book that just came out is Computers Pattern Chaos and Beauty by Clifford Pickover St Martin s Press At first I thought this was just another fractal book but there are many other functions and algorithms explored here This book is something like a collection of Computer Recreations columns and is worth checking out One topic mentioned in the book is creating sea shells by a series of spheres This was also covered in the IEEE CG A November 1989 article pages 8 11 Here s a code fragment that outputs a series of spheres in NFF I leave a good view lights colors to you Cut the number of steps way down for a rough idea where the surface is located and have fun playing with the various numbers and formulae include include main argc argv int argc char argv static double gamma 1 0 0 01 to 3 static double alpha 1 1 1 static double beta 2 0 2 static int steps 600 number of spheres generated static double a 0 15 exponent constant static double k 1 0 relative size double r x y z rad angle int i for i steps 2 3 i The interesting thing about the database generated is that it s pretty slow for most ray tracers mine included There are a lot of spheres in a tiny cluster at the start of the shell and the final spheres are large enough that this tiny cluster is a small part of the environment Because the spheres overlap each octree node grid cell or 5D list is going to be pretty long there s a huge amount of depth complexity in this database Definitely a pathological case for most ray tracers I suspect Another book which just came out as in I just received my copy minutes ago is the new Foley van Dam Feiner Hughes Computer Graphics Principles and Practice from Addison Wesley 1174 pages with a fair number of color plates Definitely a good place to start in on any topic A must have enough said Graphics Gems edited by Andrew Glassner should also be out soon Mine s on order but hasn t arrived in time to review this issue Look for it it should be of interest One more thing I recently created a radiosity bibliography which was posted to USENET If you missed it on comp graphics it should be available on freedom graphics cornell edu see the RT News header soon back to contents Ray Tracing Roundtable Announcement There will be a birds of a feather room for ray tracers to meet and get to match names to faces at SIGGRAPH We ll meet 5 30 to 6 30 pm on Thursday of SIGGRAPH at some room see the room listings at registration Note that this shouldn t conflict with much as it s after the sessions and before the reception As befits ray tracers we re aiming for a minimal parallel approach for this year s meeting There won t be any roundtable since last year s meeting had near a hundred people just going around the room getting names and interests took half an hour So there is absolutely no agenda for this meeting it s simply a place and time to come and meet others in the field Hope to see you there back to contents New People Address Changes etc Haakan ZAP Andersson efficiency texturing speed etc EMT AB Box 40 178 00 Ekeroe SWEDEN 46 16 964 60 no e mail address for now Working with CAD technology developing add ons to the popular AutoCAD doing RayTracing as a personal midnight oil project and it might even be released realsoonow by EMT Since my computational powers are limited PC style I enjoy things that make things pretty without bending the clock I love anything that says 3D but is also interested in other simulations of real life AI sound and speech synthesis etc P S I showed RayTracker My Program at an exhibition and some people thought it was darnfast even though they were using some renderman stuff earlier my suspicion was that my VERY low resolution led them astray speed wise but I do another nice thing I trace every 8ighth pixel Well really every 64th 8x8 first so you get a quick look of what s happening very quickly Actually it s a good timer When the scan has done the screen the FIRST time a 64th of the image is done i e the amount of seconds minutes this scan takes this amount of minutes hours will the full image take approximately That s nice Well that IS all for now Mark A Cartwright 3D Modeling 3D Human Interface Ray Tracing Macintosh University of Texas Computation Center COM 1 Austin Texas 78712 1110 Phone 512 471 3241 ext 306 email markc emx utexas edu My background is mostly graphics work with a little Numeric Control thrown in for good measure Prior to my position here at the University I worked at Byte By Byte here on the Macintosh version of Sculpt 3D Modeling and all that relates to object creation and editing and of course ray tracing are my main areas of interest Pierre Poulin Imager Dept of Computer Science University of British Columbia Vancouver B C Canada V6T 1W5 Just in case you might be interested to change it my new email address is now poulin cs ubc ca I followed my supervisor at the University of British Columbia The DGP group at Toronto kindly kept me on their system but I would prefer being contacted directly rather than each time through Toronto Drew Whitehouse E mail drw900 csc2 anu edu au Visualization Programmer Fax 06 2473425 Australian National University Phone 06 2495985 Supercomputer Facility GPO Box 4 Canberra ACT Australia 2601 I work at the Australian National University Supercomputer Facility as a visualization programmer My interests are scientific visualization volume rendering and raytracing Currently I m keeping myself busy inserting bits and pieces into the MTV raytracer The main thing being some sort of volume rendering both for voxel data and Perlin style hypertexture what I ve really got in mind is a tribble teapot Michael A Kelly 3105 Gateway St 191 Springfield Oregon 97477 503 726 1859 home 503 342 2277 work mkelly cs uoregon edu Interests accurate duplication of real world objects color efficiency Current Project I am attempting to write a rendering program for the Macintosh II series Render3D will be at least at first a shareware program It is a simple ray tracer at this point but by the end of summer it will be considerably more Some of the features I plan to include are Accurate surface color definitions using spectral energy distributions color calculated on a wavelength by wavelength basis now implemented Radiosity method for diffuse reflections Phong and Gouraud shading for polygons Support for parametrically defined objects including bicubic surface patches Treat light sources as objects any normal object can be treated as a light source Texture mapping Import and Export several file formats including RenderMan Animation Of course I probably won t get to all of these before the end of summer but I hope to finish the first four or five of them by the beginning of fall term I am currently an undergraduate computer science major at the University of Oregon with one year left to go Erik Jansen Dept of Industrial Design Delft University of Technology Jaffalaan 9 2628 BX Delft The Netherlands Erik informs me that the site for a few people has changed alias wim bronsvoort wim duticg tudelft nl alias erik jansen fwj duticg tudelft nl alias frits post frits duticg tudelft nl back to contents Jarke van Wijk Thesis Availability by Erik Jansen fwj duticg tudelft nl I saw your question about the book of Jarke van Wijk in the January issue Jack wrote a thesis book which is nicely printed by the Delft University Press The title is On New Types Of Solid Models and Their Visualization with Ray Tracing Subjects that are covered translational rotational sweep also in TOG 3 3 223 237 sphere sweep also in EG 84 73 82 and in Computers and Graphics 9 3 283 290 blending surfaces comparable with the work of Middletich and Sears Sigg 85 bicubic patches for non rectangular meshes also in CAGD 3 1 1 13 SML solid modeling language also in CAD 18 9 There is no discussion in the thesis about efficiency methods only bounding boxes The book can be ordered for Dfl 36 30 ca 20 including send costs by Delft University Press Stevinweg 1 Delft The Netherlands fax 31 15 781661 back to contents New Name For Distributed Ray Tracing by Paul Heckbert et al If you have more comments please also send them for publication here EAH A few weeks ago I asked the following question of the people on the Ray Tracing News mailing list From ph spline Berkeley EDU Wed Apr 11 18 48 05 1990 This is a survey Assuming we could rename Distributed Ray Tracing what should we call it 1 Stochastic Ray Tracing 2 Probabilistic Ray Tracing 3 Distributed Ray Tracing old name ok 4 other THE RESULTS WERE 14 stochastic ray tracing 3 monte carlo ray tracing 2 distributed ray tracing 1 probabilistic ray tracing 1 rob cook ray tracing Stochastic Ray Tracing is the clear favorite of those who responded Many commented that they ve always found the term distributed ray tracing to be a confusing misnomer Brian Corrie put it well I have a serious problem with the name distributed ray tracing The main reason is the name directly conflicts with the notion of using a distributed computer system for ray tracing Trying to describe both of them is a hassle Because parallel ray tracing is becoming quite prominent this name conflict can be a major pain The plot thickens however Michael Cohen and Joe Cychosz observed that one could distribute rays regularly throughout a distribution or by some other deterministic algorithm and most people would still call it distributed ray tracing Wouldn t the proposed new name stochastic ray tracing then be misleading I agree That s why I ve started using the name distribution ray tracing To me it captures the central idea that you re modeling the surface properties as numerical parameters each with a probability distribution instead of a single specific value analogous to the distinction between a random variable and a standard variable There are various numerical integration techniques for simulating this distribution uniform sampling or stochastic sampling non adaptive or adaptive etc but these are implementation details relative to the main concept which is that there s a variable in the shading formula with a probability distribution that necessitates integration Another advantage of the name is that it s similar to the old one Andrew Glassner pointed out that there is another concept in Cook s and Kajiya s papers that deserves a name and that concept is that the stochastic sampling can be done independently in each parameter Andrew suggested simultaneous multidimensional sampling Another possibility that occurs to me is independent sampling What do y all think What I d like to know is why didn t the reviewers of Cook s 1984 paper scream when he proposed that title Paul Heckbert ph miro berkeley edu back to contents NFF Files from Thierry Leconte I found some wonderful NFF files at the site irisa irisa fr 131 254 2 3 in the NFF directory Particularly good is the Amiga computer model but all of them are pretty worthwhile BowlingPin nff guess amiga nff an Amiga 2000 keyboard and computer no monitor very nice balls nff just a scene generated by SPD ball program crypt nff a mysterious crypt with columns and whatnot expresso nff sic T Todd Elvins Utah espresso maker in NFF format hangglider nff a hang glider jaws nff don t be afraid it s just a nff scene matchbox nff a box of matches and some matches room nff an office with the desk and others things spirale nff a spiral spline thingie spring nff a spring thing sps7 nff a bull sps7 computer box teapot nff the mythical one temple nff pseudo roman pagan temple something tpotbis nff ye olde teapot with lid ajar watch nff a wristwatch x29 nff fighter plane Unfortunately there are some problems with some databases Problems included polygonal patches with normals given as 0 0 0 polygons with no area usually a triangle with a doubled vertex inconsistently defined polygons The NFF format specifies that you should output the polygon vertices in a particular order counter clockwise when viewed from above in a right handed coordinate system I suspect you use double sided polygons so that it does not matter other minor problems The files I had problems with amiga nff there are a few polygons with no area doubled vertices The first is around line 1518 of the file jaws nff there are tons of polygonal patches with normals of 0 0 0 room nff polygons with 0 0 0 normals and some no area polygons The first two polygons in this file are HUGE I cannot get the normals per vertex to display properly on my system because some of the vertex normals differ inconsistently from the polygon normal I haven t quite figured this out spring nff the Shine and Transmission values are switched here I suspect Shine is 0 while Kt is 30 You should definitely fix the material setup line here temple nff no area polygon around line 433 I can t get the normals to line up properly similar problem to room nff watch nff lots of 0 0 0 normals here x29 nff on line 3641 there is an extra vertex the polygon says it has 3 vertices but 4 vertices appear possibly my file is corrupt Some comments I pasted together from Thierry Leconte Thierry Leconte irisa fr who is the caretaker of the files In fact I m only a novice in ray tracing area I work on distributed systems and parallelism But ray tracers are good applications to test such systems Now I work on a modified version of VM pRay the parallel ray tracer of Didier Badouel irisa fr which run on our own distributed system called GOTHIC We are writing a motif based window interface for it and I am trying to collect as many nff files as I can in order to run nice demos on the Gothic system I have made available most of these files and some utilities among others yours via anonymous ftp from irisa irisa fr Most of the non classicals scenes I have come from a scene designer Xavier Bouquin who works on a amiga with the Scult4D program and Philippe Joubert irisa fr has written a sculpttonff converter But if someone knows other converters or interesting nff files I will be happy to add them to my collection VM pRAY ray tracer of Didier Badouel is available at the same site Feel free to use copy modify and distribute these files provided that they are not use for commercial purpose and that the name of the author is mentioned Most of these scenes was made on an amiga with Scult4D a truly great modeler then they have been converted to nff file with sc2nff a PD converter available on the same site same directory in the utils tar archive The author of crypt jaws matchbox room temple watch is Xavier Bouquin email to pjoubert irisa fr teapot x29 were ftp ed from cs uoregon edu amiga hangglider teapotbis were PD Scult4D files available on a amiga site archive will try in the future to collect any PD Scult4D file an convert them to nff sps7 was made by hand balls and spirale generated by program back to contents RADIANCE Software Available by Greg Ward greg hobbes lbl gov For a little over a year now I have been distributing a ray tracing lighting simulation called RADIANCE through the Sun Academic Software Portfolio Since the software runs on many machines besides the Sun and not everyone gets the portfolio as it is I thought you might be willing to publicize the software through your rtnews mailing list RADIANCE was written as a lighting simulation more than a renderer so it does not allow some of the tricks that are permitted in other ray tracing programs For example all light sources fall off as 1 r 2 It has some of the nicer features of advanced renderers such as textures and bump maps I ve always argued for calling them patterns and textures respectively octree spatial subdivision several surface primitives and hierarchical instancing It s main distinction however is its ability to calculate diffuse interreflection like a radiosity calculation See the article by Ward Rubinstein and Clear in the 1988 Siggraph proceedings The software is free and comes with all the C source code but is not available through anonymous ftp We want to keep track of people who have a copy of the package so that we can send out update announcements bug fixes and so forth For this reason we also ask that people do not redistribute the package without written permission e mail is fine Since I am just a mellow Californian who can t handle answering a 24 hour support hotline I want to discourage the idly curious those who just want to check out another ray tracer from acquiring this software If you are interested primarily in computer graphics there are plenty of other ray tracing programs that do a great job producing attractive imagery If on the other hand you are really serious about lighting simulation this is the program for you Summary Description of RADIANCE Lighting calculation and image synthesis using advanced ray tracing Scenes are built from polygons cones and spheres made of plastic metal and glass with optional patterns and textures Detailed Description RADIANCE was developed as a research tool for predicting the distribution of visible radiation in illuminated spaces It takes as input a three dimensional geometric model of the physical environment and produces a map of spectral radiance values in a color image The technique of ray tracing follows light backwards from the image plane to the source s Because it can produce realistic images from a simple description RADIANCE has a wide range of applications in graphic arts lighting design engineering and architecture The reflectance model accurately predicts both diffuse and specular interactions making it a complete simulation applicable to the design of unusual electric and day lighting systems Scenes are described by boundary representations with polygons spheres and cones Materials include plastic metal glass and light Textures and patterns can be described as functions or data Additional programs generators produce descriptions of compound objects and allow regular transformations and hierarchical scene construction A 3D editor is being developed The software package includes some image processing software and display programs for X SunView and the AED512 and comes with converters to Sun rasterfile and Targa formats Code is provided for writing other drivers and the list is expected to grow Interface Description The software is well integrated with the UNIX environment Many of the programs function as filters with a reasonable degree of modularity An interactive program provides quick views of the scene useful for debugging and view determination Scenes are described in a simple ascii format that is easy to edit and program Generators are provided for boxes worms surfaces of revolution prisms and functional surfaces eg bicubic patches A small library of patterns and textures is included In general the software is sensible but not mouse based Overall Goals of Developer The primary goal of the program is the accurate simulation of light in architectural spaces Secondary goals are image synthesis and geometric modeling Efficiency is an important concern in any ray tracing method Obtaining RADIANCE Send a 30 Mbyte tape cartridge with return envelope and postage to Greg Ward Lawrence Berkeley Laboratory 1 Cyclotron Rd 90 3111 Berkeley CA 94720 If you have any questions regarding the applicability of this software to your needs feel free to call or preferably send e mail to me directly Sincerely Greg Ward Lighting Systems Research Group GJWard Lbl Gov 415 486 4757 back to contents Rayshade Updates SPD Bug by Craig Kolb from various notes to me The Rayshade 3 0 ray tracer is now up to patch level 5 Rayshade 3 1 is coming along nicely It fixes some of the major problems in rayshade and adds a bunch of new features By the way while playing with the SPD I ran across a couple of very minor problems In lib c you make mention of OUTPUT POLYGONS when you really mean OUTPUT PATCHES I have sent Craig release 2 7 of the SPD package and it s now available for FTP from weedeater math yale edu 130 132 23 17 It has minor typo fixes like the above and clarifications of the NFF but no code fixes EAH Craig also notes that Przemek Prusinkiewicz s book The Algorithmic Beauty of Plants will be released at SIGGRAPH this year complete with lots of pretty raytraced pictures using Rayshade Some of the images generated were in the March 1990 issue of IEEE CG A including the front cover back to contents New Version of Vort Ray Tracer by David Hook uunet UU NET munnari dgh the following was pieced together from two notes EAH I have just installed a new version of the ray tracer in pub graphics vort tar Z on munnari OZ AU It s a bit of an improvement on the last one and has some stuff for displaying images as animations on sun s PC s and X11 One thing that may be of interest one of the guys I work with one Bernie Kirby implemented some marble and wood texturing using in the ray tracer He had the following to say It is an implementation of Ken Perlin s noise function as described in Hypertexture Computer Graphics Vol 23 No 3 July 1989 pp 255 256 Most of the function names are as given in the paper Also I think that there may be an error in the paper as the given formulae of OMEGA would always produce zero if the actual point falls on a lattice point ie GAMMA i j k u v w 0 Anyway I added in a pseudo random value for the noise at each lattice point as well as the gradient values as described in his 85 paper and it seems to work The original version ie the one that had zeros at the lattice points produced almost exactly the same effects as displayed in Fig 2 of J P Lewis paper in SIGRAPH 89 Algorithms for solid noise synthesis The changed algorithm still displays some of these artifacts if you really look for them but no where near as badly as in Lewis s paper The only other things of note are that Vort no longer requires primitives to be axis aligned and that most things can have tile patterns mapped on to them this includes toruses although flat pixel files mapped onto a donut can tend to look a little weird Some people may find the mapping functions of some use although having just got a copy of Introduction to Ray Tracing I notice most of them are in there the book shop slugged me 100 bucks for it sometimes I don t believe this place Regards David PS we ran your standard rings benchmark at four rays per pixel and it took two and a half days on a Sun 4 3 90 Is that a record Next project is to speed the mother up Also a package called Vogel is also available at munnari EAH From Tom Friedel tpf jdyx UUCP With Vogel you get 3 d transformation 3 d and 2 d clipping perspective orthogonal views some patch functions and back face removal I ve wanted to build a bigger package on these routines some sort of nff previewer but haven t had the time Good package because you get device independence with X11 postscript others back to contents Graphics Interface 90 by Eric Haines An interesting conference proceedings which often is overlooked is Graphics Interface This year s conference held in Halifax Nova Scotia Canada had quite a few papers on ray tracing I particularly liked Don Mitchell s Robust Ray Intersection with Interval Arithmetic paper I m sure we ll be seeing interval analysis applied to more areas of graphics in the years ahead and this is an interesting application of the technique Graphics Interface proceedings can be ordered from Morgan Kaufmann Publishers 415 965 4081 What follows is a list of papers that may be of interest Image and Intervisibility Coherence in Rendering Joe Marks Robert Walsh Jon Christensen and Mark Friedell Harvard U Robust Ray Intersection with Interval Arithmetic Don P Mitchell AT T Bell Laboratories Murray Hill Approximate Ray Tracing David E Dauenhauer and Sudhanshu K Semwal U Colorado at Colorado Springs Octant Priority for Radiosity Image Rendering Yigong Wang and Wayne A Davis U Alberta Exploiting Temporal Coherence in Ray Tracing J Chapman T W Calvert and J Dill Simon Fraser U A Ray Tracing Method for Illumination Calculation in Diffuse Specular Scenes Peter Shirley U Illinois at Urbana Champaign Voxel Occlusion Testing A Shadow Determination Accelerator for Ray Tracing Andrew Woo and John Amanatides U Toronto Some Regularization Problems in Ray Tracing John Amanatides and Don Mitchell AT T Bell Laboratories Murray Hill back to contents Real3d Review Haakan ZAP Andersson I was attending a computer exhibition in Stockholm the other day and among all the printers PC computers and other boring stuff there were some bright spots In one stand I saw a screen with a checkerboard pattern and a mirrored sphere on it I began to Yawn loudly but as I was going to leave a mirrored hand plunged up from the ground and grabbed the sphere and the camera made a spin around the whole scene It made me interested enough to enter and look REAL 3D is apparently a new so new it s a RealSoonNow product from the icy Finland It s a raytracing program for the Amiga and it s darn fast for being an Amiga that is I talked to the program author and he said he did NOT use the math coprocessor and it was all in assembler Good Grief When discussing efficiency he proudly declared that he had NOT looked at others for algorithms because he did not want to be influenced so he had invented it all from scratch He had been programming full time for four years and from what I saw the result was satisfactory to say the least A beautiful OSF Motif like user interface and a great interactive object editor that would make Sculpt Animate 4d go home and hide under a rug All objects were arranged in a hierarchy for animating and materials and textures could be assigned to whole hierarchy tree branches He could even do solid modelling I saw a cylinder cut out from another before my very eyes with different textures in the hole and the piece the hole was cut out of It was also one of the few Amiga tracers to support texture mapping i e you could map any IFF image onto any surface via some different kinds of projective mapping Parallel Ball Cylinder It had a good hybrid between analytic objects spheres cylinders cones and even hyperbolics and polygon surfaces A nice entity was the sphere line he used you simply drew a series of connected lines and all vertices got a sphere and all connecting lines became a cylinder AKA worms or cheese logs in other parts of the world EAH Animation support looked quite straight forward and he made a simple animation of the Real3d logo being flown through before my very eyes Though as a wire frame but I got the hang of animating SPEED Even though the program ran on an Amiga 2000 14 Mhz clock it s speed was rather fast Comparing with my own tracer running on a 386 machine with full math coprocessor support his program looked faster The wire frame representations used for placing cameras an so forth was real time and he traced a hyperbolic with wood texture with a cylindric hole in about a minute He also claimed that finding the colors for the HAM mode in the Amiga was half the work He said that an early version used Black White and it was almost twice as fast bragging Upon being asked how it could be that fast he said Only me and my brother knows how it works then he smiled Heaven knows why Conclusion REAL3d looks like a speedy hack for the Amiga and the editor alone makes it a joy to watch I hope this little blond guy from Finland will sell some of these programs so he will be able to continue to develop it into something really nice Sorry I don t have an address for where to get it Anyone EAH back to contents Bits From a Letter by David Jevans As for the Arnaldi paper on mailboxes keeping a ray id for each object to avoid multiple intersections I though that was common knowledge Cleary s analysis of ray tracing paper Visual Computer 88 MacDonald s paper and my paper Graphics Interface 89 all mention the technique and reference the paper It s a good thing that you put in the RTN if people really don t know about it Anyway my recent work has some pretty important results for the ray tracing community Essentially I show that further work in reducing ray object intersections is pretty much pointless we are close to the fastest possible time anyway I m just writing a section that illustrates that hierarchies of 3D voxel grids are superior to bounding volume hierarchies as if anyone will believe me David Jevans University of Calgary Department of Computer Science Calgary Alberta Canada T2N 1N4 uucp jevans cpsc ucalgary ca vox 403 220 7685 back to contents On Antialiasing Light and Such by Haakan ZAP Andersson no email Disclamier Since I havn t read all theses about anti aliasing this might be known already so all I claim to be my ideas may be not so the stupidity is solely on my part When raytracing instead of having one wiz bang function trace ray that traces through the entire object list traversing AHBV s as necessary and pinning down the poor bastard of an object blocking our way of light and shining in our face you might do one little thingy Use TWO functions ONE that traverses the bounding volumes for a ray building an object list of primitive object this ray might intersect and ONE that does the real object intersection i e this current list traverse abvh ray pixel trace this list ray current list clear list current list Get rid of it somehow Why da hek do this Well when anti aliasing you will virtually hit the same object s inside each pixel and the slack around the object vs bbox will allow the current list to contain all objects this ray hits and any ray being very close to this very ray i e all rays within a single pixel So when anti aliasing simply call trace this list with the same list all over again only SLIGHTLY different ray s Ok there CAN be wrongies some places but since you do this for eye rays and I say that for eye rays you should use 2d bounding boxes on screen INSTEAD of real bboxes you simply let the 2d bboxes be one pixel bigger than they should be and viola each pixel will always yield AT LEAST the object list containing all objects to be hit in this pixel and the neighbouring ones Got that Any flaws Well since current list need to be alloced malloced in some way there might be a speed problem Another solution is using a static object list and KEEPING the bbox traversal code in trace this list but ALSO having a traverse abvh function used only upon eye rays when anti aliasing is in effect The fact that the list trace this list gets does NOT contain any bboxes once in a while i e when we supply a list made by traverse abvh instead of the full object list is not a problem from that functions point of view Any flaws NOW Well you might always run out of static storage space But you can always realloc Comments this has a certain sense to it By making a likely candidate list for a pixel you can stop wasting time traversing the darn hierarchy You could even sort it by the box hit distance so that when you get do get a hit from the candidate list you can then simply test this hit against the remaining candidate distances As soon as you reach a candidate distance that is beyond your hit distance you stop intersecting This candidate list idea is similar in feel to my Light Buffer lists and Jim Arvo s 5D lists The trick in all this is to make sure your bounding boxes do not fit too tightly that a pixel makes a difference this is easy enough to calculate for eye rays EAH Light and Such or Something s REALLY wrong with Bui Thui Phong I think that s the guys name and since Bui Thui is his last name Bui Thui shading is more appropriate than Phong shading but By Haakan I have been dissatisfied with Phong s shading model for quite some time since it does not accurately enough apply to reality There is at least two effects in real life that i think is important enough to be mad att ol mr Phong I have called these The Rough bug and The nonlinearity bug The Rough bug There is many many ways to see The Rough bug in action in real life and many poems have been written about the biggest proof about The Rough bug s many lovers have been sitting under it many songs written about it and many a astronomer hase gazed upon it The Moon Let s get out late at night and trying to look straight up You will see the moon or half of it or a third or nothing Half moon tonight At least it s better than no moon at all Fortune program But does this moon look like a Phong shaded sphere Were is the ambient diffuse and above all specular light What you and I see is darkness darkness more darkness and smack white moon surface more white moon surface swack Darkness darkness Who stole Kd and Ka The answer lies in the texture of the moon s surface It s really a VERY large amount of small objects stones rocks sand mountains e t c So any given spot upon the moon surface will have normal vectors pointing in every possible direction and using Phong in a small scale will be shaded almost equally until of course it s in shadow This is The Rough Bug Rough sur faces are subject to this effect and the Phong diffuse component gets more and more out of sync with the actual surface as the surface get s rougher Some questions emerge Q Is there any way to let a phong type shading model take this into account without having to model the surface exactly either in actual geometry or as a bump map Another example of this bug you may find outside at sunset or almost sunset if you stand on a large flat surface covered with sand dirt concrete or something similar Looking towards the setting sun the surface you are stan ding on is darker than when you look away from the sun by the same reason the surface s Roughness Small rocks and stuff reflect the sun as you look away from it by it i refer to the sun not the rocks You will not see anything if you look away from the rocks and does not as you look into it same it So much for Specular reflection Perhaps some kind of inverted specular reflection The Non Linearity Bug Without having ANY physicists backing me up I dare claim that the very linear equation of the standard Ray Tracing reflection model is goddamnwrong I was wearing a ring the other day sitting in front of a window looking out into the sun Since my mind is constantly on RayTracing i saw the reflection in the window of the sun reflecting in my ring I didn t see myself nor the ring not even the room I was in reflecting in the window glass only the very bright reflection of the ring Perhaps the window used adaptive tree pruning filtering away all reflections below 0 1 Nah don t think so Another example was when a friend of mine was standing in front of the very same window but it was very very late at night and the window was black But he was backlit by the light from the room and as I observed his reflection in the glass I saw it had somehow higher contrast then my direct vision of him standing there The dark parts of his face where the shadow of his nose fell f rinstance was pitch black in the reflection but the tip of the very same nose being lit from behind appeared very bright in the reflection There were no such differences in luminosity between nose tip and nose shadow in the true image of him not even from the windows viewpoint something I verified by crawling up between the window and him observing him accurately with him thinking I was a complete fool which I am A question emerges Q Can this non linearity of reflected images somehow be imported into the raytracing algorithm or is this a local effect in the human eye Perhaps in MY eyes only back to contents USENET cullings follow Summary Uniform Random Distribution of Points on Sphere s Surface Marshall Cline cline cheetah ece clarkson edu Organization ECE Dept Clarkson Univ Potsdam NY The original problem was I need to uniformly spray a sphere s surface with randomly located dots We can assume the sphere has radius R and is centered at the origin SOLUTION 1 by far the most popular Choose 3 Uniform random values rand R R rand R R rand R R If this is inside the sphere project that vector onto the sphere s surface Sorry I have no references many many people suggested this SOLUTION 2 Choose 3 Gaussian randoms Project this vector onto the sphere s surface bill stat washington edu Bill Dunlap Statistics U Washington jd shamu wv tek com JD Projecting vector onto the sphere s surface is done by dividing each component by sqrt of sum of squares ie the vector s length SOLUTION 3 Pick a random latitude by the inverse sine of a number uniformly distributed over 1 1 Pi times another such random number gives you a random longitude and you re done dougm rice edu Doug Moore Several other solutions suggested dividing the sphere s surface into small patches and projecting uniformly into a randomly chosen patch Thanks to all who answered Marshall Cline PS I m implementing this on the Connection Machine The SIMD nature of the CM makes the first soln difficult since each processor will have to wait until that last straggler finds a point inside the sphere There are ways around this like a list of cached 3 space points in each processor but there s always a chance that one processor s list will be very short Thus I m going to try the Normal 0 1 solution first PPS paul hpldola HP COM Paul Bame suggested a method simulated annealing which would evenly distribute points on the sphere s surface Although my app requires a uniform random distribution I m posting this as it may be appealing though slow for someone who wants evenly distributed points back to contents Ray Tracing Radiosity by Frank Vance fvance airgun wg waii com Organization Western Geophysical Houston The SIGGRAPH 87 proceedings contain three articles see biblio below which taken as a whole seem to imply that image synthesis will have to combine both ray tracing and radiosity in order to be able to accurately render images that contain many real world phenomena Two of the papers point out the difficulty of using ray tracing to render such things as atmospheric scattering and participating media I have not seen any further discussion of this view although I have not yet seen the SIGGRAPH 89 Proceedings go easy on me OK and am wondering what other researchers particularly die hard ray tracers thought of this Can ray tracing correctly render such things without resorting to radiosity tricks Or is the distinction between ray tracing and radiosity essentially artificial What s your opinion Bibliography All below from SIGGRAPH 87 Proceedings a k a Computer Graphics July 1987 v 21 n 4 Wallace John R Michael F Cohen Donald P Greenberg A Two Pass Solution to the Rendering Equation A Synthesis of Ray Tracing and Radiosity Methods pp 311 320 Rushmeier Holly E Kenneth E Torrance The Zonal Method for Calculating Light Intensities in the Presence of a Participating Medium pp 293 302 Nishita Tomoyuki Yasuhiro Miyawaki Eihachiro Nakamae A Shading Model for Atmospheric Scattering Considering Luminous Intensity Distribution of Light Sources pp 303 310 Re Ray Tracing Radiosity by Mark VandeWettering markv gauss Princeton EDU What I think SHOULD be implied is that normal raytracing techniques are inadequate to solve a wide variety of lighting situations particularly those which deal with solutions to the ambient light contribution diffuse interreflection participating media or color bleeding This doesn t mean that raytracing can t be used to solve problems like this As a matter of fact radiosity can be implemented quite simply using a raytracer rather than a zbuffer er for the hemicube calculations Raytracing was a part of Holly Rushmeier s participating media radiosity solution where rays were used to perform spatial line integrals of the lighting equation If you examine the 88 and 89 Siggraph proceedings you will see that many researchers have shifted to raytracing like approaches to implement radiosity solutions Can ray tracing correctly render such things without resorting to radiosity tricks Or is the distinction between ray tracing and radiosity essentially artificial What s your opinion The distinctions aren t artificial but they are subtle For a while radiosity meant using matrix equations to solve energy transfer between Lambertian reflectors Later the n 2 memory requirements were relaxed by using progressive radiosity and the algorithm became practical and competitive with other methods Now integrations of raytracing and radiosity are beginning to show further improvements in both speed and the kinds of situations they cover specular reflection And you can be sure that there will continue to be radiosity papers in THIS years Siggraph too I can hardly wait Raytracing is generally conceived to offer solutions to precisely the situations where early radiosity solutions failed environments with highly specular environments It used to be thought that raytracing was too expensive but improvements in hardware and in algorithms have made raytracing tractable and attractive Now I believe that most algorithms of the future will have some sort of a raytracing core to them if not for modelling light interactions then probably just for checking visibility of points How bout anyone else Any more ideas back to contents Ray Tracing the Torus by Prem Subrahmanyam prem geomag gly fsu edu Ok I ve contributed my quadric ray tracing code Now if someone could tell me how to do the above I would greatly appreciate it I know it is a 4th order equation but I have not even succeeded in locating the equation for the torus in my math textbooks except for a spherical coordinate version and I don t want to try to convert Any help would be appreciated this has been answered a few times already in the RT News but I found Bob Weber s reference of interest He also gives a taste of Pat s explanation EAH Reply from Bob Webber webber fender rutgers edu Organization Rutgers Univ New Brunswick N J For planar curves we have J Dennis Lawrence s A Catalog of Special Plane Curves Dover 1972 to satisfy those times when one wakes up in the middle of the night racking one s mind trying to remember the equation for the hippopede However for 3 d the best I have seen is Pat Hanrahan s A Survey of Ray Surface Intersection Algorithms that appears in Andrew Glassner s An Introduction to Ray Tracing Academic Press 1989 There we find among other things the equation for a torus as x 2 y 2 z 2 a 2 b 2 2 4 a 2 b 2 z 2 This describes a torus centered at the origin defined by a circle of radius b being swept along a center defined by a circle of radius a It is derived from considering the intersection of a plane with a torus that yields the two circles x a 2 z 2 b 2 x a 2 z 2 b 2 0 if you are unfamiliar with this construction it is worthwhile pausing here and savouring how this equation actually works sometimes the equations are prettier than the pictures and then spinning this intersection by replacing x 2 with x 2 y 2 after some algebraic simplification which converted the above to x 2 z 2 a 2 b 2 2 4 a 2 b 2 z 2 The section includes a reference to an unpublished 1982 note by Hanrahan entitled Tori algebraic definitions and display algorithms The general scheme for a number of variations on the torus is to start with a quartic curve of the form f x 2 y 0 and then substitute x 2 y 2 for x 2 and z for y back to contents Need Help on Superquadrics by Wayne McCormick wayne cpsc ucalgary ca A few months ago I read some articles on superquadrics here on the net It interested me and I decided to try to implement a modeler based on superquadric shapes Since the inside outside functions are so easy to use in determining intersections and so forth I thought it would be somewhat easy to do But I stumbled into a small problem Parametrically a superellipsoid is defined by x c u e1 c v e2 y c u e1 s v e2 z s u e1 where pi Then I tried to calculate everything in the complex plane There are two problems here 1 speed 2 how do you map back to image space Then in Franklin and Barr s paper on Faster calculation of superquadric shapes they say that using an explicit equation and reflecting 47 times is much faster Sure I can see that but the patch that is generated by the explicit equation is small and odd shaped and what 47 directions does one have to reflect it From Robert Skinner robert texas esd sgi com Organization Silicon Graphics Inc Entry Systems Division I m going to suggest this without poring over the references so I ll apologize ahead of time Try using the same identities for c u e and s u e as for sin and cos c u e c u e s u e s u e s pi 2 u e c u e c pi 2 u e s u e you can make this restriction 0 e g 0 then x c u e1 c v e2 c u e1 c v e2 x y c u e1 s v e2 c u e1 s v e2 y z s u e1 s u e1 z so just reflect your basic patch by 1 in the Z to draw this one Repeat for all other sections of the total range This should work but it looks like you only get 32 sections not 48 back to contents Ray Tracing Penumbral Shadows Prem Subrahmanyam prem geomag gly fsu edu Organization Florida State University Computing Center I would like to hear how people who have done the above have succeeded at this Presently I am working with DBW Render which uses the following basic algorithm Find the direction to the light source and determine distance to this source for inverse square shading Now create a random unit vector and scale this into the direction to light vector using the radius of the light source as the scaling factor Test this new vector for shadows etc This generates very poor shadows except when the anti aliasing is turned way up 6 or greater rays per pixel since we are either in shadow or not no in betweens Does anyone else have any usable suggestions as to how this can be done where we vary the amount of light depending on how much in shadow it is short of firing multiple rays at the light source pretty much the same as anti aliasing back to contents Ray with Bicubic Patch Intersection Problem Wayne Knapp wayneck tekig5 PEN TEK COM Organization Tektronix Inc Beaverton Or Time for a hard problem Anyone have a great idea on how to compute the a ray intersection with a general bicubic patch The methods I ve found in papers so far tend to be very slow Seems like most papers take one of two approaches 1 Sub divide the patch in many small polygons and ray trace that Works but when you have thousands of patches you can end up with millions of polygons 2 An Iterative numerical approach chosing a x y z point on the ray and checking to see if it intersects the patch by using the x y z values in the system of equations given by the four cubic equations forming the patch This of coarse normally requires many trys Does anyone have any better ideas John Peterson jp Apple COM Organization Apple Computer Inc Cupertino CA I did my MS thesis on comparing techniques 1 and 2 1 was definitely the winner both in terms of speed and robustness 2 requires root finding which can have convergence problems not finding a root finding the wrong root etc Also it performs the surface evaluation which is expensive in the very inner loop of the ray tracing process where it is executed literally billions of times for a complex image Reducing to polygons first allows the ray tracer to deal strictly with simple fast and stable linear math It also does the surface evaluation to generate the polygons only once as a pre process Once the polygons are generated there are several very effective schemes for reducing the ray surface search problem for large quantities of small simple primitives e g octrees bounding volume trees 5D space etc For the gory details see PRT A System for High Quality Image Synthesis of B Spline Surfaces MS Thesis University of Utah 1988 Lawrence Kesteloot lkestel gmuvax2 UUCP Organization George Mason Univ Fairfax Va Check out the book An Introduction to Splines for use in Computer Graphics Geometric Modeling by Richard H Bartels John C Beatty and Brian A Barsky Morgan Kaufmann Publishers 1987 It has a section entitled Ray Tracing B Spline Surfaces p 414 It goes into several steps to speed up the intersection I have not read this yet I m summarizing as I read 1 Refinement Preprocessing This breaks the image down into many smaller splines Each spline covers several 100 pixels 2 Tree Construction Break the new smaller spline into a bunch of boxes starting with one box for the whole spline then break that down put all this into a tree Intersection with boxes is easy You can find out which of these boxes check only the leaves of the tree intersects the ray This will give you the starting point for Newton s iterations 3 Do newton s iteration to find the exact distance I m sorry if I ve made any errors in the above description You re going to have to get the book of course to implement it I m going to implement it in my own ray tracing program in the next few weeks so I ll post the source if anyone is interested It seems like a complicated algorithm but it may speed things up quite a bit I never did see the source posted EAH Mark VandeWettering markv gauss Princeton EDU writes Well there is another solution to this problem which people haven t fleshed out a great deal generate triangles and raytrace those I hear groans from the audience but let me put forth the following reasons 1 ray bicubic patch intersection IS floating point intensive The best figures I have seen quote around 3K floating point operations per ray patch intersection I have a hard time believing you couldn t do better with a good hierarchy scheme good triangle code 2 Even if you can convince me that your bicubic patch intersector worked faster than my combination dicing into triangles is very simple and easy to implement The same code could also be used to generate views of nearly any parametric surface with minimal modification There are of course some difficulties You would like to subdivide appropriately which means being careful about silhouette edges and shadow edges Barr and Von Herzen had an excellent paper in the 1989 siggraph to illustrate how to implement subdivision You might want to check it out Of course all this is moot cuz I never HAVE managed to implement real ray patch intersection code Thomas Williams ucbvax sun pixar thaw replies Organization Pixar Marin County California Another problem which I haven t seen solved is subdivision for reflections or transmissions which magnify the surface intersection of this secondary ray For example what is a suitable subdivision algorithm for surfaces seen through a magnifying glass Adaptive techniques that use gradient differentials can generate gillions of unneeded polygons Also the continuity you lose by approximating surfaces with triangles for curved objects with more than one transmitting surface like a bottle or thick glass can cause some pretty horrible artifacts If it is important to avoid these problems the only way I know that you can do it it with ray surface intersection Mark VandeWettering markv gauss Princeton EDU then replies The problems you list are legitimate However I would counter with the following arguments 1 How often do scenes which have magnifications through reflection or refraction REALLY occur The answer to this question for me was never Much more difficult is to solve problems with shadow edges which can project edges which are irritatingly linear Two things will help soften alleviate problems which shadow edges a using distributed raytracing to implement penumbras fuzzy boundaries can be more piecewise without causing noticeable effects b We can help eliminate artifacts by treating light sources specially and subdividing on silhouettes with respect to the light source as well as the eye 2 Remember your screen has on the order of 1M pixels Each patch will probably cover only a vanishingly small fraction of these pixels If a patch covers 100 pixels any subdivision beyond 10x10 is probably overkill Use expected screensize as a heuristic to guide subdivision Thomas Williams ucbvax sun pixar thaw then replies Don t forget problems with areas of high curvature Especially animated sequences where specular highlights dance on sharply curved edges A hybrid approach might work well but you had better have a lot of memory for all the polygons you generate Thrashing brings the fastest machines to their knees So I still think there is a place for ray surface intersections Of course I guess which approach you take depends on the audience your playing to back to contents Rendering Intersecting Glass Spheres John Cristy cristy eplrx7 uucp Organization DuPont Engineering Physics Lab I am still looking for a renderer raytracer radiosity scanline etc that can render two intersecting semi transparent glass spheres and realistically show the area of intra penetration I have been looking for a couple months now and have not found a renderer that does this well or at all Suggestions of public domain or commercial renderers that solve this problem was welcome Please send Email to cristy dupont com Thanks in advance Craig Kolb craig weedeater uucp replies Organization Yale University Department of Mathematics To accurately model nested objects for example if your two spheres had different indices of refraction you also need to maintain a stack of refraction indices since you can t assume that when you exit an object you exit into air Rayshade does exactly this But there are still a couple of problems with rendering intersecting transparent objects First the renderer needs to keep track of solid body color in order to achieve the proper filtering effect of say white light passing through green glass and then blue glass The second and more fundamental problem is how to treat the volume corresponding to the intersection of the two solids Given that solids A and B each have a set of properties solid body color index of refraction etc what properties should be used in rendering the volume A B Doing The Right Thing means resorting to CSG techniques so that one can specify the properties of A B as well as those of A and B back to contents DKBPC Raytracer Tom Friedel tpf jdyx UUCP Organization JDyx Enterprises Atlanta GA The guys on Compuserve seem to have endorsed a new ray tracer called DKBPC which is available as source It appears to support CSG and Textures from what little I ve seen Has anyone evaluated it i e compared it to rayshade vort mtv etc Is it archived anywhere back to contents New release of IRIT solid modeller Gershon Elber gershon cs utah edu Organization University of Utah CS Dept IRIT is a polygonal C S G based solid modeller originally developed on and for the IBM PC family of computers Version 1 x has been released about a year ago for the IBM PC only Since then it has been ported to unix environment SGI Irix 3 2 and BSD4 3 using X11 and all known bugs has been fixed This is release 2 x of the solid modeller and its accompanying utilities which include a data viewing program poly3d hidden line removal program poly3d h and simple renderer poly3d r Thanks to Keith Petersen all the sources Ansi C for these programs and executables for the IBM PC are available on simtel20 arpa directory PD1 MSDOS IRIT IRIT ZIP Full CSG solid modeller arbitrary orientation IRITS ZIP Turbo C ver 2 0 sources for IRIT IRITLIBS ZIP Libraries for IRIT sources POLY3D ZIP Display 3D polygonal objects part of IRIT POLY3DS ZIP Turbo C ver 2 0 sources for POLY3D POLY3D H ZIP Create hidden line removed pict part of IRIT POLY3DHS ZIP Turbo C ver 2 0 sources for POLY3D H POLY3D R ZIP Render poly data into GIF images part of IRIT POLY3DRS ZIP Turbo C ver 2 0 sources for POLY3D R DRAWFN3D ZIP Display 3D parametric surfaces part of IRIT DRAWFN3S ZIP Turbo C ver 2 0 sources for DRAWFN3D All above sources are for the unix system as well but DRAW ZIP which has not been ported MSDOS only In order to unpack ZIP archives in unix environment you will need to ftp from directory PD3 MISC UNIX the file UNZIP30 TAR Z list of changes deleted EAH Elber Gershon gershon cs utah edu 918 University village Salt Lake City 84108 1180 Tel 801 582 1807 Home Utah Tel 801 581 7888 Work back to contents Easier Use of Ray Tracers Philip Colmer Mark VandeWettering Jack Ritter Philip Colmer pcolmer acorn co uk writes As someone who has used QRT and MTV and is about to try RayShade could I make a couple of suggestions to the authors of these packages and any other budding ray tracer programmers Mark VandeWettering markv gauss Princeton EDU answers Philip s points In article pcolmer acorn co uk Philip Colmer writes 1 Please try and provide an option to produce a quick and dirty outline image This would not do any reflections shadows or any of the other time consuming elements of ray tracing Instead it would just show where the objects are This would allow the basic picture to be checked for accuracy Not everyone can cope with visualizing a 3D world Yeah this should be configurable from within the data file or via command line options Things like raydepth and stuff are not run time configurable on MTV 2 MTV has a very nice colour database pinched from X11 How about a similar database for materials ie just what ARE the parameters that should be given for metal glass and so on Well colors are a little easier than things like metals We should actually shift from an RGB representation of color to a more realistic wavelength model and then convert Somewhere I have a list compiled by Andrew Glassner of reflection curves for a number of materials Perhaps these will work their way into Son of MTV 3 How about a fixed point integer system This would make ray tracers go one hell of a lot faster but I m not sure if this is a viable option Guess what folks this probably won t help Mainly because modern machines are spending alot more time to do fp multiplies than integer multiplies Note that on a machine like the i860 a double precision multiply can be done every two cycles A 32 bit integer multiply takes between four and eleven Net result You lose Similar things happen with the MIPS R3000 Another big lose for most machines using single precision fp in C Doesn t help one iota in speed for every machine I tested and hurt the accuracy Jack Ritter ritter versatc versatec COM Organization Versatec Santa Clara Ca 95051 Summary speed up tricks for approx ray tracer In article 2413 acorn co uk pcolmer acorn co uk Philip Colmer writes 1 Please try and provide an option to produce a quick and dirty outline image I have an option to scale the scene into an arbitrary NXM pixel area For initial renderings where I just want to the overall effect make sure objects don t penetrate each other I have found that even a 30X30 pixel rendering is revealing 30X30 sure beats the hell out of 512X512 or whatever these darn kids are using these days I also bound objects in screen space which makes things very fast when you re not doing reflections refractions Some fairly complex scenes have taken under a minute with all these trick in use Screen space bounding is described in the upcoming book Graphics Gems which will no doubt also contain many other speed up tricks that I will wish I had thought of 3 How about a fixed point integer system This would make ray tracers go one hell of a lot faster but I m not sure if this is a viable option Guess what folks this probably won t help Mainly because modern machines are spending alot more time to do fp multiplies than integer Yes the latest processors have on chip floating point and are fast However on the processors I have used Motorola 68000 68010 68020 I have found that well thought out fixed point code always beats the floating point coprocessor algorithm for algorithm back to contents Raytracer Glass F Ken Musgrave musgrave forest CS YALE EDU Organization Yale University Computer Science Dept New Haven CT 06520 2158 In article pwh bradley UUCP writes What are the spectral properties of glass that I could use in a raytracing program I ve a friend who s been working on the problem for a while now and it s given some interesting results but nothing that actually looks like glass Glass is not so easy to do I got a Master s degree for doing it Three things are necessary 1 The proper index of refraction 1 5 1 9 2 The proper reflection function Fresnel s Law 3 Dispersion Also you should propagate rays spawned by total internal reflection many ray tracers quash such rays outright this can lead to ugly artifacts in glass objects with planar surfaces The first two things can be standard features in a ray tracer the third is uncommon There are two published solutions that I know of Thomas S W Dispersive Refraction in Ray Tracing Visual Computer vol 2 no 1 pp 3 8 Springer Int l Jan 86 Musgrave F K Prisms and Rainbows a Dispersion Model for Computer Graphics Proceedings of the Graphics Interface 89 London Canada June 89 Neither of these references is easy to get Perhaps UC Santa Cruz would provide a copy of my thesis Musgrave F K A Realistic Model of Refraction for Computer Graphics Master s Thesis UC Santa Cruz Santa Cruz CA Sept 87 As an alternative I will put the troff sources for my GI paper where you can get them via anonymous ftp on weedeater math yale edu but you won t get any of the nice illustrations At any rate to get dispersion into a ray tracer requires some hacking and will in general slow down the rendering a lot Thomas I used quite different approaches his would probably be faster for scenes without much dispersion and vice versa A future version of Craig Kolb s RayShade may feature dispersion I m not at liberty to distribute my ray tracer with dispersion Michael A Kelly mkelly comix cs uoregon edu replies Organization Department of Computer Science University of Oregon In article 8600001 bradley pwh bradley UUCP writes What are the spectral properties of glass that I could use in a raytracing program Try Color Science by Wyszecki Stiles 1982 I don t have the book with me but I m pretty sure it has the information you need back to contents Ray Intersection with Grid Rick Speer speer boulder Colorado EDU Organization University of Colorado Boulder In article 12598 of comp graphics aiadrmi castle ed ac uk Alasdair Donald Robert McIntyre writes I am trying to raytrace rippling water and need to solve the following problem Given a surface defined by heights on an square grid find the closest intersection of a ray with the surface thus defined I wonder if anyone knows of an efficient method to do this Replies by mail or to the net Thanks in advance You might check the following 1 Shaded Display of Digital Maps by S Coquillart and M Gangnet in IEEE Computer Graphics and Applications V 4 No 7 July 1984 p 35 42 2 Vectorized Procedural Models for Natural Terrain Waves and Islands in the Sunset by N Max in Computer Graphics V 15 No 3 Proceedings of SIGGRAPH 81 p 317 324 These should give you some good ideas My own two cents Also look at The Synthesis and Rendering of Eroded Fractal Terrains by F Kenton Musgrave Craig E Kolb and Robert S Mace SIGGRAPH 89 Towards the end they describe their method to ray trace height fields EAH back to contents Database for DBW Render by Prem Subrahmanyam prem geomag fsu edu Organization Florida State University Computing Center Ok here is a description file for a trio of balloons over reflective water with fractal mountains in the background It should be pretty interesting 0 400 R 24 0 a 5 b 8 4 4 e 0 10 100 0 5 200 0 1 0 w 0 0 200 7 1 1 0 00 w 0 0 0 5 2 1 0 00 w 0 0 200 20 4 1 0 50 w 200 0 0 2 1 1 1 00 w 200 0 0 10 15 1 1 00 w 50 0 0 6 2 1 0 00 w 30 4 60 15 3 1 75 l 1 1 1 2 10 5 g 5 0 8 15 15 f 4 0 1 0 5 0 7 3 f 4 7 6 6 3 f 4 5 5 7 3 s 50 2 0 1 0 0 0 3 3 3 6 8 2 0 29 0 10 t 50 2 0 1 0 0 0 1 1 1 6 87 2 9 24 2 0 1 7 0 5 3 5 3 10 2 1 2 t 50 2 0 1 0 0 0 1 1 1 6 87 2 7 3 24 2 5 3 4 5 0 3 3 5 10 2 2 t 50 2 0 1 0 0 0 1 1 1 6 87 2 2 8 24 2 8 6 5 6 0 0 2 8 10 2 4 7 t 50 2 0 1 0 0 0 1 1 1 6 87 2 2 8 24 2 8 6 4 5 0 3 3 5 10 2 5 4 t 50 2 0 1 0 0 0 1 1 1 6 87 2 7 3 24 2 5 3 1 7 0 5 3 3 6 10 2 4 1 t 50 2 0 1 0 0 0 1 1 1 6 87 2 2 3 14 3 2 1 4 0 2 5 10 2 2 t 50 2 0 1 0 0 0 1 1 1 6 87 2 0 14 3 9 2 3 0 7 2 8 10 2 4 7 t 50 2 0 1 0 0 0 1 1 1 6 87 2 2 3 14 3 2 2 3 0 7 5 10 2 5 4 t 50 2 0 1 0 0 0 1 1 1 6 87 2 3 7 14 1 2 1 4 0 2 3 6 10 2 4 1 q 0 1 0 1 0 0 0 1 1 1 1 1 1 0 14 3 9 4 0 0 0 8 0 q 0 1 0 1 0 0 0 1 1 1 1 1 1 3 7 14 1 2 4 0 0 0 8 0 q 0 1 0 1 0 0 0 1 1 1 1 1 1 3 7 14 1 2 4 0 0 0 8 0 q 0 1 0 1 0 0 0 1 1 1 1 1 1 8 14 3 9 4 0 0 0 8 0 q 3 5 0 1 0 0 0 1 1 1 3 4 5 3 7 6 1 2 3 7 0 2 7 0 5 0 q 3 5 0 1 0 0 0 1 1 1 3 4 5 0 6 3 9 3 7 0 2 7 0 5 0 q 3 5 0 1 0 0 0 1 1 1 3 4 5 3 7 6 1 2 2 9 0 2 7 0 5 0 q 3 5 0 1 0 0 0 1 1 1 3 4 5 8 6 3 9 4 5 0 2 7 0 5 0 r 4 0 55 1 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 1 0 200 s 70 2 0 1 0 0 0 3 3 3 5 0 2 20 30 10 10 t 70 2 0 1 0 0 0 1 1 1 5 0 2 11 25 2 10 1 7 0 5 3 5 3 10 2 1 2 t 70 2 0 1 0 0 0 1 1 1 5 0 2 12 7 25 2 4 7 4 5 0 3 3 5 10 2 2 t 70 2 0 1 0 0 0 1 1 1 5 0 2 17 2 25 2 1 4 5 6 0 0 2 8 10 2 4 7 t 70 2 0 1 0 0 0 1 1 1 5 0 2 22 8 25 2 1 4 4 5 0 3 3 5 10 2 5 4 t 70 2 0 1 0 0 0 1 1 1 5 0 2 27 3 25 2 4 7 1 7 0 5 3 3 6 10 2 4 1 t 70 2 0 1 0 0 0 1 1 1 5 0 2 17 7 15 6 8 1 4 0 2 5 10 2 2 t 70 2 0 1 0 0 0 1 1 1 5 0 2 20 15 6 1 2 3 0 7 2 8 10 2 4 7 t 70 2 0 1 0 0 0 1 1 1 5 0 2 22 3 15 6 8 2 3 0 7 5 10 2 5 4 t 70 2 0 1 0 0 0 1 1 1 5 0 2 23 7 15 8 8 1 4 0 2 3 6 10 2 4 1 q 0 1 0 1 0 0 0 1 1 1 1 1 1 20 15 6 1 4 0 0 0 8 0 q 0 1 0 1 0 0 0 1 1 1 1 1 1 23 6 15 8 8 4 0 0 0 8 0 q 0 1 0 1 0 0 0 1 1 1 1 1 1 16 3 15 8 8 45 0 0 0 8 0 q 0 1 0 1 0 0 0 1 1 1 1 1 1 19 2 15 13 9 4 0 0 0 8 0 q 3 5 0 1 0 0 0 1 1 1 3 4 5 16 3 7 11 2 3 7 0 2 7 0 5 0 q 3 5 0 1 0 0 0 1 1 1 3 4 5 20 7 6 1 3 7 0 2 7 0 5 0 q 3 5 0 1 0 0 0 1 1 1 3 4 5 16 3 7 8 8 2 9 0 2 7 0 5 0 q 3 5 0 1 0 0 0 1 1 1 3 4 5 19 2 7 13 9 4 5 0 2 7 0 5 0 s 5 2 0 1 0 0 0 3 3 3 0 5 8 30 40 20 10 t 5 2 0 1 0 0 0 1 1 1 0 5 8 39 35 2 20 1 7 0 5 3 5 3 10 2 1 2 t 5 2 0 1 0 0 0 1 1 1 0 5 8 37 3 35 2 14 7 4 5 0 3 3 5 10 2 2 t 5 2 0 1 0 0 0 1 1 1 0 5 8 32 8 35 2 11 4 5 6 0 0 2 8 10 2 4 7 t 5 2 0 1 0 0 0 1 1 1 0 5 8 27 2 35 2 11 4 4 5 0 3 3 5 10 2 5 4 t 5 2 0 1 0 0 0 1 1 1 0 5 8 22 7 35 2 14 7 1 7 0 5 3 3 6 10 2 4 1 t 5 2 0 1 0 0 0 1 1 1 0 5 8 32 2 25 16 2 1 4 0 2 5 10 2 2 t 5 2 0 1 0 0 0 1 1 1 0 5 8 30 25 16 1 2 3 0 7 2 8 10 2 4 7 t 5 2 0 1 0 0 0 1 1 1 0 5 8 27 7 25 16 8 2 3 0 7 5 10 2 5 4 t 5 2 0 1 0 0 0 1 1 1 0 5 8 26 3 25 18 8 1 4 0 2 3 6 10 2 4 1 q 0 1 0 1 0 0 0 1 1 1 1 1 1 30 25 16 1 4 0 0 0 8 0 q 0 1 0 1 0 0 0 1 1 1 1 1 1 26 4 25 18 8 4 0 0 0 8 0 q 0 1 0 1 0 0 0 1 1 1 1 1 1 33 7 25 18 8 4 0 0 0 8 0 q 0 1 0 1 0 0 0 1 1 1 1 1 1 30 8 25 23 9 4 0 0 0 8 0 q 3 5 0 1 0 0 0 1 1 1 3 4 5 33 7 17 18 8 3 7 0 2 7 0 5 0 q 3 5 0 1 0 0 0 1 1 1 3 4 5 30 17 16 1 3 7 0 2 7 0 5 0 q 3 5 0 1 0 0 0 1 1 1 3 4 5 33 7 17 18 8 2 9 0 2 7 0 5 0 q 3 5 0 1 0 0 0 1 1 1 3 4 5 30 8 17 23 9 4 5 0 2 7 0 5 0 x 60 0 0 1 0 0 0 1 1 1 4 4 4 100 0 170 0 30 200 100 0 170 x 61 0 0 1 0 0 0 1 1 1 4 4 4 50 0 170 150 50 132 180 0 85 x 62 0 0 1 0 0 0 1 1 1 4 4 4 50 0 170 160 30 132 180 0 85 k 8 0 9 5 5 5 0 0 0 back to contents Eric Haines erich acm org Ray Tracing News Volume 3 Number 3 Ray Tracing News Volume 3 Number 3 Ray Tracing News Volume 3 Number 3 Ray Tracing News Volume 3 Number 3 Ray Tracing News Volume 3 Number 3 Ray Tracing News Volume 3 Number 3 Ray Tracing News Volume 3 Number 3 Ray Tracing News Volume 3 Number 3 Ray Tracing News Volume 3 Number 3 Ray Tracing News Volume 3 Number 3 http www acm org tog resources RTNews html rtnv3n3 html http www acm org tog resources RTNews html rtnv3n3 html http www acm org tog resources RTNews html rtnv3n3 html http www acm org tog resources RTNews html rtnv3n3 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv3n4.html%%==%%Ray Tracing News, Volume 3, Number 4%%==%%Ray Tracing News "Light Makes Right" October 1, 1990 Volume 3, Number 4 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%124792%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right October 1 1990 Volume 3 Number 4 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1990 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction New People Address Changes etc Photorealism and the color Pink TM from Andrew Glassner DKBTrace v2 0 and Ray Tracing BBS Announcement by David Buck Aaron Collins Article Summaries from Eurographics Workshop by Pete Shirley Convex Polyhedron Intersection via Kay Kajiya by Eric Haines New Radiosity Bibliography Available by Eric Haines A Suggestion for Speeding Up Shadow Testing Using Voxels by Andrew Pearce Real3d passed on by Juhana Kouhia Zap Andersson Utah Raster Toolkit Patch by Spencer Thomas NFF Shell Database by Thierry Leconte FTP list update and New Software by Eric Haines George Kyriazis Net News Cullings Humorous Anecdotes by J Eric Townsend Greg Richter Michael McCool Eric Haines Graphics Interface 91 CFP Parametric Surface Reference by Spencer Thomas Solid Light Sources Reference by Steve Hollasch Philip Schneider Graphics Gems Source Code Available by Andrew Glassner David Hook Graphics Gems Volume 2 CFP by Sari Kalin Foley Van Dam Feiner and Hughes Computer Graphics Bug Reports by Steve Feiner Radiosity via Ray Tracing by Pete Shirley Algorithm Order Discussion by Masataka Ohta Pete Shirley Point in Polygon One More Time by Mark Vandewettering Eric Haines Edward John Kalenda Richard Parent Sam Uselton Zap Andersson and Bruce Holloway Quadrant Counting Polygon In Out Testing by Craig Kolb Ken McElvain Computer Graphics Journals by Juhana Kouhia Introduction Well SIGGRAPH has come and gone and as usual I ran out of time There s just too many people to meet and too much to see and do Highlights for me included the SIGGRAPH Trivia Bowl meeting in a cemetery for lunch with other renderers after an all night session of Hurtenflurst don t ask and getting my head turned into data at Failure Analysis Associates still haven t heard from them though Does anyone have the phone number or address for this company I d like to call and find out what is happening with them At SIGBowl our Ithaca team was able to lock in third place of 3 teams early on and held it against all comers Nonetheless a great time one of many favorite moments was Pike the moderator Who s biographical sketch reads as follows BUZZ Team 1 with no other information Turner Whitted Pike No wrong Now let me read the question and proceeds to read some biographical data BUZZ Team 2 Is it Turner Whitted Pike Still wrong Team 3 sadly did not guess Turner Whitted but rather declined to answer Does anyone have a nice compact version of the Teapot That is just the spline description which I do have and a tessellator which will turn it into quads triangles which I have but it s deeply buried in some scary code This would be a nice addition to SPD 3 0 but I don t have one easily accessible Here s your chance to get your code distributed in the next release I m willing to massage your code into outputting NFF format I ll also announce that there is a new version of the ray tracing bibliography which I ve finished as of today Many of the new articles listed are due to the untiring work of Tom Wilson who says the librarians now hate him This new version should be available via FTP by October 5th on freedom graphics cornell edu and cs uoregon edu see the FTP site list later in this issue for more information Important dates Graphics Interface papers due October 31st Graphics Gems Volume 2 submissions due November 1st back to contents New People Address Changes etc Tom Wilson parallel ray tracing spatial subdivision Center for Parallel Computation Department of Computer Science 407 275 2341 University of Central Florida P O Box 25000 Orlando FL 32816 0362 alias tom wilson wilson ucf cs ucf edu I am a Ph D student at UCF I am working in the area of parallel processing with ray tracing as an application I am working on a nonuniform spatial subdivision scheme that will eventually be implemented on our BBN Butterfly GP1000 Steve Hollasch efficiency algorithms ray tracing Master s Student in C S Arizona State University 1437 West 6th Street Tempe AZ 85281 3205 602 829 8758 alias steve hollasch hollasch enuxha eas asu edu I m working on completing my thesis in December 1990 or January 1991 The research basically covers viewing 4D objects as physical entities not 3D scalar fields I m working on a 4D raytracer right now that handles hyperspheres and tetrahedrons and I hope to extend it to hyperellipsoids hypercones hypercylinders and so on I d also like to learn how to tessellate 4D solids with tetrahedrons to be able to view arbitrary 4D solids Practical uses I m still trying to think off something Christophe Vedel improving radiosity LIENS Ecole Normale Superieure 45 rue d Ulm 75230 PARIS Cedex 05 FRANCE 33 1 43 26 59 74 e mail vedel ens ens fr vedel FRULM63 BITNET I m interested in improving the radiosity method for finer results or larger scenes Spatial subdivision techniques developed for ray tracing should help to achieve this goal I m also working on interactivity with lighting simulation programs Frederic Asensio behavioral animation radiosity LIENS Ecole Normale Superieure 45 rue d Ulm 75230 PARIS Cedex 05 FRANCE 33 1 43 26 59 74 e mail asensio ens ens fr asensio FRULM63 BITNET I am interested in interactive radiosity methods which could be used in the design process and in stochastic methods for light sampling with rays Scott Senften efficiency scientific visualization McDonnell Douglas Corp McDonnell Aircraft Co Mail Code 1065485 St Louis MO 63166 314 232 1604 alias scott senften senften d314vx decnet mdc com alias senften tu senften tusun2 utulsa edu Presently I m doing research in neural nets There is a real need in the NN society for some good scientific visualization I m presently doing work in speech recognition diagnostics flight reconfiguration and signal processing as well as graphic visualization of neural networks My graduate work was in Ray Tracing efficiency Sam Uselton Internet uselton nas nasa gov Work Home Phone 415 604 3985 415 651 6504 USMail Samuel P Uselton PhD Sam Uselton Computer Sciences Corp M S T 045 1 1216 Austin St NASA Ames Research Center Fremont CA 94539 Moffett Field CA 94035 Ray Tracing interests efficiency accuracy distributed ray tracing parallel implementations At NASA I m working on volume visualization for computational fluid dynamics I ve used this as an excuse to write a ray caster no bounces that integrates through the volume accelerated by taking advantage of the special grids as well as an item buffer like initial hit finder I m also working with Redner Lee on extending our distributed ray tracing work to handle diffuse illumination caustics wavelength dependent refraction and other realistic effects Once these problems are completely solved there are several parallel machines here that I would like to wring out Oh yes we Lee Steve Stepoway Scott Senften and myself have yet another Acceleration technique we like better than any of the popular ones Actually it can combine with bounding boxes It is somewhere between regular space subdivision a la medical volume folks and Japanese SEADS and the bounding slabs idea Kaplan no Kay It was written and submitted for pub once but we keep thinking of new tweaks so it is being re written Juhana Kouhia Ylioppilaankatu 10 C 15 33720 Tampere Finland alias juhana kouhia jk87377 tut fi I have done my wireframe scanline and ray tracing programs with Jim Blinn s modeling language Another renderer with a last name starting with K There s Kajiya Kaplan Kay Kirk Kolb Kuchkuda Kyriazis just to mention a few EAH Michael L Kaufman speed ray tracing on a PC ray tracing fractal images Northwestern University 2247 Ridge Ave 2k Evanston IL 60201 708 864 7916 kaufman eecs nwu edu I am just getting started in Ray Tracing I am interested in coming up with algorithms that are fast enough to do on a 386 PC I am also interested in using Ray Tracing techniques as a new way of looking at certain types of fractal images Stephen Boyd Gowing light transmission motion art B App Sc Computing Undergraduate University of Technology Sydney 4 10 Short St Glebe 2037 AUSTRALIA home alias stephen gowing sbgowing ultima cs uts oz au I m currently half way through a project to study the effect of light passing through sphere s The eventual aim is to produce a short animation showing a single sphere inverting an image which breaks unmerges into two spheres one behind the other and study the flow of the image through them At the moment I am still rewriting the tracer I used for my 2nd last graphics assignment last year I d like to do it in C but this would make things awkward as we don t have access to a compiler I d also like to implement some sort of shading language into the image description probably using something like forth Rick Brownrigg efficiency texturing visualization DTM displays Kansas Geological Survey University of Kansas 1930 Constant Avenue Lawrence KS USA 66046 913 864 4991 Mail from Andrew Woo George Kyriazis Zap Andersson from Andrew Woo I have gone through many changes in the last year from graduating with a M Sc at University of Toronto to working at SAS Institute to working at Alias Research which is my current working address My e mail at Alias is awoo alias UUCP I checked out your latest RT News I think David Jevans was a little too hard on you about not knowing about the ray id for voxel traversal In fact in GI 90 one of the authors was unaware of it too in the Approximate Ray Tracing paper So you are not alone In fact there is an explicit mentioning of ray id in an early paper that David did not mention John Amanatides A Fast Voxel Traversal Algorithm for Ray Tracing EuroGraphics 1987 pp 1 10 On the claim that David Jevans made about wasting time on more intersection culling schemes I tend to agree In fact I have stopped looking for more clever ways to cull intersections But I intend to check out another route to ray tracing savings Once I get some promising results I will share the idea with you to avoid any embarrassments in case the idea backfires On renaming DIstributed Ray Tracing I am more of a fan of coming up with amusing acronyms for the algorithms For Cook s I thought DiRT might be interesting I also came up with an acronym for my paper in GI 90 Voxel Occlusion Method as an Intersection culling Technique which spells VOMIT from George Kyriazis I was reading the last RTN issue I received In there it states about a program that converts sculpt4d to NFF and it also commented that Sculpt4D is an exceptional modeler Well I have my doubts Last spring I was working on a program to raytrace Scultpt4D files and animations on a Pixel Machine Well the file format is far from being strait forward We had to call Byte by Byte for a few questions and stayed on the phone for more than an hour One of the Sculpt4D unwanted features was that it normalized the intensity of all displayed pixels wrt the brightest The result on the Pixel Machine was disastrous Images were either overexposed or totally black Well this is one of the problems faced but I don t want to list more back to contents Photorealism and the color Pink TM from Andrew Glassner From a Tektronix ad in this month s Advanced Imaging we learn that it is now possible to turn real photographs into photorealistic images presumably thereby increasing realism Traditional workstations can t handle reality They create a simulated world With Dynamic Visualization reality and simulation are brought together by TekImaging TM powerful image processing software and now the big one ag TekImaging lets you transform real world images into photo realistic scenes complete with light shadow and texture So now I can take a picture of myself and using their software make it look photo realistic and indistinguishable from a real picture what a breakthrough Beware of the colors you pick for your images Here s a footnote in an Owens Corning Fiberglas ad in this month s August Popular Science pg 21 The color Pink is a trademark of Owens Corning Fiberglas Corp I think I ll get a trademark on red before all the good colors are taken back to contents DKBTrace v2 0 and Ray Tracing BBS Announcement by David Buck Aaron Collins I recently completed version 2 0 of my freely distributable raytracer called DKBTrace This raytracer is a project I ve been working on actually off and on for the past five years The raytracer features primitives for spheres planes triangles and quadrics constructive solid geometry solid texturing using a Perlin style noise function image mapping IFF and GIF formats hierarchical bounding boxes transparency fog 24 bit output files adaptive anti aliasing using jittered supersampling quick previewing options The raytracer was developed on an Amiga computer but it is easily portable to other platforms The interface to the raytracer raytracer is a scripting language sorry no GUI The language is quite readable compared to many other input file formats The source and Amiga executables are available by anonymous FTP from alfred ccs carleton ca 134 117 1 1 The source and executables are freely distributable As with any raytracer there are still things that need to be done added or improved with DKBTrace The image mapping was added at the last minute so it only uses a simple projection scheme This means that the mappings look bizarre when viewed from the sides or the back For the most part however the solid textures are quite powerful and can create some very interesting effects To implement transparency I decided to add the transparency value value to the color structure A color contains red green blue and alpha components This makes it much easier to use in textures The textures also allow you to define your own color map and to have the colors automatically interpolated from one range to the next Interpolating the colours makes the images look much better than just a simple step function Questions and comments concerning the raytracer can be directed to David Buck Carleton CA on BITNET The IBM port and several enhancements were done by Aaron Collins Aaron can be reached on Compuserve DKBtrace dox info Aaron Collins can be reached on the following BBS es Lattice BBS 708 916 1200 The Information Exchange BBS 708 945 5575 Stillwaters BBS 708 403 2826 AAC As of July of 1990 there will be a Ray Trace specific BBS in the 708 Area Code Chicago suburbia for all you Traceaholics out there The phone number of this new BBS is 708 358 5611 I will be Co Sysop of that board There is also a new Ray Trace and Computer Generated Art specific SIG on Compuserve GO COMART And now back to the DOCS back to contents Article Summaries from Eurographics Workshop by Pete Shirley shirley iuvax cs indiana edu What follows are summaries of ray tracing related articles given during the Eurographics Workshop on Photosimulation Realism and Physics in Computer Graphics in Rennes France June 1990 EAH INCREMENTAL RAY TRACING by Murakami and Hirota Fujitsu A extension of Parameterized ray tracing that allowed moving some scene objects in addition to changing material properties Used tables of changed voxels to determine if a ray s interaction with geometry has changed Included implementation on multiple CPUs Also includes reference to a paper in Japanese by Matsumoto on Octree ray tracing in 1983 PARAMETRIC SURFACES AND RAY TRACING by Luc Biard IMAG France Like most parametric patch papers this one went over my head but it seems to be an interesting paper and includes some implementation results A PROGRESSIVE RAY TRACING BASED RADIOSITY WITH GENERAL REFLECTANCE FUNCTIONS by Le Saec and Schlick France A proposal for general BRDF radiosity very similar to what I propose in the paper above Also includes method for interactive display display only non mirrors until viewer stops then ray trace UNC style LIGHT SOURCES IN A RAY TRACING ENVIRONMENT by Roelens et al France A method for showing cone of light effect when there is not very dense participating media in a room primary scattering only METHODS FOR EFFICIENT SAMPLING OF ARBITRARILY DISTRIBUTED VOLUME DENSITIES by Hass and Sakas FRG Methods of sampling a volume density along a ray back to contents Convex Polyhedron Intersection via Kay Kajiya by Eric Haines I like Kay and Kajiya s bounding slabs method SIGGRAPH 86 a lot By thinking about how this algorithm actually works we can derive a method for intersecting convex polyhedra A working definition of a convex polyhedron is a polyhedron which can have at most two intersection points for any ray To review Their idea is to form a bounding volume around an object by making slabs A slab is the volume between two parallel planes The intersection of all slabs is the bounding volume i e the volume which is inside all slabs The intersection method works by intersecting each slab and checking out intersection conditions for it alone then comparing these results to the answer for previous slabs That is first we get the near and far intersection points for the ray with the slab If the far hit is behind the ray s origin i e negative distance or the near hit is beyond the maximum distance i e you might limit how far the ray can travel by keeping track of the closest object hit so far or the distance to the light if this is a shadow ray then the ray cannot hit the bounding volume If the near and far hits are within bounds then we essentially do a set operation of this line segment and any previous slab line segments formed For example if this is the second slab tested we try to find the overlap of the first slab s hits and this slab s hits If the two segments do not overlap then there is no point along the ray that is inside both slabs In other words there is no point inside the bounding volume since this volume is the logical intersection of all slabs To get the logical intersection of the slab segments we merely store the largest of the near hits and the smallest of the far hits If this largest near hit is greater than this smallest far hit there was no overlap between segments so the bounding volume is missed If near is less than far this new high near low far segment is used against successive slab segments If the ray survives all segment tests then the resulting near and far values are the distance along the ray of the near and far hits on the bounding volume itself What s interesting about this test is that it is essentially doing Constructive Solid Geometry operations between slabs similar to Roth 82 This simple idea can be extended further allowing you to quickly intersect convex polyhedra Another good feature is that the polyhedra can be defined entirely by the plane equations for the faces so no vertices have to be stored Imagine that you have defined a convex polyhedron by specifying each face using a plane equation Ax By Cz D 0 Have each face s normal A B C point outwards To intersect this object with a ray simply test the ray against each face if you hit a plane that faces towards the ray i e the dot product of the normal and the ray direction is negative then use this as a hit for near if you hit a plane facing away then use this as a hit for far Now instead of having a line segment for each slab you have an unbounded ray for each plane For example if you have a hit for a near distance i e you hit a forward facing plane then you would first check if this near is beyond your current maximum distance If not then you would store the maximum of this near value and the previous if any near value If at this point the stored near value is greater than the stored far value the ray has missed This process continues with each plane until you miss or you run out of planes The near and far points are then your intersection points with the polyhedron Essentially this process is an extension of Kay Kajiya the ray is tested against each face and the intersection point is used to form a segment which is unbounded infinite on one end This segment is tested for validity against the ray s segment and the polyhedron s current intersection segment If the polyhedron s segment is valid at the end of the process then the ray hit the polyhedron Basically each face of the polyhedron defines a half space in which the inside of the polyhedron must lay The intersection of these half spaces is the polyhedron itself One minor problem is what happens when the ray is parallel to the plane You could use Kay Kajiya s suggestion of using some epsilon for the divisor but I prefer handling this special case separately If parallel then we want to check if the ray origin is inside the half space if it is not then the ray cannot ever hit the polyhedron since the ray does not cross into the volume of valid intersections formed by this half space In other words if we substitute the origin into the plane equation the result of the expression must be negative for the point to be inside the half space if not the ray must miss the polyhedron The pseudo code note fixed 7 18 97 to follow my Graphics Gems II code Maxdist maximum distance allowed along ray Tnear MAXFLOAT Tfar MAXFLOAT For each plane in the polyhedron Compute intersection point T and sidedness dp ray direction DOT plane normal do ray origin DOT plane normal plane d If dp 0 ray is parallel to plane check if ray origin is inside plane s half space If do 0 ray is outside half space return MISSED Else ray not parallel T do dp If dp Tfar return MISSED If T Tnear Tnear T Normal plane normal Else back face T is a far point If T At the end Tnear is the intersection distance and Normal is the surface normal Tfar is the exit distance if needed If Tnear is That s it instead of laborious inside outside testing of the polygon on each face and storing all those vertices we have a quick plane test for each face If the number of planes is large it might have been better to store the polygons and use an efficiency scheme However the method above is certainly simpler to code up and is pretty efficient compact and robust for example there are no special edge intersection conditions as there are no edges An aside One thing that I hadn t mentioned is how we can better initialize the near and far hit distances before the slab tests It turns out that when testing bounding volumes we can set Tnear the near distance to 0 and Tfar to the maximum ray distance if any else set it to infinity This corresponds to the segment formed by the ray we consider points between 0 and the maximum ray distance to be valid points on the ray and so want to find slab segments that overlap this segment Note that these initial conditions gets rid of some complication for the algorithm we now don t have to test our slab segment against the ray s segment and the previous bounding volume segment but rather are always testing against a single segment which represents the intersection of both of these This idea is not in Kay Kajiya s presentation by the way Note that there is one change that occurs if you initialize the near and far distances in this way the near and far distances computed when a volume is hit will not yield the true surface intersections but rather will give the first and last points inside the volume This is useful for bounding volumes since we usually just want to know if we hit them and have some idea of the distance back to contents New Radiosity Bibliography Available by Eric Haines A bibliography of publications related to radiosity is now available at freedom graphics cornell edu 128 84 247 85 pub Radiosity It s a compressed package using refer format Articles related to radiosity or non classical rendering soft shadows caustics etc are included here This version is significantly improved from the version I posted some months ago Many thanks to all who helped update it back to contents A Suggestion for Speeding Up Shadow Testing Using Voxels by Andrew Pearce Requirements This method is applicable to any type of spatial subdivision It is probably best suited to those of us who tessellate our objects to ray trace them Method I ve expanded on Eric Haines method of storing the last object hit by a shadow ray with each light source I now save a pointer to the voxel which contains the last object hit or at least the voxel the intersection occurred in if the object spans multiple voxels My rationale is that if the shadow ray does NOT intersect the last object which shadowed that light source then the likelihood of it hitting something in the neighborhood of that same object is pretty good If we save the voxel which the shadowing occurred in for the previous ray we can examine the other objects in that voxel for possible light source occlusion WITHOUT the ray startup and voxel traversal costs Now this assumption is likely untrue if you re just tracing spheres and checker boards some slight intended but it works quite well for tessellated objects NURBS patches in my case I NULL my pointers to both the last object and last voxel if no shadow intersection was found on the last shadow ray to this light I store a ray id with every object to insure that any given ray is tested for intersection with an object ONLY ONCE even if it spans multiple voxels Each ray has a unique id I thought as did David Jevans that this was a well known technique So even if the shadow ray misses all of the objects in last voxel and must be traced like a regular shadow ray we are likely not losing much since if the shadow ray enters the last voxel during it s traversal of the voxels the ray will see that it has already been intersected with all of the objects in that voxel and that voxel will be skipped relatively quickly slightly slower than an empty voxel the time it takes to compare the ray ID against the ray ID stored with each object Pseudo code Obviously we cannot use the last object hit for transparent objects since multiple objects may be involved in the shadowing process The code outlined below assumes that we only store the last object and last voxel for shadow rays generated from a primary ray intersection What we really should have is a tree indicating what was hit at each level of recursion Ie What object shadowed the intersection point generated by the last refraction ray generated from a reflection ray generated by a primary ray float check shadowing ray light RAY REC ray ray from shading point to light source LIGHT REC light the light source we are interested in if light last object NULL intersect object marks object as having been intersected by this ray hit intersect object ray light last object object if hit return 1 0 full shadowing if light last voxel NULL implied hit intersect object in voxel for shadows returns hit TRUE on first affirmed intersection with a non transparent object It ignores transparent objects altogether hit intersect objects in voxel for shadows ray light last voxel object if hit light last object object return 1 0 traverse voxels for shadows DOES intersect transparent objects and sorts the intersections for proper attenuation of the light intensity If it hits multiple objects the object returned is the transparent one hit traverse voxels for shadows ray object voxel shadow percent if hit light last object light last voxel NULL return 0 0 if object transparency value 0 0 the object is transparent light last object light last voxel NULL else light last object object light last voxel voxel return shadow percent Results For the discussion below positive occlusion means we have guaranteed that the point we are shading is shadowed from the light source The last object hit method provided a positive occlusion 52 of the time and if the last object hit method did not provide positive occlusion the last voxel method provided a positive occlusion 76 of the time I performed a pixie of the code with and without this opt on an SGI Personal Iris with no other code changes or scene changes there is ONE light source in the scene which is casting shadows The ray tracer with the last voxel optimization used 2 fewer cycles Actual system times vary wildly based on load but the last voxel version did run about 10 faster using the UNIX times system call but I don t trust times Two percent doesn t seem like an awful lot but this is just a quick and dirty hack and I would expect to save 2 on EACH light source which casts shadows The test scene I m using is a snare drum with a shadow casting spotlight on it See IEEE Computer Graphics Applications Sept 1988 the cover story includes a tiny reproduction of the image should you wish to see what I m playing with although the image in CG A was done with a 2D projective renderer ray casting not ray tracing The reflections in the floor and on the chrome in that image were realised using two separate cubic environment maps the shadows were done with a depth map the wallpaper is a simple parametric map and the floor boards have 6 separate solid wood textures randomly assigned to them The test scene contains approximately 60 000 triangles and I m rendering at 512x512 resolution with no anti aliasing and a limit of one recursion level for both shadow and reflection rays for a total of 638 182 rays There is only one light in the scene which casts shadows I ll be doing tests on more scenes with various levels of voxel subdivision and object distribution I ll let you know the results even if they re negative The above results did surprise me a little Additional Note I urge anyone doing ray triangle intersections to use Didier Badouel s An Efficient Ray Polygon Intersection Graphics Gems pp 390 393 I have implemented both Badouel s method and Snyder Barr s barycentric method and Badouel s method is about 19 faster I optimized the snot out of my implementation of the barycentric method but I used most of those same opts in Badouel s method as well This result is from comparing the same scene ray traced with the two versions A second article followed some days later EAH More results from the voxel shadow optimization One thing I neglected to mention in the previous message was that you should be sure to NULL out your last object and last voxel hit pointers at the end of each scanline NEW TEST SCENES The test scenes producing the results below are 40x40x40 arrays of polygons each polygon is broken down into 8 triangles The polygons are distributed at unit distances from each other and then their orientations are jittered rotations and their positions are jittered translate of 1 to 1 Each polygon is roughly a unit in width and height The polygons are inside of a larger box the room with 15 shadow casting lights in a 5x3 array just below the ceiling There were no reflection or refraction rays generated All images were computed at 645x486 pixels with 4 supersamples per pixel Every intersection generated 15 shadow rays The sparse scene had every polygon scaled by 0 2 in all dimensions The resulting sparse image looks like an exploding particle system due mainly to the 145 degree field of view In the dense image almost no background can be seen CHART DESCRIPTION Last Voxel speed up refers to the percentage fewer cycles the last voxel method took to compute the same image Since this percentage is calculated based on the number of cycles the entire ray trace took it is an exact measure of the speed up Negative numbers mean that the last voxel method was slower It is important to note that file read tessellation and spatial subdivision time is included in the count of the cycles so the actual speed up to the ray tracing alone may be greater than is stated depending on how you want to measure things Average Hits Per Ray is included as a general measure of the density of the scene it is the number of confirmed ray triangle intersections divided by the total number of rays shadow rays included In the sparse scene it is less than one since most of the shadow rays made it to the light sources without hitting anything The dense scene is greater than one because some confirmed intersections are abandoned due to nearer intersections being found in the same voxel Average Hits Per Primary Ray is the number of confirmed ray triangle intersections divided by the number of primary eye rays Scene 64 000 jittered 64 000 jittered Description polygons 0 2 polygons 1 0 sparse dense Number of 551 408 551 408 Triangles Number of Shadow Casting 15 15 Lights Number of Rays 11 324 318 8 427 904 Last Object Success Rate 50 7 90 9 Last Voxel Success Rate 23 4 39 3 Last Voxel Speed Up 1 04 3 6 Average Hits Per Ray 0 265 1 001 Average Hits Per Primary 2 363 6 638 Ray It is encouraging that there is a speedup even in very sparse scenes however slight a speed up it is These random scenes are not very indicative of the type of scenes we are generally interested in ray tracing Really these scenes look like particle systems I can think of much better ways to render them with to produce similar images So here s the same chart for the snare drum with increasing numbers of lights The extra lights are scattered around the room and all point towards Spanky the snare drum Scene Snare 1 Snare 3 Snare 6 Description Shadow Shadow Shadow Light Lights Lights Number of 59 692 59 692 59 692 Triangles Number of Shadow Casting 1 3 6 Lights Number of Rays 638 182 1 097 569 1 737 021 Last Object Success Rate 52 6 89 0 88 7 Last Voxel Success Rate 76 3 77 0 76 9 Last Voxel Speed Up 1 97 3 37 4 39 Average Hits Per Ray 0 75 0 67 0 59 Average Hits Per Primary 1 84 2 84 3 94 Ray Well the speed up isn t quite 2 per light as I said in my previous article but it is there The last voxel trick has not slowed down the ray tracing process in any of these tests which is quite encouraging Another helpful hint if you are ray tracing tessellated or planar surfaces In general when spawning a shadow ray one must be careful to avoid intersecting the object just struck Usually this is done by adding some small epsilon to the origin of the shadow ray along it s direction of travel However if you store a ray id with every object triangle to record if that object has been tested against the current ray then you can use that id to avoid testing your shadow ray against the intersected object which generated the shadow ray Before spawning the shadow ray place the id number of the shadow ray into the ray id field of the object which has just been intersected This method won t work for objects which can self shadow eg parametric or implicit surfaces but it works fine for planar surfaces eg triangles from surface tessellations Andrew Pearce Alias Research Toronto like Downtown pearce alias csri utoronto ca pearce alias UUCP back to contents Real3d passed on by Juhana Kouhia jk87377 tut fi and Zap Andersson This was an advertisement on some amiga board Real 3D FEATURES Real 3D is design and animation program for producing high quality realistic pictures of three dimensional objects It provides an impressive set of advanced features including Ray Tracing A ray tracing of Real 3D is strongly based on the physical reality of the real world Real 3D produces pictures by simulating the laws of physics and consequently they represent reality with astonishing accuracy Speed Innovative methods and new ray tracing algorithms make Real 3D really fast When using fastest ray tracing mode rendering time is typically from 1 to 15 minutes Hierarchical With Real 3D you can create hierarchical objects Object This means that objects you create can be made of Oriented subobjects and these subobjects may have their Construction own substructure and so on This kind of a tree of Objects structure is well known in the context of disk operating systems in which you can create directories inside directories In Real 3D counterparts of these directories are used to collect objects into logical groups This kind of approach makes for example object modifications extremely easy because it is possible to perform operations to logical entities If you want to copy a DOS directory you don t have to take care of the files and directories inside it In the same manner you can stretch a complex object in Real 3D as easily as one part of it True Solid Real 3D includes a true solid modeler Solid model is the Model most sophisticated way to represent three dimensional objects This modeling technique requires much computing power and therefore it has earlier been used only in environments which are many times faster than Amiga Now it is possible to Amiga owners to reach all the advantages of solid model thanks to ultimate optimizations carried out when developing Real 3D Smoothly Curved In addition to plane surfaces Real 3D includes several Surfaces curved surfaces such as ball cylinder cone and hyperboloid This means that no matter how much you enlarge a ball created by Real 3D you don t find any edges or corners on its surface Furthermore this makes the program much faster And what is most important the produced pictures look really good Boolean Solid model allows Boolean operations between objects Operations It is possible for example to split an object into two pieces and move the pieces apart so that the inner structure of the object is revealed Operations can also be done so that the properties of the material of the target object are changed By using a brilliant cylinder one can drill a brilliant hole into a matt object Operations are a powerful way to create and modify objects Especially in modeling technical objects these Boolean operations are indispensable Properties of A user of Real 3D is not restricted to use some basic Surfaces surface brilliancies such as matt or shiny Instead the light reflection properties can be freely adjusted from absolute matt to totally mirrorlike precisely to the desired level Properties of Due to solid model it is possible to create objects Materials from different materials which have suitable physical properties Just as surface brilliancy also transparency of a material can be adjusted without any restrictions Even light refraction properties are freely adjustable so that it is possible to create optical devices from glass lenses These devices act precisely as their real counterparts a magnifying glass in Real 3D world really magnifies Texture Mapping The texture mapping properties of Real 3D are not restricted to a typical chequered pattern Any IFF picture can be used to paint objects You can create pictures with your favorite painting program as well as with a video digitizer or a scanner For example by digitizing a wood filament pattern it is easy to create wooden objects looking very realistic Pictures can be located precisely to desired places with desired sizes and directions Real 3D offers as many as seven texture mapping methods including parallel cylinder ball and spiral projections Light Sources Unlimited number of light sources of desired color and brightness The only restriction is amount of memory Animation As well as you can create single pictures you can Support create series of pictures animations Real 3D includes also software for representing these animations interactively Animation representation can be directed by a script language from ascii files or even from keyboard Instead of looping animations you can define infinitely many ways to represent your pictures Therefore you can create animations from a small number of pictures by displaying them various ways Rendering Real 3D includes several different rendering techniques Techniques a real time wireframe model a hidden line wireframe model a high speed one light source ray tracing model a non shadow casting ray tracing model and a perfect ray tracing model You can select either a HAM display mode with 4096 colors or a grey scale display mode offering higher resolution Also version with 16 million color rendering 24 bits output will become available during November 1990 Availability When writing this document 6 9 1990 marketing of Real 3D is already started in Europe with a little lower price than that of Sculpt 4D The distribution in the USA is not yet arranged For further information of Real 3D please contact REALSOFT KY KP 9 SF 35700 VILPPULA FINLAND Tel 358 34 48390 from Zap Andersson REAL3d member that is available in Sweden at least from KARLBERG KARLBERG AB FLADIE KYRKOVAEG S 23700 BJARRED SWEDEN Phone 46 0 46 47450 Phax 46 0 46 47120 back to contents Utah Raster Toolkit Patch by Spencer Thomas The first patch for the Utah Raster Toolkit version 3 0 is now available The patch file is urt 3 0 patch1 and is currently available from cs utah edu and freebie engin umich edu and will soon be available from our other archive sites depending on how quickly the archive maintainers grab the patch file There are also slight changes to the files urt img tar and urt doc tar in particular if you had trouble printing doc rle ps this is fixed p s there was also a fix to a getx11 bug for the Sun 4 which is pub urt SUNOS4 1 patch tar Z on freebie and weedeater EAH Here is the description from the patch file Fixed core dump in rletogif compile warnings in giftorle Minor update bug in getx11 fixed getx11 now exits if all its input files are bogus New program rlestereo combines two images left and right eye into a red blue or green stereo pair Configuration file for Interactive Systems 386 ix Minor fix to rleskel ignore trailing garbage in an input image And the list of the current archive sites from the urt README file in the ftp directory North America East coast weedeater math yale edu 130 132 23 17 pub Midwest freebie engin umich edu 35 2 68 23 pub West cs utah edu 128 110 4 21 pub Europe Sweden alcazar cd chalmers se 129 16 48 100 pub urt urt 3 0 tar Z maeglin mt luth se 130 240 0 25 pub Utah raster Australia ftp adelaide edu au 129 127 40 3 pub URT or if you know what this means Fetchfile sirius ua oz in URT Spencer W Thomas EECS Dept U of Michigan Ann Arbor MI 48109 spencer eecs umich edu 313 936 2616 8 6 E SD T M F back to contents NFF Shell Database by Thierry Leconte Thierry Leconte irisa fr Below is Thierry Leconte s code for an NFF version of the seashell generator I listed last issue He added some reasonable lights and a view which I was too lazy to do I ll probably add it to the 3 0 version of the SPD Setting steps is similar to an SPD SIZE FACTOR type control You ll need the SPD to compile and link this program EAH include include include def h include lib h main argc argv int argc char argv static double gamma 1 0 0 01 to 3 static double alpha 1 1 1 static double beta 2 0 2 static int steps 600 number of spheres generated static double a 0 15 exponent constant static double k 1 0 relative size double r x y z rad angle int i COORD4 back color obj color COORD4 center light COORD4 from at up COORD4 sphere define OUTPUT FORMAT OUTPUT CURVES output viewpoint SET COORD from 6 60 35 SET COORD at 0 0 8 0 15 0 SET COORD up 0 0 0 0 1 0 lib output viewpoint from at up 45 0 0 5 512 512 output background color UNC sky blue SET COORD back color 0 078 0 361 0 753 lib output background color back color output light sources SET COORD light 100 0 100 0 100 0 lib output light light set up sphere color SET COORD obj color 1 0 0 8 0 4 lib output color obj color 0 8 0 2 100 0 0 0 1 0 for i steps 2 3 i back to contents FTP list update and New Software by Eric Haines George Kyriazis I posted my FTP site list for ray tracing related stuff and a few people were nice enough to write and update this list The new list is posted after this note from George Kyriazis at RPI his site has the friendliest login I ve ever seen iear arts rpi edu 128 113 6 10 There was an article in IEEE CG A a while ago from Sandia National Labs the guy s name was Mareda I think that uses fourier transforms and digital filters to create wave height fields from white noise What I have in the directory is an implementation of this algorithm and a program that raytraces it on the AT T Pixel Machine A list of what exists in there follows graphics gems source code to Glassner s Graphics Gems book ray tracing news What else wave Rendering of ocean waves using fft Mareda et al coldith conversion from my image format to sun rasterfiles and dithering from 32 or 24 bit 8 bit rasterfiles drt A ray tracer from the Netherlands by Marinko Laban gk A distributed raytracer by me microray DBW uRAY by David Wecker mtv Well you know what this is It probably is an old version non completed OO modeler Something I was working on It barely works but I put it out there just for the fun of it ohta Masataka Ohta s constant time ray tracer with a few improvements pxm and vmpxm ray etc Two raytracers for the AT T Pixel Machine The second one uses some virtual memory code to store more objects The VM source is included also qrt Well QRT rayshade Rayshade 2 21 by Craig Kolb I hope I ll have a few anonymous ftp sessions after this Corrected FTP site list for ray tracing related material weedeater math yale edu 130 132 23 17 pub Rayshade 3 0 ray tracer color quantization code RT News new Utah raster toolkit newer FBM Graphics Gems code Craig Kolb kolb yale edu cs uoregon edu 128 223 4 13 pub MTV ray tracer RT News RT bibliography other raytracers including RayShade QRT VM pRAY SPD NFF OFF objects musgrave papers some Netlib polyhedra Roy Hall book source code Hershey fonts old FBM Mark VandeWettering markv acm princeton edu hanauma stanford edu 36 51 0 16 pub graphics Comp graphics best of comp graphics very extensive ray tracers DBW MTV QRT and more Joe Dellinger joe hanauma stanford edu freedom graphics cornell edu 128 84 247 85 RT News back issues source code from Roy Hall s book Illumination and Color in Computer Generated Imagery SPD package Heckbert Haines ray tracing article bibliography Muuss timing papers CURRENTLY NOT AVAILABLE alfred ccs carleton ca 134 117 1 1 pub dkbtrace DKB ray tracer David Buck david buck carleton ca uunet uu net 192 48 96 2 graphics RT News back issues not complete other graphics related material iear arts rpi edu 128 113 6 10 pub Kyriazis stochastic Ray Tracer qrt Ohta s ray tracer other RT s including one for the AT T Pixel Machine RT News Graphics Gems wave ray tracing using digital filter method George Kyriazis kyriazis turing cs rpi edu life pawl rpi edu 128 113 10 2 pub ray Kyriazis stochastic Ray Tracer George Kyriazis kyriazis turing cs rpi edu xanth cs odu edu 128 82 8 1 amiga dbw zoo DBW Render for the Amiga zoo format Tad Guy tadguy cs odu edu munnari oz au 128 250 1 21 pub graphics vort tar Z CSG and algebraic surface ray tracer pub DBW pbmplus David Hook dgh munnari oz au cs utah edu 128 110 4 21 pub Utah raster toolkit Spencer Thomas thomas cs utah edu gatekeeper dec com 16 1 0 2 pub DEC off tar Z OFF objects pub misc graf bib graphics bibliographies incomplete Randi Rost rost granite dec com abcfd20 larc nasa gov 128 155 23 64 amiga DBW usenet comp sources binaries amiga volume90 applications DKBTrace 2 01 Tad Guy tadguy cs odu edu expo lcs mit edu 18 30 0 212 contrib pbm tar Z portable bitmap package poskbitmaptars bitmap collection Raveling Img xloadimage Jef Poskanzer jef well sf ca us venera isi edu 128 9 0 32 pub Img tar z and img tar z some image manipulation pub images RGB separation photos Paul Raveling raveling venera isi edu ftp ee lbl gov 128 3 254 68 pbmplus tar Z ucsd edu 128 54 16 1 graphics utah rle toolkit pbmplus fbm databases MTV DBW and other ray tracers world map other stuff Not updated much recently okeeffe berkeley edu 128 32 130 3 pub TIFF software and pics Sam Leffler sam okeeffe berkeley edu irisa fr 131 254 2 3 iPSC2 VM pRAY ray tracer NFF many non SPD NFF format scenes Didier Badouel badouel irisa irisa fr surya waterloo edu 129 97 129 72 graphics FBM ray tracers vega hut fi 128 214 3 82 graphics RTN archive ray tracers MTV QRT others NFF some models netlib automatic mail replier UUCP research netlib Internet netlib ornl gov SPD package polyhedra databases Send one line message send index for more info UUCP archive avatar RT News back issues For details write Kory Hamzeh kory avatar avatar com USENET cullings follow Humorous Anecdotes by J Eric Townsend Greg Richter Michael McCool Eric Haines from J Eric Townsend jet uh edu Went to lunch with a good but non technical friend of mine the other day On the way home we were talking about what a nice day it was for lying around and reading She mentioned that she d gotten a Joyce Carol Oates book I was looking for and was going to read it I said I wish I had time to read something fun but I ve got to read some more ray tracing today for my special problems class She said Ray Tracing Who s that I don t think I ve heard of him She thought it was funny only after I stopped laughing and took a few minutes to explain it to her Tomorrow I think I m going to add a second name to my door we have slots for two as most RA s share offices Ray Tracing from Greg Richter emory gatech bluemtn greg We had a similar incident with a new secretary who informed me that a salesman had called asking about our Gator Rays She wanted to know if we were involved in animal testing from Michael McCool mccool dgp toronto edu She said Ray Tracing Who s that I don t think I ve heard of him For some reason the term seems to collect fun At SIGGRAPH in Dallas this year the Ray tracing course organizers Glassner Arvo kept bringing up the related fields of rat racing and tray racing Last SIGGRAPH there was a tutorial video on tray racing that was shown it involved sliding trays down stairs and gave examples of acceleration techniques etc One wonders from Eric Haines And don t forget the t shirt a number of Canadians Calgarians I think had them on There s a picture of a nerdy guy holding a pencil and kneeling over a man laying on the ground covered with a sheet of paper The entire figure is labeled Ray Tracing The caption Okee dokee Ray here comes Mr Pencil John Wallace also mentioned to me seeing a poster in Denver of jewels with the words Ray Tracy below as this was the jeweller s name For those who ve moved from graduate work to the world of business a slogan Once I was a ray tracer now I m a rat racer I received the Spherical Aberration award from Andrew Glassner Jim Arvo for helping organize various ray tracing things The award was a glass sphere on a wooden base It sat on my office windowsill until I moved to a new office one day Looking at the award I noticed black marks at the base The sphere had acted like a crummy luckily magnifying glass and burnt grooves in the wood It was interesting to see how the marks seemed to correspond to the movement of the sun and the seasons Anyway the moral is Caustics can be dangerous after all why do you think they call them caustic back to contents G r a p h i c s I n t e r f a c e 9 1 Calgary Alberta Canada 3 7 June 1991 CALL FOR PARTICIPATION Graphics Interface 91 is the seventeenth Canadian Conference devoted to computer graphics and interactive techniques and is the oldest regularly scheduled computer graphics conference in the world Now an annual conference film festival and tutorials Graphics Interface has established a reputation for a high quality technical program The 1991 conference will be held in Calgary Alberta June 3 7 1991 in conjunction with Vision Interface 91 Graphics Interface 91 is sponsored by the Canadian Man Computer Communications Society IMPORTANT DATES Four copies of a Full Paper due 31 Oct 1990 N O T E Tutorial Proposals due 15 Nov 1990 Authors Notified 1 Feb 1991 Cover Submissions due 1 Feb 1991 Final Paper due 29 Mar 1991 Electronic Theatre Submissions due 1 May 1991 TOPICS Contributions are solicited describing unpublished research results and applications experience in graphics including but not restricted to the following areas Image Synthesis Realism User Interface Shading Rendering Algorithms Windowing Systems Geometric Modeling Computer Cartography Computer Animation Image Processing Interactive Techniques Medical Graphics Graphics for CAD CAM Graphics in Education Computer Aided Building Design Graphics the Arts Industrial Robotics Applications Visualization Graphics in Business Graphics in Simulation Four copies of full papers should be submitted to the Program Chairman before Oct 31 1990 Include with the paper full names addresses phone numbers fax numbers and electronic mail addresses of all the authors One author should be designated contact author all subsequent correspondence regarding the paper will be directed to the contact author The other addresses are required for follow up conference mailings including the preliminary program FOR GENERAL INFORMATION SUBMIT PAPERS TO Wayne A Davis Brian Wyvill GI 91 General Chairman GI 91 Program Chairman Department of Computing Science Department of Computer Science University of Alberta University of Calgary Edmonton Alberta Canada Calgary Alberta Canada T6G 2H1 T2N 1N1 Tel 403 492 3976 Tel 403 220 6009 EMail usersams ualtamts bitnet EMail blob cpsc ucalgary ca There are often a fair number of papers on ray tracing at this conference vs maybe one at SIGGRAPH so it is a good place to consider submitting RT research EAH back to contents Parametric Surface Reference by Spencer Thomas In article 3632 26f78d3f cc curtin edu au Kessells SR cc curtin edu au writes Can someone please tell me where I can find an algorithm for finding the intersection of a ray and a Bezier and or B Spline patch You might look at Lischinski and Gonczarowski Improved techniques for ray tracing parametric surfaces Visual Computer Vol 6 No 3 June 1990 pp 134 152 Besides having an interesting technique they refer to most of the other relevant work This entire issue is dedicated to ray tracing and is worth checking out EAH Spencer W Thomas EECS Dept U of Michigan Ann Arbor MI 48109 spencer eecs umich edu 313 936 2616 8 6 E SD T M F back to contents Solid Light Sources Reference by Steve Hollasch Philip Schneider from comp graphics Steve Hollasch hollasch enuxha eas asu edu writes How do raytracers make light sources out of arbitrary objects I thought a while back that one approach would be to find the direction to the object from the illuminated point fire a random cone of rays at the object and assign some fraction of the object s light to the point for each unobstructed ray The main drawback of this approach as I see it is that it would yield a mottled illuminated area and the mottling would vary in a random manner About five minutes ago I had an idea for another approach Find the 2D bounding box from the illuminated point s view of the illuminating object From this box get the two orthogonal basis vectors Now subdivide this bounding box using the basis vectors just as you would the original raytrace grid For each light ray fired determine if the ray intersects the illuminating object If it does increment the silhouette counter If the light ray intersects no other object then increment the light counter Once done the light that shines on the illuminated point is light counter silhouette counter object light This technique would also lend itself to numerous optimizations For example if you assume that all light objects cast a convex silhouette then you could use binary search techniques to locate the edges of the silhouette That is you can assume that all scan lines will be runs of space silhouette space intersections hone in on the edges and then multiply the resulting silhouette width by the scanline height to get the relative area Is there a better way to do this I haven t come across this problem in any of the graphics texts I ve read Philip Schneider pjs decwrl dec com replies Get in touch with the University of Washington Department of Computer Science Two or three years ago Dan O Donnell wrote an M S thesis on what he called solid light sources Sorry my copy is in a box right now so I don t recall the exact title Real nice work as I recall and the resulting pictures were pretty interesting one of them featured a coffee mug with steam rising from it that turned into a glowing neon sign light formed into the shape of the word Espresso of course I m biased from having worked alongside him at the UW graphics lab Philip J Schneider DEC Advanced Technology Development Has anyone seen this thesis Could you give me an exact reference for the Ray Tracing Bibliography EAH back to contents Graphics Gems Source Code Available by Andrew Glassner David Hook As many readers of the usenet are aware at Siggraph 90 Academic Press released a new book Graphics Gems edited by Andrew Glassner published by Academic Press Cambridge MA 864 pp 49 95 ISBN 0 12 286165 5 The book is a compilation of many people s work showing how they solved important problems in computer graphics Many of the Gems are realized with ready to run C implementations presented in two appendices The authors and the publisher are pleased to release this source code to the public domain neither the authors nor publisher hold any copyright restrictions on any of these files The code is freely available to the entire computer graphics community for study use and modification We do request that the comment at the top of each file identifying the original author and the program s original publication in the book Graphics Gems be retained in all programs that use these files Each Gem is made available on an as is basis although considerable effort has been expended to check the programs as originally designed and their current release in electronic form the authors and the publisher make no guarantees about the correctness of any of these programs or algorithms All source files in the book are now available via anonymous ftp from site weedeater math yale edu To download the files connect to this site with an ftp program For user name type the word anonymous for password enter your last name When you are logged in type cd pub GraphicsGems src Each program from the book is stored in its own plaintext file I suggest you first download the file README type get README then quit ftp and open the file with any text editor among other things it describes how to download the rest of the directory identifies the administrator of the site who will collect bug reports etc and provides a table of contents so you can identify the source files with their corresponding Gems We have enjoyed putting this book together It was a pleasure for me to work with the many talented people who contributed to the success of this project A central theme of the book s philosophy was for the results to be practical and useful public release of the source code is a happy result of this philosophy shared by the authors editor and publisher We all hope this free source code is a useful resource for programmers everywhere From David Hook AARnet ACSnet sites can now obtain GraphicGems source code from gondwana ecr mu oz au 128 250 1 63 via anonymous ftp in pub GraphicsGems or through fetchfile for a general info file do a fetchfile dgondwana ecr mu oz pub GraphicsGems GEMS INFO and for a general listing fetchfile dgondwana ecr mu oz LV pub Please note this is a clone site of the GraphicsGems code at weedeater math yale edu and bug reports etc should still be forward to the administrators there Their addresses are listed in the GEMS INFO and README files I felt the following was a good way to summarize much of what Graphics Gems has in it It s excellent highly recommended no I don t have anything in it Andrew Woo s trick for a quick rejection test on polygons gave me a few percent speedup on intersecting these for example Oddly enough I had tried his idea earlier Kells Elmquist independently discovered it here but didn t get much speedup Seeing it in print made me try it again but this time on a variety of databases This time it gave some speed up the first time I tried it on a database particularly ill suited for performance improvement Finding out that someone else had used it successfully encouraged me to explore further What s his trick You ll have to see the book EAH The table below gives the correspondence between each source file in this directory and the name of the Gem it implements Each implementation illustrates one way to realize the techniques described by the accompanying Gem in the book The files here contain only the source code for that realization For a more complete description of the algorithms and their applications see the Gems of the same name in the first 11 Chapters of the book header files GraphicsGems h Graphics Gems C Header File C code 2DClip Two Dimensional Clipping A Vector Based Approach AALines Rendering Anti Aliased Lines AAPolyScan c Fast Anti Aliasing Polygon Scan Conversion Albers c Albers Equal Area Conic Map Projection BinRec c Recording Animation in Binary Order For Progressive Temporal Refinement BoundSphere c An Efficient Bounding Sphere BoxSphere c A Simple Method for Box Sphere Intersection Checking CircleRect c Fast Circle Rectangle Intersection Checking ConcaveScan c Concave Polygon Scan Conversion DigitalLine c Digital Line Drawing Dissolve c A Digital Dissolve Effect DoubleLine c Symmetric Double Step Line Algorithm FastJitter c Efficient Generation of Sampling Jitter Using Look up Tables FitCurves c An Algorithm for Automatically Fitting Digitized Curves FixedTrig c Fixed Point Trigonometry with CORDIC Iterations Forms c Forms Vectors and Transforms GGVecLib c 2D And 3D Vector C Library HSLtoRGB c A Fast HSL to RGB Transform Hash3D c 3D Grid Hashing Function HypotApprox c A Fast Approximation to the Hypotenuse Interleave c Bit Interleaving for Quad or Octrees Label c Nice Numbers for Graph Labels LineEdge c Fast Line Edge Intersections On A Uniform Grid MatrixInvert c Matrix Inversion MatrixOrtho c Matrix Orthogonalization MatrixPost c Efficient Post Concatenation of Transformation Matrices Median c Median Finding on a 3x3 Grid NearestPoint c Solving the Nearest Point On Curve Problem and A Bezier Curve Based Root Finder OrderDither c Ordered Dithering PixelInteger c Proper Treatment of Pixels As Integers PntOnLine c A Fast 2D Point On Line Test PolyScan Generic Convex Polygon Scan Conversion and Clipping Quaternions c Using Quaternions for Coding 3D Transformations RGBTo4Bits c Mapping RGB Triples Onto Four Bits RayBox c Fast Ray Box Intersection RayPolygon c An Efficient Ray Polygon Intersection Roots3And4 c Cubic and Quartic Roots SeedFill c A Seed Fill Algorithm SquareRoot c A High Speed Low Precision Square Root Sturm Using Sturm Sequences to Bracket Real Roots of Polynomial Equations TransBox c Transforming Axis Aligned Bounding Boxes TriPoints c Generating Random Points In Triangles ViewTrans c 3D Viewing and Rotation Using Orthonormal Bases back to contents Graphics Gems Volume 2 CFP by Sari Kalin This is a quick note to let everyone know that Academic Press will be publishing a sequel to the book GRAPHICS GEMS edited by Andrew Glassner Since Andrew decided to take a breather from editing books I ll be doing the honors this time around So if you re interested in contributing a clever graphics algorithm or insight i e a Gem to the new volume contact Sari Kalin the editor at Academic Press and she ll send you an author s packet Here s the address Sari Kalin Academic Press 955 Massachusetts Ave Cambridge MA 02139 tel 617 876 3901 email cdp skalin labrea stanford edu AP wants to get the book out by SIGGRAPH 91 so that means the schedule is tight The submission deadline for first drafts is November 1 1990 so don t delay Also I m sure AP would appreciate hearing any comments you might have about the first volume back to contents Foley Van Dam Feiner and Hughes Computer Graphics Bug Reports by Steve Feiner Sender feiner cs columbia edu Steven Feiner Organization Columbia University Dept of CS We re in the process of setting up a separate email account to make it easy to report bugs suggest changes and obtain a copy of the bug list for Computer Graphics Principles and Practice 2nd Ed by Foley van Dam Feiner and Hughes Since Dave Sklar the person who is setting up the account is also busting to get the versions of the book s SRGP and SPHIGS graphics packages ready for their SIGGRAPH demos the email account won t be available until after SIGGRAPH We ll post details as soon as it s up Meanwhile here are fixes for some dangling references and a missing exercise all of which had been devoured by a hungry gremlin 1 Dangling references FIUM89 Fiume E L The Mathematical Structure of Raster Graphics Academic Press San Diego 1989 FOUR88 Fournier A and D Fussell On the Power of the Frame Buffer ACM TOG 7 2 April 1988 103 128 HUBS82 Hubschman H and S W Zucker Frame To Frame Coherence and the Hidden Surface Computation Constraints for a Convex World ACM TOG 1 2 April 1982 129 162 The bibliography includes HUBS81 the SIGGRAPH 81 paper on which HUBS82 was based SNYD87 Snyder J M and A H Barr Ray Tracing Complex Models Containing Surface Tessellations SIGGRAPH 87 119 128 TAMM82 Tamminen M and R Sulonen The EXCELL Method for Efficient Geometric Access to Data in Proc 19th ACM IEEE Design Automation Conf Las Vegas June 14 16 1982 345 351 2 A missing exercise 15 25 If you have implemented the z buffer algorithm then add hit detection to it by extending the pick window approach described in Section 7 12 2 to take visible surface determination into account You will need a SetPickMode procedure that is passed a mode flag indicating whether objects are to be drawn drawing mode or instead tested for hits pick mode A SetPickWindow procedure will let the user set a rectangular pick window The z buffer must already have been filled by drawing all objects for pick mode to work When in pick mode neither the frame buffer nor the z buffer is updated but the z value of each of the primitive s pixels that falls inside the pick window is compared with the corresponding value in the z buffer If the new value would have caused the primitive to be drawn in drawing mode then a flag is set The flag can be inquired by calling InquirePick which then resets the flag If InquirePick is called after each primitive s routine is called in pick mode picking can be done on a per primitive basis Show how you can use InquirePick to determine which object is actually visible at a pixel Steve Feiner feiner cs columbia edu back to contents Radiosity via Ray Tracing by Pete Shirley shirley iuvax cs indiana edu from comp graphics kaufman delta eecs nwu edu Michael L Kaufman writes This may be a stupid question but why can t radiosity be handled by ray tracers Also are there any archives that contain code papers on radiosity that I can learn from Michael Ray Tracers can indeed do radiosity Check out the Sillion and Puech paper or the Wallace et al paper in Siggraph 89 Also the Airey et al paper in proceedings of the symposium of Interactive 3D graphics Computer Graphics 24 2 and my Graphics Interface 90 paper Also Heckbert s Siggraph 90 paper If all you want is a brute force radiosity code and this code works pretty well then start with N polygons Each polygon will have reflectivity Ri and will emit power Ei Assume you want to send R rays on the first pass We will now do what amounts to physical simulation T 0 T is total emitted power For i 1 to N Ui Ei Ui is unsent power Pi Ei Pi is total power estimate T T Ei dP T R dP is the approximate power carried by each ray For b 1 to NumReflections For i 1 to N r int Ui dP patch i will send power Ui in r rays dPi Ui r Ui 0 for j 1 to r choose random direction with cosine weighting and send ray with until it hits polygon p see Ward et al Siggraph 88 paper equation 2 p 87 Up Up Rp dPi Pp Pp Rp dPi Once this is done we will have the power Pi coming from each surface Now we should convert to radiance see my GI 90 paper or Kajiya s Course notes in Siggraph 90 Advanced RT notes For i 1 to N Li Pi pi Ai Li is radiance pi is 3 14 Ai is area This ignores interpolation to polygon vertices to give a smooth image see Cohen Greenberg siggraph 85 figure 8A You might also want to check out Ward et al s Siggraph 88 paper Not true radiosity but is ray tracing based and has some of the best features of ray tracing methods If your scene is all diffuse that method may be the way to go back to contents Algorithm Order Discussion by Masataka Ohta Pete Shirley In article 1150 mti mti com adrian mti UUCP Adrian McCarthy writes Rather than using recursive or hierarchical spatial subdivision techniques to reduce ray object intersection tests which are of O log n algorithms Can you prove it I think but can t prove hierarchical spatial subdivision is only O n 1 3 many instances can use a surface map for a single bounding volume as a lookup table to immediately determine a small subset of objects to test which is truly of O 1 Small subset here is roughly equivalent to the set of objects in the smallest volume in a comparable hierarchical scheme I already published an O 1 ray tracing algorithm See An introduction to RAY TRACING edited by Andrew S Glassner Academic Press 6 3 The Ray Coherence Algorithm page 232 234 or Computer Graphics 1987 Proc of CG International 87 page 303 314 Ray Coherence Theorem and constant time ray tracing algorithm Judging from the above brief description of your algorithm it may be similar or identical to mine It s not general Hmmm mine is general Kaplan also has claimed a constant time algorithm I don t believe that his is constant time it like an octree is a divide and conquer search so it will AT BEST be O logN it takes O logN time to travel down the height of a tree I don t really see how we can even say what the big O of a ray intersection is without precisely stating what rays are allowed on what geometry For example suppose I set up N epsilon radius spheres in random locations within a cube where epsilon is small In the typical case a ray might come close to many spheres If an octree is used the candidate sets of many leaves might be checked worse than O logN If all of the spheres have the same center how can any scheme get a candidate set for a ray through the center that doesn t include all spheres This would be O NlogN for an octree and O N optimally How would your method be O 1 It seems that often we have good algorithm behavior in practice with pathological cases giving terrible big Os Perhaps we can bound the set of scenes somehow Ohta replies Kaplan also has claimed a constant time algorithm I don t believe that his is constant time I agree with you I know what is O 1 I don t really see how we can even say what the big O of a ray intersection is without precisely stating what rays are allowed on what geometry Well it is assumed that ray object intersection calculation takes only constant time That is to ray trace a surface defined by N th degree polynominal in constant time regardless to N is just impossible For example suppose I set up N epsilon radius spheres in random locations within a cube where epsilon is small In the typical case a ray might come close to many spheres If an octree is used the candidate sets of many leaves might be checked worse than O logN If all of the spheres have the same center how can any scheme get a candidate set for a ray through ythe center that doesn t include all spheres This would be O NlogN for an octree and O N optimally How would your method be O 1 Good question But first we should make it clear what is constant time ray tracing As for the per scene complexity no algorithm including your first example can be better than O N just because of input complexity reading all the input takes O N time So we should talk about complexity to trace a single ray My algorithm may consume possibly long and computationally complex pre processing time to analyze a scene But the important fact is that the time for pre processing is dependent only on the scene and not on the number of rays And after pre precessing all rays can be traced in constant time With your example of co centric spheres assuming epsilon radius is different on each sphere or the problem is reduced to too trivial to trace a single sphere each sphere should further be subdivided into smaller pieces to obtain constant time property With such a finer subdivision even octree method may be able to do better than O NlogN It seems that often we have good algorithm behavior in practice with pathological cases giving terrible big Os Perhaps we can bound the set of scenes somehow It may be reasonable to define complexity of a scene by the complexity of pre processing to obtain constant timeness In a separate note Ohta writes Can you prove it I think but can t prove hierarchical spatial subdivision is only O n 1 3 I have found it is obvious All spatial subdivision is at most O n 1 3 if 1 Objects are tiny 2 Objects are uniformly scattered in space 1 means that the possibility of intersection is negligible 2 means at least O n 1 3 subspace must be traversed back to contents Point in Polygon One More Time by Mark Vandewettering Eric Haines Edward John Kalenda Richard Parent Sam Uselton Zap Andersson and Bruce Holloway Mark VandeWettering writes about the point in polygon test The solution proposed by rusmin twinsun com was based upon the Jordan Curve theorem any ray from inside a polygon crosses an odd number of edges on its way to infinity He chose a random ray that began at the point in question and counted the number of intersections Problem if you intersected a vertex you were kind of clueless Solution fire another ray You solve these problems by simplifying everything The ray you shoot should go to the positive X axis Assume without loss of generality that your point is the origin Now if you are going to intersect a vertex its because the y component of an edge endpoint is 0 Well decide whether you want to count this as positive or negative Assume positive I always do It turns out you get the right answer anyway For example origin o o counts as one intersection v origin o o counts as zero or two intersections origin o o counts as zero or two intersections v v Voila C est explique and in a later note Hardly my own idea It was shown to me by Eric Haines originally but I don t think he claims credit for it either Any takers Is it patented by Unisys as well Eric Haines the crazy fool replies Anyway having an ego and all that I do indeed claim to be the inventor of the consider all points on the line to be above the line solution which gets rid of those pesky special cases where vertices are on the test ray I started with some very complicated special case code in 1986 which worried about whether the points were on the ray Months went by One day looking at the code I noticed another stupid special case that I didn t handle correctly something like if the last point is on the ray and the first point is on the ray I looked at the problem again and realized that the only property of the ray that I really cared about was that it was a divider not that it was a set of points forming a ray Eureka Arkansas Get rid of those points and so define away the problem no points can lie on the ray if we define the ray as having no points O happy day it even worked Anyway it s all written up in my section of An Introduction to Ray Tracing edited by Andrew Glassner Academic Press Historical note the earliest reference I have to the point in polygon test is the classic A Characterization of Ten Hidden Surface Algorithms by Ivan Sutherland et al 1974 ACM Computing Surveys v6 n1 This has both the ray crossing test and the sum of the angles test plus the convex polygon test check if the point is inside all lines by substitution into each edge s 2D line equation Computational geometry fiends noted that the method has the problem of being indeterminate on edges if your intersection point is exactly on an edge it s arbitrary whether the point is determined to be inside or outside the polygon that is do you consider an edge crossing the point to be to the right or left of the point or do you want a third category such as on However there is a general consistency to the ray crossing test for ray tracing If the point being tested is along the edge joining two visible polygons which both face the same general direction i e not a silhouette edge and the polygons are projected consistently upon the plane perpendicular to the ray the point is guaranteed to be considered to be inside one and only one of the polygons That is no point will be considered within any two non overlapping polygons nor will it fall in the crack between polygons Think about it this way if points on the left edges of the polygon are considered outside then the points on the right edges will be considered inside This is because we would then consider an edge crossing the x axis at exactly 0 as being to the right of the test point Since one polygon s left edge is another s right edge it all balances out to make each point be inside only one polygon in a polygon mesh Horizontal edges are treated the same way if a point is actually on such an edge when tested the point will be categorized as below the edge consistently This will lead it to be inside one and only one polygon in a mesh In reality when ray tracing you very rarely get points that are exactly on an edge so this is something of a non problem But if you really really care about this possibility make sure to always cast your polygons onto the plane perpendicular to the ray this plane is also good for consistency if you want to get edges for Gouraud RGB interpolation Phong normal interpolation etc Finally for you incredibly demonic CompGeom types yes indeed points on silhouette edges are still inconsistent P S As our patent on the 90 degree angle was successful the pending patent on the Jordan Curve Theorem should come through any day now Edward John Kalenda replies Sorry to be a poop Eric but my boss at Calma Steve Hoffman told me about the points on the ray are above the ray thing in 1981 He claimed someone told HIM several years before I think it s one of those things that just need to be attributed to the anonymous coder I reply Oh well at least I can claim to be the first to publish Sadly enough the word still hasn t fully percolated out The latest Foley Van Dam Feiner Hughes says on page 34 Next choose a ray that starts at the test point and extends infinitely in any direction and that does not pass through any vertices Page 339 makes reference to intersections at vertices being a special case Passing through a vertex is still considered to be a problem even though it isn t It s this kind of thing that makes me happy to see books like Graphics Gems come out Letting the world know about the little tricks of the trade saves us all a lot of time and replication of effort I sure wish I had known about the above the ray trick in 1986 it would have saved me hours of struggle Richard Parent parent cis ohio state edu writes With respect to consider all the points on the line to be above the line both Steve Levine Ph D from Stanford I believe and myself discussed this as a solution we used in our respective problems mine was implementing Lourtrel s hidden line routine and I imagine his had to do with the hierarchical clipping he was doing This was at one of the Siggraph s in the mid to late seventies 76 if I had to guess It s been around for awhile I reply I guess I could compare myself to Leibniz vs Newton both independently discovering calculus but I m probably more in the class of the guy that discovers that Wintergreen Life Savers give off sparks when chewed in the dark Sam Uselton writes I ve been off news for a few days and just saw your posting of sept 6 Isn t the consider all points on the line to be above the line the same as shortening an edge to prevent the vertex lying on the scan line as suggested in Foley Van Dam the old one when describing polygon scan conversion That s not the first place I heard this idea either it was just the easiest reference to grab off the shelf I think this is one of those solutions that is just subtle enough that most people don t think of it themselves and think it is neat when they see it but just obvious enough that a few people every year re invent it and go showing it around to others Just the kind of thing IMHO that makes Glassner s collection and the RTNews such useful things because it probably couldn t get published traditionally Trying VERY hard to pull up archival storage I m pretty sure I saw this first while still at UTD in grad school which means Henry Fuchs was probably explaining it Whether he is one of the many originators or he got it from a fellow Utah grad student I couldn t guess Oh yeah Time 1975 1979 I note For scan conversion it is still a bit tricky you have to think a bit about where edges begin and end you want edges with vertices exactly on the scan line to be handled correctly e g if the edge s maximum y ends on the scan line delete this edge just before checking scan line This kind of problem goes away for ray tracing since you don t have to worry about active edges etc Sam replies After a weekend of R R old memory is more easily accessible I seem to associate my first connection with point in polygon ray intersection Jordan curve theorem etc etc to an informal seminar led by Henry Fuchs and Zvi Kedem attended by Alain Fournier Don Fussell Jose Barros myself and I think Bruce Naylor in which we read and studied early Michael Shamos papers Shamos Hoey Bentley Shamos Must have been about 1978 or so I reply Thanks for the info What I find amazing about all this is that somewhere somewhere this was not mentioned in the ray tracing literature before An Intro to RT Until you and others pointed out that this problem and solution is analogous to the scan line problem I honestly hadn t made the connection Nor it seems had anyone else in print Sedgewick s Algorithms talks about this problem but doesn t give a points above the ray solution Berlin in 1985 SIGGRAPH course notes gives a few solutions to the problem but says that test rays through vertices are a special case are very nasty Certainly Cornell s ray tracer didn t solve this problem Glassner used the sum of the angles method so he didn t know about it so UNC didn t know about it Sounds like somewhere out west was the point of origin but it never made it east of the Mississippi Curious Sutherland et al s 1974 paper A Characterization of Ten Hidden Surface Algorithms mentions the problem as a problem care is required to get consistent results Anyway sounds like there probably wasn t a solution before them if anyone would know I would think it would be them Interesting puzzle to try to figure out the identity of this anonymous programmer From Zap Andersson As I think I posted earlier this is somewhat similar to my own approach in getting rid of special cases Assume we are testing for a ray along X axis For all line segments swap em so it s first point is upwards Have a lower Y coordinate Then for each segment test if the point s Y firstY If not discard This in essence is a version of Eric s idea only mine then check if Y firstX X lastX discard and last but not least check the real intersection with some math Left as an exercise for the reader OBTW fr got FIRST you check if LastY Y FirstY Y is 0 If so discard Bruce Holloway posts In article robert sgi com writes In article KPS5FNC xds1 ferranti com peter ficc ferranti com Peter da Silva writes In article 33619 cup portal com ekalenda cup portal com Edward John Kalenda writes Sorry to be a poop Eric but my boss at Calma Steve Hoffman told me about the points on the ray are above the ray thing in 1981 He claimed someone told HIM several years before I think it s one of those things that just need to be attributed to the anonymous coder Another of those obvious techniques like the XOR cursor Good thing nobody patented this one I didn t see any smiley s after this one Peter I m sure that many readers don t realize that the XOR cursor in hardware IS patented and that s not the only obvious technique that this particular company has a patent on This thread is a riot My old boss at Calma Joe Sukonick patented the XOR cursor technique based on work he did around 1974 when I went to work there I remember meeting Jim Clark for the first time around 1979 in front of Stacey s bookstore in Palo Alto before he became famous for the Geometry Engine He was married to a friend of mine from Calma whom we were all in love with said he didn t think Joe s patent was valid because it wasn t original I agree with him One of the things the patent says is that XOR works because it is idempotent Joe had a Ph D in math from MIT liked to use words like that but I thought AND OR were idempotent XOR worked because it wasn t What you need is any operation that can be undone or inverted like ADD say What is XOR but an ADD without carry Anyway the patent is now owned by Cadtrak a corporate shell whose charter is to sue everyone under the sun over that patent Last I heard Western Digital was going to take them to court to overturn it Now as to the points on the ray are above the ray this is really the same as the idea of half open intervals which has broad usage in computer graphics When you point sample a polygon this is how you make sure that rectangles of area m n hit exactly m n pixels even if they lie on your sample grid When I was just a kid at Calma I wrote two programs that used that idea One was a program to cross hatch concave and convex polygons for making plots of overlapping layers on ICs Another was a program which intersected arbitrary closed polygons with each other This was an application program written in Calma s GPL which was used to calculate the capacitance between layers of a chip by finding the areas of all the overlaps Both of these algorithms needed to use the half open idea to take care of the corner cases I left Calma in 1976 too inexperienced to realize what a singular place it had been After the ownership changed most everyone scattered to the four corners of the globe Later I actually had a contract job working for Cal Irma Hefte the founders of Calma Cal passed away some years ago he seemed to me to be a lot like Willy Loman in Death of a Salesman He told me people are the most complicated interesting things in the world Mrs Hefte and her daughters have a flower shop on Blossom Hill Rd A genuine Silicon Valley story There s a lot more back to contents Quadrant Counting Polygon In Out Testing by Craig Kolb Ken McElvain from comp graphics After all that I thought it was worth posting some real live code but instead for a quadrant counting method that is almost the same as the point in polygon ray test The infinite ray test is really counting quadrants in An Intro to RT I show how you can get the winding number using it but does not bother to evaluate the exact quadrant unless need be For example if both endpoints of an edge are in the Y space we have no need to evaluate whether we re in X or X EAH In article raymond sunkist UUCP Raymond Chen writes Nobody yet has mentioned my favorite method for point in polygon detection Using the winding number Point in polygon detection Original author unknown Except where noted I have NOT edited the code in any way I didn t even fix the misspellings And no I don t code in this style return quad rjc for some reason the original author left out this crucial line A remark The whichquad function is not perfect It doesn t handle the boundary cases right but as I said that s only a problem if the point lies on the polygon After a long overdue search through my archives The code was posted to comp graphics in February of 88 by Ken McElvain decwrl sci kenm Regarding the typos and the boundary cases Ken wrote I pulled this out of some other code and hopefully didn t break it in doing so There is some ambiguity in this version as to whether a point lying on the polygon is inside or out This can be fairly easily detected though so you can do what you want in that case I once did a number of tests on Ken s winding number code and an implementation of the ray algorithm using a ray tracer rayshade For the test scenes I rendered I found that the winding number method was approximately 10 faster than the ray method Your mileage may vary It surprises me that this algorithm is ever faster the infinite ray solution is essentially the same idea as the quadrant idea except that it avoids x compares when the signs of the y components are the same Maybe I ll hack rayshade prove it someday EAH From kenm sci UUCP Ken McElvain Organization Silicon Compilers Systems Corp San Jose Ca In article 5305 spool cs wisc edu planting speedy cs wisc edu W Harry Plantinga writes In article 7626 pur ee UUCP beatyr pur ee UUCP Robert Beaty writes In article 20533 amdcad AMD COM msprick amdcad UUCP Rick Dorris writes In article 971 ut emx UUCP jezebel ut emx UUCP Jim MAC writes Have a nice one here Have a boundary defined on the screen Boundary is composed of points joined by lines Now some random points are generated and I want to check if a given point is within or outside the existing boundary Any algorithm for I have seen this type of algorithm before and the one I thought up in an afternoon is FAR superior and vastly simpler to code up the lines connecting the points and the test point Haven t I seen this discussion of point in polygon algorithms about 15 times before Robert your algorithm is simpler only in the kind of problems it handles It will only work for convex polygons whereas the other works for any polygons It s not even much simpler measuring angles and determining whether line segments intersect are of comparable difficulty Maybe you should have said that although your algorithm is far inferior it s not any easier to code Robert s suggestion is a good one The sum of the angles about the test point is known as the winding number For non intersecting polygons if the winding number is non zero then the test point is inside the polygon It works just fine for convex and concave polygon s Intersecting polygon s give reasonable results too A figure 8 will give a negative winding number for a test point in one of the loops and a positive winding number for the other loop with all points outside having a winding number of 0 Other advantages of the winding number calculation are that it does not suffer from the confusion of the infinite ray algorithm when the ray crosses a vertex or is colinear with an edge Here is my version of a point in poly routine using a quadrant granularity winding number The basic idea is to total the angle changes for a wiper arm with its origin at the point and whos end follows the polygon points If the angle change is 0 then you are outside otherwise you are in some sense inside It is not necessary to compute exact angles resolution to a quadrant is sufficient greatly simplifying the calculations I pulled this out of some other code and hopefully didn t break it in doing so There is some ambiguity in this version as to whether a point lying on the polygon is inside or out This can be fairly easily detected though so you can do what you want in that case Quadrants 1 0 2 3 typedef struct int x y point pointinpoly pt cnt polypts point pt point to check int cnt number of points in poly point polypts array of points last edge from polypts cnt 1 to polypts 0 int oldquad newquad point thispt lastpt int a b int wind current winding number wind 0 lastpt polypts cnt 1 oldquad whichquad lastpt pt get starting angle for i 0 i lastpt y thispt y a pt x lastpt x b lastpt x thispt x a lastpt y b b pt y if a b wind 2 else wind 2 lastpt thispt return wind non zero means point in poly Figure out which quadrant pt is in with respect to orig int whichquad pt orig point pt point orig if pt x pt y pt y Ken McElvain decwrl sci kenm back to contents Computer Graphics Journals by Juhana Kouhia jk87377 tut fi Here is a list not as good as it could be I would like to see a short descriptions about each journals on it I would like to see more information about geometry related journals or journals that covers this newsgroup subjects End of this list has list of journals which was suggested to me but I didn t find enough information about them or I was too lazy to find anything If somebody has suggestions what to do with them please let me know Additions corrections etc are welcome to the list Thank you all who helped me Computer Graphics Geometry Image Processing Journals ACM Transactions On Graphics Quarterly Available from Association For Computing Machinery 11 West 42 Street New York NY 10036 USA Computer Aided Design 10 issues year Available from Butterworth Scientific Ltd 88 Kingsway London WC2 6AB England Computer Graphics Includes SIGGRAPH conference proceeding Includes SIGGRAPH panel proceeding Available from Association For Computing Machinery 11 West 42 Street New York NY 10036 USA Also available from Academic Press Computer Graphics Forum Journal of the European Association of Computer Graphics EuroGraphics Available from Elsevier Science Publishers B V Journals Department P O Box 211 1000 AE Amsterdam The Netherlands Computer Graphics World Professional graphical application and industrial use Monthly Available from PennWell Publishing Company 119 Russell Street P O Box 457 Littleton Massachusetts 01460 0457 USA Computer Images International Professional graphical application and industrial use Monthly Available from P O Box 109 Maclaren House Scarbrook Road Croydon CR9 1QH England Phone 01 688 7788 Telex 946665 Fax 01 681 1672 Computers Graphics Available from Oxword Books GB Computer Vision Graphics and Image Processing Available from Academic Press split 1991 Computer Vision Graphics and Image Processing Graphical Models and Image Processing Available from Academic Press Computer Vision Graphics and Image Processing Image Understanding Available from Academic Press Graphics Interface Proceedings of Canadian computer graphics convention Available from in Canada Canadian Information Processing Society 243 College Street 5th Floor Toronto Ontario M5T 2Y1 416 593 4040 Available from in USA Morgan Kaufmann Publishers Order Fulfillment Center PO Box 50490 Palo Alto CA 94303 USA 415 965 4081 IEEE Computer Graphics Applications Monthly Available from IEEE Computer Society Circulation Department P O Box 3014 Los Alamitos CA 90720 9804 USA Image and Vision Computing Image analysis Available from Butterworth Scientific Ltd 88 Kingsway London WC2 6AB England Pixel Available from Pixel Communications Inc 245 Henry St Suite 2 G Brooklyn NY 11201 USA Phone 718 624 3386 Signal Processing Image Communication A publication of the European Association for Signal Processing EURASIP EURASIP P O Box 134 CH 1000 Lausanne 13 Switzerland Also available from Elsevier Science Publishers B V Journals Department P O Box 211 1000 AE Amsterdam The Netherlands Visual Computer Available from Springer Verlag Heidelberger Platz 3 D 1000 Berlin 33 Germany Also available from Springer Verlag New York Inc Journal Fulfillment Services Dept J P O Box 2485 Secaucus N J 07094 USA Miscellaneous Journals Leonardo Journal of the International Society for the Arts Sciences Technology SIGGRAPH art show catalogue Available from Pergamon What IEEE Trans on Pattern Analysis and Machine Intelligence IEEE Trans on Systems Man and Cybernetics Journal of the Discrete and Computational Geometry Machine Vision and Applications Pattern Recognition Available from Pergamon Pattern Recognition Letters Available from North Holland Symposium on Computational Geometry Symposium on Foundation of CS One or two papers a year on geometry Symposium on Theory of Computing back to contents Eric Haines erich acm org Ray Tracing News Volume 3 Number 4 Ray Tracing News Volume 3 Number 4 Ray Tracing News Volume 3 Number 4 Ray Tracing News Volume 3 Number 4 Ray Tracing News Volume 3 Number 4 Ray Tracing News Volume 3 Number 4 Ray Tracing News Volume 3 Number 4 Ray Tracing News Volume 3 Number 4 Ray Tracing News Volume 3 Number 4 Ray Tracing News Volume 3 Number 4 http www acm org tog resources RTNews html rtnv3n4 html http www acm org tog resources RTNews html rtnv3n4 html http www acm org tog resources RTNews html rtnv3n4 html http www acm org tog resources RTNews html rtnv3n4 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv4n1.html%%==%%Ray Tracing News, Volume 4, Number 1%%==%%Ray Tracing News "Light Makes Right" March 1, 1991 Volume 4, Number 1 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%138872%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right March 1 1991 Volume 4 Number 1 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1990 1991 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction New People Address Changes etc Ray Tracing Abstract Collection by Tom Wilson Report on Lausanne Hardware Workshop by Erik Jansen New Version of SPD Now Available by Eric Haines Teapot Timings by John Spackman The Very First Point in Polygon Publication by Chris Schoeneman The Acne Problem by Christophe Schlick Shirley Thesis Available via Anonymous FTP by Pete Shirley Some Thoughts On Anti aliasing by Zap Anderssen Eric Haines New VORT Release and the VORT Chess Set by Eric H Echnida David Hook Best or at least Better of RT News by Tom Wilson At Long Last Rayshade v4 0 is Available for Beta testing by Craig Kolb Parallel Ray Tracer by Kory Hamzeh Mike Muuss Richard Webb Distributed DKB by Jonas Yngvesson Quadrangle Tessellation by Christophe Schlick New Release of Radiance Software Bug Fixes by Greg Ward Radiance Timings on a Stardent by Eric Ost RTSYSTEM Fast Ray Tracer by Patrick Aalto DKBTrace Beta Available by David Buck Computer Graphics 2nd Edition Corrections Software etc by Brown Emailer Papers which are currently available from the Net via anon FTP J Kouhia Net News Cullings Ray Cylinder Intersection Tutorial by Mark VandeWettering C Fractal and Ray Tracing Book by Fractalman Ray Spline Intersection Reference by Spencer Thomas Superquadric Intersection by Rick Speer Michael B Carter Comments on Interval Arithmetic by Mark VandeWettering Don Mitchell Platonic Solids by Alan Paeth Moon Problems by Ken Musgrave et al Ken gave another problem with rendering the moon Shadow Testing Simplification by Tom Wilson SIMD Parallel Ray Tracing by George Kyriazis Rick Speer Rayscene Animator by Jari K hk nen sic SIPP 2 0 3d Rendering Package by Jonas Yngvesson and Inge Wallin 3DDDA Comments by John Spackman Radiosity Implementation Available via FTP by Sumant Dirt by Paul Crowley Thomson Digital Images University Donation Program by Michael Takayama A Brief Summary of Ray Tracing Related Stuff Angus Y Montgomery Introduction Well it s been awhile I ve essentially fallen off the face of the earth with too much to do So it s time to throw something together during compile link time pity my new machine does is much faster it makes it harder to get out an issue As usual the comp graphics version does not have all the comp graphics cullings If you want the full issue pull it in via FTP from weedeater math yale edu or any other site which carries it My big fun for the week has been looking at my head I finally received my head database from the Visual Computing Group 415 688 7315 after getting my head scanned in by their Cyberware scanner at SIGGRAPH Quite a bargain around 40 for a 256x512 mesh of my head There are lots of bad points in my database the top of my head is missing and my hair has a natty dredlock look but still it s pretty amazing and a little data interpolation here and there cleans up the dropout data points The data comes in a cylindrical coordinate system format and VSG provides source code for a number of programs and utilities to convert the data in various ways I ve heard Spencer Thomas has rendered his face as an unrolled cylinder i e a height field So have others out there played with these data sets much Anybody want to trade heads back to contents New People Change of Addresses etc Michael Cohen s email address is now mcohen cs utah edu Jim Arvo s email address is now arvo graphics cornell edu Peter Miller s email address is now pmiller pdact pd necisa oz au Brian Corrie University of Victoria Victoria B C I am back from my trip down under and have a new account here at UVic My new address is bcorrie csr uvic ca One new area of interest I like the idea of the shading language provided by the RenderMan Interface Do you know of anyone doing work in this area I want to make a shader compiler along with a shader library that has some of the pixar functions noise etc that will compile a shader description into a linkable module that a renderer can link to at compile time Kind of a half way step between interpreting the shader description and hard coding the shader into the renderer itself If I set up some binding rules then any renderer that follows those rules will be able to link to any shader compiled with the shader compiler We can then pass around shader descriptions between users What do you think Patrick Flynn geometry solid and image algorithmics computer vision Department of Computer Science and Engineering University of Notre Dame Notre Dame Indiana 46556 219 239 8375 alias patrick flynn flynn cse nd edu My interest in ray tracing was an itch that I couldn t scratch during 1989 and much of 1990 while I was dissertating I m presently mapping subproblems like rendering in model based computer vision onto parallel architectures and developing a graphics course for seniors and grad students with future unfocused plans for an ongoing research program in graphics Jean Philippe Thirion coherency interval arithmetic data structure I N R I A Domaine de Voluceau Rocquencourt B P 105 78153 LE CHESNAY CEDEX FRANCE 33 1 39 63 52 79 alias thirion thirion bora inria fr I worked from 1986 to 1990 for a PHD thesis at the L I E N S Paris France with Pr Claude Puech First about data structures and hidden part removal problems then about the uses of coherency in order to improve ray tracing This work have lead to a PHD thesis about object space and ray coherency for ray tracing in french and two research reports in English Tries data structure based on binary representation for ray tracing Interval arithmetic for high resolution ray tracing The first report have been published in Eurographics 90 I am writing now a third report about some enumeration problems on binary space partitioning trees Christophe Schlick LaBRI 351 Cours de la Liberation 33405 TALENCE CEDEX FRANCE Email schlick geocub greco prog fr I am currently working on my PhD thesis on Realistic Image Synthesis It will include some classic topics as ray tracing radiosity hydrid methods antialising and parallelization of those techniques Henry Kaufman Brown University graphics group alias henry kaufman hek cs brown edu I worked on an ARTS ray tracer with the SEADS data structure Since the details of their algorithm were not well described in their paper in my opinion I had to figure out most of the algorithm myself The part I found interesting was scan converting my quadric surface primitives into the SEADS voxels I tried to implement Bresenham style scan converters which turned out to be fairly efficient I just thought I d mention it even though you are probably already familiar with the algorithms involved Nick Holliman parallelism CSG spatial subdivision ray tracing School of Computer Studies University of Leeds Woodhouse Lane Leeds West Yorkshire LS2 9JT ENGLAND 0532 335446 email nick uk ac leeds dcs I have just completed my PhD at Leeds and currently have an IBM research fellowship at Leeds working with the IBM UK Scientific Centre Winchester My PhD work was the development of a parallel CSG ray tracer This takes a CSG model and creates a distributed octree using a parallel algorithm It can then ray trace the distributed octree and uses caching to avoid replicating all the data on each processor The system scales well making good use of up 128 T800 transputers as many as I could find in one place handling models of up to 20 000 CSG primitives We have recently extended this to support parallel incremental update algorithms so given a small change to the CSG model the system updates the distributed octree and then updates the region of image affected by the change Current work is looking at increasing the model size improving the scalability and porting the system to other parallel machines I would be keen to hear from anyone working on similar parallel algorithms and if anyone is interested they are welcome to a copy of my thesis Ning Zhang I have written a Radiosity package and both input and output are based on the NFF file format Have you considered to have a similar benchmarking package for comparing different Radiosity software and hardware I think that would be an interesting subject Any volunteers EAH Self description Ning Zhang Radiosity Raytracing Image Compression School of Electrical Engineering The University of Sydney NSW 2006 Australia 61 02 692 2962 alias ning zhang nzhang ee su oz au I have been in Germany for two year as a visiting scientist at the Computer Graphics Center ZGDV Darmstadt There I developed a Radiosity Raytracing FastZBuffer package running on many platforms including 386PC Recently I came to Australia as a visiting fellow at the Univ of Sydney Email nzhang ee su OZ AU In Germany zhang agd fhg de or zhang zgdvda uucp Craig McNaughton Interests CSG Animation higher dimension distortions Address C Computer Science Department University of Otago PO Box 56 Dunedin New Zealand ph 64 3 4798488 I m in the Graphics Research Group at Otago University currently doing a Masters My main project at the moment is a general 4D CSG ray tracer and with luck that will soon be extended to nD Other current work include getting the most out of 8 bit displays and character animation with CSG systems David B Wecker Author of DBW Render DIDDLY and other rendering tools Digital Equipment Corporation 1175 Chapel Hills Drive CXN1 2 Colorado Springs CO 80920 3952 719 260 2794 alias david wecker wecker child enet dec com If people want the current version of DBW V2 0 for their Amiga they should contact William T Baldridge 2650 Sherwood Lane Pueblo CO 81005 BIX WBALDRIDGE David Tonnesen Dept of Computer Science University of Toronto Toronto Ontario M5S 1A4 416 978 6986 and 978 6619 research modeling and rendering e mail davet dgp toronto edu UUCP CSNET ARPANET davet dgp utoronto BITNET I am a Ph D student at the University of Toronto and interested in a variety of graphic topics including ray tracing Other areas I am interested in include models of deformable models global illumination models models of natural phenomena physically based modeling etc Basically modeling and rendering Jim Rose Visualization Research Asst Visualization Research Group Utah Supercomputing Institute rose graph usi utah edu Bruce Kahn general concepts portable packages microcomputer based pkgs Data General Corp 4400 Computer Dr MS D112 Westboro MA 01580 508 870 6488 bkahn archive webo dg com back to contents Ray Tracing Abstract Collection by Tom Wilson wilson cs ucf edu Tom has done the graphics community a great service in making available for free all the ray tracing abstracts from articles he s collected If you run into a ray tracing article title which sounds interesting you should check here first to see if it s really what you want before wasting time tracking it down EAH The next release of the collection of ray tracing abstracts are ready I ve put them in several ftp sites listed below To get it do the following get rtabs shar 1 91 Z using binary mode Uncompress it Unshar it sh rtabs 1 91 Then read READ ME If you have any problems send me e mail The abstracts can be converted to two forms Latex preferred or troff me The filters I ve included may help you write your own if you need something else I received no feedback concerning problems so evidently it works for those who tried it USA Sites weedeater math yale edu 130 132 23 17 in directory pub Papers Craig Kolb craig weedeater math yale edu karazm math uh edu 132 170 108 2 in directory pub Graphics J Eric Townsend jet karazm math uh edu iear arts rpi edu 128 113 6 10 in directory pub graphics ray George Kyriazis kyriazis iear arts rpi edu Australia Site gondwana ecr mu oz au 128 250 1 63 in directory pub rtabs Bernie Kirby bernie ecr mu oz au Finland Site maeglin mt luth se 130 240 0 25 in directory graphics raytracing Doc Sven Ove Westberg sow cad luth se Tom Wilson Center for Parallel Computation University of Central Florida P O Box 25000 Orlando FL 32816 0362 wilson cs ucf edu Juhana Kouhia notes I have converted RT abstract to Postscript format it s available from nic funet fi pub graphics papers directory as wils90 1 ps Z back to contents Report on Lausanne Hardware Workshop by Erik Jansen There was a Hardware Workshop on the 2nd and 3rd of September in Lausanne Three papers on ray tracing are worth mentioning A M P Hebert A M J McNeill A B Shah A R L Grimsdale A P F Lister T MARTI A Multi processor Architecture for Ray Tracing Images A D Badouel A T Priol T An Efficient Parallel Ray Tracing Scheme for Highly Parallel Architectures A Li Sheng Shen A E Deprettere A P Dewilde T A new space partitioning Technique to Support a Highly Pipelined T Architecture for the Radiosity Method The first paper discussed a load distribution based on an image space partitioning Additionally the scene was stored in an octree type of space subdivision of which the first top n levels were duplicated over the processors and stored in their local cache The other levels of the database were communicated when needed Their figures testpicture gears showed that a local cache of 1 8 to 1 4 of the size of the total database is sufficient to avoid communication bottle necks It was not clear from the presentation whether these results also hold for more complex scenes The second paper discussed a virtual memory scheme that distributed the data base over the processors in a way that ray coherence is maintained as much as possible The left over memory at the processors is used as a cache The third paper discussed a ray coherence scheme that was based on a subdivision of a ray frustrum in sectors and a comparison of a probablistic and deterministic method to determine the width angle of the sectors These papers will be published by Springer in Advances in Computer Graphics Hardware vol V ed R Grimsdale and A Kaufman back to contents New Version of SPD Now Available by Eric Haines Version 3 0 of the Standard Procedural Databases is out The major addition is the teapot database Other changes include being able to input a size factor on the command line changing mountain c to mount c for IBM users and many changes and new statistics in the README file The teapot database is essentially that published in IEEE CG A in Jan 1987 A checkerboard has been added underneath it to give it something to reflect cast a shadow upon The checkerboard also reflects the subdivision amount of the teapot patches e g a 7x7 checkerboard means that each patch is subdivided to 7x7x2 triangles Degenerate e g no area 0 length normal polygons are either removed or corrected by the program The bottom of the teapot can optionally be removed The images for these databases and other information about them can be found in A Proposal for Standard Graphics Environments IEEE Computer Graphics and Applications vol 7 no 11 November 1987 pp 3 5 See IEEE CG A vol 8 no 1 January 1988 p 18 for the correct image of the tree database the only difference is that the sky is blue not orange The teapot database was added later and consists of a shiny teapot on a shiny checkerboard The SPD package is available via anonymous FTP from weedeater math yale edu 130 132 23 17 irisa fr 131 254 2 3 among others For those without FTP access write to the netlib automatic mailer research netlib and netlib ornl gov are the sites Send a one line message send index for more information or send haines from graphics for the latest version of the SPD package back to contents Teapot Timings by John Spackman I enclose some timing figures for the SPD teapot ray traced at various degrees of tessellation All images were rendered at 512x512 with two light sources The models were triangulated at a pre processing stage to support smooth shading with barycentric co ordinates I m not sure whether all other conditions were as documented in SPD but the output looks right The host machine was a SUN SPARCStation IPC SIZE FACTOR TRIANGLES OCTTREE CONSTRUCTION RAY TRACING SECS SECS 1 58 9 4 841 4 2 248 18 5 832 2 3 570 25 8 837 2 4 1024 35 7 844 8 5 1610 40 8 859 9 6 2328 50 4 864 2 7 3178 56 6 878 8 8 4160 66 5 900 7 back to contents The Very First Point in Polygon Publication by Chris Schoeneman nujy vax5 ccs cornell edu A few months ago there was a discussion on point in polygon algorithms again and one netter suggested perturbing vertices to avoid special cases using the Jordan curve theorem This led me to the solution I eventually found that you had already made Anyway I just found the same solution in CACM Aug 1962 p 434 and I thought you might be interested to know The algorithm as given has an error in the if statement It should read if y The author M Shimrat doesn t check the horizontal bounds of the edge to trivially accept or reject the intersection but this of course isn t the key to the solution So much for the patent back to contents The Acne Problem by Christophe Schlick schlick geocub greco prog fr What is Ray Tracer Acne RTA As defined by Eric Haines in an early Ray Tracing News RTA is those black dots that appear sometimes on a ray traced image RTA can result from two different phenomena Case 1 When a ray intersects a surface S some floating round off can bring the intersected point P inside the surface Figure 1 So when a reflected ray or a light ray is shoot from P it will intersect S and P will be in shadow A common solution to this problem is to let some tolerance T for the inter section test when an intersection point M is found the distance D between the origin of the ray and M is computed and compared to T the point is rejected if D Case 2 This case can only appear when rendering an object composed of polygons with interpolated normal vectors Phong s method This pathological case was first described by Snyder Barr at the SIGGRAPH 87 conference When a ray intersects a point P the normal vector Np is interpolated from the vertices normals thanks to the barycentric coordinates Figure 2 Thus a reflected ray or a light ray shot from P according to Np direction Out in Figure 2 can intersect another facet Q on Figure 2 Here the tolerance solution doesn t work because Q can be arbitrarily far from P it depends on the surface curvature and the size of facets Thus Snyder Barr proposed to move P from the surface along Np by a certain distance D and to consider the new point P as the intersection point from which other rays are shot Again D is hard coded and there would be some scenes for which D is too high or too low Out Out In Na Nb Q Np S A B In P P Nc C Figure 1 Figure 2 The solution I propose is easy to implement and robust whatever the scene If you examine Figure 1 and 2 you can see that in the two case the error comes from a sideness problem a ray that is assumed to be outside S finds an intersection that is inside S In a ray tracer you are always carrying in the ray structure a pointer to the media through which the ray is currently traveling that pointer is needed for refraction So when intersecting a surface you always know the current media When you find a ray intersecting a surface by the inside negative cosine the only thing to do is to test the current media with the media inside the surface checking the pointers If the two medias are different there is a sideness problem and the point must be rejected That leads clearly to the following algorithm When a ray R traveling through a media M with a directing e g reflecting vector V hits a point P with a normal vector N on a surface S do Begin Compute Cos N V the cosine between the ray direction and normal vector If Cos 0 R outside S then no problem else R inside S if M S then reject the point Sideness error else no problem End The cost of that method is a dot product between V and N For reflection rays that dot product has to be done in the shading phase so if you store the result of the cosine in the ray structure there will no extra cost But for light rays the dot product is an extra cost Compared to Snyder Barr s method the cost is lower because moving a point along a normal vector needs a linear combination 3 additions 3 multiplications For non polygonalized surfaces the tolerance method is cheaper but isn t robust Well make your choice And let me know your comments and flames From Eric Haines Note that a third source of acne is from bump mapping essentially it s the same problem as in case 2 but this problem of the reflection ray passing through the object can then happen to any object not just polygons with a normal per vertex Personally I solve this problem by doing the check Christophe recommends i e check the dot product of the normal and the reflection ray If the reflection ray is bad I solve this by adding some portion of the normal to the reflection ray which puts the ray above the tangent plane at that point This can result in the reflections getting a bit squished on these bad pixels but this is much better than seeing black acne pixels Christophe s solution of rejecting intersections if the media does not match is fine if you have well behaved users but our system assumes the user can do whatever foolish thing he wants with surface definitions my favorites are us allowing different indices of refraction and different transmission colors for front and back faces How do the rest of you solve this problem back to contents Shirley Thesis Available via Anonymous FTP by Pete Shirley I have put a postscript copy of my thesis Physically Based Lighting Calculations for Computer Graphics on anon ftp on cica cica indiana edu 129 79 20 22 I have broken the thing into several files and compressed them Each file when uncompressed should be a stand alone postscript file The whole thing is about 180 pages long so please don t kill any trees if you don t really want it WARNING The thesis files have many postscript figures in it It is a real printer hog Please be thoughtful about printing and storing the thing I have also put several 24 bit ppm image files in compressed form Don t forget to set ftp in binary mode If you want this thesis and cannot get print these files please don t ask me for alternate formats until after Dec 15th Thanks It will also be available as a U of Illinois tr I don t know when The directory is pub Thesis Shirley Pete Shirley Indiana U shirley cs indiana edu I didn t say it was good just long This thesis is among other things a great survey of most every rendering technique to date wine ppm Z is an excellent image even with the week of computation EAH Thesis files ch1ch2 ps Z 125K Title page etc Chapter 1 Introduction Chapter 2 Basic Optics ch3ch4 ps Z 105K Chapter 3 Global Illumination Problem Formulation Chapter 4 Surface Reflection Models ch5a ps Z 221K ch5b ps Z 247K Chapter 5 Image Space Solution Methods ch6a ps Z 261K ch6b ps Z 250K Chapter 6 Zonal Solution Methods ch7ch8ch9 ps Z 123K Chapter 7 Extensions to Basic Methods Chapter 8 Implementation Chapter 9 Conclusion app ps Z 44K Appendices bib ps Z 30K Bibliography Picture files ppm format Makefile seeppm c viewing on SGI Iris bump ppm Z 1 3M 1024 by 768 camera effects bump map indirect lighting gal ppm Z 1 2M 1024 by 768 solid textures indirect lighting dense ppm Z 2M 512 by 384 dense media 8 volume zones for indirect light sparse ppm Z 1 2M 1024 by 768 sparse turb ppm Z 3M 512 by 384 uneven lamp ppm Z 8M 1024 by 768 diffuse transmission indirect lighting wine ppm Z 1 1M 1024 by 768 fresnel reflection bw ray tracing back to contents Some Thoughts On Anti aliasing by Zap Anderssen Eric Haines From Zap About Anti aliasing The standard way of doing adaptive anti a refered to as AA from now on I m lazy is to check the color of last pixel and pixel above or similar and subdivide if they differ more than this n that from eachother Although you remember that I said once you should check what OBJECT you hit i e ignoring the color and use that as subdiv criteria and you posted a mild flame that it wouldn t work on things like a patch mesh since we spend useless time at all edges that are same all the same Well since I think that all anti aliasing for texturemapping should be done in the texture mapping functions for which I have a nasty trick involving the angle to the normal vector of the surf and distance to screen e t c you should only need extra rays at object edges But consider what makes a surface change color abruptly It s one of three things Shadow hits Texture map changes color Normal veccy moves a lot Ok so here is my idea You don t save the COLOR for last pixel but the normal vector When this deviates more than this n that you supersample Then you say hey sucker that doesn t work Edges may be at different levels or so but still have the same normal veccy and to that I say sure thang multiply the normal vector with the distance to the eye and use that for a criteria Well we lose the AA on the shadows regrettably but we get another nice criteria Just a stupid idea I know there are flaws like what happens if this Red surface is adjoining a blue one i e color diff in geometry rather than texture map This shouldn t be allowed Seriously there must be ways to fix this I NEVER liked the idea of AA ing on the color diffs since texturemaps may introduce heavy diffs even if no extra rays are really needed Any Commentos Oddly I was just writing up my views on anti aliasing yesterday though for different reasons I agree it would be nice to avoid subdivision on texture mapped guys Let s see we have aliasing due to edges of objects shadow boundaries rapidly changing reflections refractions or highlights texture maps So we could do something like separate out these various factors and do tests on each The trick is that there s interaction between these things shadows and texture maps effects get multiplied together rapidly changing textures in the dark don t matter and that separating these out gives some weird problems say I say if contributions absolute values vary by more than 10 and then I find that my highlight varies 5 my reflection varies 7 and my shadow varies 4 should I antialias If yes then why did I bother to compute these fractional contributions If no then the color really is varying a lot and should be supersampled One advantage of separating stuff out is for texture maps sampled with area methods e g mipmapping if the surface change ratio is separate from all the other ratios then we could simply say ignore the surface change ratio if we hit an area sampled textured object I don t have a good answer yet but am interested to hear your ideas Using the normal is interesting but it feels a bit removed from the problem on my balls sphereflake database the normals change rapidly for the tiny spheres but say all the spheres just reflected things no diffuse no highlights Much of the spheres reflections is the background color which doesn t change at all So super samples which merely also hit the background in this case don t add anything just waste time By checking how much the reflection color changed instead we could shoot less rays Variance on something like the normal might be worth tracking as you point out but what if you re say viewing a surface which is in shadow The normal varies but the shading doesn t no light so you waste effort Another interesting problem is anti aliasing bump maps do you really want to do much blending which would then smooth out the bumps back to contents New VORT Release and the VORT Chess Set by Eric H Echnida David Hook Eric H Echidna echidna munnari oz au writes Vort 2 0 is now officially available from the following sites gondwana ecr mu oz au 128 250 1 63 pub vort tar Z munnari oz au 128 250 1 21 pub graphics vort tar Z uunet uu net 192 48 96 2 graphics vogle vort tar Z uucp access as well ftp graphics vogle vort tar Z draci cs uow edu au 130 130 64 3 netlib vort Australian ACSnet sites may use fetchfile fetchfile dgondwana ecr mu oz pub vort tar Z or obtain it from the Australian Netlib at draci cs uow oz VORT a very ordinary rendering tool kit Version 2 0 VORT is a collection of tools and a library for the generation and manipulation of images It includes a ray tracer pixel library and utilities for doing gamma correction median cuts etc The current distribution is described as follows art a ray tracer for doing algebraic surfaces and CSG models Art supports the following primitives polygons offfiles rings disks torii superquadrics spheres ellipsoids boxes cones cylinders and algebraic surfaces Tile patterns can be mapped onto all of the above except algebraics boxes and offfiles The following textures are supported bumpy wave marble wood ripple fuzzy stucco spotted granite and colorblend The ray tracer uses an acceleration technique based on the spatial kd tree tools some utilities for fiddling around with image files and converting between various formats These include tools for converting nff files to art format and vort files to ppm format and ppm to vort docs various bits of doco on the tools lib the pixel library files this has only been developed to the point needed to read and write display files old this contains a program for converting image files from 1 0 format to 1 1 sun a set of display programs for a sun workstation X11 a set of display programs for a 256 color X machine iris a display program for an Iris workstation pc a set of display programs for a PC with VGA Extended Graphics movies some C programs for generating some sample animations tutes some C programs for generating some animations that demonstrate the texturing text3d some C routines that read in the hershey fonts provided with VOGLE and use them to generate 3d text Example input files are provided There are several scenes and output images from the raytracer art available on gondwana ecr mu oz au 128 250 1 63 in the directory pub images These images are 8 bit sun rasterfiles and can be converted to other formats using for example pbmplus There are also some simple 36 frame movies in the directories pub movies These files are in VORT format and can be displayed with the movie programs that come with VORT or can be converted to another format using the vorttoppm program that comes with VORT Another package available of interest VOGLE 1 2 fixes some bugs and includes some speed ups from previous versions of VOGLE Specifically all matrix stack manipulations are now done in place to save time VOGLE stands for Very Ordinary Graphics Learning Environment VOGLE is a device portable 3D graphics library that is loosely based on the Silicon Graphics Iris GL VOGLE also supports 3D software text in the form of Hershey vector fonts David Hook notes vort package includes a chess set it s the same one as the set at DEC There is a better chess set in pub chess20 tar Z on gondwana ecr mu oz au 128 250 1 63 in the anonymous ftp area These pieces were also done by the same person Randy Brown who did the ones that are in VORT but they are much more detailed back to contents Best or at least Better of RT News by Tom Wilson I ve scrunched all of the 1988 RTNews I thought I would post to the net to see if anyone else would want it What I ve removed is names addresses product reviews reports on tracer bugs fixes and anything else that is out dated I ve taken this approach since these programs probably no longer have the bugs and errors I don t know if many people are going to want the scrunched versions but I just wanted basic RT info to print and save Some of the issues weren t scrunched much mainly the first few but some are about 1 3 the size 90 000 30 000 bytes Tom wilson cs ucf edu back to contents At Long Last Rayshade v4 0 is Available for Beta testing by Craig Kolb kolb yale edu The distribution is available by anonymous ftp from weedeater math yale edu 130 132 23 17 in pub rayshade 4 0 as either rayshade 4 0 tar Z or the 16 compressed tar files in the subdirectory kits 0 Please direct comments questions configuration files source code and the like to rayshade weedeater math yale edu If you get semi serious about using rayshade drop us a line and we ll add you to our mailing list Thanks to everybody who contributed to this and previous versions of rayshade and to those of you who are willing to provide feedback on this Beta release From the README file This is the Beta release of rayshade version 4 0 a ray tracing program Rayshade reads a multi line ASCII file describing a scene to be rendered and produces a Utah Raster Toolkit RLE format file containing the ray traced image Rayshade features Eleven primitives blob box cone cylinder height field plane polygon sphere torus flat and Phong shaded triangle Aggregate objects Constructive solid geometry Point directional extended spot and quadrilateral light sources Solid procedural texturing bump mapping and 2D image texture mapping Antialiasing through adaptive supersampling or jittered sampling Arbitrary linear transformations on objects and texture bump maps Use of uniform spatial subdivision or hierarchy of bounding volumes to speed rendering Options to facilitate rendering of stereo pairs This is Really and Truly a Beta release No patches will be issued to upgrade from this distribution and the official release The documentation is spotty and there is no proper man page There are many differences between rayshade versions 3 0 and 4 0 In particular the input syntax has changed Input files created for version 3 0 must be converted to version 4 0 syntax using the provided conversion utility rsconvert Rayshade v4 0 Beta has been tested on several different UNIX based computers including SGI 4D IBM RS6000 Sun Sparcstation 1 Sun 3 160 DECstation Apollo DN10000 If your machine has a C compiler enough memory at least 2Mb and runs something resembling UNIX rayshade should be fairly easy to port It is hoped that the official release will include a library that provides a C interface to the various ray tracing libraries While there is currently no documentation for the libraries it should be easy for you to add your own primitives textures aggregates and light sources by looking at the code and sending mail if you get stuck It is also hoped that the modular nature of the primitive aggregate texture and light source libraries will make it possible for people to write their own code and to swap objects textures and the like over the net The object interfaces are far from perfect but it is hoped that they provide a reasonable balance between modularity and speed Additional rayshade goodies are available via anonymous ftp from weedeater math yale edu 130 132 23 17 in pub rayshade 4 0 If you have contributions of new objects textures input files configuration files or images to make feel free to send us email or to drop off a copy via ftp in the incoming directory on weedeater back to contents Parallel Ray Tracer by Kory Hamzeh Mike Muuss Richard Webb Parallel Raytracer Available Kory Hamzeh kory avatar avatar com I wrote a parallel raytracer named prt a while back with the following features Runs on multiple heterogeneous machines networked together using TCP IP Crude load balancing Primitives Polygons Spheres Hallow Sphere Cones Cylinders A object that can be expressed in a quadratic form Rings Shading Gourard Phong Whitted Rendering Simple one ray per pixel Stochastic sampling jitter Instances of objects Input format An extension of nff I have written a filter which will convert NFF files to prt format Output format MTV format 24 bit Note that prt is a parallel raytracer which spawns off children over multiple machines to distribute the work I have only used it on five Sun Sparcstations and have gotten excellent performance I m not aware of any other public domain parallel raytracers other than VM pRay which I believe runs only on a specific platform Prt version 1 01 is now available from the following sites via anonymous ftp apple apple com in pub ArchiveVol2 prt iear arts rpi edu in pub graphics ray prt If you have a copy of version 1 0 I would recommend that you get a copy of the newer one I will not post it again in alt sources If you can t ftp it send me mail and I will mail you a copy Version 1 01 had some minor bugs fixed and I included some info that I had forgotten to put in the first set of docs Michael John Muuss mike BRL MIL writes lots of good stuff about BRL CAD deleted While not super sophisticated the load balancing algorithm is non trivial It assigns pixel blocks of variable size Three assignments are outstanding to each worker at any time to pipeline against network delay New assignment size is tuned based upon measured past performance weighted average with variable weighting depending on circumstances and Kory responds Prt s load balancing is not as sophisticated as BRL CAD s Prt simply multiplexes the scanlines across the different machines The slowest machine on the network will be the bottle neck When I get a chance I would like to use the same techniques used in BRL CAD I think that it is the best load balancing for a raytracer Timings of PRT by Richard Webb Here is a snippet of a bug report I sent off to kory avatar com regarding his prt1 01 parallel ray tracer Note that I ran these test on your NFF SPD version 2 4 I ll grab v3 0 and re run if you think it will make any difference I ran the test on a network of 25 Sun4 s both SparcStation1 s and 1 s as well as a Solbourne and a few SunServers Some machines finished in about 1 2 of the elapsed time The time is as reported by the PRT program TEST TIME mm ss balls 10 32 gears 16 49 mountain 9 27 rings 13 05 tetra 0 59 tree 4 05 It would be nice to have some texturing capability in NFF but then I guess that is somewhat too sophisticated for a Neutral format The SIPP2 0 image isy90 marble teapot on a granite base looks very good except there are no shadows I hope someday we will have fast Renderman parallel cookers generating nice compressed video sequences back to contents Distributed DKB by Jonas Yngvesson DDKB distributed dkb has the same primitives shading and input format as DKB for obvious reasons This includes very nice support for solid texturing Antialiasing differs slightly DKB uses an adaptive jittered supersampling but in DDKB each server only has access to one scanline at a time This means adaption is done in the x direction only Output format MTV format 24 bit Here I have used a mix between the MTV format an the QRT format used in DKB An MTV header is followed by the scanlines in QRT format Each line tagged with its line number this is because the lines are stored in the order they are finished by the servers and must be sorted before display Note that prt is a parallel raytracer which spawns off children over multiple machines to distribute the work I have only used it on five Sun Sparcstations and have gotten excellent performance I m not aware of any other public domain parallel raytracers other than VM pRay which I believe runs only on a specific platform Yeah We have tried DDKB running on 55 sparcstations then we ran out of file descriptors perhaps we should use UDP instead of TCP Pretty good performance indeed Unfortunately DKB is not a terribly fast tracer in itself and I have no time to hack around in it I m not very willing so send this thing out though Partly because it is still only a hack and partly because I have not contacted David Buck and asked what he thinks about the whole thing jonas y isy liu se uunet isy liu se jonas y University of Linkoping Sweden back to contents Quadrangle Tessellation by Christophe Schlick Tessellating objects using triangles has become a very popular method in the ray tracing world at least since the classical paper of Snyder Barr SIG 87 The classical idea is to start from a parametric surface f u v and regularly sample the two parameters u and v That gives a mesh composed of quadrangles ABCD where A f u v B f u du v C f u du v dv and D f u v dv Then the only thing to do is to cut the quadrangle into two triangles ABC CDA for instance D C A B Using triangles instead of quadrangles has one main advantage speed Indeed computing the intersection between a ray and a triangle and getting the barycentric coordinates needed for interpolation is simply a linear system of two equations An optimized algorithm would only take very few floating point operations about 8 multiplications after the ray plane intersection But using triangles instead of quadrangles has also several drawbacks First there a two solutions to decompose a quadrangle into two triangles There is no absolute choice and results will be very different when you take ABC CDA instead of DAB BCD especially if the curvature of the surface is high But the main drawback of triangles is that the isoparametrics u constant or v constant are not preserved see figure Thus every texture mapping or radiosity reading if you use a radiosity first pass in your system will be deformed u 0 u 5 u 1 u 0 u 5 u 1 D C D C A B A B u 0 u 5 u 1 u 0 u 5 u 1 Isoparametric u 5 using 1 quadrangle and 2 triangles Three is bad four is good Dustin Hoffman in RainMan But there is a drawback using quadrangles instead of triangles speed Indeed computing the intersection and getting the u v parameters of the intersection point consists in solving a non linear system of equations And there is a square root Yerk see Haines chapter in Introduction to Ray Tracing Fortunately the square root can be avoided in many cases Tessellating classical scenes will create a lot of very symphatic quadrangles squares rectangles parallelograms and trapezoids For instance tessellating a surface of revolution or more generally a surface created by sweeping a curve around an axis according to another curve will create only trapezoids For squares rectangles and parallelograms u v are given by a linear system For trapezoids u v are given by a system of one linear equation and one non linear equation For all that cases finding directly the intersection between the ray and ONE quadrangle is LESS COSTLY than finding the intersection between the ray and TWO triangles Another advantage of dealing with quadrangles vs triangles is the memory cost There are less primitives to create to store to transform to put in voxels Finally never forget that for shadow rays u v are not needed Thus using a simple intersection test Jordan test will be faster for the same result reply from Eric Haines Just to be a devil s advocate I thought I d bring up some problems with quadrilaterals versus triangles I personally like quadrilaterals especially because of the strange shading artifacts from triangles However we sometimes use triangles such as in the situation where the quad mesh gives quadrilaterals that are not totally planar i e the four points don t lie in a single plane This is ill defined and so we must triangulate A more important time for triangulation is in animation If you use Gouraud interpolation for shading your primitives triangles are rotation invariant while quadrilaterals are not As such if you make a film of some object made of quadrilaterals rotating you can see the quadrilateral shades change over time Christophe s reply Well non planar quadrilaterals surely can be a problem But when rendering a scene there are so much approximations that are made on the illumination model on the shading technique on the normal vector computation So why should it not be allowed to do some approximation about the geometry and replace a non planar polygon by a planar one The method I use is the following When sampling your object along the u and v coordinates test about the planarity of the quadrangle One technique could be to compute the solid angle subtended by the 4 vertex normal vectors Another technique could be to compute the max distance from a vertex to the approximation plane AC x BD When the solid angle or the max distance is greater than a given tolerance then subdivide the quadrangle quadtree like scheme until the tolerance is reached Of course every one knows that patch cracking as defined by Catmull should occur But practically I you insure that two adjacent quadrangles are at neighboring levels in the quadtree cracking can not be visually detected I used that trick intuitively though I saw recently a paper on it can t remember where Concerning Gouraud shading rotation invariance of triangles vs quadrangles is not due to the number of vertex but to the fact that Gouraud shading use an interpolation in screen space I should avoid like the plague every method that interpolates in screen space Effects are well known perspective distorsion rotation dependence and so on I really think that screen space Gouraud Phong shading would disappear soon and be replaced by their equivalent object space shading I haven t seen papers about that fact but I m sure that sure techniques are already in use The idea is to use a dicing technique as in the Reyes rendering system to create micro quadrangles by sampling a quadrangle along u and v coordinates The number of samples of the u coordinate is proportional to the length of AB and CD edges similarly for v with BC and DA edges The only thing to do is then to visit every micro quad vertex double loop over u and v interpolate incrementally either x y z r g b Gouraud or x y z nx ny nz Phong and average samples that fall in the same pixel The technique isn t more complicate as screen space interpolation and can be hardware coded as well incremental scheme with integer arithmetic The ONLY advantage is Gouraud and Phong today is that they are hardware coded so outperforming every software algorithm But it is perhaps time for chip designer to realize that there are other and better shading methods that support hardware implementation as well For instance when will we see a chip that does incremental voxel traversal for ray tracing Eric s reply Interesting comments We do similar things with non planar quadrilaterals that is we find if something is not flat by checking its tolerance from some ideal plane for it If the tolerance is noticeable we take special measures I agree that it would be nice if Gouraud shading was replaced with something else Renderman micro facets is certainly one way to go The trick is what if you are dealing with a surface that a does not have a natural parameterization that is u v values are not attached to it or b the surface has 5 or more vertices It s not all that clear how to combine the various vertex samples to get a proper shade The problem is admittedly ill defined but some answers look better than others Doing a full weighted average depending on the distance to all vertices from a given point on the surface has been proposed but this takes forever for complex polygons A voxel walker might be a nice hardware addition someday but I think the main problem with it is that it s very special purpose Most hardware manufacturers don t want to make highly specialized chips if the market is small Someday I suspect things will get fast enough that ray tracing becomes popular because it s fairly quick to do at this point paradoxically we ll probably see specialized hardware that makes ray tracing much faster still However right now I see companies like AT T Pixel Machines getting little business for their ray tracers everyone likes the images but few seem to want to get involved making them for real back to contents New Release of Radiance Software Bug Fixes by Greg Ward gjward lbl gov I have just put together a new release of Radiance 1 3 In addition to the IES luminaire translator included separately on some tapes 1 3 contains several improvements including faster runtimes for oconv with instances a driver for NeWS and thus SGI s window system better memory use on some machines fisheye views and a translator for Architrion I plan to release more CAD translators specifically one for DXF in the near future The new tar file takes up over 36 Mbytes because it includes compiled versions for Sun 3 Sun 4 IRIS DECstation and MacIntosh running A UX 2 0 so you will need to send a large tape to get a copy Of course you do not need to load the binaries on your machine if you don t want them As before full C source code is provided for all programs Send your tapes to Greg Ward Lighting Systems Research Lawrence Berkeley Laboratory 1 Cyclotron Rd 90 3111 Berkeley CA 94720 Thanks to an astute user I have learned of a rather serious bug in the IES luminaire data translator ies2rad It involves the improper conversion of type B photometry and some types of asymmetric fixtures Anyone who is currently using this program or plans to use it in the future is advised to get the corrected source from me directly back to contents Radiance Timings on a Stardent by Eric Ost emo ogre cica indiana edu Here is the most recent set of timings which resulted from running the Radiance batch ray tracer on tuna Note that each rpict is a different instance of the ray tracer The differences are name compiled with rpict noO no optimizations selected rpict 01 O1 common sub expression etc optimizations performed rpict O2 O2 vectorization optimizations performed rpict O3 O3 parallelization optimizations performed Command rpict X vp 52 5 6 58 vd 05 6 8 vu 0 1 0 vh 35 vv 35 av 1 1 1 x 1000 y 1000 scene oct scene raw System Stardent Titan 3000 4 25MhZ R3000 processors 32 Mb main memory file input read from NFS mounted file system file output written to a local disk file system timing batch ray tracer rpict noO real 4 14 1 user 4 04 1 sys 8 5 timing batch ray tracer rpict O1 real 4 14 4 user 4 04 4 sys 8 1 timing batch ray tracer rpict O2 real 4 27 1 user 4 18 2 sys 6 8 timing batch ray tracer rpict O3 real 4 15 4 user 16 37 5 sys 17 6 Simply optimized code does not seem to have much advantage over unoptimized code Vectorization appears to slow things down but running on all 4 processors seems to recover nearly all of the real time performance that was lost The fact that all of these results per processor are fairly close probably indicates that to obtain significant benefits from vectorization parallelization modification of the implementation itself is required A run time subroutine loop histogram obtained using prof has indicated several instances where in lining code sequences may improve performance though exactly how much improvement will be obtained remains to be seen Further information from Eric Ost Subject Misc Radiance 1 3 benchmarks Program rpict version 1 3 Date February 22 1991 This benchmark involves the example 1000x1000 picture described in ray examples textures as rendered from the associated makefile ray examples textures Makefile all times are in seconds all times are in seconds System Real User System Sun 4 330 ogre 10 27 9 8 10 5 8 5 SGI Personal Iris pico 5 41 0 5 26 5 1 6 IBM RS6000 model 320 off site 4 19 2 4 13 9 0 3 Stardent Titan 3000 tuna l 4 13 9 4 04 3 7 8 IBM RS6000 model 540 off site 2 50 3 2 45 2 0 2 Stardent Titan 3000 tuna 1 52 2 1 45 7 4 8 Legend Note The entire image was rendered on 1 processor Note Each processor renders 1 4 image so this is the MAX of all timings The x y vv and vh parameters were adjusted accordingly Note The IBM timings were performed by our IBM representative off site System Configurations Architecture Operating System RAM Processor Sun 4 330 SunOS Release 4 0 3 CG9 24 MB 20 MhZ SPARC 1 SGI Personal Iris IRIX System V Release 3 2 16 MB 20 MhZ R3000 1 Stardent Titan 3000 Unix System V Release 3 0 32 MB 25 MhZ R3000 4 IBM RS6000 model 320 Unix System V Release 16 MB 20 MhZ RS6000 1 IBM RS6000 model 540 Unix System V Release MB 30 MhZ RS6000 1 I would be happy to answer any questions pertaining to these timings In no way am I suggesting that these timings are the best possible for a given architecture rather they were the ones I obtained and may or may not be repeatable at another site No special fine tuning was done either to the system or to Radiance before performing these timings Each system was relatively quiescent and therefore had a minimal load average back to contents RTSYSTEM Fast Ray Tracer by Patrick Aalto The initial post I just finished a small demo I have been working on a couple of months It performs real time ray tracing and shading a sort of mixture of them both on an IBM PC compatible computer with VGA graphics I find it pretty impressive although the environment is pretty simple It has a planet a moon and a sun It runs at 70 frames second on my 80386 20 Mhz machine This RTSYSTEM Ray Traced System is a small demo that uses my new superfast raytracing algorithms It works on register compatible VGA cards only using the non standard 320x400x256 screen mode This mode is highly suitable for animation since it features two separate video pages and lots of colors Nearly all common VGA cards work quite well in this mode This demo shows a moon orbiting a planet The viewer is on a distant moon of the planet and is looking up towards the planet and the other moon A distant sun can also be seen from time to time It is very easy to run this demo just type RTSYSTEM and it starts to run After a second or two a green number will appear on the bottom right corner of the screen This number tells you how many frames per second your computer is fast enough to draw I programmed this demo such that it will just run at the maximum 70 frames second on my 80386 20 Mhz computer A slow VGA card or a slower CPU will not reach 70 frames second but even a 33 Mhz 80486 machine will not run faster than 70 frames second since this is the fastest hardware refresh rate of a VGA display at this resolution To quit the demo just press the ESC key The method of rendering shaded objects usually requires a lot of computation since the correct color value has to be computed separately for every single screen pixel The color value of a certain pixel depends on the amount of light and it s color this pixel transmits towards the eye of a viewer Since each pixel represents some small portion of some physical object in the 3D image space the transmitted light can be calculated based on the properties of this physical object When light hits a smooth surface a portion of it is reflected and the rest is transmitted into the object if the object is even slightly transparent The direction of the reflected light is given by the Law of Reflection the angle of the reflection direction r is equal to the angle of incidence and will be in the same plane as the incident vector v and a surface normal vector N Vector r can be determined using vector arithmetics r v 2Ncos v 2N vN To calculate a dot product of two vectors requires normally 9 multiplications 1 division and 1 square root All this for every pixel in the object The planet in the middle of the screen has nearly 2800 pixels by the way This demo uses a highly sophisticated technique to calculate the color of a certain pixel with only one table lookup and one addition per pixel Everything is also done using only integer values 16 and 32 bit obviously Other new techniques in this demo include a 3D modification of a well known Bresenham s circle algorithm to calculate all the X Y and Z values of a ball using only integer additions The standard method uses the ball equation X Y Z R from which the values for Z coordinates for instance can be determined if all the other values are known This includes a square root and 3 multiplications per every X Y pair Still another new technique is to apply trigonometrics to the ray sphere intersection problem This does not reduce the needed computations very much but gives correct results with much smaller intermediate results VERY important when dealing with only integer resolution It is interesting to note that even a standard 386 machine with a VGA card can perform simplified ray tracing in realtime All it takes is some optimizations on the algorithms used An interesting thing is the optical effect called Mach band effect If you look closely at the planet surface you will notice all sorts of different patterns on it which change rapidly as the sun moves These patterns are merely an optical illusion caused by the way the retina of our eyes function Since there are only 64 different shades of grey from black to white available on a VGA display the eye is sensitive enough to register the small change between two neighboring pixels thus creating a pattern on the screen Studying this demo you can also find out what anti aliasing means Look at the edge of the planet when it is fully lit You will easily see the jaggies The planet edge does not appear to be smoothly round but rather can easily be seen to be just a collection of pixels Now look at the day night border on the planet You will not see such jaggies here This is because this borderline is anti aliased The transition from complete black to complete white is gradual and thus the eye can not detect individual pixels My new game LineWars II will use some of these superfast rendering techniques It will come out sometime this year I hope Patrick Aalto Contact Internet ap tukki jyu fi account about to expire soon tkp72 jytko jyu fi I ve been told that the demo I mentioned earlier can be found at chyde uwasa fi sorry don t have the IP number here now in the directory PC demo This one caused a lot of traffic on the net It s a cute demo though there aren t all that many rays traced and a lot of tricks are done to avoid them I think this is just fine why trace rays when you don t need to But it definitely got people excited when Patrick claimed real time ray tracing EAH back to contents DKBTrace Beta Available by David Buck dbuck ccs carleton ca I ve placed a new version of DKBTrace onto alfred ccs carleton ca 134 117 1 1 for beta testing and for those who just can t wait The source files and data files for DKBTrace version 2 10 can be obtained by anonymous ftp from the above site They are in directory pub dkbtrace dkb2 10 No executables are available at this time Abstract DKBTrace is a freely distributable raytrace program that renders quadric shapes CSG Constructive Solid Geometry and a handful of other primitive shapes Shadows reflection refraction and transparency are also supported DKBTrace also allows you to define complex an interesting solid textures such as wood marble bozo etc The texturing facility has been greatly enhanced in version 2 10 NOTE The data files for version 2 10 are NOT completely compatible with previous versions Old data files must be modified to run on the new raytracer Please report any problems or questions to me at dbuck ccs carleton ca I m also starting up three mailing lists for people interested in the following aspects of DKBTrace General Questions and Problems with DKBTrace Porting DKBTrace to various platforms Writing a graphical user interface for DKBTrace note I don t intend to write a graphical user interface but several people have expressed an interest so I thought I should at least maintain a mailing list for these people so they can keep in touch If you want to be added to any or all of these mailing lists please send me an EMail message indicating which mailing lists you re interested in The final release of version 2 10 should be in one or two weeks I will post another announcement at that time back to contents Computer Graphics 2nd Edition Corrections Software etc by the Brown Automatic Mailer Your e mail addressed to graphtext cs brown edu has been handled by an automatic server program that generated this response This server provides several services for readers of Computer Graphics Principles and Practice 2nd edition by Foley van Dam Feiner and Hughes Addison Wesley 1990 ISBN 0 201 12110 7 There are several distinct services you can obtain from this server each identified by a unique keyword To obtain the service mail a message to graphtext cs brown edu containing the keyword and only the keyword in the Subject line Only one service can be obtained per message Here are the services currently available with the appropriate Subject lines shown Subject Help The server sends you this helpful message in response If the server program seems to be broken somehow send mail to Dave Sklar dfs cs brown edu Subject Get Text Bug List Use this service to obtain a list of known bugs in the text Subject Report Text Bug Use this service to report a bug in the text The body of your message should give the page and line number of the bug and if possible indicate the necessary correction to be made Please check the text bug list before submitting a bug report so you don t submit a duplicate bug report Please don t submit a bug report unless you are sure that there is a bug in the text this service is not for raising questions Subject Get Text Algorithms Use this service to get instructions on how to obtain electronic copies of many of the major algorithms all in Pascal presented in the textbook Subject Software Distribution Use this service to get instructions on how to obtain SRGP and SPHIGS the software packages described in chapters 2 and 7 These include information on all three versions 1 UNIX X11 available via ftp 2 Macintosh available via ftp except Pascal via floppy 3 IBM PC and compatibles available via floppy Subject Get Software Bug List Use this service to obtain a list of known bugs in SRGP SPHIGS This list does not include omissions and bugs that are documented in the SRGP SPHIGS reference manuals Subject Report Software Bug Use this service to report a bug in the software or in the doc associated with the software If you can present a code fragment that isolates the bug all the better At a later date we will support services for the sharing of exercises produced by instructors using the text and for the submission of suggestions for improvement of the text in later revisions back to contents Papers which are currently available from the Net via anonymous FTP J Kouhia Last update January 28 1991 Updates and mails to Juhana Kouhia kouhia nic funet fi 128 214 6 100 Put the new papers to nic funet fi 128 214 6 100 pub graphics papers Incoming K KYRI90 A George Kyriazis T A Study on Architectural Approaches for High Performance Graphics Systems I Rensselaer Design Research Center Technical Report No 90041 D September 1990 O weedeater math yale edu 128 113 6 10 pub Papers kyri90 ps Z O nic funet fi 128 214 6 100 pub graphics papers kyri90 ps Z K MUSG88 A F Kenton Musgrave T Grid Tracing Fast Ray Tracing For Height Fields J Research Report YALEU DCS RR 639 D July 1988 O weedeater math yale edu 128 113 6 10 pub Papers musg88 ms Z O nic funet fi 128 214 6 100 pub graphics papers musg88 ps Z K MUSG89a A F Kenton Musgrave T Prisms and Rainbows a Dispersion Model for Computer Graphics J Proceedings of the Graphics Interface 89 Vision Interface 89 I Canadian Information Processing Society C Toronto Ontario P 227 234 D June 1989 O weedeater math yale edu 128 113 6 10 pub Papers musg89a ms Z O nic funet fi 128 214 6 100 pub graphics papers musg89a ps Z K MUSG89b A F Kenton Musgrave A Craig E Kolb A Robert S Mace T The Synthesis and Rendering of Eroded Fractal Terrains J Computer Graphics SIGGRAPH 89 Proceedings V 23 N 3 D July 1989 P 41 50 Z info on efficiently ray tracing height fields K fractal height fields O weedeater math yale edu 128 113 6 10 pub Papers musg89b ms Z O nic funet fi 128 214 6 100 pub graphics papers musg89b ps Z K MUUS A M J Muuss T Excerpts from Workstations Networking Distributed Graphics and Parallel Processing I BRL Internal Publication D O freedom graphics cornell edu 128 84 247 85 pub RTNews Muuss parallel Z O nic funet fi 128 214 6 100 pub graphics papers Muuss parallel ps Z K MUUS A M J Muuss A C M Kennedy T The BRL CAD Benchmark Test I BRL Internal Publication D O freedom graphics cornell edu 128 84 247 85 pub RTNews Muuss benchmark Z O nic funet fi 128 214 6 100 pub graphics papers Muuss benchmark ps Z K SHIR90a A Peter Shirley T Physically Based Lighting Calculations for Computer Graphics I Thesis D November 1990 O weedeater math yale edu 128 113 6 10 pub Papers shir90a O nic funet fi 128 214 6 100 pub graphics shirley K SHIR90b A Peter Shirley T Monte Carlo Method I Appendix from the SHIR90a D November 1990 O nic funet fi 128 214 6 100 pub graphics papers shir90b ps Z K WILS91 A Tom Wilson T Ray Tracing Abstracts Survey D January 1991 O weedeater math yale edu 128 113 6 10 pub Papers wils91 1 shar Z O nic funet fi 128 214 6 100 pub graphics papers wils91 1 ps Z back to contents USENET cullings follow Ray Cylinder Intersection Tutorial by Mark VandeWettering I am trying to do ray tracing of light through a cylinder coming at different angle to the axis of the cylinder Could some one give me some pointers Ray cylinder intersection is conceptually just as easy as hitting a sphere Most of the problems come from clipping the cylinder so it isn t infinite I can think of several ways to do this but first let me mention that you should consult Introduction to Ray Tracing edited by Andrew Glassner Articles by Pat Hanrahan and Eric Haines go over most of this stuff It s easiest to imagine a unit cylinder formed by rotating the line x 1 in the xy plane about the y axis The formula for this cylinder is x 2 z 2 1 If your ray is of the form P t D with P and D three tuples you can insert the components into the original formula and come up with px t dx 2 pz t dz 2 1 0 or px 2 2 t dx px t dx 2 pz 2 2 t dz pz t dz 2 or px 2 pz 2 2 t dx px dz pz t 2 dx 2 dz 2 which you can then solve using the quadratic formula If there are no roots then there is no intersection If there are roots then these give two t values along the ray Figure out those points using P t D Now clipping We wanted to have a finite cylinder say within the cube two units on a side centered at the origin Well gosh ignore any intersections that occur outside this box Then take the closest one Now to intersect with an arbitrary cylinder work up a world transformation matrix that transforms points into the objects coordinate system Transform the ray origin and direction and voila You do need to be careful to rescale t appropriately but it s really not all that hard You might instead want to implement general quadrics as a primitive or choose any one of a number of different ways of doing the above Homogeneous coordinates might make this simpler actually Hmmm And there is a geometric argument that can also be used to derive algorithms like this Think about it It shouldn t be that difficult back to contents C Fractal and Ray Tracing Book by Fractalman There s a very nice book called Fractal Programming and Ray Tracing with C by Roger T Stevens and published by M T Books The book comes with a disk of sample programs for Zortech C but can be modified to be used with Turbo C The text is very easy to understand and you only need some rudimentary knowledge of C and computer graphics back to contents Ray Spline Intersection Reference by Spencer Thomas Can someone please tell me where I can find an algorithm for finding the intersection of a ray and a Bezier and or B Spline patch You might look at Lischinski and Gonczarowski Improved techniques for ray tracing parametric surfaces Visual Computer Vol 6 No 3 June 1990 pp 134 152 Besides having an interesting technique they refer to most of the other relevant work back to contents Superquadric Intersection by Rick Speer Michael B Carter Here s some material that may be of assistance The following paper An Introduction to Ray Tracing by Roman Kuchkuda pp 1039 60 in Theoretical Foundations of Computer Graphics and CAD R A Earnshaw Ed Springer Verlag 1988 is a good introduction to the tracing of superquadrics In addition to the usual overview material it gives actual source code in C This paper Robust Ray Tracing with Interval Arithmetic by Don Mitchell pp 68 74 in the Proceedings of Graphics Interface 90 Canadian Infor mation Processing Society Toronto 1990 focuses in particular on root finding when intersecting a ray with an implicit surface Mathematical and pictorial examples of tracing super quadrics are given along with data on the time cost of intersections when run on a SPARCstation There s also some discussion of using the method for CSG Finally this thesis Implementation of a Ray Tracing Algorithm for Rendering Superquadric Solids Bruce Edwards Masters Thesis and Technical Report TR 82018 Rensselaer Polytechnic Institute Troy NY December 1982 probably goes into more detail than either of the papers mentioned above Actually it doesn t there s one page on intersecting superquadrics which says something like use Newton s Method and gives a reference number which turns out to be a private conversation with Alan Barr EAH From Michael B Carter I was just digging through my literature and finally came up with the reference that was stuck in the back of my mind I cannot vouch for the speed of this method but here s the ref Kalra Devendra and Alan H Barr Guaranteed Ray Intersections with Implicit Surfaces Computer Graphics Vol 23 No 3 July 1989 This method uses Lipschitz conditions to intersect ANY implicit surface It always finds the closest or subsequent intersection points even in badly behaved functions There are also some really neat pictures of blended objects in the paper back to contents Comments on Interval Arithmetic by Mark VandeWettering Don Mitchell First some comments by Mark Robust Ray Tracing with Interval Arithmetic by Don Mitchell pp 68 74 in the Proceedings of Graphics Interface 90 Canadian Infor mation Processing Society Toronto 1990 Rick Speer Interesting paper though I admit to not having tried its method yet Looks like a great general method for superquadrics and whole families of surfaces My favorite paper of this proceedings Eric Haines Very interesting paper but I believe that the convergence of the method is quite slow even slower than bisection I coded up a version of it for the MTV raytracer and was testing it out when it was clear it was converging VERY slowly If anyone has some hints or wants to discuss this further send me some email The reason I was interested in this scheme is that it would allow you to trace non linear rays rays could be generalized to space curves which would allow more generic transformations of objects ala Al Barr You can use geometrical properties of the superquadric to figure out intersections There can be at most two intersections in any octant of the superquad so a primitive method would be to handle each octant separately and then use some favorite numerical method Newtons or bisection to home in on the roots Don Mitchell responds The interval arithmetic algorithm is a root isolation algorithm It gets used in combination with root refinement something much faster than bisection and much safer than Newton s method hopefully The speed of convergence depends a lot on how you are refining intersections If you are just performing the interval algorithm until it converges to a root that would be very slow and not really a proper application of the method For a benchmark image containing a number of 4th degree algebraic surfaces the interval method was about three times slower than a specialized polynomial solver e g Sturm sequences Its hard to compare its run time on transcendental surfaces since I don t know any other way except Kalra s Lipschitz method described in SIGGRAPH 89 I think interval arithmetic is more straightforward than the Lipschitz methods particularly for surfaces with singular gradients like concave superquadrics It does not require an off line human calculation to derive Lipschitz conditions There are also a lot of improvements that I didn t mention or implemented later For example there are faster interval multiply algorithms than the one I gave You can do the root isolation algorithm with F dF dt instead of F grad F There are also ways of using the derivative intervals to narrow the function intervals with the mean value theorem Like a lot of techniques there is a long journey between theory and implementation back to contents Platonic Solids by Alan Paeth Coordinates for these and for their four dimensional analogs were published by HSM Coxeter first in 1948 in Regular Polytopes pg 52 53 Methuen London and again in subsequent revisions any all are highly recommended reading The table for quasi regular 3D polyhedra is transcribed below I ve posted this a few times already perhaps a frequently asked entry is in order PLATONIC SOLIDS regular and quasi regular variety Kepler Poinset star solids omitted The orientations minimize the number of distinct coordinates thereby revealing both symmetry groups and embedding eg tetrahedron in cube in dodecahedron Consequently the latter is depicted resting on an edge Z taken as up down SOLID VERTEX COORDINATES Tetrahedron 1 1 1 1 1 1 1 1 1 1 1 1 Cube 1 1 1 Octahedron 1 0 0 0 1 0 0 0 1 Cubeoctahedron 0 1 1 1 0 1 1 1 0 Icosahedron 0 p 1 1 0 p p 1 0 Dodecahedron 0 i p p 0 i i p 0 1 1 1 Icosidodecahedron 2 0 0 0 2 0 0 0 2 p i 1 1 p i i 1 p with golden mean p sqrt 5 1 2 i sqrt 5 1 2 1 p p 1 The poster wanted a circumscribing unit sphere Just pick a vertex and calculate its length to the origin and you have R that sphere s radius Normalize divide all coordinates by R and the solids are contained by a unit sphere Alan Paeth Computer Graphics Laboratory University of Waterloo back to contents Moon Problems by Ken Musgrave et al Am I correct in a vague memory I seem to have that the Earth s moon is supposedly a near ideal Lambertian reflector There s something fishy here methinks The moon is not lambertian If it were then a full moon would be bright at the center of the disk and fade into black at the edges Instead a full moon is a fairly uniformly colored disk If you assume the lambertian surface has a scattering probability kcos theta you might guess that the moon is just k scatters in all directions above the surface with equal probabilities I think this will work for a simple model pete PS I saw some angular reflectance curves in some book I can t find I think it was a heat transfer text The actual function was pretty funky Alain Fournier responds As this is one of my favorite trick question about reflection I ll bite Consider the moon when full that is the sun the light source is in the same direction as the observer the eye It is pretty obvious that it appears essentially as a disk that is the reflected light is about of same luminance all over the visible part of the moon I ignore the effect of the surface details such as the maria That shows that it is neither a specular reflector the center would be a lot brighter than the periphery nor a diffuse reflector the center would be somewhat brighter than the periphery try this on your favorite renderer a perfectly diffuse white sphere illuminated from the direction of the eye So what s going on Well as most of the computer graphics types us ignore the world is not all between totally diffuse and totally specular there are surfaces outside of this In the case of the moon it so happens that a Phong model using the expression loosely with an exponent of 0 5 for the cosine of the angle normal light gives the right appearance of a disk at full moon I can find exact references back in my office if anybody is interested Credit where credit is due Bob Woodham of UBC first pointed that out to me and has worked on the subject of models for the surface reflectance of the moon and other objects in the solar system Doug McDonald replies Remember that the moon has hills and valleys The hills near the terminator are what one sees and the actual surface is seen at an angle much less than 90 degrees The actual surface itself is sort of Lambertian At least when I actually examined some small 5 cm size pieces of the Moon in a lab they looked rather Lambertian On the spot reports agree The word fractal comes to mind Paul Heckbert writes As others have mentioned the moon and other dusty surfaces are not Lambertian Blinn in the paper cited below says they follow the Hapke Irvine illumination model more closely A James F Blinn T Light Reflection Functions for Simulation of Clouds and Dusty Surfaces J Computer Graphics SIGGRAPH 82 Proceedings V 16 N 3 D July 1982 P 21 29 K shading Z Hapke Irvine illumination model Ken gave another problem with rendering the moon A very wide angle view of a scene i e a landscape with a sphere i e a moon in an extreme corner of the image sports one very distorted sphere in the image when rendered using the standard virtual screen model for ray tracing See the cover of Jan 89 IEEE CG A for an example Seems that this is a version of the sphere to plane mapping problem and therefore inadmissible to a non distorting solution Can anyone out there prove this conjecture right or wrong or demonstrate some nice workaround Yes this distortion is due to sphere to plane mapping Actually the volume defined by the rays joining every point on the sphere to the center of projection will be a cone Now an intersection of this cone with a plane will invariably result in an ellipse So EVERY sphere should look like an ellipsoid in a ray traced image which uses this model But the distortion is prominent only for spheres located in extreme corner of the scene I also encountered the same problem and would be interested in any method or projection model which circumvents this problem If the pin hole camera model is not a good model for the human eye brain system then is there any other model which is more accurate Dilip Khandekar A solution I can see is to have each pixel instead of having a calculated position on a viewing plane have each instead with a calculated horizontal and vertical angle from the center Knowing the angles one can easily construct a vector of the appropriate angles to represent this pixel s ray I have not actually implemented this but it is obvious that this would work as when a conventional method is used and the viewing plane is located far from the eye point the near spherical approximation of the plane is good enough to remove most any distortion The reason why a conventional camera does well is due to the same phenomenon it takes a spherical bunch of rays and maps them to the film plane If I ever get my present thesis out of the way I will attempt to implement this in my version of DBW Render Prem Subrahmanyam If I understand this correctly the idea is doing equal angle spacing of rays instead of equal increments on the image plane I gave this suggestion to Ken then quickly tried it out found it lacking as it distorts straight lines into curves and I forget what else See the next entry EAH This rings a bell in my mind since I once by mistake in my raytracer did a purely angular perspective model i e the x axis of the display was really the angle of the ray in the ground plane and the y coordinate was the angle from that plane the image looked different well anybody implemented some kind of different perspective model Ideally you would hook up the user s face to the screen via a telescopic pole and pull it via pneumatic cylinders to the correct viewing distance and the rendering equation should of course not project onto a plane but onto a slightly curved ditto i e a computer monitor Now we would hear no more whining about perspective distorsion No seriously anybody tried twiddling with it I did by mistake in my tracer but well nah not good And the problem is also that these twiddlings are only easy to do in raytracers since linear things polygon s and such may get non linear sides when you twiddle har har for you Z buffalos Zap Anderssen You might like to experiment with mimicking the distorting effect of camera lenses Lenses which behave like renderers are very expensive and are called something like flat plane lenses surprise Ordinary lenses exhibit distortion it s called that in optics books Positive distortion makes flat squares look like pillowcases negative makes them look weird A way to model positive distortion is to move points in the picture closer to the center A point that starts off at r theta on the image plane in polar co ordinates would move to r theta where in two popular approximations r r 1 C r r r r cos C r for appropriate small constants C Of course I was working with images In a ray tracer you would distort the directions of the rays by using the inverse transformation to splay the rays from the camera outwards NO guarantees that it will fix the problem but it is not a million miles away from this discussion Ian D Kemmish If the distorsion is too large look for conformal mappings A conformal mapping would transform small circles to circles The most general conformal mapping from the sphere to the plane is a stereographic projection followed by an analytic transformation of the complex plane Read the Shaum book on complex variables do all the problems and start tinkering Pierre Asselin R D Applied Magnetics Corp Pictures generated with a standard perspective camera model only look normal if the viewing angle used during rendering matches the angle at which you view the picture If you use a horizontal view angle of theta during perspective rendering and view the pictures on a monitor of width w then if you view the screen at a distance of d w 2 cot theta 2 the picture will not look distorted Here s a little table for a w 14 screen telephoto about normal wide angle view angle degrees theta 10 50 90 recommended viewing distance d 80 15 7 The same argument applies in photography shoot a photograph with a standard 50mm focal length lens print it at 8x10 size say and it will look pretty normal when viewed at a distance of about one foot If you shoot a picture with a wide angle lens 24mm say and print it at 8x10 you will perceive perspective distortion if you view it at a distance of a foot but it will look much less distorted if you hold it close to your face so that your viewing angle matches the view angle captured by the lens The argument also applies in projection of movies and slides there is only one point in a movie theater from which a viewer will see the same image as that seen by the camera i e same angle of view Theater geometry and the lenses used for shooting and projection are usually chosen to put that ideal viewer position near the middle of the theater I imagine Assuming perfect filming and projection and one eye closed viewers at this ideal position will not see any distortion artifacts of the projection that is they will not be able to tell the difference between a projected film and a window into a 3 D scene Viewers not at the ideal viewing position such as those in the first row will see the familiar artifacts of perspective distortion that will easily allow them to distinguish between a projected image and a real 3 D scene Another interesting observation about projections is that you can project onto ANY shape screen you like planar spherical cube corner curtain human torso and there will be no artifacts of the projection if the projection lens matches the shooting lens the viewer is right at the projector and the surfaces are properly finished Related question is there a formula relating camera lens focal length and angle of view I would guess that such a relationship would not be theoretical but would be based on practicalities and would vary from manufacturer to manufacturer Paul Heckbert In reply to Paul Heckbert Focal length and angular field are independent For example you can have a 50mm focal length lens which is a standard lens for 35mm photography or a 50mm wide angle lens for a larger film format There are some applications enlarging where it is sometimes recommended to use a wide angle lens from a larger film format in place of a standard lens to assure better field uniformity For a family of lenses designed for a given film size then of course there will be a relationship between focal length and field of view since economics dictate that the field of view should be no larger than necessary Note that the field does not have a sharply defined size but that the intensity drops off continuously at the margins of the field vignetting Jeff Mulligan In response to Paul s related question The relationship is fairly straightforward as I understand it Think pyramid where the width and length of the base are defined by the image dimensions and the height is given by the focal length The formula for the angle is simply angle 2 atan film size 2 focal length For 35mm film whose image dimensions are 34mm by 23mm approx the view angles for a standard 50mm lens are 37 6 by 25 9 degrees Greg Ward If Ken is rendering an outdoor picture at night with the moon in it then it is probably a very wide angle picture and you are absolutely correct that the answer is stick you face closer to the screen and it will look ok You state there is only one point in a movie theater from which a viewer will see the same image as that seen by the camera i e same angle of view Theater geometry and the lenses used for shooting and projection are usually chosen to put that ideal viewer position near the middle of the theater I imagine You don t have to imagine You are exactly right I remember this from filmmaking books I read in high school A 35mm movie camera uses 50mm lenses as the normal lens A 35mm film projector uses a 100mm lens so the picture looks right when you are seated half way between the projector and the screen I don t remember the numbers for Panavision or other wide screen systems Use of telephoto or wide angle lenses in the camera produces some distortion to the viewer at the center of the theater This is something very important to film directors All films are done this way They understand it I have never heard this issue mentioned in the context of computer graphics Maybe no one knows this As to your question is there a formula relating camera lens focal length and angle of view Such a formula is simple if the lens has no distortion and the size and shape of the film is known Where distortion is distortion in the strict optical aberration sense Any optical system is subject to several aberrations to varying degrees These are spherical abberation coma astigmatism curvature of field distortion longitudinal chromatic aberration lateral chromatic aberration Distortion is non uniform magnification across the field of view Magnification usually varies slightly as the angle off the optical axis varies This gives rise to barrel negative or pincushion positive distortion Named for what the image of a square looks like when subjected to said distortion For camera lenses you can safely assume the distortion is very small except for wide angle lenses which is probably the case you were interested in I expect that lens manufacturers would be reluctant to release the actual numbers describing their lens s performance since most people couldn t tell the difference anyway For a lens focused at infinity and flat film fov 2 atan film width 2 focal length The only difference between a distortionless lens and an ideal pinhole camera with respect to field of view is that if the lens is focused at a finite distance replace focal length in the above formula with 1 1 focal length 1 object distance which is the lens to image film distance Chuck Grant Related question is there a formula relating camera lens focal length and angle of view The way this is done for a rectilinear lens everything one ever encounters short of optics with high distortions or a fisheye is based on the size of the image formed In an ideal lens a pin hole is a nice first approximation the field is as large as you want the negative or film holder or other physical limitation defines the field stop In a more complex lens the diameter of some internal element might serve to define the field stop a 50mm lens for a 35mm SLR would probably not be able to produce a 250 mm image circle if mounted on a large format camera s lens board If if could it would make a tremendous wide angle If the linear field F is given then you can use the dimensionless relation 2 tan A 2 F EFL to solve for angular field A or effective focal length This says for instance that a conventional SLR with 43 mm film diagonal 35 mm film is 24 mm x 36 mm hypot 24 36 43 will cover a reasonable mildly wide angle 53 degree diagonally angular field with a 43 mm lens installed Alan Paeth So using the theoretical yay relation angle 2 atan film size 2 focal length with 35mm film format which I m taking to be 34mm wide by 24mm high Greg Ward s numbers Alan Paeth s numbers differ slightly 24x36 we get the following correspondence for some common lens focal lengths focal length mm 24 35 50 80 200 horizontal angle deg 70 6 51 8 37 6 24 0 9 72 vertical angle deg 51 2 36 4 25 9 16 4 6 58 Paul Heckbert back to contents Shadow Testing Simplification by Tom Wilson Out of nowhere I have come up with a new speedup technique for shadow testing in ray tracing I don t have the kind of code necessary to test it It is kind of the inverse of a bounding volume Consider an expensive to intersect object and for this example a convex solid I ll generalize later Now typically a bounding volume tells you when a ray misses the object or parts of the objects for hierarchies Eventually you have to intersect the object itself I m assuming the object hasn t been broken down into polygons or whatever Now what would be good is a volume that if intersected would tell you the object is hit without intersecting the object at all of course it won t always work Suppose for this example we have a bloboid sphere or a megafaced convex polyhedron and we put a sphere inside the object such that the entire sphere is enclosed in the real object Now if a ray hits the sphere it definitely hits the object If the ray misses the sphere it may still hit the object somewhere between the bounding volume and the inner tube volume Now this scheme is ideal for shadow testing since where the object is hit by the ray is usually irrelevant A normal ray needs the intersection point so this scheme may not help much I don t know An ugly and pretty bad 2D example 000 00 00 0 s define the sphere inside the object s 0 0 0 0 0 0 0 The object could really be any type of object not just convex provided a sufficient inner tube volume can be constructed It s really the same problem as the bounding volume the better the bounding volume inner tube the more rays that are culled as misses hits Is it feasible I don t know I don t have any complicated objects code in my tracer so I can t test yet without writing the code first obviously Perhaps someone who has the type of setup necessary can incorporate this and find out for that matter has anyone already done it If it s a good scheme maybe I should change my thesis 8 I really just wanted to get into the next issue of the RT News Please give some feedback Reply from Mark VandeWettering My guess is that while this would work it is not necessarily a good thing to do Whether it is an actual speedup is basically a result of how often you hit the internal bound versus how often you hit the object As a crude guess we might imagine that the probability of hitting an object is roughly proportional to its surface area Further suppose that our complex object has surface area A and for the sake of argument spherical As a typical example of our inner bound lets assume it is a sphere as well but with radius 10 smaller This seems pretty tight I bet you could not do much better for real objects If the object has unit radius its surface area is 4 Pi Our unbounding sphere has surface area 81 4 Pi So we can assume for this argument that 81 of all rays that penetrate the object will penetrate the inner volume Examining the costs 81 of the time we just intersect the cheap volume 19 of the time we need to intersect BOTH volumes to determine whether or not the object intersects the ray To generalize let C cheap be the cost of intersecting the cheap volume C object be the cost of intersecting the real object p be the probability of a ray which hits the object hitting the inner cheap bounding volume Then this scheme is a potential speedup if p C cheap 1 p C cheap C object Is this a speedup I dunno One scene in Eric Haines SPD data base includes a large gear with 144 edges The polygon intersection routine I use is linear in the number of edges for a polygon The majority of rays fall within a disc which probably accounts for 90 or more of the total area of the face I am pretty sure that a scheme like you suggest would be useful for this case But in general I dunno It really depends on the probability p For most objects my guess is you might be able to get p 0 5 which would make the inequality something like C cheap 0 5 C object which actually does seem to make it attractive In general if the ratio of C cheap C object r then we can solve for the percentage of inner bounding volumes we need to make this scheme profitable p C cheap 1 p C cheap 1 p C object p C cheap C cheap p C cheap C object p C object C cheap C object p C object p C object p r What this means if the ratio of speed from cheap to expensive is 1 10 then we need to have probability greater than 10 to achieve a speedup Hmmm This probably bears looking into Any comments John Gregor comments Well to add another data point the Wavefront software has both a trace object and a shadow object associated with each object being rendered The trace object is the object used in reflections Usually these objects are left undefined or point to a lower complexity but similarly shaped object Since shadows and objects appearing as reflections are typically small and are there to provide visual cues and since Wavefront s running time is decidedly non linear to number of polygons in the scene this is a win Also you can achieve some neat tricks using this You can have an object cast a shadow from a completely different object e g a kitten casting a lion s shadow or appearing as something else in mirrors Using the same object with a different offset or scale can lead to some pretty neat effects occasionally also Rick Speer writes I d like to add my 0 02 and note that W R Franklin examined this idea in a non raytracing but similar context in the following paper 3D Geometric Databases using Hierarchies of Inscribing Boxes pp 173 80 in Proceedings of CMCCS 81 this is what the Canadian conference now known as Graphics Interface used to be called these volumes are available from the Canadian Information Processing Society Toronto if anyone s interested To be more specific let me quote a bit from the paper s abstract Hierarchical tree structured databases are an efficient way of representing scenes with elaborate detail of varying scales Storing a circumscribing box around each object is a well known method of testing whether the object intersects or obstructs any other objects This paper proposes another aid an inscribing box The inbox is a polyhedron that is completely contained in the ob ject It should be as large as is easy to determine The inbox speeds up visibility tests in the following way He concludes By combining inboxes and circumboxes it is possible to calculate the visible surfaces of a hierarchical scene in time linear in the visible complexity of the scene In his followup message Mark goes on to note that this issue really needs to be studied on test scenes using a probabilistic analysis I hope it wouldn t be too immodest of me to note that such an analysis appears in the paper A Theoretical and Empirical Analysis of Coherent Ray tracing L R Speer T DeRose and B Barsky pp 11 25 in the Proceed ings of Graphics Interface 85 CIPS Toronto 1985 back to contents SIMD Parallel Ray Tracing by George Kyriazis Rick Speer In article 9308 mirsa inria fr kjartan puce inria fr Kjartan Emilson writes Does anybody have an algorithm for a massively parallel raytracer which could for example run on a Connection Machine i e a machine with a single instruction many data architecture The ray tracing algorithm is usually parallelized ray at a time which makes it suitable for MIMD machines If you want to run it on an SIMD you have a problem since you have to advance all rays at the same time then filter out which rays do not need a second reflection and trace the second level etc I believe that Scott Whitman at uiuc has written a ray tracer for a SIMD machine I don t remember any details Pick up the SIGGraph proceedings for either 88 or 89 don t remember which one on ray tracing or parallel computer architectures for computer graphics and you are going to see his name there Rick Speer writes A fair amount of literature is beginning to appear on this subject The references below should get you started 3D Image Synthesis on the Connection Machine Franklin C Crow Gary Demos Jim Hardy John McLaughlin and Karl Sims pp 254 69 in Parallel Processing for Computer Vision and Display P M Dew T R Heywood and R A Earnshaw Eds Addison Wesley 1989 Ray Tracing on a Connection Machine H C Delaney pp 659 67 in the Proceedings of the 1988 International Conference on Super computing ACM July 1988 Ray tracing Parallelization on a SIMD SPMD Machine PhD Thesis Marie Claire Forgue Laboratoire de Signaux et Systemes Universite de Nice Nice France September 1988 Distributed Ray Tracing Using an SIMD Processor Array A N S Williams B F Buxton and H Buxton pp 703 25 in Theoretical Foundations of Computer Graphics and CAD R A Earnshaw Ed Springer Verlag 1988 back to contents Rayscene Animator by Jari K hk nen sic Thanks to all people who voted for Rayscene It s now available from tolsun oulu fi Version is 1 3 which the first published version of Rayscene so docs are not perfect But we are working on it The stuff is in directory pub rayscene Directory also contains two ani mations for PC and animation player Autodesk Animator AAPLAY EXE Those animations were made with Rayscene and DKB raytracer Enjoy Also stuff for Amiga should be available soon More information from hole rieska oulu fi or oldfox rieska oulu fi There are a few animation demos made with the Rayscene animation utility FTPable from tolsun oulu fi 128 214 5 6 in the directory pub rayscene anim PC for Autodesk Animator on the PC and in pub rayscene anim amiga for Movie on the Amiga Here is a short description of the animation files PC stuff aaplay lzh Autodesk Animator animation player freely distributable rdice lzh One mirrored die rounding over chess board 2dice lzh Two dice movdice lzh same as above but viewpoint moves bouncing lzh Mirrored ball bouncing over chess board 2balls lzh Two mirrored color changing balls moving over wavy surface Animation data files created with Rayscene s soon released utili ty Sin Data file and array file by Panu Hassi This animation Amiga version can also be found from anim amiga NOTE When Sin is released with Rayscene version 1 31 datafile and arrayfile are included and explained too vortdemo lzh Combination of three different animations cylinder mech and Chess These animations are usually distributed with VORT tracer NOTE No Rayscene used Just for fun and there seems to be a request for raytraced animations Amiga At the moment only 2balls is available There s going to be more Rayscene was released only a few weeks ago so there are going to be more animations here Email me for more information NOTICE Rayscene is now available from iear arts rpi edu also Directory pub graphics ray rayscene Animations are available only from tolsun P S DKBTracer was used for rendering back to contents SIPP 2 0 3d Rendering Package by Jonas Yngvesson and Inge Wallin We just posted the source code to sipp 2 0 in comp sources misc It may be a while before it appears due to moderation though Here is an excerpt from the README file sipp 2 0 3d rendering package by Jonas Yngvesson jonas y isy liu se Inge Wallin ingwa isy liu se Linkoping Institute of Technology Sweden This is the beta test release of version 2 0 of SIPP the SImple Polygon Processor SIPP is a library for creating 3 dimensional scenes and rendering them using a scan line z buffer algorithm A scene is built up of objects which can be transformed with rotation translation and scaling The objects form hierarchies where each object can have arbitrarily many subobjects and subsurfaces A surface is a number of connected polygons which are rendered with Phong interpolation of the surface normals The library has an internal database for the objects that is to be rendered Objects can be installed in and removed from this database at any time The library also provides 3 dimensional texture mapping with automatic interpolation of texture coordinates Simple anti aliasing is performed through double oversampling A scene can be illuminated by an arbitrary number of light sources A basic shading algorithm is provided with the library but the user can also use his own shading algorithms for each surface to produce special effects Images are produced in the Portable Pixmap format ppm for which many utilities exist back to contents 3DDDA Comments by John Spackman 3d dda s are prone to many special cases especially when line slopes approach zero so the the inverse line slope generally used as the increment a la ARTS approaches infinity A more numerically stable hence more robust generalization of Bresenham s algorithm to 3D which navigates ALL the voxels intersected by the ray is described in Scene Decompositions for Accelerated Ray Tracing John Spackman PhD Thesis The University of Bath UK 1990 Available as Bath Computer Science Technical Report 90 33 Copies can be ordered from Angela Coburn at JANET amc uk ac bath maths or ARPA amc maths bath ac uk nsfnet relay ac uk Any surface mail should be addressed to Angla Coburn Mathematical Sciences The University of Bath Claverton Down Bath AVON BA2 7AY UK However uniform spatial division is generally wasteful in memory costs being non adaptive I prefer octtrees the above thesis describes an incremental ray navigation of octtrees techniques for octtree construction indeed for building Uniform grids My way s better than everyone elses back to contents Radiosity Implementation Available via FTP by Sumant sumant shakti ernet in I have carried out some Radiosity implementations as part of the investigation into light equilibrium based rendering methods for my doctoral work To test the implementation I have used a very simplified scene modeler BOX BOX supports only box as the modeling primitive and translation and scaling as the modeling transformation I am looking for some good planar surface model data Interested netters may please send me data with the data format I will try to provide the input interface for the sent data formats The implementation is available at our FTP site pub Rad 0 1 tar Z at sbs ncst ernet in ip 144 16 1 21 In case of any difficulty in getting from the FTP site please send me mail on sumant shakti ernet in I will send the UUENCODED compressed tar file The system has been tested both on SUN and VAX is expected to run on any UNIX platform Further I invite comments and suggestions from the interested users sumant sumant shakti ernet in national centre for software technology bombay india back to contents Dirt by Paul Crowley I ve been thinking about this one and dirt is a nightmare of the first order No I m not talking about my personal hygiene I was in the kitchen this does have CG content bear with me and I thought Wouldn t this be a nice interesting scene to try and render The reflection of the marble back wall against the taps the kettle the shadows from the fluorescent strip lights the cups fun Then I looked at the dirt It was a pretty clean kitchen as kitchens go There was no mould on the plates as there is in the kitchen at home it s my flatmates fault I eat out now as a survival precaution But for example there was a whole variety of crumbs on the floor Breadcrumbs little bits of onion peel poppy seeds a discarded match anyone looking for photorealism would have to come up with a description of each of these Or the dirt on the iron you couldn t just throw some turbulence function at this or fractals because the dirt on irons isn t uniform you d have to go into the physics of how dirt forms on irons I m not sure if that physics is even fully understood There were little pencil marks on the cupboard doors where the carpenters marked them if you had been rendering it would you have remembered those A dribble of water down one side of a cup A blue stain on the carpet whose cause is a mystery to me The trouble with dirt is that it s a result of the history of those objects and not a static thing That chip in the sideboard is in that position because your flatmate was trying to get a cold sausage out of the fridge but she was blind drunk and accidentally drove a waterpipe into it while heading for the ground at high speed You going to write a simulation of that Will you remember to include the little bit of sweater that got caught in the chip last Tuesday Photorealism is really hard o Paul Crowley aipdc uk ac ed castle Trust me I know what I m doing back to contents Thomson Digital Images University Donation Program by Michael Takayama tak tce com Thomson Digital Images TDI America is offering a special donation program to qualified educational facilities in the U S and Canada interested in 3D computer graphics animation for Industrial Design Scientific Visualization and Animation TDI Explore v2 3 software is a high end workstation based package including sophisticated 3D modeling animation and rendering capabilities Some features of the software include NURBS modeling inverse kinematics animation particle system animation interactive 3D texture editing fast scan line rendering and ray tracing TDI is a world leader in the high end 3D graphics animation market with an installed base of more than 450 systems UNIVERSITY DONATION PROGRAM If you have ever thought about working with 3D now is the time TDI America will donate the EXPLORE software to universities and colleges in the United States and Canada to give students access to the newest developments in the world of 3D computer animation and graphics There are certain criteria which must be adhered to in order for a college university to be a successful candidate for this program 1 EXPLORE must be used for research or educational projects 2 The software must be made available to a minimum of 10 students per year 3 The software must not be used for commercial purposes without the express written permission of TDI America 4 The school must appoint one person who will act as the direct contact with TDI America 5 A software maintenance agreement and a software license agreement must be signed and returned to TDI America Because our university donation program provides software free of charge the only costs involved are for maintenance which includes a one year warranty telephone support and free upgrades and training TDI runs on the full range of Silicon Graphics workstations and the IBM RISC 6000 The Silicon Graphics hardware can be ordered from TDI at our educational discount prices for your convenience To demonstrate your interest in our university donation program please send me a letter indicating your intended use of the software what workstation s you have or would like to purchase and your time frame I will be happy to put together a price proposal for you to arrange for a demo and to discuss with you the applications of our software for your school I look forward to speaking with you about EXPLORE and our donation program Sincerely Karen Lazar Director University Donation Program TDI America For more information contact Karen Lazar Director University Donation Program TDI America 1270 Avenue of the Americas Suite 508 New York NY 10020 TEL 212 247 1950 FAX 212 247 1957 Michael Takayama email tak tce com Technical Support Manager TDI America Great initiative Any ideas to make the donation valid outside USA and Canada like making it worldwide Whom should I contact to get this information TDI America has made this donation offer available only to educational facilities in the United States and Canada For those of you located elsewhere in North or South America you can ask if the program can be made available to you Contact Karen Lazar etc For those of you located in Europe you can try contacting the TDI home office in Paris France I believe that they have a similar program available in Europe Contact Thomson Digital Image 22 rue Hegesippe Moreau 75018 Paris FRANCE TEL 33 1 43 87 58 58 FAX 33 1 43 87 61 11 back to contents A Brief Summary of Ray Tracing Related Stuff Angus Y Montgomery angus godzilla cgl rmit oz au I have found been given know of these raytracers rt s 3d object file formats and object file databases db s If you know of other non trivial rt s available please let me know asap NOTE before madly ftp ing in these rt s and stuff check out eric erich acm org haines rt related ftp site list for a site near you his list is fairly comprehensive and up to date and is what i used to find most of the following x before the source means that it is a duplicate of the most up to date i have downloaded xx dated compared to another this is the source site the rt from there couldn t be any fresher rt a k a and de acronymation my source rts ftp and by request art a rt VORT munnari oz au brl ballistic research lab more info at hanauma stanford edu dbw dist render distpro d b wecker hanauma stanford edu x munnari oz au drt distance rt rayman iear arts rpi edu dkb d k buck iear arts rpi edu 2 01 or 10 xx cs uoregon edu alfred mtv x iear arts rpi edu cs uoregon edu uses nff ohta iear arts rpi edu xx cs uoregon edu pray vm pray cs uoregon edu irisa prt parallel from comp graphics Kory Hamzeh qrt quik iear arts rpi edu xx cs uoregon edu rad from Ning Zhang radiance from Greg Ward ray ucsd edu v3 0 runs off nff is this an earlier mtv rayshade xx iear arts rpi edu cs uoregon edu v3 0 weedeater rpi Kyriazis pxm vmpxm gk aargh do differ but in essence the same iear arts rpi edu v2 0 x cs uoregon edu xx ucsd edu object databases NFF neutral file format gondwana ecr mu oz au OFF object file format gondwana ecr mu oz au poly polyhedra db spd v3 standard procedural db cs uoregon edu produces NFF other formats AutoCAD cad GDS things file thf cad IGES initial graphics exchange standard architron arch cad imagine amiga irender slp sgi renderman pixar s rtk rt kernel turbo silver amiga videoscape3D amiga not what i wanted trivial or limited fritz good micro uray DBW uray a smaller version of dbw mini paul mintrace shortest nonfinished obfus ps not rts rayscene wave back to contents Eric Haines erich acm org Ray Tracing News Volume 4 Number 1 Ray Tracing News Volume 4 Number 1 Ray Tracing News Volume 4 Number 1 Ray Tracing News Volume 4 Number 1 Ray Tracing News Volume 4 Number 1 Ray Tracing News Volume 4 Number 1 Ray Tracing News Volume 4 Number 1 Ray Tracing News Volume 4 Number 1 Ray Tracing News Volume 4 Number 1 Ray Tracing News Volume 4 Number 1 http www acm org tog resources RTNews html rtnv4n1 html http www acm org tog resources RTNews html rtnv4n1 html http www acm org tog resources RTNews html rtnv4n1 html http www acm org tog resources RTNews html rtnv4n1 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv4n2.html%%==%%Ray Tracing News, Volume 4, Number 2%%==%%Ray Tracing News "Light Makes Right" July 15, 1991 Volume 4, Number 2 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%61275%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right July 15 1991 Volume 4 Number 2 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1991 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction SIGGRAPH get together etc New People Address Changes etc Ray Tracing Related FTP sites compiled by Eric Haines Ray Tracing the way I do it by Haakan Zap Andersson More Thoughts on Anti Aliasing by John Woolverton Spatial Measures for Accelerated Ray Tracing by John Spackman Barcelona Workshop Summary by Arjan Kok Book Announcement from Stuart Green Spiral Scene Generator by Tom Wilson An Announcement From The Paper Bank Project by Juhana Kouhia Radiance 1 4 via FTP by Greg Ward Proceedings of Graphics Interface 91 Availability by Irene Gargantini NFF Previewers by Bernie Kirby Patrick Flynn Mike Gigante Eric Haines RayTracker Demos Available by Jari Kahkonen RayTracker Info by Zap Andersson Introduction I admit it I ve strayed from the One True Way of pure ray tracing I ve been dabbling in radiosity We recently finished a film of Ronchamp chapel illuminated with radiosity techniques rendered with an a buffer and with stochastic ray traced beams of lights streaming in the windows coming to a film show near you SIGGRAPH and Eurographics I hope My one piece of advice from doing the film is this try to make everything originate from you The rights to music are amazingly expensive in our case thousands of dollars for just one showing at SIGGRAPH and tracking down and obtaining permission to use quotes drawings or photos can be a real hassle If you want to know how we did the beams of light effect get the Frontiers in Rendering course notes or even go to the course There should be some good weird topics at this course such as Charlie Gunn s animations of hyperbolic space where dodecahedra meet 8 at a corner and Peter Kochevar s shading computations via cellular automata the lunatic fringe of rendering as he puts it Me I m going to talk about ray casting for radiosity and also all the things that drive me crazy about radiosity with lots of dirty laundry pictures showing where and how radiosity falls apart and some solutions As usual there will be a ray tracing researchers get together at SIGGRAPH open to anyone On Thursday from 5 15 to 6 30 at room N223 in the convention center we ll meet and gab about this and that No planned activities just a place and time to connect names to faces When our son Ryan was born Zap Andersson sent a nice little GIF from his ray tracer of a cigar in an ashtray as congratulations the texture mapped smoke was particularly well done Zap was just married so I was able to send two interlinked rings with his wife s his names inscribed in them Definitely a future trend graphical greeting cards presents by e mail The wedding rings picture was also my first worthwhile test image using the two pass software we ve developed to blend radiosity and ray tracing The nice thing about two pass algorithms is that you generally get soft shadows cheaply as the radiosity mesh picks up the shadows adaptively and so saves the ray tracer much shadow testing time You also get all the nice features of ray tracing including exact geometry spheres are truly spherical instead of straight radiosity s polygonalized representation Being able to combine the sampling mesh from radiosity and the geometry from ray tracing is usually a great combination Just so it is not buried in the bits note that Greg Ward s Radiance ray tracer with radiosity effects built in see his SIGGRAPH paper is now available via FTP As important he has also begun a directory of test radiosity scenes which researchers can use to attempt to compare radiosities generated for these scenes For those of you trying to write your own radiosity system this is a valuable tool for checking if you re getting anything near the right answer Finally Greg has also collected various object models and made them available Books of note Digital Image Warping by George Wolberg IEEE Computer Society Press Monograph 1990 is very handy if you re involved in texture mapping Many different topics are covered with good illustrations and sample code It s not the ultimate book from a theory standpoint but is very practical and understandable Recommended Last issue someone mentioned the book Fractal Programming and Ray Tracing with C by Roger Stevens M T Books for 30 20 more for the disk of code I bought it and cannot recommend it to the general reader If you are getting your feet wet with C it might be of some interest and beginning PC programmers might find bits of it useful The author takes Steve Koren s QRT input language and develops a C ray tracer for it One major problem with such a ray tracer is that there is no definition for a general polygon only triangles and parallelograms are provided There s a lot of padding in the book with 20 or 30 page stretches of nothing but code listings and 70 pages of data file listings 42 pages for his version of sphereflake alone he could have printed the listings for the whole SPD package in that space The index is somewhat dysfunctional e g minor variations on the words bounding boxes are given separate listings some with wrong page numbers References to almost all other work in ray tracing is missing and the interested reader is given almost no help on where to go for more information I wish it had been better Coming out at SIGGRAPH is Graphics Gems II edited by Jim Arvo this time around Does anyone else know of good books to look for there The other SIGGRAPH question any guesses on how many times humorous references to Monte Carlo techniques will be made Get a job one subscriber pointed out an interesting relationship between public domain ray tracers and future employment The authors of two of the more popular public domain ray tracers MTV by Mark VandeWettering and RayShade by Craig Kolb are currently employed by PIXAR Now if David Buck of DKBtrace gets a job there no I have no idea if he s even looking for work this relationship can become a firmly established principle Finally I ve pretty much stopped culling USENET for news in comp graphics figuring that most everyone plows through this stuff by now What convinced me was looking at my file of comp graphics clippings and seeing that the accumulation surpassed half a megabyte Updating the ray tracing and radiosity bibliographies mailing list and the FTP site list are time consuming enough also running a clipping service was too much back to contents New People Address Changes etc The first subscriber connected across the now slagged Iron Curtain Janusz Kalinowski density clouds metaballs parallelism textures Technical University of Wroclaw Computing Center Wybrzeze Wyspianskiego 27 Wroclaw Poland alias janusz kalinowski kalinows plwrtu11 I am a lecturer at Technical University of Wroclaw I am mainly involved in CG related subjects but also in system software We are preparing a metaballs system modeller renderer I made my MS in DataFlow I wrote an emulator of Manchester Prototype Dataflow System but I prefer CG now Maybe I will marry both domains in the future Chris Green efficiency fancy primitives radiosity textures Commodore Business Machines 1200 Wilson Drive West Chester PA 19380 215 431 9100 alias chris green njin cbmvax cbm commodore com chrisg When I ve got spare time away from working on Amiga graphics and doing contract work on 3d games I spend it working on my ray tracer My ray tracer is extremely fast due to being written completely in 680x0 assembly with all fixed point math I support spheres triangles hypertexture and general implicit functions It also has depth of field penumbras procedural textures and more The efficiency scheme used is my own invention and is especially fast for radiosity ray tracing some day and penumbras now Russ Tuck tuck maspar com MasPar Computer Corporation 749 N Mary Ave Sunnyvale CA 94086 Old tuck cs unc edu Billy Ferrer ray tracing on the Atari STe efficiency University of California Irvine 2520 Golden Ave Long Beach CA 90806 213 595 5279 alias bill ferrer bferrer bonnie ics uci edu I am a sophomore at University of California Irvine studying computer science My interest in ray tracing stemmed from seeing impressive displays from Amiga NCGA and Siggraph shows I am just a beginner in the ray tracing programming department but during my spare spare spare time I am writing a ray tracing program for the Atari STe because first there isn t a good and reliable ray tracing program on the ST STe and second to write a ray tracing program for learning purposes Currently my program traces checkered floors spheres and reflections Right now my effort is going towards texture mapping the floor by mapping an image on the floor Hopefully my program will support refractions and other various 3d object formats Name Thomas Michael Burgey Goals modelling of objects modelling of textures RT art Company Cadlab Kooperation Uni GH Paderborn Siemens Nixdorf AG Bahnhofstrasse 32 W 4790 Paderborn Tel 49 5251 284 151 Mail tmb cadlab cadlab de back to contents Ray Tracing related FTP sites and maintainers 7 15 91 compiled by Eric Haines erich acm org Ironically we still don t have our FTP connection yet it s been one month away since last December so I can t verify much of this data Please do send me any updates corrections Some highlights RayShade a great ray tracer for workstations on up DKBtrace another good ray tracer from all reports works on PCs Radiance a ray tracer w radiosity effects a la Greg Ward who wrote it VORT QRT MTV DBW yet more ray tracers some with interesting features prt VM pRAY parallel ray tracers SIPP scanline Z buffer renderer VOGLE graphics learning environment device portable SPD a set of procedural databases for testing ray tracers NFF simplistic file format used by SPD OFF another file format RT News collections of articles on ray tracing RT bib all known by me articles on ray tracing in refer format RT abstracts collection of abstracts of many many RT articles Utah Raster Toolkit nice image manipulation tools FBM another set of image manipulation tools Graphics Gems code from the ever so useful book means site is an official distributor so is most up to date weedeater math yale edu 130 132 23 17 pub Rayshade 3 0 ray tracer color quantization code SPD RT News Wilson s RT abstracts RT bib new Utah raster toolkit newer FBM Graphics Gems code Craig Kolb kolb yale edu rascal ics utexas edu 128 83 144 1 misc mac inqueue VISION 3D facet based modeller can output RayShade files ccu1 aukuni ac nz 130 216 1 5 ftp mac architec VISION 3D facet based modeller can output RayShade files P D Bourke pdbourke ccu1 aukuni ac nz alfred ccs carleton ca 134 117 1 1 pub dkbtrace DKB ray tracer David Buck david buck carleton ca hobbes lbl gov 128 3 12 38 Radiance ray trace radiosity package Greg Ward gjward lbl gov nic funet fi 128 214 6 100 pub graphics papers Paper bank project including Pete Shirley s entire thesis with pics Wilson s RT abstracts in PostScript Kouhia Juhana Krister jk87377 cs tut fi isy liu se 130 236 1 3 pub sipp 2 0 tar Z scan line z buffer and Phong shading renderer Jonas Yngvesson jonas y isy liu se calpe psc edu 128 182 66 148 pub p3d p3d 2 0 tar P3D lispy scene language renderers Joel Welling welling seurat psc edu ftp ee lbl gov 128 3 254 68 pbmplus tar Z RayShade data files Jef Poskanzer jef ace ee lbl gov irisa fr 131 254 2 3 iPSC2 VM pRAY ray tracer SPD NFF many non SPD NFF format scenes RayShade data files Americans check ftp ee lbl gov first Didier Badouel wuarchive wustl edu 128 252 135 4 mirrors unix c graphics Rayshade ray tracer MTV ray tracer Vort ray tracer FBM PBM popi Utah raster toolkit mirrors msdos graphics DKB ray tracer FLI RayTracker demos Tracey Bernath tmbernath tiger waterloo edu tolsun oulu fi 128 214 5 6 FLI RayTracker animation files PC VGA RayScene demos Americans check wustl first Jari Kahkonen hole rieska oulu fi cs uoregon edu 128 223 4 13 pub MTV ray tracer RT News RT bibliography other raytracers including RayShade QRT VM pRAY SPD NFF OFF objects musgrave papers some Netlib polyhedra Roy Hall book source code Hershey fonts old FBM Mark VandeWettering markv acm princeton edu hanauma stanford edu 36 51 0 16 pub graphics Comp graphics best of comp graphics very extensive ray tracers DBW MTV QRT and more Joe Dellinger joe hanauma stanford edu freedom graphics cornell edu 128 84 247 85 RT News back issues source code from Roy Hall s book Illumination and Color in Computer Generated Imagery SPD package Heckbert Haines ray tracing article bibliography Muuss timing papers uunet uu net 192 48 96 2 graphics RT News back issues not complete NURBS models other graphics related material iear arts rpi edu 128 113 6 10 pub Kyriazis stochastic Ray Tracer qrt ohta s ray tracer prt other RT s including one for the AT T Pixel Machine RT News Wilson s RT abstracts Graphics Gems wave ray tracing using digital filter method George Kyriazis kyriazis turing cs rpi edu jyu fi 128 214 7 5 pub graphics ray traces many ray tracers including VM pRAY DBW DKB MTV QRT RayShade some RT News NFF files Jari Toivanen toivanen jyu fi life pawl rpi edu 128 113 10 2 pub ray Kyriazis stochastic Ray Tracer George Kyriazis kyriazis turing cs rpi edu ab20 larc nasa gov 128 155 23 64 amiga DBW usenet comp sources binaries amiga volume90 applications DKBTrace 2 01 ftp abcfd20 larc nasa gov munnari oz au 128 250 1 21 pub graphics vort tar Z VORT CSG and algebraic surface ray tracer VOGLE pub DBW pbmplus David Hook dgh munnari oz au gondwana ecr mu oz au 128 250 1 63 pub VORT ray tracer VOGLE Wilson s ray tracing abstracts Bernie Kirby bernie ecr mu oz au freebie engin umich edu 141 212 68 23 Utah Raster Toolkit Spencer Thomas thomas eecs umich edu or Rod Bogart cs utah edu 128 110 4 21 pub Utah raster toolkit NURBS databases Jamie Painter jamie cs utah edu gatekeeper dec com 16 1 0 2 pub DEC off tar Z OFF objects pub misc graf bib graphics bibliographies incomplete Randi Rost rost granite dec com expo lcs mit edu 18 30 0 212 contrib pbm tar Z portable bitmap package poskbitmaptars bitmap collection Raveling Img xloadimage Jef Poskanzer jef well sf ca us venera isi edu 128 9 0 32 pub Img tar z and img tar z some image manipulation pub images RGB separation photos Paul Raveling raveling venera isi edu wuarchive wustl edu 128 252 135 4 mirrors unix c graphics Rayshade ray tracer MTV ray tracer Vort ray tracer FBM PBM popi Utah raster toolkit mirrors msdos graphics DKB ray tracer ucsd edu 128 54 16 1 graphics utah rle toolkit pbmplus fbm databases MTV DBW and other ray tracers world map other stuff Not updated much recently okeeffe berkeley edu 128 32 130 3 pub TIFF software and pics Sam Leffler sam okeeffe berkeley edu surya waterloo edu 129 97 129 72 graphics FBM ray tracers vega hut fi 128 214 3 82 graphics RTN archive ray tracers MTV QRT others NFF some models gondwana ecr mu oz au 128 250 1 63 SPD NFF OFF databases Graphics Gems code Bernie Kirby bernie ecr mu oz au hp4nl nluug nl 192 16 202 2 pub graphics raytrace DBW microray MTV etc ftp brl mil 128 63 16 158 old brl cad information on how to get the BRL CAD package ray tracer karazm math uh edu 129 7 7 6 pub Graphics rtabs shar 12 90 Z Wilson s RT abstracts VM pRAY J Eric Townsend jet karazm math uh edu maeglin mt luth se 130 240 0 25 graphics raytracing Doc Wilson s RT abstracts ftp fu berlin de pub unix graphics rayshade4 0 inputs aq tar Z is RayShade aquarium Americans check ftp ee lbl gov first Heiko Schlichting heiko math fu berlin de apple apple com 130 43 2 2 pub ArchiveVol2 prt netlib automatic mail replier UUCP research netlib Internet netlib ornl gov SPD package polyhedra databases Send one line message send index for more info send haines from graphics to get the SPD UUCP archive avatar RT News back issues For details write Kory Hamzeh kory avatar avatar com back to contents Ray Tracing the way I do it by Haakan Zap Andersson See the RayTracker description later in this issue for what his system looks like I don t agree with the usefulness of some of these but find them interesting reading I particularly like the idea of hashing though as John Woolverton points out this idea has problems with soft shadows EAH TIGHT screen space bounding Some people neglect screen space bounding and don t use it MANY people use it but they project the 3D bounding box onto screen space potenti ally getting a lot of slack around em Gain Speedier bounding box generation Loss Slack around objects more wasteful intersections My Way Do a vector rendering and get minmax screen coordinates from that Yes a vector rendering might take time but hey what s that compared to the tracing time eh Yes I know about the method of doing a Z buffer rendering first but then you have to write a Z buffer renderer first right Comments Think about the standard axis aligned bounding box around an object Seen from the vector 1 1 1 you will have the corners sticking out maximally Also bounding box intersection takes this n that amount of FP operation A screen space bounding box is done with four integer compares For eye rays I NEVER intersect the actual bounding boxes at all ONLY use the screenspace bounding plus a stored minimum distance to the eye for each bounding box So my bounding box intersection for eye rays is 4 integer and one FP compare Self sorting list Most objects in my structure has the minimum distance to the eye recorded When intersection the object the first thing you do is to see if the currently valid t is smaller than this distance If so we have already hit a closer object and can never hit this object Also when the ray intersection checker has found the closest object this is put first in the list and will be checked first next time Since the intersection check function is called recursively when we enter a bounding box objects INSIDE the bounding box is also sorted so for each level in the ray tree we always have the object we hit last first Light buffer Similar to the 2d bounding boxes on screen for eye rays shadow rays have their 2d bounding boxes but since a light source can shine all around and is not limited to one direction this is done in polar coordinates a spherical coordinate system So for shadow rays I don t intersect any real bounding boxes either but do some more compare operations And since the ranges for a spherical coordinate system is fixed i e 2 pi pi there is no point in using floating point so fixed point integers can be used instead The minimum distance to each object is also constant for each light and may then be calculated and stored when we set up things and do the wire frame rendering Reflected fracted rays This is the only case where I actually intersect bounding boxes And now to the next weird issue I do NOT use axis aligned bounding boxes they are transformed together with the rest of things since my bounding boxes actually work as transformers for my objects But FIRST for each box I check the MINIMUM distance with the current t and if bigger just discard To find the minimum distance I am helped by the fact that my bounding boxes are stored as a center point and x y and z extends from that centre So I can use a rough distance to center x size y size z size and I get a value that is guaranteed to be SMALLER than the actual distance And to avoid square roots my actual comparisons is of course done on the distances squared i e from the ray origin I take the x distance to the bbox centre squared plus y distance squared plus z distance squared Now I have the distance from ray origin to the center of the bbox squared Now subtract from that x size y size z size squared and compare that to t squared If t is smaller we can never hit that bounding box Transformed bounding boxes I ve always been in love with tight bounding volumes because they avoid unnecessary TRUE intersections Thus my bounding boxes are transformed with everything else Actually it works like this pseudo code ish trace ray first object ray object first object while object do the 2d intersection checking either eye ray 2d or polar 2d for lamps only do rest of code if 2d hit and distance is below current t Ok we hit 2D wise OR this was a reflected fracted ray then transform ray to object s coordinate system switch object type case SPHERE Intersect sphere oids case BOUNDING BOX check boundbox intersection if refl frac ray if not refl frac ray set hit to true if hit Ok let s trace rays in this new coordinate system we are in now trace ray object bbox contents of box transformed ray object object next What this gives me besides the ability to twiddle my bounding boxes is local coordinate systems WITHIN those boxes So if I have a HUNDRED objects that would feel happy if they got their bounding boxes tilted 30 degrees to the right I could create ONE bounding box that transforms the ray 30 degrees to the right and then use axis aligned boxes which of course are faster INSIDE the box for each of the hundred objects making them happy Also it helps animating stuff a lot Move the bounding box ans wham you have an aggregate object Move a box within the box and Wham you have hierarchical motion control without sweating too much Filtering texture maps The way I filter texture maps may be considered nasty but it works OK for me I know the resolution and I also know from reverse engineering my perspective ray creator how big the screen is in units I can easily calculate how big one pixel is in the screen plane Deeper into the model the pixel covers a larger area increasing linearly So the distance an object is from the eye guide the pixel size at that point in a very simple and linear way Now the first error you do when you want to sample from your texture map is to sample an area that is pixel size pixel size large Well that is correct for planes that are facing you But if we are looking almost para llell to the surface No the actual area covered by the pixel is roughly pixel size cos view angle and since cos is simply a dot product that you ll need later anyway it s easily calculated Now I simply grab a square area that is this size large and average it Nasty but looks quite OK without overwhelming calculations Oh yes there is the pathetic case where you are supposed to sample 10000 x 10000 pixels and average Well I never sample more than 8 x 8 then I start to pick out 64 pixels at random within an n x n grid and I don t bother if I get the same one twice since the impact of that on an average of 64 pixels is mostly killed by the dithering noise anyway Also I use the eye distance calculation ALL THE WAY DOWN THE RAY TREE which looks very OK as soon as the mirroring surfaces are flat or there is no heavy refraction going on But now let s move on to other anti aliasing Hashing anti aliasing I never use color difference as my subdivision criteria for supersampling What I do is this Before each sample for a pixel set hash number to 0 The trace ray procedure does the following If it hits an object Is it a smoothed patch mesh or similar Add its smoothing group or anything else that is same for all faces smoothed together I use the vertexlist pointer to the hashnumber else Add something unique for the object its number or the objectpointer to the hashnumber Set shadow count to zero For each light source Check shadows If in shadow shadow count hash number shadow count back to contents More Thoughts on Anti Aliasing John Woolverton woolstar cobalt caltech edu Zap Andersson also talks about this problem and independently invented this hashing method I neglected to publish a rough draft of Zap s idea last issue see his article this issue for a more polished version EAH I was also troubled by the fact that my ray tracer was anti aliasing across textures causing massive thrashing on my machine and took the problem to the local gurus I got back the suggestion of building a hash code and putting all the things I wanted to detect for in the hash calculation So I hashed together object pointers and light sources when they weren t shadowed or outside the cone of a spotlight So first I d check the hash code skipping color changes due purely to textures Only if the hash differed would I check the colors just so I didn t SSamp a smooth edge also However this didn t fix sampling across a soft shadow edge back to contents Spatial Measures for Accelerated Ray Tracing by John Spackman Here are some interesting passages from a note from him to me Mind you my thesis is more to do with the navigation of oct trees AFTER they have been constructed with interval analysis This navigation seems more efficient than all that ARTS nonsense navigating only half the vertical steps naturally runs under integer addition and bit shifting in a Bresenham type way BUT WITHOUT the concept of a global driving axis and being completely immune to division by zero requires no exception handling I called the SMART method Spatial Measures for Accelerated Ray Tracing perhaps my jocularity has back fired no ones taking me seriously I can ray trace 20 000 triangles with two light sources shadows at 512x512 in under 8 minutes on a Sun SparcStation in fact outrageous claim time SMART has been observed to achieve constant time ray tracing INDEPENDENT of object count Each ray simply navigates a few empty voxels whose number is independent of the global object count until reaching the first non empty voxel where generally only one object need be intersected accepted as the nearest struck For example I rendered a single torus in 7 mins 23 secs and 80 tori in 7 mins 20 secs This is all AFTER constructing the octtree O N but very efficient with interval analysis Interval analysis allows one to decompose right down to the surface of a primitive or CSG object none of this bounding box nonsense propounded in RTNews a couple of years back You ll be able to see some of the pictures of the Octtrees in my thesis at a fine resolution they look great I think the work of Adrian Bowyer John Woodwark at Bath would interest you they re attacking things from a CAD CAM angle Adrian is a Mechanical Engineer email ab uk ac bath maths Another pocket of isolated English ray tracing is established at Leeds university which I only stumbled across recently They also have a CAD CAM bent are particularly into multi processors If you re interested email Professor Peter Dew at dew uk ac leeds dcs A Dr Stuart Green also did some multi processor work using your SPD data base at Bristol University but has now moved out to industry I don t have his new email address I ve recently moved to Edinburgh to take advantage of a 420 Meiko transputer surface there s quite a lot of knowledge in ray tracing accumulating here Fractal planets etc Arvo Kirk s formation of candidate lists for their 5D ray tracing efficiency scheme I m not a great fan of this I m afraid the old problem too much over approximation for concave objects Consider a hoop with large major radius small minor radius e g bicycle tyre tube A view frustrum can easily intersect the hoops bounding box by passing through the hoop s central hole WITHOUT striking the tyre anywhere Lazy Oct tree construction is the one for me with nice tight decompositions right down to object surfaces allowing rays to pass through the centre of such hoops whilst ignoring them or indeed lazy Hex tree construction for animated scenes and reduced storage construction costs It s a bit difficult to convey the efficiency of the scheme without recourse to a black board but the long and the short of it is that most rays missing all objects end up querying none hoorah whilst those hitting an object end up querying only that ie just one object One can t do much better than that on a ray by ray basis and I gave up on ray coherence ages ago not that it s not got great potential but I got awful headaches trying to work out the action of a complex CSG object e g reflective engine block on a single incoming pyramid of rays never mind refraction perhaps you ve got further Oh and you get free adaptive anti aliasing with octtrees back to contents Barcelona Workshop Summary by Arjan Kok arjan duticg tudelft nl There were many interesting papers at this workshop What follows is excerpted from Arjan s summary focusing on those papers directly concerned with classical ray tracing e g not including Monte Carlo methods two pass methods etc The finished papers will be available from Springer Verlag in book form some time next year Summaries of papers presented at the second Eurographics Workshop on Rendering Barcelona Spain 13 15 May 1991 Gregory Ward greg lesosun1 epfl CH Adaptive Shadow Testing for Ray Tracing Method for reducing the number of shadow rays for scenes with a large number of light sources The sources are sorted on their contribution and only for the most important sources rays are cast The influence of the other sources is estimated statistically Tests are done with different tolerances threshold to determine whether sources are important and certainties rate of accuracy The method gives good reduction and is able to find the most important shadows because it selects contrast as criterion Christophe Schlick schlick geocub greco prg FR An Adaptive Sampling Technique for Multidimensional Integration by Ray Tracing Describes a sampling method that includes the following characteristics adaptivity irregularity complete stratification importance sampling and uncorrelation It allows a fast reconstruction Implementation is done using look up tables J P Jessel M Paulin R Caubet An Extended Radiosity Using Parallel Ray Traced Specular Transfers Describes a parallel extended radiosity method The method is implemented on a parallel architecture dedicated to ray tracing based on transputers Veysi Isler Cevdet Aykanat Bulent Ozguc isler TRBILUN BITNET Subdivision of 3D Space Based on the Graph Partitioning for Parallel Ray Tracing Describes a heuristic algorithm to subdivide the 3D space by converting the problem into a graph partitioning problem back to contents Book Announcement from Stuart Green This is Stuart s thesis further refined for publication To see if you might be interested in it look at Stuart A Green D J Paddon Exploiting Coherence for Multiprocessor Ray Tracing IEEE Computer Graphics and Applications vol 9 no 6 p 12 26 Nov 1989 EAH Green Stuart Parallel Processing for Computer Graphics 1991 in the series Research Monographs in Parallel and Distributed Computing MIT Press Cambridge Massachusetts 02142 ISSN 0953 7767 ISBN 0 262 57087 4 Pitman Publishing 12 14 Slaidburn Crescent Southport PR9 9YF ISBN 0 273 08834 3 I don t have the US price but in the UK it costs 27 95 Sterling back to contents Spiral Scene Generator by Tom Wilson This is a simple SPD like scene generator creating a 3D spiral loop There are two loops one which creates SIZE levels and the other that creates 2 SIZE balls on each level The balls on each level almost form a circle the entire structure makes a spiral The thing I am most displeased with is the texture f line I created it so that a scene would have a very nonuniform distribution of objects include include define PI 3 1415926 define DEFAULTSIZE 10 main argc argv int argc char argv double r x y z frac angle tmp invs2 int s s2 w SIZE col if argc 1 sscanf argv 1 d SIZE else SIZE DEFAULTSIZE s2 int pow 2 0 double SIZE x double SIZE 2 0 printf v nfrom 40 20 40 n printf at 0 0 0 n printf up 0 1 0 nangle 45 nhither 1 nresolution 512 512 n printf b 0 0 0 3 n printf l 90 90 0 n printf l 0 90 90 n printf f 0 3 0 3 0 3 0 5 0 5 3 0 0 n printf p 4 n printf 50 0 50 n printf 50 0 50 n printf 50 0 50 n printf 50 0 50 n for s col 0 s 0 col 2 0 col 1 printf s g g g g n x y z 2 0 double s s 1 back to contents An Announcement From The Paper Bank Project by Juhana Kouhia jk87377 tut fi The following new paper is available from nic funet fi 128 214 6 100 from the directory pub graphics papers papers Eric A Haines and John R Wallace Shaft Culling for Efficient Ray Traced Radiosity May 1991 Barcelona File hain91 ps Z about 70 kBytes If anonymous FTP is not available to you I will mail it if requested Please contact me for a full list of the papers We have recently sent Juhana the last version of our paper with thinko s removed and so you might want to get this improved version The new version is called Shaft Culling for Efficient Ray Cast Radiosity It s a nice little algorithm for finding what objects potentially block light between any two given boxes in space Similar in some ways to Arvo Kirk 5D but with hierarchy it has some interesting potential uses and generally speeds up hierarchical bounding volume ray tracers EAH back to contents Radiance 1 4 via FTP by Greg Ward Radiance 1 4 is now available via tape distribution or anonymous ftp for the first time Rather than including compiled executables as I have in the previous releases only the source code and a global make script is provided that should work on most platforms Please let me know if you have any trouble with it I have also taken out the example images and the conference room model in order to trim back the distribution I hope to include these files in other anonymous ftp directories as suggested by Robert Amor since there seems to be general agreement that this is a good idea To pick up release 1 4 from anonymous ftp connect to hobbes lbl gov 128 3 12 38 with ftp using the anonymous account and enter your e mail address as the password Everything is in the directory pub and the main distribution is called Radiance1R4 tar Z This file is about 3 5 Megabytes so please do your transfers in binary mode the first time Also you will probably experience less network traffic in the morning when most computer scientists are asleep Information on Models Test Environments etc for Radiance I ve just set up an anonymous ftp archive site at hobbes lbl gov 128 3 12 38 for sharing Radiance models and programs In addition to the standard source distribution this archive contains the following pub generators Programs for generating specialized objects shapes pub libraries Libraries of patterns textures fonts etc pub mac MacIntosh applications and utilities for Radiance pub models Complete Radiance scene descriptions pub objects Objects for including in Radiance scenes pub programs Miscellaneous programs and utilities pub tests Test scenes for validating global illumination programs pub translators CAD file translators and image format converters For those of you who I haven t dragged aside and told already Radiance is free ray tracing software for lighting simulation and rendering that does a lot of neat stuff and tries very hard to do it accurately If you are interested in picking up or leaving off some nice environment models this is a good place to do it Most of the scene descriptions are in Radiance format but writing a translator shouldn t be too much work and I m willing to offer whatever help I can If you are working on your own radiosity or ray tracing program and want to compare results please check out the pub tests directory There is not much there now but with your help we can make this archive into a valuable resource for researchers in global illumination Please send any questions or comments to greg hobbes lbl gov I finally finished putting together a library of objects from the various models I ve created for Radiance It is in pub objects gjward tar Z I hope people find it useful It took me quite some time to get the my miscellany into a usable form If you have objects you are willing to submit please take a look at the way this initial library is set up first From Paul D Bourke pdbourke ccu1 aukuni ac nz 130 216 1 5 The public domain modeller Vision 3D for the Mac II family is about to support Radiance data files as an export option This has already been done but the copy on our FTP site hasn t yet been updated I want to put some more features in the next release If anyone is interested however the current version of Vision 3D with Radiance file export can be made available back to contents Proceedings of Graphics Interface 91 Availability by Irene Gargantini In the USA Morgan Kaufmann Publishers Order Fulfillment Center P O Box 50490 Palo Alto Ca 94303 USA phone 415 965 4081 The proceedings should be available by now and they can take your order in advance back to contents NFF Previewers by Bernie Kirby Patrick Flynn Mike Gigante Eric Haines From Bernie Kirby bernie eric ecr mu oz There is an NFF previewer available for anonymous FTP on gondwana ecr mu oz au 128 250 1 63 pub preview c It uses the vogle library which is also available as pub vogle tar Z From Patrick Flynn flynn cse nd edu If anyone on this side of the pond wants the preview c program it s now available for anonymous FTP from shillelagh cse nd edu 129 74 9 7 You can get the VOGLE library from uunet I tried the previewer it does what I need From Mike Gigante mg godzilla cgl rmit oz au There is a NFF previewer for Silicon Graphics workstations available on godzilla cgl rmit oz au 131 170 14 2 Make sure you grab the readme file also It uses the hardware lighting and Zbuffer on the SGI machines to give a very fast preview From Eric Haines I also have two previewers for NFF files which work on HP workstations one is static the other uses the mouse for rotating viewing the object I can send them to anyone who wants them no FTP right now back to contents RayTracker Demos Available by Jari Kahkonen My Swedish friend Haakan Andersson sent me some RayTracker animation demos and now they are ftp able from tolsun oulu fi 128 214 5 6 You need PC with VGA to run these animations Because I m sure that raytracer fans have lotsa questions about RayTracker after they have seen these animations please mail all questions to the author i e to Haakan Andersson zap lage lysator liu se If you have problems with animations they don t unpack etc flame or hate mail me You can find animations from pub rayscene zap though it has nothing to do with Rayscene pub rayscene anim PC contains raytraced animations made with Rayscene and DKBtracer my animations pub rayscene anim AMIGA contains raytraced animations for Amiga made with Rayscene and DKBTracer animations by Panu Hassi Animations are packed with Lharc 2 05 All animations are self extracting archives exe files So run them and they will unpack themselves For examples If you have car exe animation just type car Animation arc hives includes short README TXT and animation fli If you want to give these animations to your friends do not separate these parts Give exe since README TXT contains contact information to Haakan Andersson Also every animation has little text for contact address except mesh I didn t wanna spoil it it moves so smoothly Remember to set type binary when downloading files These animations need Autodesk Animation Player and if you don t have it you can pick it from pub rayscene anim PC That directory contains my demos made with Rayscene Filename is aaplay exe Animations run faster if you are running them from RAM disk If you have mouse it s easier to control aaplay exe Adjust animation speed to your machine Some animations are not full screen because of their original size Little description of animations BIKE FLI Fly by over a bike in a brick basement HP RIP2 FLI The famous one of a Camshaft emerging from its own drawing Created for the Mechslide demo video available from Emt Inc in USA The name HP RIP comes from the fact that the idea of a camshaft came from Hewlett Packard s well known raytraced Camshaft on bed of ravioli by Eric Haines a friend of mine ART FLI Fly by over a pen a few bolts a drawing and a book placed on a wooden table under a green metal table lamp BLAHBLAH FLI Here s a relatively new one Demo of 1 55 Beta s transparent animated texturemaps using Autodesks BOSSTALK Even funnier is to use animated bump maps To see them watch out for Spaceman Spiff at a theatre near you BOING FLI Newer version of BOUNCE A Red bouncing chrome sphere on top of a texture map from Imagetects tm Rendered and Animated in RayTracker 1 4 Beta BOUNCE FLI Very very simple animated bouncing ball The first RayTracker animation EVER CAR FLI Looking at a red car in sunset Image Rendered and Animated in RayTracker 0 6 Beta Model built in AutoCAD R10 by Bertil Heden Autodesk Sweden Thanks Bert MESH FLI Fly round a bowling pin of glass and a bowling ball on a plate suspended in space New effect in this version of RayTracker is the ability create a feel of space via space mapping a background to the universe ALARMCLK FLI An image of an alarmclock a matchbox a table and a wooden table lamp Suddenly without warning we fly past the clock and up the lamp Why Beats me Tracey Bernath tmbernath tiger waterloo edu notes I recently uploaded the raytraced animations from tolsun oulu fi to wuarchive wustl edu to try and cut down the trans ocean net travel I can t upload to SIMTEL because we have a lousy connection and I always get the usual Too many anonymous users Try Again 8 in pub zap are the raytraced and animated images some are really good some well in pub raytracker are the original animations including aaplay lzh I don t know if aaplay exe works but I know the aaplay lzh does Enjoy back to contents RayTracker Info by Zap Andersson Though a commercial product I thought I would include this info since the FLI demos used this software to generate them Also the interactive features are of interest I received a demo copy to review and it seemed pretty nice though I didn t do any serious rendering with my no math coprocessor 386 Current version 1 71 Date 24 april 1991 RayTracker is a commercial raytracing program especially created to render geometries from the well known CAD software AutoCAD RayTracker reads models in the AutoCAD DXF format or in Autodesk 3D Studio ASCII format RayTracker runs on MS DOS PC computers with a math co processor but porting to other platforms mainly Sparc Amiga and Mac are being considered It utilizes Expanded EMS memory if it is found in the system RayTracker has a graphical user interface GUI with dialog boxes pull down menus and a built in hypertext help system It runs in two modes a graphical mode which requires an EGA VGA display and a text mode fore those lacking graphics On a VGA you may also see the image as it is being rendered You may view the finished image with a supplied program on your VGA Super VGA or on your CAD display if it has an AutoSHADE compatible real mode ADI driver with version 4 0 or higher and at least 256 colors Materials are easily assigned to objects by simply loading them from the provided material library containing many useful materials You may also create your own materials by setting parameters for color ambient diffuse and specular reflection mirroring transparency index of refraction trans lucency shadow casting and many many other things The mapping functions in RayTracker use a very generalized model of a map A map can be any number of patterns mixed or overlaid placed on different parts of one single surface or repeated all over Each pattern can be both a bitmapped graphic image GIF Targa 16 24 32 Animator CEL Animator FLI and Amiga IFF format is accepted or one of the built in mathematically defined functions wood marble random noise wavy checkered etc Each map can be applied in many ways Texture map Changing the color of the surface This is the only thing that more primitive renderers such as Big D can do Certain parts of a texturemap can also have a transparent color allowing one single surface to depict a complex object such as a tree or a person as a coulisse Naturally the shadow has the contour of the tree or person also Bump map The brightness at each spot in the map guides the surface altitude allowing you to create dented scraped wrinkled engraved or in any other minor surface deviation Mix map Allows you to mix between two totally different surface descriptions on one surface such as a checkered pattern where some squares are of red glass and others of wood Reflect map Allows you to simulate reflections without the increased rendering time using true mirroring Curved objects looks just as convincing with a reflection map You may also add amusing effects such as window reflections like in the film Tin Toy from Pixar Aside from this a map can also be applied as the slide in a slide projector light source or as the screen fore or background Lightsources include point sources directed spotlights and slide projectors Light falloff can be none linear or quadratic All types of lights can cast shadows of two types Raytraced shadows that are sharp and accurate but requires one extra step in the ray tracing algo rithm and shadows using a shadow map that can have fuzzy edges and work very quickly To ease the production of images RayTracker renders every 16 th pixel first then every 8 th and so on allowing you to quickly determine if there is something wrong with the light or a material You may also create test renderings on parts of your model by simply marking two points on the initial wireframe Three modes are available Quick Track ignoring shadows and reflections Medium Track accounting for shadows but not reflection and refraction and finally Ray Track performing the full raytracing calculation RayTracker can generate walkthrough animations from just a small set of key views using a 7 dimensional spline interpolation technique The images can be automatically concatenated to an Animator compatible FLI file The output format from RayTracker is GIF or Targa 16 24 32 with alpha channel in the 32 bit format in any resolution up to your diskspace limit A conversion utility is also provided to convert a Targa file to a Amiga HAM format RayTracker is NOT a PD or ShareWare program it is a commercial product available from the addresses supplied below If you have any technical questions about its capabilities you can contact me the program author on email address zap lysator liu se or you can send ordinary mail to the LAST Scandinavian address listed below and attach my name Hakan Zap Andersson U S A Europe Scandinavia EMT Inc 250 EMT Ltd EMT Ab 199 N Commercial st PO Box 103 Box 40 Bellingham WA Rickmansworth S 178 21 Ekeroe 98255 USA Herts WD3 5RF SWEDEN U K Phone USA 206 647 2426 UK 923 285 496 SW 756 320 20 Fax USA 206 647 2890 UK 923 285 496 SW 756 346 50 back to contents Eric Haines erich acm org Ray Tracing News Volume 4 Number 2 Ray Tracing News Volume 4 Number 2 Ray Tracing News Volume 4 Number 2 Ray Tracing News Volume 4 Number 2 Ray Tracing News Volume 4 Number 2 Ray Tracing News Volume 4 Number 2 Ray Tracing News Volume 4 Number 2 Ray Tracing News Volume 4 Number 2 Ray Tracing News Volume 4 Number 2 Ray Tracing News Volume 4 Number 2 http www acm org tog resources RTNews html rtnv4n2 html http www acm org tog resources RTNews html rtnv4n2 html http www acm org tog resources RTNews html rtnv4n2 html http www acm org tog resources RTNews html rtnv4n2 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv4n3.html%%==%%Ray Tracing News, Volume 4, Number 3%%==%%Ray Tracing News "Light Makes Right" November 18, 1991 Volume 4, Number 3 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%48353%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right November 18 1991 Volume 4 Number 3 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1991 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction New People Address Changes etc ElectroGig Free Software Offer Spectrum A Proposed Image Synthesis Architecture by Andrew Glassner Spline Intersection Texture Mapping and Whatnot by Rick Turner Satellite Image Interpretation by Andy Newton Material Properties by Ken Turkowski New Library of 3D Objects Available via FTP by Steve Worley Object Oriented Ray Tracing Book New and Updated Ray Tracing and Radiosity Bibliographies DKBTrace 2 12 Port to Mac by Thomas Okken Graphics Gems II Source Code Radiance Digest Archive by Greg Ward Model Generation Software by Paul D Bourke Rayshade 4 0 Release Patches 1 2 and DOS Port by Craig Kolb and Rod Bogart RayShade Timings by Craig Kolb RayShade vs DKBtrace Timings by Iain Dick Sinclair PVRay Beta Release by David Buck Vort 2 1 Release by Eric H Echidna BRL CAD 4 0 Release by Michael J Muuss and Glenn M Gillis Introduction Well it s been awhile RealWork TM has been getting in the way of putting out an issue of the Ray Tracing News So rewind your brains back to August SIGGRAPH was interesting as usual Las Vegas is an amusing place now that I ve seen it once I don t ever need to go back To my surprise there was quite a turnout for the ray tracing roundtable get together at SIGGRAPH The roundtable is a nice excuse for people to get in a room and put faces to names and I finally got to meet some people who had been just authors with email addresses before this Some papers of note at SIGGRAPH which directly affect ray tracing were Kirk Arvo s paper on unbiased sampling techniques and Mitchell s on optimal sampling for ray tracing The first warns that re using initial samples results in bias when adaptively supersampling the last talks of image sampling strategies Other papers of interest include those on new procedural texturing methods which all look fairly easy to implement in their simpler forms Chen et al presented A Progressive Multi Pass Method for Global Illumination which does about every trick in the book to attempt to achieve maximum realism Xiao He et al presented A Comprehensive Physical Model for Light Reflection which is just that it seems about the most realistic shading model I ve seen with some very serious mathematics behind it Another paper from Cornell A Global Illumination Solution for General Reflectance Distributions by Sillion et al gives an interesting method of storing reflectance functions by using spherical harmonics The most theoretically significant radiosity paper was done by Hanrahan et al who presented a method of limiting the amount of computation by use of hierarchy and error limits This method opens up interesting new lines of thought and research in radiosity I did not spend a lot of time on the floor but did run across an interesting demo at the Intergraph booth They had a cute ray tracing program that implemented parameterized ray tracing Sequin Smyrl SIGGRAPH 89 where you essentially store the shading equation parameters for each pixel Changing colors applying textures etc then becomes pleasantly fast as all you have to do is substitute the proper parameter values and reevaluate getting a new full ray traced image in seconds Other new ray tracing products I noticed were from Ray Dream and Strata Ray Dream has a ray tracer for the Mac with the program LightForge for modeling surfaces and SceneBuilder for scene description They have also added a distributed computing feature to poll Macs on a network for idle CPU time and uses it for rendering Strata offers StrataVision 3d again for the Mac They claim ray tracing and radiosity rendering and gave us a demo disk the radiosity images are no great shakes but it s interesting to see the word radiosity making its way into the microcomputer market AT T Pixel Machines has been adding radiosity capabilities to their rendering library set Silicon Graphics is still demoing radiosity though no product seems in the offing They did have a good tutorial film showing the ideas behind the progressive radiosity algorithm and Baum et al had a worthwhile paper in the Proceedings on making radiosity usable This paper is indispensable for anyone designing a robust radiosity system for general use i e you plan on rendering more that a few axis aligned boxes in a room HP demoed their radiosity rendering product ARTCore with a room designer demonstration and had a movie in the film show positive adjectives avoided since I worked on both projects One of the more clever tricks I learnt from the room designer was how to get reasonable wallpaper floor covering and other such textures scanned in using a flatbed scanner In the past I went to building supply places and borrowed or bought samples Yes I want to see how this will look in my kitchen not mentioning that the kitchen existed only in the computer However with a flatbed scanner you can get stuck the samples can be bigger than the scanning surface Even if small enough repetition of the texture can lead to unrealistic effects for example a brick pattern is obviously tiled if the brick colors keep repeating in a too regular fashion I ve also tried photographing large areas of a surface e g a brick wall but then variations in the scene s lighting often appear and make for patterning or odd shading artifacts Tamar Cohen who developed the room designer realized that there was an excellent solution to these problems dollhouse supplies Dollhouse wallpaper and floor coverings easily fit on a flatbed scanner and all the repetition and lighting problems go away For those of you who are deeply into texturing you should consider looking into the Khoros image processing system ftp from pprg eece unm edu 129 24 24 10 pub khoros check release first It s a huge 100 Meg system but from my minimal exposure seems extremely powerful and easy to use It has a visual programming language so you can interactively attach various function boxes together to perform operations This makes the system easy to quickly start using for simple manipulations though I think I m going to have to break down and read the documentation at this point The system is X based and has been ported to most major workstations on up and the group at the University of New Mexico are enthusiastic and willing to help Recommended I ve also finally scratched the surface of Greg Ward et al s Radiance package I was impressed first off by the portability one of his displayers was the first serious X program I ve ever compiled and linked without having to diddle around with something to make it go In fact I didn t even know it was an X program until I ran it and a window popped up on the screen If you want physically based rendering this is the only package I know that even attempts it It also seems to be a fine renderer and I enjoy the progressive ray tracing feature the image refines while you watch it As far as speed goes Rich Marisa at the Cornell Theory Center kindly gave me an explanation and demonstration of their Ray Casting Engine Duke and Cornell have been developing this piece of hardware for some time and it embodies an interesting approach represent the CSG model as a network of processors then given a direction of view convert the model into sets of spans These spans can then be used for analysis rendering etc For more information see the Feb 1991 issue of Mechanical Engineering or Kedem and Ellis article in Parallel Processing of Computer Vision and Display ed by Dew Heywood Earnshaw back to contents New People Address Changes etc Andy Newton physical radiance modelling natural scenes rays with solid angle Remote Sensing Research University College London Photogrammetry UCL Gower Street London ENGLAND 44 71 387 7050 x2742 alias andy newton anewton ps ucl ac uk alias andy newton anewton uk ac ucl ps uk ac ucl cs Although the graphics is more fun than the Remote Sensing this is what I m supposed to be doing Applying ray tracing to the understanding of remote sensed images of the natural world mainly satellite imagery Much more interested in physical accuracy than efficiency Also how to correctly model and sample very large and non uniform light sources the sky in ray tracing How to relate the point sampling paradigm of the infinitesimal ray to light energy transport Physical reflectance models like BRDF Doing distance attenuation and variable light source sampling properly probably using solid angle I d be really interested in any references anyone has to ray tracing for physical process simulations or radiance calculations using solid angle as a ray property On offer a realistic sky radiance model based on atmospheric scattering Denise Blakeley 1455 Runaway Bay Dr 2B Columbus OH 43204 614 487 8442 blakeley cis ohio state edu Ray tracing interests general What I m doing these days I m trying to finish my MS in Computer Science concentrating in graphics here at Ohio State December 91 I d like to finish the program with at least one fairly complete project to show for it so I m trying to expand my basic ray tracer into a more complete rendering system Nothing ground breaking I m just trying to learn as much as I can at this point and have fun doing it Rick Turner weird primitives non Euclidean raytracing textures IBM UK Science Centre Athelstan House St Clement Street Winchester SO23 9DR England ricky venta iinus1 ibm com I m a scientist at UKSC working in the area of remote sensing and the application of image and visualisation techniques to earth science problems Raytracing is a spare time activity I ve written one raytracer as well as a substantial part of a second These use all the common CSG primitives and for the large tracer called RT I ve added support for bicubic spline patches bezier b spline continuous beta splines and implicit functions as well Currently I m playing around with texture and image mapping and volume objects Matthew Williams 501 Chapel Drive 1417 Tallahassee Fl 32304 904 681 0873 fudd fsunuc physics fsu edu Interests Anything and everything At the moment I am a student at Florida State University majoring in Russian Language with minors in Math Physics and Computer Science All the time that I am not in class including some times when I should be in class I am on my PC playing around with DKBTrace or should I say PVRay One of my larger projects that I want to attempt is translating the C source for DKB to assembly and hopefully gain some speed I would also like to add a fractal section to it so I can have vines and stuff growing on different objects back to contents ElectroGig Free Software Offer I don t know much about GIG except that they have a CSG ray tracer Sounds like quite a deal though EAH From Communications of the ACM Nov 1991 In an effort to enhance computer graphics education on a national level GIG USA is offering a limited number of complete 3D graphics packages free of charge to accredited universities colleges and schools throughout the U S The ElectroGIG system which lists for 30 000 includes retracing sic should be ray tracing and animation applications and runs on Silicon Graphics and DEC 5000 workstations Written requests must be mailed phone calls or faxes will not be accepted on official school letterhead by staff or faculty members only to GIG USA Inc 7380 Sand Lake Rd Suite 390 Orlando FL 32819 attention GIG Educational Software Program back to contents Spectrum A Proposed Image Synthesis Architecture by Andrew Glassner glassner pa xerox com Andrew Glassner is currently working on a proposal called Spectrum which is a new ray tracer architecture The document outlining this design was made available in the Frontiers in Rendering course notes The idea is to make a flexible public domain ray tracer available among researchers and educators back to contents Spline Intersection Texture Mapping and Whatnot by Rick Turner ricky venta iinus1 ibm com and Eric Haines The code that I developed is based essentially on algorithms developed by Kajiya and extended by Marini et al the paper is in one of the Eurographics procs I can dig out a reference for you if you re interested Basically we model the ray as a pair of orthogonal planes Each of these is intersected with the spline surface giving a pair of space curves You intersect the space curves giving the ray surface intersection Intersecting curves is a manageable problem so it works quite well The same basic method is employed for all types of bicubic spline surface It actually turns out that splines having a constant basis matrix eg b spline power splines hermites Catmull Rom splines etc are cheaper to compute if you first do a basis transformation to bezier splines Beta splines and so on that have a variable basis matrix require special treatment which is quite complex I run the code on an i860 based accelerator card to get it to work in reasonable time a 1024 1024 image with a few hundred primitives takes 5 10 minutes to compute Spline surfaces can increase this considerably The raytracer in question was originally developed by IBM Poughkeepsie as part of a system called GDP Geometric Design Processor This was essentially a CSG system and was used to design parts of IBM mainframes It ran on a mainframe and was written in PL I and Assembler The mainframe code was hacked out as a standalone module some years ago and was then re written in C in peoples spare time Most of the basics were done in Burlington Va though extensions were done all over the place I m currently working with mapping images and textures onto objects Yes I know this is a largely solved problem nowadays but there are some interesting gotchas I m particularly interested in singular mappings where you don t have a one to one correspondence This overlaps in some ways with my real work which often involves rendering some earth science dataset I m currently fooling around with Magellan data from JPL rendering combinations of terrain and image data in various ways My reply I know the two plane intersection method you refer to in fact I coded it up once long ago though I don t know the Marini paper maybe he solves the problem of sometimes converging on the farther intersections instead of the closest Seems like I remember that guaranteeing the right root is found was a headache though I recall Kajiya s solution was something like use Laguerre s method and find them all or somesuch I m probably mixing this up as I haven t looked at these numerical methods in years As far as texture mapping that s something I m still playing with here too Solved Well how does adaptive sampling work along with textures and mipmaps and so on mipmaps sample area but what do you do if more sample rays are shot in a pixel there was a paper on this topic in Eurographics 91 so it s of interest Also specifying parameterizations for sets of primitives is easy enough in theory e g define some projection spherical conical plane in space and use this to determine xyz uv but this kind of thing can look really bad in some cases I ve been playing with other parameterization functions with some interesting results my VW bug covered with straw weave is certain to become a style trend soon I m sure Have you run across any interesting parameterization papers techniques lately Reply from Rick In my code the patches are subdivided though not by very much Each mini patch has its own bounding box and both are built into a tree structure The more curvature the patch has the greater the subdivision that will be used this reduces the chances of having a local maximum or minimum in the middle of the patch go outside the bounding box It also allows you to fit the bounding boxes much more tightly to the surface so cuts down the number of false intersections where the ray intersects the bounding box but not the surface One interesting side effect of the subdivision is that by making the bounding box smaller than the surface you get disconnected pieces of surface floating in space A nice example of this is on the cover of the Bartels Beatty Barsky book on splines I ve done the teapot in a similar way and it looks rather neat I went further and mapped the baboon onto each disconnected patch and it s quite eye catching Basically the convergence method is a hybrid of multi dimensional conjugate gradient and quasi Newton techniques This offers speed plus reasonable stability although you can always find a pathological case to defeat the algorithms One thing about it is that the iterations happen in u v space rather than in x y z space this ensures that the iterations will always converge to a valid solution if either u or v go outside the range valid for the particular mini patch that you re testing against you can immediately reject the solution as there will be no intersection with that patch Typically false intersections such as this are rejected on the first or sometimes the second iteration which improves the performance a bit Ray tracing splines is tedious though so I ve given my code an option to render the bounding boxes for the mini patches This gives a pretty good first look at what you re going to get out and takes a couple of orders of magnitude less time Texture mapping people may want to look through the cartographic literature Map makers have similar problems in projective geometry when it comes to changing map or image coordinate systems eg from Lat Long to UTM for example Much effort has been devoted to solving the mapping in the mathematical sense problem less on resampling Almost always the resampling used are standard bi linear or bi cubics with the attendant problems On the whole though digital cartography can be a useful source on information that is often overlooked by graphics people A good reference to start with is USGS Professional Paper 1395 Map Projections a Working Manual by John Snyder In the US you can get a copy from any Government bookstore when I got mine I think that it cost me about 25 dollars back to contents Satellite Image Interpretation by Andy Newton anewton ps ucl ac uk I work in a satellite image interpretation research group Our interest in ray tracing is for simulating all parts of the process of the formation of satellite images optics camera motion atmosphere surface scattering and global as in hemispherical light source illumination We do work at two scales where the basic scene is a DEM height grid and for very complicated 3 d scenes for plant canopy reflectance simulation So ray tracing is a really powerful tool to allow us to simulate as many parts of these complex processes as we can model but what we need to do is not quite computer graphics What I mean by this is that what we need out of our models are accurate truthful energies in real units not measures of visual brightness We need physical results One example of this is wavelength sampling by importance sampling a spectral response curve as opposed to treating light as an RGB colour Though I can t recall any references to doing exactly this it is proposed in Cook s original stochastic sampling papers and my implementation is very similar to his for reflected ray direction Our main problems are i illumination from such a big light source the sky hemisphere with diffuse reflectors ii ensuring that we model energies correctly and iii using physical directional reflectances I may be going out on a bit of a limb here so please excuse me if I do I m not as familiar as I ought to be with general CG practice but I ll try to explain what I mean I ve spent the better part of 3 years supporting and trying to add to a tracer I inherited when I came to work here Now that has turned out not to be particularly smart as its been a lot harder to modify and bug fix than if it was my own work Anyway the point is that through out most of that time we had no good model for the directional and spectral variation of that thing outside the window the sky As our main interest is supposed to be the satellite work not the graphics I felt we couldn t come to grand conclusions from our results if the illumination function was simply not representative of the real world Now I ve managed to solve this problem by implementing a model of atmospheric scattering processes due to Zibordi and Voss so its time to make the physics correct and BTW write a fresh tracer I have seen some work on CG models of the sky which are functional and not physical This model is quite fast enough to create a sky radiance LUT at any resolution required on a per scene basis so if you know of anyone out there who needs a model of the sky s irradiance maybe I could help The thing about any such illumination model is of course that the energy results are per steradian of solid angle of illuminating source With the point sampling infinitesimally thin ray what solid angle does a ray reaching the sky have If it s a primary ray then OK it can have some solid angle associated with the pixel but how should ray solid angles be transformed by reflection etc The only work I ve seen that is remotely like this is Amantide s cones However that doesn t use the geometric concept of a solid angle One plus point of considering solid angle is of course that the effects of distance attenuation by divergence are implicitly included So I m very interested in how much solid angle is used as yet another ray parameter in more general CG work Is this really common or unheard of There s a reflectance concept in remote sensing called Bi Directional Reflectance Distribution Function BRDF which may also be use in CG or have a parallel that defines directional reflectance as a 5 d array of pairwise directional spectral reflectance coefficients For each wavelength quantized of course for each incident direction over the 2 Pi hemisphere for each emergent direction define a reflectance coefficient Such things can be used as reflectance LUTs or integrated subdivided and importance sampled Are similar things done for interesting material reflectances in the main stream back to contents Material Properties by Ken Turkowski turk apple com I edited Ken s notes into a coherent whole EAH Does anyone know where I can pick up a list of material properties for different metals and other objects I need to know refractive index diffuse component specular component and specular exponent Purdue has a catalog of transmissive reflective absorptive and emissive spectral data for conductors dielectrics pigments emulsions and light sources From this you can calculate the refractive index and diffuse spectrum It s called Thermophysical Properties of Matter by the Purdue University Thermophysical properties research center There are multiple volumes We have found volumes 6 7 and 8 most useful These contain data for dielectrics conductors and surface coatings Unfortunately this book is out of print We got our copy by photocopying one that Purdue had Specular data is a function of the finish i e rough smooth and can be calculated by the method of He SIGGRAPH 91 given surface statistics Roy Hall s book Illumination and Color in Computer Generated Imagery points to some other sources of reflective data The reflective spectrum is the diffuse color Specular properties are a function on the finish not the material back to contents New Library of 3D Objects Available via FTP by Steve Worley worley updike sri com On the ftp site cs uoregon edu 128 223 4 13 I have assembled a set of over 150 3D objects in a binary format called TDDD in the directory incoming TDDDobjs These objects range from human figures to airplanes from semi trucks to lampposts These objects are all freely distributable and most have READMEs that describe them There are over six megabytes of these binary objects In order to convert these objects to a human readable format a file with the specification of TDDD is included in the directory with the objects There is also a shareware utility called TDDDconv that will convert the binary objects into either OFF NFF Rayshade or vort objects This utility is also found on cs uoregon edu in the file incoming TDDDconv tar Z There are some interesting things here You might have to diddle a bit and I noticed that some databases don t translate but good stuff for the price One very cute thing in the package is tddd2ps which converts a TDDD file to a printable set of four orthogonal views nice touch EAH back to contents Object Oriented Ray Tracing Book I am looking for a book named Object oriented ray tracing by Melcher and published by Wiley 91 This is in fact an article by Karl Melcher and G Scott Owen more fully entitled Object Oriented Ray Tracing A Comparison of C Versus C Implementations which will appear in a Wiley book early in 1992 and which was in the Wiley booth at SIGGRAPH 91 The title of the book will be Computer Graphics Using Object Oriented Programming and the editors are Cunningham Craighill Fong and Brown back to contents New and Updated Ray Tracing and Radiosity Bibliographies At weedeater see the header of this issue via anonymous FTP are a number of new or updated ray tracing and radiosity bibliographies I ve updated the ray tracing bibliography pub Papers RayBib 09 91 Z and radiosity bib RadBib 09 91 from last year s version Rick Speer has provided a postscript only version of his extensively cross referenced ray tracing bibliography speer raytrace bib ps Tom Wilson s fine ray tracing abstract collection is also available with June 1 being the latest version rtabs 6 91 shar Z Also the file NetPapers lists a number of worthwhile articles and theses available on the net and where to get them back to contents DKBTrace 2 12 Port to Mac by Thomas Okken thomas duteca et tudelft nl The public domain raytracer DKBTrace which runs on FPU equipped Macs has been made available for anonymous ftp from alfred ccs carleton ca files pub dkbtrace dkb2 12 other ports MacPort1 0 2 back to contents Graphics Gems II Source Code FTP from weedeater math yale edu 130 132 23 17 gondwana ecr mu oz au 128 250 1 63 file pub GraphicsGems GemsII GGemsII tar Z back to contents Radiance Digest Archive by Greg Ward greg lesosun1 epfl ch I have just made back issues of the Radiance Digest available from anonymous ftp at hobbes lbl gov 128 3 12 38 in the pub digest directory Those of you who have limited network access can still ask me to send back issues to you directly back to contents Model Generation Software by Paul D Bourke pdbourke ccu1 aukuni ac nz Paul has a facet based modeller for the Mac called VISION 3D which can be used to generate models directly in the RayShade and Radiance file formats He wrote telling me of other programs that might be of interest EAH I have some other niche model generators that also export to Radiance and RayShade A brief description of some of them follows FracHill generates the old fractal landscapes using the spatial subdivision technique ie not the fourier method It has all the usual settings for roughness sea level seed land sea colour etc 3D LSystems allows the user to generate 3D LSystems 0L Uses all the standard symbols from the literature an extension of my 2D LSystem which I wrote years ago Triangulate takes a set of randomly distributed samples on a surface and generates either a triangulated Delaunay of gridded mesh representing the surface We use it for our landscape Architecture course Note surfaces functions only not solids Anyway these and other applications can be obtained from my FTP directory ccu1 aukuni ac nz 130 216 1 5 located in the architec directory Because we pay for FTP to the US people should be asked to FTP the README file in the above directory it will inform them of alternative sites in the US back to contents Rayshade 4 0 Release Patches 1 2 and DOS Port by Craig Kolb and Rod Bogart rayshade weedeater math yale edu Rayshade 4 0 is now available This version is extremely different from 3 0 and is very different from 4 0beta Rayshade 4 0 features include Eleven primitives blob box cone cylinder height field plane polygon sphere torus flat and Phong shaded triangle Aggregate objects Constructive solid geometry Point directional extended spot and quadrilateral light sources Solid procedural texturing bump mapping and 2D image texture mapping Antialiasing through variable rate jittered sampling Arbitrary linear transformations on objects and texture bump maps Use of uniform spatial subdivision or hierarchy of bounding volumes to speed rendering Options to facilitate rendering of stereo pairs Rudimentary animation support and motion blur Numerous bug fixes and syntax changes Apologies to all the folks who felt that their Rayshade 4 0beta questions were not handled in a timely fashion Both Rod and Craig have had to deal with Real Life and did not have as much time for Rayshade as we had hoped We still feel that Rayshade is the best Un x raytracing package for the price Rayshade 4 0 is available via anonymous ftp from weedeater math yale edu 130 132 23 17 in pub rayshade 4 0 The shar files will be posted to alt sources and submitted to comp sources misc Patches 1 and 2 to rayshade 4 0 are now available through anonymous ftp from weedeater math yale edu 130 132 23 17 as pub rayshade 4 0 patches patch 1 2 The patches have also been posted to comp sources misc Tom Hite managed to port rayshade to DOS and was kind enough to send me a set of diffs a couple of configuration files and a short note describing what one needs to do in order to coax rayshade into running on PCs I haven t had the courage yet to find myself a PC and to verify that Tom s instructions are idiot proof In addition Tom s diffs were for rayshade 4 0 patchlevel 0 and the new patches will undoubtedly cause some minor problems when it comes to applying Tom s diffs The files are available from weedeater math yale edu 130 132 23 17 as pub rayshade 4 0 raydiffs dos back to contents RayShade Timings by Craig Kolb Below for your amusement are timings for the latest version of rayshade running on an HP 730 I suspect that rayshade is a good bit less efficient than it used to be but I have yet to actually put this suspicion to the test Rayshade v4 0 patchlevel 1 on an HP 730 running HPUX 8 05 MB memory Wed Oct 9 13 50 29 EDT 1991 Setup Total Polygon Sphere Cyl Cone Bounding seconds Tests Tests Tests Box Tests balls 3 18 116 24 356K 1564K 0 2763K gears 15 79 705 25 8345K 0 0 11260K mount 6 13 165 03 1035K 2096K 0 2991K rings 5 44 235 37 103K 206K 4883K 5536K teapot 13 49 126 43 1677K 0 0 2761K tetra 2 96 31 93 578K 0 0 694K tree 4 94 103 28 716K 16K 366K 1467K All timings are sum of user and system time Setup includes time to read the database and initialize all appropriate data structures Total time is setup time plus rendering time Test figures are rounded upwards Uniform spatial subdivision employing 22 3 voxels is used to accelerate rendering In the balls gears and tree databases the ground plane is moved outside of the 22 3 grid in an attempt to generate a more uniform object distribution within the grid back to contents RayShade vs DKBtrace Timings by Iain Dick Sinclair axolotl socs uts edu au In your posting on RayShade vs DKBtrace you mention doing timings on them using the SPD Any chance you have the timings sitting around A friend here did the comparison but it was by no means thorough it only used one benchmark the balls In any event the results of his quick experiment seem to have been discarded apparently it was a slight pain to translate NFF DKB s verbose input format I seem to remember him saying that Rayshade completed the scene about 20 quicker Unfortunately SPD wasn t used exhaustively though it may be in the near future back to contents PVRay Beta Release by David Buck dbuck ccs carleton ca The freely distributable raytracer PVRay Persistence of Vision is available for BETA testing from alfred ccs carleton ca 134 117 1 1 in the directory pub dkbtrace pvraybeta This program has been developed by the Persistence of Vision group on CompuServe and is built on top of DKBTrace version 2 12 with my permission and blessing Please note that this is a BETA release so it may exhibit some bugs or portability problems to different platforms Please refer any problems to Drew Wells at 73767 1244 compuserve com Also this version does not contain some of the ports which were previously available for DKBTrace This situation is being rectified However you should find that the product specific modules developed for DKBTrace should be easily adaptable to PVRay Program Synopsis PVRay is a Freely Distributable raytracer built on top of DKBTrace New additions include Bezier surfaces Height Fields GIF only at this time Bump maps Improved Quartic surface support Input language can now optionally accept lowercase keywords New textures Onion Leopard C style comments accepted and Algebraic surfaces Sphere Cylinder and Torus image mappings Please direct inquiries to Drew Wells at 73767 1244 compuserve com back to contents Vort 2 1 Release by Eric H Echidna gondwana ecr mu oz au 128 250 1 63 pub vort tar Z munnari oz au 128 250 1 21 pub graphics vort tar Z uunet uu net 192 48 96 2 graphics vogle vort tar Z uucp access as well ftp graphics vogle vort tar Z Australian ACSnet sites may use fetchfile fetchfile dgondwana ecr mu oz pub vort tar Z The major changes are to the ray tracer which now allows orthographic projections lights to be in composite objects provides a transform operator a few other odds and sods plus the usual set of bug fixes There are also a couple of utilities for starting art up via inetd to help simplify the generation of animations across networks It runs on IBM PC s VMS and a variety of UNIX boxes Contributed scene files for the ray tracer can be found in contrib artscenes on gondwana Apart from the scene files the tar files in this directory also includes some useful tile patterns and geometry files Anyone with anything they d like to add is welcome to put it in gondwana s incoming directory and send us mail Includes among much else art a ray tracer for doing algebraic surfaces and CSG models back to contents BRL CAD 4 0 Release by Michael J Muuss and Glenn M Gillis The U S Army Ballistic Research Laboratory BRL is proud to announce the availability of Release 4 0 of the BRL CAD Package The BRL CAD Package is a powerful Constructive Solid Geometry CSG based solid modeling system BRL CAD includes an interactive geometry editor a ray tracing library two ray tracing based lighting models a generic framebuffer library a network distributed image processing and signal processing capability and a large collection of related tools and utilities Release 4 0 is the latest version of software which has been undergoing continuous development since 1979 The most significant new feature for Release 4 0 is the addition of n Manifold Geometry NMG support based on the work of Kevin Weiler The NMG software converts CSG solid models into approximate polygonalized boundary representations suitable for processing by subsequent applications and high speed hardware display BRL CAD is used at over 800 sites located throughout the world It is provided in source code form only and totals more than 280 000 lines of C code BRL CAD supports a great variety of geometric representations including an extensive set of traditional CSG primitive solids such as blocks cones and tori solids made from closed collections of Uniform B Spline Surfaces as well as Non Uniform Rational B Spline NURBS Surfaces purely faceted geometry and n Manifold Geometry NMG All geometric objects may be combined using boolean set theoretic operations such as union intersection and subtraction Material properties and other attribute properties can be associated with geometry objects This combining of material properties with geometry is a critical part of the link to applications codes BRL CAD supports a rich object oriented set of extensible interfaces by means of which geometry and attribute data are passed to applications A few of the applications linked to BRL CAD include Optical Image Generation including specular diffuse reflection refraction multiple light sources and articulated animation An array of military vehicle design and evaluation V L Codes Bistatic laser analysis Predictive Synthetic Aperture Radar Codes including codes due to ERIM High Energy Laser Damage High Power Microwave Damage Weights and Moments of Inertia Neutron Transport Code PATRAN TM and hence to ADINA EPIC 2 NASTRAN etc for structural stress analysis X Ray image calculation BRL CAD requires the UNIX operating system and is supported on more than a dozen product lines from workstations to supercomputers including Alliant FX 8 and FX 80 Alliant FX 2800 Apple Macintosh II Convex C1 Cray 1 Cray X MP Cray Y MP Cray 2 Digital Equipment VAX Gould Encore PN 6000 9000 IBM RS 6000 Pyramid 9820 Silicon Graphics 3030 Silicon Graphics 4D Iris Sun Microsystems Sun 3 and the Sun Microsystems Sun 4 SparcStation Porting to other UNIX systems is very easy and generally only takes a day or two You may obtain a copy of the BRL CAD Package distribution materials in one of two ways 1 FREE distribution with no support privileges Those users with online access to the DARPA InterNet may obtain the BRL CAD Package via FTP file transfer at no cost after completing and returning a signed copy of the printed distribution agreement A blank agreement form is available only via anonymous FTP from host ftp brl mil address 128 63 16 158 from file brl cad agreement There are encrypted FTP able files in several countries around the world Directions on how to obtain and decrypt the files will be sent to you upon receipt of your signed agreement One printed set of BRL CAD documentation will be mailed to you at no cost Note that installation assistance or telephone support are available only with full service distributions 2 FULL SERVICE distribution The Survivability Vulnerability Information Analysis Center SURVIAC administers the supported BRL CAD distributions and information exchange programs for BRL Full service distributions cost US 500 and include a copy of the full distribution materials on your choice of magnetic tape media You may elect to obtain your copy via network FTP One printed set of BRL CAD documentation will be mailed to you BRL CAD maintenance releases and errata sheets will be provided at no additional charge and you will have access to full technical assistance by phone FAX letter or E mail Agencies of the U S Federal Government may acquire the full service distribution with a simple MIPR or OGA funds transfer For further details call Mr Glenn Gillis at USA 410 273 7794 send E mail to gillis brl mil FAX your letter to USA 410 272 7413 or write to BRL CAD Distribution SURVIAC Aberdeen Satellite Office 1003 Old Philadelphia Road Suite 103 Aberdeen MD 21001 USA Note that USA area code 410 will not go into effect until 1 Nov 91 Prior to that date please use area code 301 Those sites selecting the free distribution may upgrade to full service status at any time All users have access to the BRL CAD Symposia workshops user s group and E mail mailing list Sincerely Michael J Muuss Glenn M Gillis Advanced Computer Systems SURVIAC Ballistic Research Lab Aberdeen Satellite Office back to contents Eric Haines erich acm org Ray Tracing News Volume 4 Number 3 Ray Tracing News Volume 4 Number 3 Ray Tracing News Volume 4 Number 3 Ray Tracing News Volume 4 Number 3 Ray Tracing News Volume 4 Number 3 Ray Tracing News Volume 4 Number 3 Ray Tracing News Volume 4 Number 3 Ray Tracing News Volume 4 Number 3 Ray Tracing News Volume 4 Number 3 Ray Tracing News Volume 4 Number 3 http www acm org tog resources RTNews html rtnv4n3 html http www acm org tog resources RTNews html rtnv4n3 html http www acm org tog resources RTNews html rtnv4n3 html http www acm org tog resources RTNews html rtnv4n3 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv5n1.html%%==%%Ray Tracing News, Volume 5, Number 1%%==%%Ray Tracing News "Light Makes Right" July 10, 1992 Volume 5, Number 1 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%36872%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right July 10 1992 Volume 5 Number 1 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1991 1992 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction SIGGRAPH roundtable etc New People New Addresses etc Texturing Parameterization by Haakan Zap Andersson NuGrid results by Mike Gigante Recursive Ray Traversal by Erik Jansen and Wim de Leeuw Response by Kelvin Sung Ideal Grid Object Densities by Dan Gehlhaar Marc Andreessen BVH Traversal Results by Nicholas Wilt Ray Tracing Roundup by Eric Haines Mail Based 3D File Server by Bob Lindabury Imagine That by Steve Worley Correct Roots for Torus Intersection by Haakan Zap Andersson Information on Taos Parallel Processor by Paul Wain The Glazing Trick by Haakan Zap Andersson Bug in Ray Convex Polyhedron Intersector in Graphics Gems II Eric Haines Introduction As usual I ve organized a ray tracing roundtable for this year s SIGGRAPH This is about the sixth year we ve done this What normally happens is 50 100 people show up we go around the room introducing ourselves and saying a little about what we ve done lately then break up and schmooz During intros you can say things like RayShade hackers let s meet in this corner of the room after intros or somesuch It s fun to finally attach faces with names and I ve found it gets my brain hopping to exchange ideas with like minded souls I ve got a confirmed room in the Convention Center during the dead time between when the sessions end and the technical reception begins Look for an announcement of the location wherever Special Interest Groups are listed I ll probably also list it under Birds of a Feather if like last year they don t post where the SIG meetings are located The difference between a BOF and a SIG meeting All I know is I can reserve a room if it s a SIG meeting Official time 5 15 6 15 pm Thursday July 30th No guarantees about the shape of the table It s a bit embarrassing putting this issue together reading the backlog of notes ending in phrases like have a nice Xmas What can I say I ve been busy Culling through all this stuff has been pleasant There are some nice new ideas and interesting research results I ve tried to minimize the endless stream of announcements about some of the new free software geez don t these people know the rest of us are trying to make money selling this stuff by summarizing these in an article called Ray Tracing Roundup By the way if you re reading this on comp graphics don t ask to subscribe The RT News is always posted to comp graphics If you think you missed an issue check the princeton edu archive site assuming you have FTP There is a lot more stuff to wade through a few articles I want to pass by the authors again etc but for now I thought the amount of material was enough to make an issue Enjoy and see you at SIGGRAPH back to contents New People New Addresses etc Steve Worley solid texturing ray tracing efficiency mostly statistical Apex Software Publishing 405 El Camino Real 121 Menlo Park CA 94025 alias steve worley worley cup portal com I have become very involved in developing algorithms for ray tracing especially in statistical analysis and smart ray tree pruning and antialiasing I am also working on a method of on demand modelling where a ray tracer might not even compute an object s polygons unless its bounding volume is pierced Thus forests of millions of trees are possible with modest memory requirements distant trees are never even synthesized This is one algorithm where true ray tracing is orders of magnitude faster than a Z buffer or scanline algorithm a scary thought I have also written code for over 100 Perlin style solid textures as a commercial product Manoj Patel stereo motion blur Computer Science Department North Carolina State University Raleigh N C 27695 8206 919 515 3271 e mail mp adm csc ncsu edu I am a lowly graduate student at North Carolina State University I am working on combining motion blur and stereo using a modified version of Rayshade My speciality is staying incredibly busy 24 hrs a day but getting very little done I would be interested in hearing from people that have implemented motion blur I have been assuming that most people use supersampling or stochastic sampling across about 8 24 time frames but have few sources to back this up i e please tell me know what is done in the real world Laurie Gerholz Unisys Corporation 3199 Pilot Knob Road M S F2L09 Eagan MN 55121 612 687 2913 vlad moria sp unisys com My interests in computer graphics currently include ray tracing techniques radiosity techniques and methods of building scene models which can be rendered via ray tracing or radiosity I am currently working on a ray tracing scene renderer which will run under Microsoft Windows This is a part time hobby effort not at all related to my real job too bad Antonio Costa ray tracing visualization modeling INESC North Largo Mompilher 22 4100 Porto Portugal 351 2 321006 ext 329 alias antonio costa a costa inescn rccn pt alias antonio costa acc asterix inescn pt I have developed my own extensible ray tracer in the past 2 years for U ix VMS DOS and Transputers I am very interested in texturing 2D and 3D and better ray tracing I am also doing some things in scientific visualization applied to medicine I am looking for a subject to start my PhD work next year The ray tracer is at asterix inescn pt 192 35 246 17 It does bicubic patches and other interesting things EAH Brian Corrie I am moving to the land down under to work on the Visualization project at the Australian National University in Canberra Interests are the same as before roughly Realistic Rendering Shading Languages and Parallelization They have some interesting hardware down there I will be working on a 128 node Fujitsu AP1000 a MIMD parallel machine parallelizing algorithms for visualization My new email address is bcorrie cs anu edu au G day back to contents Texturing Parameterization by Haakan Zap Andersson zap lage lysator liu se Texturing I had a smelly problem with the AutoCAD entity polyface a bunch of vertices and then a bunch of 3angles or 4angles referring to those by index since AutoCAD don t know a THING about texturing it naturally does not include texturing coordinates And by default RayTracker did texture EACH LITTLE POLYGON separately yielding VERY ugly results What I did was simple but semi effective Look at ye normal vector If Z component is largest texture in XY space if Y is largest texture in XZ space and if X is largest in YZ space That created good results as long as the objects depicted were boxes and such a brick texture was correctly oriented automatically on the faces and so on Curved surfaces Weren t that good I used the pre smoothing normal so each polygon had its own texturing at least i e no change of texture space over the polygon But what the heck it look quite alright and actually some of the funnier effects of the weird texturing on curved objects looked like some kind of inlaid material like inlaid wood or so where texture space just happened to swap Perhaps you have thought of some similar criteria Indeed I have I independently invented this method a few years back and I ve found it useful since then It s particularly good with textures like carpet or iron or suchlike there is little distortion and you usually can t see the discontinuities when things flip from one face to another Even when there is some grain to the texture it usually looks pretty cool EAH Another idea I had was to average ALL NORMALS in any given polysurface weighted by area and that would give me a normal to the objects most flat orientation then one would texture in the plane orthogonal to that normal The problem is that one most often want the X direction of a texture to follow the horizon not to get rotated textures back to contents NuGrid results by Mike Gigante mg godzilla cgl citri edu au Mike wrote of some results from his efficiency scheme A Michael Gigante T Accelerated Ray Tracing Using Non Uniform Grids J Proc of Ausgraph 90 C Melbourne Australia D Sept 1990 P 157 63 EAH As I made the claim that NUgrid would just take care of the SPD balls example automatically I thought I would followup on some results These results are using rayshade 4 0 2 for which we have added NUgrid as well as the existing uniform grid This model is exactly as generated by your SPD program i e no hand tweaking to remove the ground plane from the uniform grid Resolution Grid Method NuGrid Method 8 7810 45 850 94 10 7083 62 647 86 12 7248 39 574 53 14 6477 42 518 00 16 5759 92 540 98 18 5000 04 532 22 20 4235 32 567 90 22 3407 94 558 84 24 2837 32 552 42 26 2544 04 537 30 note that NUgrid is far less sensitive to grid resolution and of course is significantly faster NUgrid doesn t always win as much but it is always less sensitive to picking the right grid resolution I would like to see how these results compare to two level gridding i e complicated objects get their own grid see next article An automatic way to implement this is if a box contains more than so many items nest a gridded box in it This is one of David Jevans Brian Wyvill s ideas in Adaptive Voxel Subdivision for Ray Tracing Proceedings of Graphics Interface 89 and has evidently been used by Alias Inc to good effect I wish some Rayshade hacker would go and implement this method hint hint EAH Mike wrote about some interesting new results he s found that s made NuGrid even faster hopefully more about these in the next issue EAH back to contents Recursive Ray Traversal by Erik Jansen and Wim de Leeuw fwj dutidh tudelft nl TU Delft Spatial subdivision for ray tracing has been a popular subject over the last decade but unfortunately even after all these years there is still a lot of confusion about what can be considered the best spatial subdivision method grid or adaptive and the best ray traversal method sequential bottom up or recursive top down Regularly papers appear with a comparison between a new read a small variation on an existing method and a standard read naive method being always favourable for the first one In the mid eighties I did some experiments comparing a sequential ray traversal with a recursive ray traversal for an adaptive spatial subdivision Excell See also the discussion in the RTnews issues of March 26 1988 Jim Arvo Linear time voxel walking for BSP and April 7 1988 Erik Jansen Re Linear time voxel walking for BSP I did not found a clear difference in performance between the two methods of course the Excell spatial directory is an efficient index not requiring any tree traversal as reported in the above mentioned issues of RTnews Nevertheless papers are still appearing in conferences and journals that either prove that recursive traversal is performing worse than a newly proposed method or performing better in those cases where it is proposed as a new method This is reason enough to do a new comparison As part of a master s thesis project Wim de Leeuw first did some experiments with recursive traversal on an adaptive binary space subdivision comparing it with the DDAOCT algorithm of Kelvin Sung Eurographics 91 The DDAOCT did certainly not do better than the recursive method Furthermore the DDAOCT method is very sensitive to the size of the hashtable Secondly the recursive traversal adaptive subdivision algorithm was implemented in Rayshade a very fast ray tracer using a sequential grid traversal algorithm see RayShade 4 0 and RayShade timings in RTnews Nov 20 1991 The uniform grid method of RayShade is very sensitive to the teapot in stadium problem and therefore RayShade provides a two level grid option a grid for the whole scene and separate grids for complex sub objects The adaptive subdivision recursive ray traversal was implemented with only minor modifications to RayShade The recursive traversal uses a stack and alternatively halfs the xmin xmax ymin ymax zmin zmax ray intervals as described in RTnews April 7 1988 Here are the timings for the two three methods in seconds on a HP 700 model grid grid subgrid recursive bsp balls 942 156 366 gears 977 857 1155 mount 214 263 rings 307 299 441 teapot 154 171 tetra 39 84 tree 2246 134 278 conf room 283 269 Conf room is the room by Greg Ward that was converted from Radiance format to RayShade format As you see RayShade with two level grid is indeed very fast mainly because of the additional raybox test within each cell The raybox test is not of much use in an adaptive subdivision because the cells are already tight enough Of course there are always ways to improve the recursive version by making larger changes to RayShade for instance by inputting polygons not by their enclosing box but by their own extent but that would not really change the picture we think These have been our experiments so far The code for the recursive ray traversal and the model data of the conference room can be obtained from us fwj duticg tudelft nl I received this from Kelvin Sung ksung sherman cs uiuc edu in response EAH I hope I have pointed this out in comp graphics but in the Eurographics 91 paper when I say ARVO I was referring to Glassner s Tree Coherence Re SIGGRAPH 90 Advance Ray Tracing Course Notes It was my mistake In that paper I did not actually compare DDAOCT with Arvo s linear tree walking or Eric Jansen s recursive algorithm I agree 100 with their claim In fact after realizing my mistake during the September Eurographics 91 conference in November Peter Shirley and I implemented Arvo s linear tree walking algorithm and tested things out and we realized that linear tree walking is a better algorithm independently from Jansen We wrote up our experience as a Gem which will appear in Graphics Gems III as Ray Tracing with the BSP Tree Note that the code for Graphics Gems III is now available on princeton edu in pub Graphics The book itself will be out at SIGGRAPH from Academic Press back to contents Ideal Grid Object Densities by Dan Gehlhaar Marc Andreessen From the Rayshade mailing list From Dan I am rendering large protein structures with overlapping reflective spheres Engridding the primitives speeds the rendering considerably as might be expected for a big conglomerate of 2000 spheres My choice of grid size has been made mostly through trial and error though So here s my question Assuming a near uniform density of primitives what primitive voxel ratio will result in optimal performance Or does it vary a lot from one case to another My trials however limited suggest a ratio of about 4 or 5 primitives voxel Does anyone have any suggestions From Marc That s about what I settled on a while back again through trial and error something like a 10x10x10 grid for 5000 spheres It would sure be nice if Rayshade could compute an optimum grid size based on primitive distribution back to contents BVH Traversal Results by Nicholas Wilt npw coos dartmouth edu excerpts from email by Nicholas I just finished an undergraduate thesis in ray tracing I implemented a ray tracer in C and compared a number of optimization strategies I thought you might be interested in some of the results I ran into Bounding volume hierarchies generated by the technique of Goldsmith and Salmon yield huge speedups over naive ray tracing obviously I d guess 10 20X You go slower if you combine with Snyder Barr ray boxes because the ray box rejection rate is small 45 and you have to recompute the ray box every time the ray hits a bounding volume which is frequently when the BVH was generated automatically Kay Kajiya BVH traversal reduces the number of intersections but not by much in my experience In fact only the Sphereflake image modified from the SPD saw a big enough reduction for the priority queue to be worthwhile A 20 reduction in intersections resulted in a I asked what Snyder Barr boxes were in this context EAH Snyder Barr boxes When you hit a bounding volume enclose the ray s traversal of the bounding volume in a ray box This is an axis aligned bounding box using the two points where the ray enters and exits the bounding box An object cannot intersect the ray unless its bounding box intersects the ray box If the bounding box for each object is precomputed it costs you at most six comparisons to reject the intersection or after six comparisons you have to do the intersection calculation after all And since most ray boxes only enclose a small fraction of the bounding box s volume the rejection rate should be high Also if you find an intersection you can make the ray box smaller restrict it because you know that a closer intersection isn t going to be found beyond the one you just found This is done using the ray s direction cosines If you have a super naive BVH example one root bounding volume this works great The ray hits the root you enclose its traversal of the root bounding volume in a ray box The ray box encloses a tiny fraction of the root bounding volume so you get 95 99 rejection rate i e almost all intersection calculations end after back to contents Ray Tracing Roundup by Eric Haines This column is meant to quickly summarize new versions features and tools available for various ray tracers and related products TTDDD these programs convert 3D objects in the binary TTDDD format into either OFF NFF Rayshade or vort format There is also a Postscript object viewer very handy I can quickly preview objects using GhostScript and it also outputs Framemaker MIF files These programs are SHAREWARE Registered users also get code to automatically convert text strings into 3D objects using any TeX font This package and many objects are available at wuarchive wustl edu in graphics graphics objects TDDD Some of the objects are excellent one of my favorite test objects is the Star Wars Imperial Scout Walker Contact Glenn Lewis glewis pcocd2 intel com There are a number of new VORT input files from Italy Contact Alessandro Villani raytr astrpi difi unipi it They are available for anonymous ftp pub contrib artscenes room tar Z on gondwana ecr mu oz au 128 250 1 63 pub graphics room tar Z on munnari oz au 128 250 1 21 The models are mainly objects in a room clock ashtray bed lights television etc Contact Eric H Echidna echidna ecr mu oz au RayShade is now in version 4 0 6 at princeton edu pub Graphics There is an active helpful mailing list for this group contact rayshade request cs princeton edu to get put on it Inetray is a network version for running Rayshade 4 0 FTP it from maggia ethz ch directory pub inetray It allows parallel calculation of rayshade pictures for multiprocessing machines and over a network of machines You need SUN RPC 4 0 or newer Contact Andreas Thurnherr ant ips id ethz ch for more information There is an X window fonts converter into Rayshade 3 0 polygons by Ron Sass sass cps msu edu Anonymous ftp from acs cps msu edu in the file pub sass gentxt c There is also a tool for Rayshade animation here The code for a recursive ray traversal efficiency scheme for RayShade and the model data of Greg Ward s conference room can be obtained from Erik Jansen fwj duticg tudelft nl Hopefully this will be made available via FTP some time soon See the related article in this issue Radiance is going great guns There s now even an Amiga port of Radiance 2 0 Check hobbes lbl gov 128 3 12 38 pub ports amiga or osgiliath id dth dk 129 142 65 24 pub amiga graphics Radiance Contact Per Bojsen bojsen ithil id dth dk The IRIT solid modeler 3 0 is now available at an ftp site near you e g ftp uu net 192 48 96 2 graphics irit among others This is an X based CSG modeller which now includes freeform surfaces and it runs on a large number of platforms At asterix inescn pt 192 35 246 17 is a ray tracer by Antonio Costa I haven t played with it but it evidently renders bicubic patches and other interesting things POV aka Son of DKBTrace done by people on CompuServe still seems to be in beta test or somesuch Studio Amiga is a 3D modelling and ray tracing specific BBS 817 467 3658 24 hours 105 Meg online The Utah Raster Toolkit version 3 1 should be out of testing some time after SIGGRAPH There are a number of bug fixes and so on worth getting if you use it Harass Spencer Thomas for when it ll be out spencer med umich edu If you are interested in Greg Turk s work on reaction diffusion textures SIGGRAPH 91 he s placed C code for generating these in the anonymous ftp directory at UNC Connect to ftp cs unc edu and grab the files in the directory pub reaction diffusion Greg notes an implementation detail accidentally left out of the paper The value of chemical b should not be allowed to go below zero While I m on the subject I noticed a minor typo in the Witkin Kass paper on the topic the center term in equation four should be 4 a 2 h 2 b Also their reference 2 has incorrect page numbers should be 363 385 Graphics Gems III code is available via anonymous FTP at princeton edu in pub Graphics GraphicsGems GemsIII Have fun puzzling it out since the book itself is not out quite yet There are some nice bits like Ben Trumbore s bounding volumes I think I know what he s doing and Kelvin Sung s new BSP code back to contents Mail Based 3D File Server by Bob Lindabury lightwave admin bobsbox rent com A mail based file server for 3D objects 24bit JPEG images GIF images and image maps is now online for all those with Internet mail access The server is the official archive site for the Lightwave 3D mail list Besides the above mentioned image based files the server contains many PD and Shareware graphics utilities for several computer platforms including Amiga IBM and Macintosh Some samples include DKBTRACE Raytracer for IBM Amiga and Mac RAYSHADE Raytracer for the Mac QRT Raytracer for IBM Amiga and Mac Objects Objects for Imagine Videoscape Lightwave and others Demos ImageCels Caligari Autodesk 3D Studio and others Plus much more And many more to come The server resides on my BBS called The Graphics BBS The BBS is operational 24 hours a day 7 days a week at the phone number of 1 908 469 0049 It utilizes a Hayes V Series 9600 V 42 modem soon to upgrade to a V 32 modem If you would like to submit objects scenes or images to the server please pack uuencode and then mail the files to the address server bobsbox rent com For information on obtaining files from the server send a mail message to the address file server graphics rent com with the following in the body of the message HELP DIR and a help file describing how to use the server and a complete directory listing will be sent to you via mail back to contents Imagine That by Steve Worley worley cup portal com Imagine is a commercial program that runs on Amiga computers which is in the process of being ported to SGI s It has a complete modeller layout editor and renderer built in and is one of the two most popular 3D programs on that platform I actually use it since I do a lot of mathematical parametric modelling using C code Since I have an Amiga at home and a Sun at work I can output rayshade objects and render them at work or Imagine objects and render them at home very convenient In fact I got started with parametric modelling about a year and a half ago by tearing apart your tree program you wrote for the SPD package now I m working on exploding objects and breaking them in reasonable places when they are subjected to stress Lots of fun I also worked with Glenn to try to produce an algorithm to morph different objects into one another It wasn t a dismal failure but it is nothing I want to try to sell to ILM I also enjoy playing with building new Perlin style solid textures That s ALWAYS a lot of fun back to contents Correct Roots for Torus Intersection by Haakan Zap Andersson zap lage lysator liu se When using the torii intersector you gave me I sent the code from Graphics Gems II Joseph Cychosz s torus intersector I believe EAH we have the trouble of getting the wrong side when rmajor Ok here s what you do Check if rmajor rminor If so hit is OK as is If not calculate the distance between the hit you got and torus center We will be needing the distance SQUARED so no need for a square root Put the distance squared in variable SqrDist If rmajor 0 if SqrDist rminor rminor rmajor rmajor then discard the hit it s on the wrong surface Voila Joe Cychosz 3ksnn64 ecn purdue edu responds I did test the case where the torus was degenerate however I did not consider the application sense of it not really being a wanted surface I will study this further and incorporate your suggestion Also not include in the GEM is the following code which compensates for the order of the roots being transposed I didn t include it since it would make the GEM dependent on the behaviour of the root solver Insert after the call to SolveQuartic SolveQuartic returns root pairs in reversed order if nhits 1 m rhits 0 u rhits 1 rhits 0 u rhits 1 m if nhits 3 m rhits 2 u rhits 3 rhits 2 u rhits 3 m back to contents Information on Taos Parallel Processor by Paul Wain ee89psw brunel ac uk edited from bits and pieces by Paul EAH I am after any info on the Taos parallel processor raytracing stuff The reason I sat up and paid attention when I read about Taos was only because of the way it handles code from a programmer s point of view Apparently it doesn t link the program at the compilation stage but rather downloads the objects as and when they are needed and destroys them as they are finished with how quickly depends on their priority Also if one branch calls an object which is already resident on another node rather than load dwon from the data store it loads in from the other node Also the programmer doesn t need to allocate them to the nodes and ensure that all the node loads are balanced Indeed Taos does this for the programmer to supposedly ensure optimum performance It can apparently do a 790x400 24bpp colour raytrace on 256 compound objects in under 15 minutes And supposedly a 50x50 array of em can do real time raytracing back to contents The Glazing Trick by Haakan Zap Andersson zap lage lysator liu se This is an excerpt from a longer document by Zap more later It s one of those tricks that many people know but if you don t know it then it s worth knowing Or something EAH Next bad thing with standard Phong is the inability to get really shiny surfaces Pumping up the specular exponent makes the shiny spot SMALLER not as it should SHARPER So it might look pretty shiny on a sphere but use it on a cube the chance of you ever SEEING that tiny little specular spot is very small unless the light is positioned just right in respect to the viewer and some cube surface There is a nice and simple trick for this used frequently by Pixar in their little movies You simply threshold the specular light instead of feeding it directly to the output light Let s assume we have a function similar to the Renderman tm function SmoothStep that work like this Smoothstep a b x if x b return 1 0 if x a and x Then let our all new specular highlight be OLD specular formula Ks cos b Ke NEW specular formula Ks SmoothStep 0 4 0 5 cos b Ke where the numbers here 0 4 and 0 5 could be anything you wish This gives the surface a glazed appearance and may be useful modelling glass and similar back to contents Bug in Ray Convex Polyhedron Intersector in Graphics Gems II by Eric Haines This bug was found by Peter Flatau The test for my polyhedron intersector was p 576 middle of the page if t It should be if t Also the text in Graphics Gems II has the same bug The last sentence on page 249 should be If the compute t is less than tnear then the polyhedron is was 0 back to contents Eric Haines erich acm org Ray Tracing News Volume 5 Number 1 Ray Tracing News Volume 5 Number 1 Ray Tracing News Volume 5 Number 1 Ray Tracing News Volume 5 Number 1 Ray Tracing News Volume 5 Number 1 Ray Tracing News Volume 5 Number 1 Ray Tracing News Volume 5 Number 1 Ray Tracing News Volume 5 Number 1 Ray Tracing News Volume 5 Number 1 Ray Tracing News Volume 5 Number 1 http www acm org tog resources RTNews html rtnv5n1 html http www acm org tog resources RTNews html rtnv5n1 html http www acm org tog resources RTNews html rtnv5n1 html http www acm org tog resources RTNews html rtnv5n1 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv5n2.html%%==%%Ray Tracing News, Volume 5, Number 2%%==%%Ray Tracing News "Light Makes Right" August 26, 1992 Volume 5, Number 2 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%98991%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right August 26 1992 Volume 5 Number 2 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1992 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction SIGGRAPH roundtable etc New People New Addresses etc BSP Traversal Errata by Kelvin Sung The Art of Noise by Steve Worley Ray Tracing Roundup by Eric Haines Graphics Gems III Residency Mask errata by Joe Cychosz Any Future for Efficiency Research by Eric Haines NuGrid Update by Mike Gigante Net News Cullings Spline Patch Ray Intersection Routines by Sean Graves Xdart from Mark Spychalla 4D Space Viewing Software by Steve Hollasch BYU Modelling and Visualization Package Free Demo by Stacey D Son New Radiosity Program Available by Guy Moreillon Optics Lab Information by Anthony Siegman Ray Tracing or Casting Applications by Tom Wilson Goofy Idea Gary McTaggart Constant Time Ray Tracing by Tom Wilson Eric Haines Brian Corrie and Masataka Ohta VLSI for Ray Tracing by Kenneth Cameron George Kyriazis Peter De Vijt Jon Leech Sam Uselton Thierry Priol and Dega Dude The Moon Revisited by Tom Duff Soft Shadow Ideas compiled by Derek Woolverton Book Announcement Multiprocessor Methods for Computer Graphics Rendering by Scott Whitman Introduction Before you hit that next article key at least check out Steve Worley s article The Art of Noise This is one of the better articles that s been in the Ray Tracing News full of interesting bits of advice on using the noise function effectively for texturing As usual SIGGRAPH was fun this year Ray tracing is becoming fairly common with many rendering packages having it available The idea of saving each ray intersection tree at each pixel is spreading Intergraph has had this for years and now TDI has added it to their renderer see Sequin Smyrl SIGGRAPH 89 for the basic technique We ll undoubtedly see more of this in years to come given that main memory is increasing much faster than screen resolution My favorite product was Fractal Painter which is the most paint like paint program I ve seen yet Nothing to do with ray tracing but it was cool One interesting business has arisen in the past year or so selling digitized models Viewpoint Animation Engineering has a nice glossy catalog of models ranging from pterodactyls to spinal cords to eighteen wheelers and I dare you to render a scene with all three At the show they were giving out demo disks of Al Capone related datasets a 32 Packard a violin case a tommygun an antique lamp and a cartoon Al No normals per vertex it s unclear if their other models have these or not and no normal per polygon most polygons were consistently one way though I found a few were reversed ugh Prices listed are in the hundreds of but these seem fairly variable partially depending on your use one folder puts various vehicles at 300 500 a piece but another folder offered 20 vehicles for 395 total You figure it out call them at 1 800 DATASET They also do custom digitizing running around 1000 per model Another company that sells 3D models primarily architectural related items geographic data and people and does digitizing is Acuris at 415 329 1920 Graphics Gems III is out and contains some nice tidbits on ray tracing and many other topics I particularly like Ben Trumbore s gem for computing tight bounding volumes for quadrics and tori There are some truly gem like sharp thoughts like Andrew Woo s clever method of avoiding epsilon problems when using shadow maps Plus lots of other great stuff And at last you can find out what the Gems III code on princeton edu pub Graphics GraphicsGems GemsIII actually does Gems IV will be edited by Paul Heckbert and is due out in two years Academic Press would like to have one out every year but the editors felt that this might lead to diminishing overall quality One of my recent discoveries in Graphics Gems II reprinted in Gems III is Steve Hollasch s set of macro routines for vector manipulation They re easy to overlook but quite compact and useful two of them Vec2Op and Vec3Op replaced dozens of macros in our old vector manipulation macro library Check them out The Gems series is interesting in that there is a lot of knowledge crammed into each book and it sometimes takes a little exploration to find or stumble upon some of the wonderful ideas and tricks therein Two nice things have been happening in ray tracing over the past year One is that wuarchive wustl edu graphics graphics has become a good collection site for various graphics information It includes Radiance a good chunk of the NCSA programs many object databases 31 megs of ray tracing stuff and the milton u washington edu virtual worlds archive wuarchive recently got a new drive which allowed the graphics archive to hop to over 300 megs Write to George Kyriazis kyriazis rdrc rpi edu who is maintaining the graphics area if you see something that s old or missing The other trend is that Rayshade is becoming a testbed for other researchers efficiency schemes Erik Jansen fwj duticg tudelft nl and Wim de Leeuw have made their BSP traversal code publicly available see RTNv5n1 Mike Gigante plans on releasing his NuGrid code as soon as his research paper is accepted and there is one researcher who has implemented Arvo Kirk s 5D scheme using Rayshade as a base This is a wonderful development in that good code for various efficiency schemes for one ray tracer are becoming available and so can be used as the basis for meaningful timing tests Such things as simulated annealing may become easier to explore since a variety of interchangeable efficiency schemes will become commonly available To wrap it up here is the first paragraph of the Acknowledgements of David Jevans interesting Master s thesis which uses nested grids for efficiency Adaptive Voxel Subdivision for Ray Tracing Dept of Computer Science Univ of Calgary 1990 As a young overfunded graduate student I would often pass idle hours drinking medicinal alcoholic concoctions and firing shotgun blasts at pieces of paper nailed to the side of the university s orgone accumulator outhouse Imagine my surprise when I discovered that the performance graphs of my ray tracing algorithms exactly matched the patterns blasted into those pellet ridden sheafs Seeing this as a sign of divine acceptance of some kind of grand conjunction of information I collected my results into the volume of forbidden knowledge that you hold before you back to contents New People New Addresses etc Rob LaMoreaux 907 Wisconsin Ave St Joseph MI 49085 616 982 3187 work 616 983 1743 Home r lamoreaux mi04 zds com Raytracing Interest Creating pictures and eventually short animations I m using POV to create scenes and would eventually like to create short animations I try not to program much but I have been thinking about a Visual basic front end to launch POV depends on time not much available ambition and whether someone does it first Interested in object files and object creation utilities I m too lazy and impatient to hand assemble things out of triangles Some of the objects I am interested in are Cars especially racing houses landscaping bicycles sailboards a sewing machine and anything else interesting to look at Abe Megahed interested in issues of scene complexity global illumination ray tracing data structs in animation University of Wisconsin 1413 Mound St Madison Wisconsin 53711 608 256 6306 back to contents BSP Traversal Errata by Kelvin Sung ksung cs uiuc edu The Gem we wrote for GemsIII Ray Tracing with The BSP Tree pp 271 274 did not reflect enough credit from Erik Jansen s past work Erik Jansen pointed out to me that the algorithm in our Gem is exactly the same except for some small details as the method suggested in Jansen 1986 and therefore the sentence on page 272 of GemIII the recursive ray traversal algorithm introduced independently by Jansen 1986 is a different implementation of the same tree walking idea should be removed The sentence on page 271 should be read as It is straightforward to implement the Recursive Ray Traversal Algorithm as proposed by Jansen 1986 and Arvo 1988 on a BSP tree I thought the date of the work Jansen 1986 vs Arvo 1988 shows that Erik Jansen was the one who first introduced the algorithm The fact that his work was referenced later than Arvo s in that Gem may cause confusion and thus may not reflect enough credit from Jansen s past work This is a mistake and should be corrected Note Erik Jansen and Wim de Leeuw have made their BSP code for Rayshade publicly available Write fwj duticg tudelft nl for details EAH back to contents The Art of Noise by Steve Worley spworley netcom com Using Perlin style 3D solid textures for algorithmic generation of surfaces can be very effective The Perlin paper in 85 SIGGRAPH is the only reference you really need to implement them Perlin describes an algorithm for fractal noise generation the basis of MANY types of surfaces The big advantage of this method is that it is U V independent it is a solid texture that takes object absolute coordinates Implementing this algorithm is really quite easy but there are some small tweaks that can enhance the quality of the surface Assuming you have a noise generation function a smooth 3D interpolator given a lattice of values and derivatives Graphics Gems II has the code for a routine by Greg Ward to do just this you will often want to make fractal noise by summing over many scales of the noise function By decreasing the characteristic size of each scale as well of the amplitude of those summed scales after about 5 or 6 scales you ll have a function that will have details on many different size ranges This function when expressed as a greyscale or even thresholded has a cloudy appearance there are blobs of diffuseness with soft ragged edges How to use these noise fields to make textures is pretty straightforward Perlin gives many examples and there was even an entire course at 92 SIGGRAPH I ve implemented nearly 50 textures that use fractal noise and I ve learned some tricks The biggest problem with the algorithm described above is that there are artifacts You are interpolating over a cubic lattice and you ll be able to SEE that lattice especially if you look at just one scale function One trick I use to remove these artifacts is to make the fractal noise more isotropic by rotating each summed scale to a random orientation Since the lattices of the different scales don t line up the artifacts will at least be uncorrelated and a lot less noticeable I do this by rotating each scale with a random precomputed rotation matrix If you want to return derivatives for bump mapping you ll have to post multiply the result from each scale with the appropriate inverse rotation matrix before you add them I made these matrices by generating random rotation matrices and taking only those that point inside a single octant of a sphere Since a 90 degree rotation or 180 or 270 will still let the lattices match up a single octant is the most rotation that is necessary Note that these are full 3D rotations not 2D but you know what I mean Keeping the rotations to this smaller angle lets you see that there are not two similar rotations for different scales Remember this is a one time precompute you can manually sort through about 10 of these and you re done To test what octant a rotation matrix maps to just pump the vector 1 0 0 through the matrix and look for a vector with all positive components You can generate the rotation matrices using the algorithm s in Graphics Gems III by Ken Shoemake and Jim Arvo This rotation trick is most useful when bump mapping since the differentiation really exposes the lattice artifacts there are sharp discontinuities of the second derivatives along the lattice lines When you differentiate for bump mapping these second derivatives become FIRST derivatives and are visible When you are summing the scales each scale will have a size and amplitude which is a fixed ratio of the scale size and amplitude of the previous scale The natural scale to use is 0 5 but DON T USE THIS Better to use 0 4857463537 or 0 527849474673 which will give you the same effective ratio A ratio of exactly 0 5 will help the different scales register more effectively the small scale repeats exactly twice on top of the larger scale so artifacts can appear periodically By using the odd number the periodicity is broken A couple of other tricks also makes more useful noise MAKE A SPECIAL CASE Half of the time when you use noise it is on a flat surface like woodgrain on a table top If you make a 2D version of fractal noise it will be over twice as fast as a 3D version which basically computes two layers of noise and interpolates I have a special case that checks for the Y vertical component to be 0 and branches off into a special case subroutine If you re clever you can even make the 2D special case be a perfect subset of the 3D case that is the SIDES of the tabletop will call the 3D noise routine but they will mesh up with the 2D version which is called for the TOP of the table Easiest way to be clever take your original code globally replace the variable Y with 0 then have fun in Emacs removing all the terms that vanish This guarantees that your special case will match up with your general 3D routine but you won t have to think too hard about how to implement it Only one disadvantage to this technique the rotation matrices from the previous idea will make even a flat tabletop have Y 0 You can either change your rotation matrices to be only 2D spins around the Y axis live without the rotation enhancement or live with the slower computation Your call My implementation let the user decide with the default being NOT to use rotations Yet another trick NORMALIZE your noise Ideally you want the fractal noise no matter how many scales or what scale size or ratio you use to return a value over the same range This is easy to do just divide the final sum by the square root of the sum of the squares of all the amplitudes of the scales This makes it a lot nicer when you are tweaking textures the relative amounts of colors or size of the bumps won t be affected when you change the scale or amplitude ratio or number of summed scales For user convenience you might even want to make another type of normalization One common use of the fractal noise value is to feed the value into a color spline If a user sets the levels of the color spline it can be VERY difficult for them to set the levels right in order to get the coverage they need If they want to make white clouds on a mostly blue sky what value does they choose for the threshold where white starts being added I solved this problem by computing 25 000 000 values of noise and making a probability distribution just a histogram By recording the different percentiles 5 of the noise values are under this number 10 under this one 95 under this one I was able to get a PERCENTAGE mapping of the distribution When a user wants the sky to be 90 blue they say that the white color should be added starting at 0 90 The program maps this value 0 90 back into the corresponding noise value and the user gets the 90 coverage they asked for I have noise that returns a value from 1 to 1 but most values are clustered around 0 90 corresponds to a value of 1 442 in my implementation This convenience is no real computational load but for the user it makes using the texture a LOT more intuitive Using Perlin fractal noise is an art but it is a very effective way to make complex surfaces Good luck And for the curious my textures are a commercial product sorry I can t give you the code back to contents Ray Tracing Roundup by Eric Haines The computer graphics archive that is resident on iear arts rpi edu is being moved to wuarchive wustl edu The FTP directory is graphics graphics In that directory there is a CONTENTS file that gives a roadmap of the directories and also an ls lR file giving exact pathnames Note that a book errata directory has started here authors please send George your errata Currently errata for An Introduction to Ray Tracing and Digital Image Warping are available with more expected In case you don t know you can NFS mount the wuarchive directories if you d like Right now there are more than 500 systems mounting it Contact George Kyriazis kyriazis rdrc rpi edu The fabled POV v1 0 ray tracer a k a son of DKBtrace is finally available being released just before SIGGRAPH It s available on alfred ccs carleton ca 134 117 1 1 pub pov ray on the BBS You Can Call Me Ray in North Chicago suburbs 708 358 5611 and on Compu erve There is also a mailing list for POV and DKBtrace To subscribe send a mail containing the body subscribe dkb l to listserv trearn bitnet yes that s in Turkey You will then be added to the list and every mail that you send to dkb l trearn bitnet goes to anyone else subscribed on the list GIF and JPEG images of the SPD databases and some of my old thesis images are stored at ftp ipl rpi edu 128 113 14 50 sigma erich nic funet fi somewhere and at gondwana ecr mu oz au 128 250 70 62 pub images haines Lee Butler is attempting to create a texture library at his FTP site His interest is in 2 and 3 dimensional textures of materials suitable for surface texturing He is mostly interested in photographic quality textures and bump maps He accepts data in most popular formats TIFF GIF JPEG etc but may convert data in order to conserve disk space He d like a little descriptive text to go with any textures you send i e just enough to identify what the subject matter is what the image dimensions are etc Please make sure what you send is in the public domain e g scanned in pictures from books are not allowed including Brodatz s well known Textures book which is copyright contact Lee A Butler butler BRL MIL On hanauma stanford edu is a 720x360 array of elevation data containing one ieee floating point number for every half degree longitude and latitude This is quite nice EAH from Ken Chin Purcell ken msc edu Some scanned in Brodatz textures are available from cicero cs umass edu texture temp They are 512x512 grayscale from Julien Flack julien scs leeds ac uk Colby Kraybill has placed texture maps from Hans du Buf dubuf ltssun1 epfl ch on pioneer unm edu 129 24 9 217 pub texture maps from Colby Kraybill opus pioneer unm edu these include aerial swatches Brodatz textures and synthetic swatches EAH The Chapel Hill Volume Rendering Test Datasets Volumes I and II are available for FTP from omicron cs unc edu in pub softlab CHVRTD These include a 3D volume set for two heads a brain a knee electron density maps for RNA and other molecules etc T3DLIB the TTDDD model conversion package is now at version 34 and is at hubcap clemson edu 130 127 8 1 pub amiga incoming imagine TTDDDLIB There are 3D models in imagine objects The converter now supports DXF format output Version 4 of the collection of ray tracing abstracts is ready I ve put it in several ftp sites wuarchive wustl edu graphics graphics ray or maybe bib To get it do the following get rtabs 11 91 shar Z using binary mode uncompress it and then unshar it sh rtabs 11 91 shar Then read READ ME The abstracts RTabs can be converted to two forms Latex preferred or troff me The filters I ve included may help you write your own if you need something else A second file RTnew contains just the added abstracts if you don t want to print the whole thing again There are now 306 abstracts from Tom Wilson wilson cs ucf edu After listening in on the fast rotation wireframe discussion in comp graphics I decided to release a simple 3D wireframe viewer that I wrote myself that runs under X11 It is available via anonymous ftp at castlab engr wisc edu 128 104 52 10 and is found as pub x3d 1 1 tar Z MIFF files of rendered objects are on castlab in pub rendered objs More objects are on castlab in pub more objs from Mark Spychalla spy castlab engr wisc edu The shadow buffer algorithm is now implemented in the SIPP rendering library Version 3 0 is available from isy liu se 130 236 1 3 pub sipp sipp 3 0 tar Z As part of Guy Moreillon s diploma project Interactive Radiosity he has created a scene made out of objects in OFF format It represents the inside of a house with one big room and a smaller one stairs going up a couple of armchairs a table a kitchen chair a fridge and so on He uploaded it on gondwana ecr mu oz au as well as cs uoregon edu in the incoming directory file house tar Z from Guy Moreillon fractint v17 will output a few raytrace formats dkb pvray vivid raw triangle mesh from the 3d mapping function fraint17 exe will be on wuarchive wustl edu from Tony Audas There is an enhanced version of Rayshade available at weedeater math yale edu incoming ray406enh2 tar Z It adds new blobbies swept spheres and all sorts of other things to the original from Larry Coffin lcoffin clciris chem umr edu An Amiga version of Rayshade 4 0 6 is up for FTP at ab20 larc nasa gov incoming amiga Rayshade and at weedeater math yale edu incoming AmigaRayshade Bug reports to me and I ll see who they originally belong to If they re mine I ll fix em eh by Colin DeWolfe dewolfe ug cs dal ca A distributed version of Craig Kolb s Rayshade 4 0 is available on ftp site princeton edu as pub Graphics rayshade 4 0 etc rayshade rrlib tar Z It makes raytracing very much faster by dividing a frame or animation into squares which are distributed on a unlimited number of servers from Wilfried Koch bj030 aix370 rrz uni koeln de The art raytracer has undergone some changes and now includes the addition of heightfields as output by programs such as fracland some additional capabilities for rendering algebraic surfaces several new textures a couple of speed ups and the usual collection of bug fixes Contributed scenes are available in pub contrib artscenes on gondwana and graphics graphics echidna on wuarchive wustl edu Anyone wishing to contribute can place files in incoming on gondwana from Eric H Echidna echidna ecr mu oz au wuarchive wustl edu has this in graphics graphics echidna There are new versions of the RTrace ray tracer version 7 3 2 and the scene translator SCN2SFF version 1 3 at asterix inescn pt 192 35 246 17 in directory pub RTrace Some bugs were fixed and new features added 3D text fonts orientation spacing etc high quality CSG objects An MS DOS version for use with DJGPP DOS extender GO32 is in pub RTrace PC 386 rtrace zip The pub RTrace directory has been reorganized There are new subdirectories with new images medical molecular etc scene converters and other tools There have been further bug fixes and new features since then but you get the idea EAH from Antonio Costa acc basinger inescn pt Some more notes on reaction diffusion textures see last issue this column do a lint on Greg Turk s code before you run it and you might also want to make sure your random function works as he thinks it does mine didn t I changed to drand48 Note that Witkin Kass s equation 5 also has a typo it should be C t delta t C t on the left side of the equation Also Andrew Witkin says section 6 1 s R function is a bit unstable I haven t got it to work but Greg Turk s code does pretty much the same thing in a different way Other new things later in this issue include spline patch ray intersection routines 4D space viewing software a distributed ray tracer a free trial version of a modelling and visualization package from BYU and a new radiosity program back to contents Graphics Gems III Residency Mask errata by Joe Cychosz 3ksnn64 ecn purdue edu The following is a correction to Use of Residency Masks and Object Space Partitioning to Eliminate Ray Object Intersection Calculations Page 285 should read By updating the ray mask as it passes from cell to cell a quick determination of whether an object within the cell needs to be intersected can be made by simply ANDing the residency mask of the object with the not the complement of residency mask for the ray The process goes something like this ray mask 0 foreach cell the ray passes through foreach object in the cell if ray mask object mask 0 compute the ray object intersection update ray mask marking for cell The important thing here is to mark the cell after it is processed back to contents Any Future for Efficiency Research by Eric Haines As far as the SIGGRAPH papers committee is concerned efficient ray tracing seems to be pretty much a solved problem i e no efficiency papers have been accepted in years To be fair SIGGRAPH tends to present papers which break new ground lately there haven t been any radical breakthroughs in efficiency research The research in this area has taken on more of an engineering feel where there are incrementally better methods developed over time On one level I tend to agree that efficiency is solved grids octrees BSP and automatic bounding volume hierarchy are all in the same ballpark However Mike Gigante points out that raw speed is not the best qualification for a scheme Yes if you tweak grid placement and run it at a variety of resolutions you ll usually find that scheme is very fast possibly faster than any other scheme The problem is that a typical user does not want to deal with efficiency tweaking at all and so the best efficiency scheme may not be the fastest but rather something near optimal that is automatic and will work in a wide range of environments without serious degradations in speed or memory usage As far as future research goes I ve yet to see much work on Jim Arvo s idea of simulated annealing applied to efficiency schemes see the RTNews RTNews1 file His idea is that sometimes one scheme is significantly better than the others for a particular scene or part of an environment see Kirk Arvo s Ray Tracing Kernel paper from Ausgraph 88 for using multiple efficiency schemes For a single 1280x1024 image it may not be worth doing much analysis to determine which is the best efficiency scheme but if you re doing an animation or an extremely high resolution image it may be worth spending more time up front to save time later Hybrid approaches may be the best overall solution where objects or volumes have different efficiency schemes depending on predicted performance There s an interesting paper H K Choi C M Kyung PYSHA a shadow testing acceleration scheme for ray tracing Computer aided design vol 24 no 2 Feb 1992 which talks about deciding which efficiency scheme to use on the fly by having a cost function approximate which will be cheaper It seems that the way in which space is filled is the main determinant of which scheme is most efficient Grids for example excel when the distribution of primitives is uniform Being able to quickly characterize how space is filled could allow choosing the best efficiency scheme Determining what the correlation between some distribution statistics and which scheme is fastest is probably trickier than characterizing the space itself There is also the problem of platform independence and attempting to determine what fastest means in a general sense minimizing the number of intersection tests is a good start but the costs of each scheme needs to be factored in Some interesting work is being done on speeding up ray tracing for animation by using temporal coherence For example Jevans paper in Graphics Interface 92 A David Jevans T Object Space Temporal Coherence for Ray Tracing J Proceedings of Graphics Interface 92 I Canadian Information Processing Society C Toronto Ontario D May 1992 P 176 183 is one of the latest in this area of research Another topic of interest which has not been explored much is efficient ray casting for non rendering related tasks Saul Youssef see the ray tracing bibliography on the net has researched shooting rays for high energy physics work John Wallace and I wrote a paper about ray casting for radiosity visibility testing and there has been some work done for volume visualization ray tracing The assumption has been that what s good for ray tracing is good for everything else and that the current popular efficiency schemes are sufficient In our work on radiosity we have seen different sources of coherence which can be exploited in interesting ways If someone is doing a mass properties study of an object by casting rays the problem can be restructured to minimize ray object testing that is not normally available to a ray tracer since we know in advance where all the rays will be traveling back to contents NuGrid Update by Mike Gigante mg godzilla cgl citri edu au Since I last sent you all mail about the performance tests on NUgrid see last issue EAH I have been burning the midnight oil and made some significant new developments IMHO of course I was actually writing a paper for SIGGRAPH with the results as well as a better criteria for building the NUgrid rather than the end of the bbox when I worked out a technique for the totally automatic construction of NUgrids That is right even tho NUgrid was much much less sensitive than grids in the selection of the grid resolution it now builds a close to optimal NUgrid automatically In fact in many cases the result is better than the best case performance in previous NUgrid versions All this was absolute last minute stuff Since we are so far away the damn couriers wanted 4 working days to get it to pixar I only came up with the method 3 days before the paper had top leave as I was starting to write up the previous stuff I actually managed to crank all the code out and do a set of test cases I had the courier waiting by while I pasted in the results Why do ideas come at awkward times I have spent the last couple of days cleaning up the paper and stuff even tho it won t get to the siggraph committee I wanted to finish it off now while it was all fresh in my mind I am disappointed that the copy I sent was fairly rough but boy were the results good I am now working on making the automatic method work even better I have included a couple of tables below BTW we actually got the Octree stuff implemented also it uses Samet s neighbour following stuff so traversal is very fast NUgrid still whips it in most cases and is very competitive in the other cases From these results the uniform grid should be a dead duck BTW I have tested over 60 datasets with each of the methods below ranging from a few dozen polygons up to 880 000 independent phong triangles I plan to make all the code available after I know what is happening with the paper if the results don t make up for the rather hurried nature of the paper then I already have in my hands a very publishable newer version and I have no doubt it will get in somewhere Here are some results all this was in rayshade with 1 Uniform grid as per vanilla rayshade 2 NUgrid 1 as described in Ausgraph 90 paper but with ray counter and raybounds optimizations which rayshade s uniform grid had 3 NUgrid 2 as described in my paper submission a different criteria for where to drop the dividing planes 4 AutoNUgrid 5 Octree the first 3 were tested with resolution 4x4x4 36x36x36 in increments of 2 AutoNUgrid had only 1 test config of course Octree was tested with subdivision depth 2 equiv to 4x4x4 grid NUgrid through to depth 10 where we didn t run out of memory Some of the bigger cases are still finishing their timings now so within another week or so I can complete the tables Even so the trend is very clear from the plots I have done of all the tests I am completing the test cases for completeness only Anyhow here are the tables Best and worst case performance for SPD model Balls Grid NUgrid 1 NUgrid 2 Auto Octree Best 1286 75 476 09 421 30 737 32 21695 24 Worst 10510 54 2755 95 2895 47 895 49 for SPD model Gears Grid NUgrid 1 NUgrid 2 Auto Octree Best 1935 06 2225 37 2129 30 2475 14 1844 92 Worst 25870 45 12116 60 7039 23 68208 26 for SPD model Mount Grid NUgrid 1 NUgrid 2 Auto Octree Best 505 69 455 84 436 91 512 24 451 99 Worst 2059 52 1479 85 1326 74 9281 84 for SPD model Rings Grid NUgrid 1 NUgrid 2 Auto Octree Best 799 76 918 94 767 40 811 32 760 52 Worst 4852 32 5376 37 4284 81 13688 93 for SPD model Teapot Grid NUgrid 1 NUgrid 2 Auto Octree Best 345 39 344 60 336 09 491 06 357 74 Worst 3617 02 2492 49 2672 95 17756 98 for SPD model Tetra Grid NUgrid 1 NUgrid 2 Auto Octree Best 79 13 77 45 75 45 98 29 123 64 Worst 348 72 242 01 245 11 1699 55 for SPD model Tree Grid NUgrid 1 NUgrid 2 Auto Octree Best 5013 27 667 20 502 07 833 47 565 85 Worst 18763 96 5019 25 3670 67 25418 44 USENET cullings follow Spline Patch Ray Intersection Routines by Sean Graves sean cs tamu edu I wrote some routines for raytracing patches They are based on a paper by Levner G Tassinari P Marini D 1987 A simple method for ray tracing bicubic surfaces In Kunii TL ed Theoretical Foundations of Computer Graphics and CAD 1987 Springer Tokyo pp 805 814 These routines can work with any bicubic patch such as a bezier b spline cardinal beta spline etc These are the routines that are in the library NewPatch Allocates the patch data structures and returns a pointer DefPatch Defines a patch given a patch pointer IsectPatch Intersects a ray and a patch Returns u v t pnt NormalPatch Given a patch and a u v position returns the normal FreePatch Deallocates a patch Additionally there is one useful routine not specific to patches BoxIntersect Given a ray and a box returns the intersection point These should give you the capability to raytrace a patch I have used them successfully in a raytracing package I wrote You can use them as is or use them as an example for your own code these are in wuarchive in the ray subdirectory spline patch tar Z back to contents Xdart from Mark Spychalla spy castlab engr wisc edu xdart a distributed raytracer that runs under X11 is available via anonymous ftp at castlab engr wisc edu 128 104 52 10 The clients are distributed as binaries and C source The servers are distributed as binaries ONLY for the following systems DECstation SPARCstation NeXT HP Snake 710 You MUST have one of the above machine types in order to run the program I wrote the client and encourage anyone who wishes to modify the source and experiment with it Abe Megahed wrote the raytrace engine and does not wish to release its source code thus source for the server will not be distributed back to contents 4D Space Viewing Software by Steve Hollasch hollasch kpc com I m releasing to the public domain two packages for 4D viewing These packages were developed in conjunction with my master s thesis at Arizona State University entitled Four Space Visualization of 4D Objects written May 1991 wire4 is a 4D wireframe package that takes geometry information from input files and has such features as PostScript output colored edges depth cued edges real time 3D and 4D rotations and other little features wire4 uses the GL interface so it runs on most GL platforms and quite a few others that support the GL interface ray4 uses 4D raytracing to render hyperspheres hypertetrahedra hyperplanes and hyperparallelepipeds ray4 runs on any platform that supports C with floating point arithmetic but the current package only has the display program for SGI workstations I have a display program for the Amiga but it s not ready for release yet I haven t yet uploaded it to work In addition Mark Craig has written a sunraster output file display program I hope to release that soon also let me know if you re interested The software is available by ftp from ftp kpc com pub graphics holl91 pub graphics ray4 pub graphics wire4 back to contents BYU Modelling and Visualization Package Free Demo by Stacey D Son CQUEL BYU pronounced sequel is a brand new modelling and visualization package for the UNIX workstation Some of it s features include animation raytracing scientific visualization interactive modelling and editing quadric primitives Bezier and NURBS surfaces constructive solid geometry texture mapping graphical user interface and free form deformation to name a few The Engineering Computer Graphics Laboratory at Brigham Young University is offering a 30 day demonstration of this new software CQUEL BYU will run on the following workstations under X Windows SGI 4D DEC Station 3100 5000 HP9000 700 800 series SUN4 Sparc Station and IBM RS6000 Just send a tape or a 20 US dollars check to Engineering Computer Graphics Laboratory Brigham Young University 368 Clyde Building Provo UT 84602 PHONE 801 378 2812 E Mail cquel byu edu Also please specify your machine type and operating system Stacey D Son 459 Clyde Building Operations Manager Provo UT 84602 Brigham Young University Voice 801 378 5950 FAX 801 378 6586 College of Engineering Technology Email sson ee byu edu back to contents New Radiosity Program Available by Guy Moreillon moreillo disuns2 epfl ch There is a new radiosity program available on the network one of the very few radiosity seems to be less popular than ray tracing Rad as it is called allows real time walkthrough and interactive modification of the scene during computation Textures are supported when hardware allows The computation algorithm is based on progressive radiosity and uses automatic patch subdivision to refine the solution There is one small catch though Rad only runs on SGI Workstations Sorry about that but I wasn t gonna rewrite a whole GL for X11 Rad is currently available on the following anonymous ftp sites gondwana ecr mu oz au in pub rad tar Z wuarchive wustl edu in pub rad tar Z back to contents Optics Lab Information by Anthony Siegman siegman EE Stanford EDU Does anybody know of any public domain ray tracing program i e for simulation of image formation through a user definable lens Optics Lab an educational program available for about 35 from Intellimation Library for the Macintosh P O Box 1530 Santa Barbara CA 93116 1530 800 346 8355 805 968 8899 fax is not a super high powered lens design program but might be adequate for your application Includes a lens cabinet of user adjustable lenses mirrors and stops click and drag to position elements on screen use the mouse to launch individual rays or ray bundles and see them propagate or bounce on screen back to contents Ray Tracing or Casting Applications by Tom Wilson I m curious about the number of areas that ray tracing can be used Here s an initial list of applications that I know Please add to it if you can I ve stuck to papers research that I know about Image Synthesis Rendering Advertising Film Production Lighting Design Medical Imaging Molecular Modeling Relativity Acoustic Simulation Seismic Simulation Simulation and Training flight tank simulators etc Howard Lo hlo sgi com adds Antenna analysis Radar Cross Section analysis Davyd Norris daffy vaxc cc monash edu au adds Attenuation and Multiple Scattering corrections for Neutron Diffraction Eric Haines adds Monte Carlo simulation of particle interactions in High Energy Physics Saul Youssef has a number of papers related to this topic Steve Hollasch hollasch kpc com comments Lighting Design Raytracing is only of limited use in lighting design It s good for casting shadows and dealing with reflections of light sources but it fails for diffuse interreflection For this reason radiosity is usually a better approach for lighting design since it propagates light more realistically than raytracing The best approaches that I ve seen attempt to marry the methods of ray tracing with radiosity Medical Imaging Molecular Modeling Simulation and Training flight tank simulators etc In my opinion these areas are NOT best met with ray tracing since they are better implemented in a dynamic fashion In fact I don t believe I ve ever seen a simulator that uses a ray tracing method If you ve got one up your sleeve we d LOVE to see it Relativity This is a very good one Ray tracing has the advantage that of all other methods it IMHO extends most easily to alternate geometries This in fact is a good area to explore further I used ray tracing to render 4D geometry for my thesis and was surprised by how straight forward the implementation was Implementing the display of 4D objects with scanline scanplane methods is anything but trivial but raytracing 4D is delightfully simple Other possible areas include Rendering Translucent Densities clouds gasses liquids etc Simple Optic Design using the refractive capabilities of raytracing Mathematical Graphics Since it is often easier to just intersect a surface via implicit equations rather than to tessellate some sort of representation of the object Iain Sinclair axolotl socs uts edu au comments Greg Ward s Radiance software does raytracing with diffuse interreflection doesn t it It all depends on what you re trying to light or design Straight radiosity looks strange in some circumstances or simply isn t suitable As you say combinatory approaches are probably best In fact I don t believe I ve ever seen a simulator that uses a ray tracing method If you ve got one up your sleeve we d LOVE to see it There are real time auditory simulators which use raytracing back to contents Goofy Idea Gary McTaggart gmt cis ufl edu Here s a really goofy brainstorm I had for distributed raytracing Why not incorporate into the proprietary communication programs that are used for such online services as Prodigy a simple raytracer which can calculate a very small number of pixels frame First when users first log on you could upload a scene description to their computers While they are online you could send escape codes to them for viewpoint changes and object repositioning and have them return the value of a pixel or a small group of pixels The computers at the Prodigy like company could shell out the scene information and collect the results to make for a very fast distributed raytracer This is assuming that the time spent sending scene information is not too substantial back to contents Constant Time Ray Tracing by Tom Wilson Eric Haines Brian Corrie and Masataka Ohta Tom Wilson posted to comp graphics research This is something that has been bugging me for a long time but I m glad I waited until now to bring it up Whilst writing a paper and reading old issues of the RTNews or is that RTOlds 8 I was reminded of it Constant Time Ray Tracing Theory OR Practice Two things I will refer to are OHT87 Ray Coherence Theorem and Constant Time Ray Tracing Algorithm Masataka Ohta and Mamoru Maekawa Computer Graphics 1987 Proc of CGI 87 p 303 314 OHT90 Algorithm Order Discussion Masataka Ohta and Pete Shirley Ray Tracing News Vol 1 4 1990 You might also read the Intro to Ray Tracing by Glassner et al for a summary of OHT87 I m hoping Ohta may be reading but I thought I would post it for all to read THEORY In theory is constant time ray tracing as in OHT87 possible Sure Given a sufficient 3D subdivision and a fine enough division of ray directions each list in the structure will contain fewer than some constant number of objects For a given ray mapping the origin to the grid is constant time mapping the ray direction to one of the subdirections is constant time and intersecting the ray against a constant number of objects is constant time In theory is constant time ray tracing on a 3D grid possible Yes given a very huge grid Suppose the grid is so large that tracing a ray through it will result in less than a constant number of ray object intersections then yes right Wait What about the traversal of the grid Well if the grid size is not a function of the number of objects then the traversal time is constant Well this can t be done Even if you scale the grid size as a function of the screen resolution it can t be done You can always make a scene that will cause some rays to cause a lot of intersections OHT87 yes 3D grid no What does the OHT87 method do that the 3D grid doesn t Perhaps the answer lies in the preprocessing The ray tracing is constant time but is the preprocessing Of course not but maybe that s still ok I ll discuss that in the next part REALITY How much preprocessing is allowed SUPER SILLY EXAMPLE Preprocessing consists of computing all shade trees and the ray tracing process consists of a table look up based on the primary ray Talk about asking a lot Well the ray tracing sure is constant time but the preprocessing isn t Any technique that processes the objects to build a data structure won t be constant time of course However that still leaves the question of how much is allowed Consider this example A scene consists of many parallel polygons that are parallel to the image plane like a stack of paper These aren t run of the mill 4 sided rectangles They have holes in them A lot of the holes line up with rays through the view plane and they are really small Now suppose we preprocess using the OHT87 algorithm I think that no matter how many ray directions you allow you might not be able to eliminate enough objects to make the list for that direction be smaller than a constant number Remember we re not talking theory here you can t have billions of ray directions There is some limit on the number of ray directions I m pretty sure this falls under the no coherence clause 8 p 308 Because the algorithm utilizes the coherence of the image the efficiency of the algorithm heavily depends on the coherence of the image If there is no coherence no performance will be gained So it s not constant time then FURTHER DISCUSSION Now I m not trying to shoot down the work done in OHT87 I don t know how it compares to other schemes in implementation either The problem I have is one of terminology Ray tracing has very little theory behind it In the early 80 s it seemed most algorithms we re hacked together implementations done at the terminal I hope that doesn t sound demeaning since I don t mean it that way Of late research is turning toward some theory since most of the good ideas have been done already 8 meaning we need to analyze what exists to see what s wrong with it However there is still little theory supporting the field So Constant Time is misleading since you can t really do it and who wants to generate theoretical images A somewhat unrelated thought arises from a comment in OHT90 My algorithm may consume possibly long and computationally complex pre processing time to analyze a scene But the important fact is that the time for pre processing is dependent only on the scene and not on the number of rays My first reaction is GNNNAAARRRR The number of rays in a scene is bounded above by a constant total number of pixels maximum size of a ray tree unless we assume an infinite ray tree unrealistic Neither of these factors is a function of the number of objects Preprocessing is dependent upon the scene and THAT is what is important How much preprocessing of the scene is ok My SUPER SILLY EXAMPLE does too much preprocessing Suppose we make a super general assumption that preprocessing time can be no greater than k of the ray tracing time Make k whatever you want but in OHT87 preprocessing is O f N i e some function of N and tracing is O 1 So the preprocessing demands are too high using this k assumption Maybe it s a bad assumption but it s the one I see in the literature Finally this leads me to another point support of a claim via testing Too often assumptions are made about the scene which are just too convenient Not only in this case but in many a sphere is just too simple an object to support a proof Again I don t doubt the theory here the proof itself is sufficient I doubt the reality In this case the reality is supported by convenient scenes which make it appear that the reality is sound and thus constant time What I m getting at is give me some really ugly objects e g GEARS database Depending upon the response to this article I might post another about assumptions for algorithm testing If I get flamed badly or there are no followups then I won t A little something to think about No computer in the world no matter what its word size no matter its memory size no matter what its architecture can prevent overflow no ray tracer in the world no matter what the internal data structure can perform in constant time you just can t ignore preprocessing as in the case of the SUPER SILLY EXAMPLE I would like to reiterate that I am not claiming that the work in OHT87 is incorrect I just think that a theoretical concept is misleading in a realistic research world No mudslinging and keep name calling to four letter words 8 Eric Haines responds REALITY How much preprocessing is allowed SUPER SILLY EXAMPLE Preprocessing consists of computing all shade trees and the ray tracing process consists of a table look up based on the primary ray I agree constant time is a provocative fun thing to say and Ohta is not the first to say it Kaplan s Space Tracing A Constant Time Ray Tracer from SIGGRAPH 85 course notes is the first instance I know If your efficiency scheme can in theory guarantee that given a ray you know exactly which object is hit by just performing some simple non recursive look up then you ll have constant time ray tracing The problem with such in theory statements are that they can t be backed up in practice Either the scheme takes an infinite amount of memory or finding the actual object to intersect in the efficiency structure takes O log n time or some other catch So getting near constant time is more interesting in practice Many people make use of this kind of thing for rays from the eye do a hidden surface preprocess which is much faster than ray tracing in most situations and is constant with the number of objects to find what is at each screen sample This truly is constant time ray tracing because we know exactly where all the rays are going to go through the pixels in the screen so we can indeed store all these directions in a grid and easily walk through them to find what s visible The look up time is constant and there is at most one object at each pixel The preprocess time is O n with the number of objects The intersections of rays from the eye then need just a look up to get what s hit Ohta Maekawa Arvo Kirk s 5D idea and my own shadow buffer try to further this directional preprocessing Arvo Kirk have a nice table comparing the three in their chapter of An Intro to RT From my own experience it s impossible to solve the problem of given an arbitrary ray doing an immediate look up i e we don t have to traverse a hierarchy to find our object we just translate the ray information into a table index combined with always having at most a single object on the list By being willing to not have all three elements we can often come up with schemes that do the other two perfectly and the third fairly well Like the shadow buffer Ohta creates grids containing candidate lists The lists are not bounded in size so the testing time is not a constant In his defense Ohta s scheme gives almost constant times for his sparse spheres case and near constant for his dense spheres case It s impressive that it can do so well and this was back in 1987 The cost is that you need a direction cube structure for each object in the scene which is costly in preprocessing time and memory Consider this example A scene consists of many parallel polygons that are parallel to the image plane like a stack of paper These aren t run of the mill 4 sided rectangles They have holes in them A lot of the holes line up with rays through the view plane and they are really small I agree this case will make preprocessing schemes no longer constant You can do LOTS of preprocessing to try to resolve the indeterminate areas and you may have to get down to a ridiculous resolutions to attempt to resolve these and you still will have places where things fall apart Another approach is to work from the objects themselves to split up 5D space and determine what object is visible for what set of positions and directions I recall seeing some computational geometry paper on doing something like this where you preprocess all 5D space into volumes each of which is associated with one object Aha found it A Marco Pellegrini T Stabbing and Ray Shooting in 3 Dimensional Space J Proceedings of the 6th Annual Symposium on Computational Geometry I Berkeley CA D June 1990 P 177 86 Since you were interested in theoretical papers this is an interesting one to check out To quote The result presented in this paper although not yet practical because of the huge constants involved is the first example of a ray shooting algorithm with a sublinear cost per ray for any set of triangles and rays He proves that given a ray one can determine in O log n worst case time which is the first triangle hit with O n 5 preprocessing truly the record for preprocessing time His results are interesting in that the best he claims is O log n not O 1 because he knows pathological cases can kill all the other schemes out there His bias is towards worrying about the worst case performance which most of the rest of us blithely ignore What s interesting about his scheme is that he could maintain it s constant in intersection testing time in fact the constant is zero since he never tests any rays against any triangles the scene is entirely encoded in a structure and he gets a ray and merely looks up what triangle if any is hit by that ray It s accessing the structure and finding where the ray is in it that takes O log n Another good pathological case is the shell database Introduction of Ray Tracing News volume 3 number 3 Try it on your favorite ray tracer sometime and see what happens many overlapping spheres bring most ray tracers to their knees mine included Most efficiency schemes are good overall but when a large number of the surfaces of complex objects overlap a given volume of space preprocessing that space well is impossible or very costly It would be interesting to see how Ohta s scheme works on the shell data since it s entirely spheres Ohta s ray tracer is at various FTP sites though I haven t tried it out Suppose we make a super general assumption that preprocessing time can be no greater than k of the ray tracing time Make k whatever you want but in OHT87 preprocessing is O f N i e some function of N and tracing is O 1 So the preprocessing demands are too high using this k assumption Maybe it s a bad assumption but it s the one I see in the literature Good point no matter what k you assign if tracing is really O 1 then you can never in theory fulfill the k ratio since the number of objects can be arbitrarily high The k is just a rule of thumb working assumption in the literature not some theoretical limit that cannot be exceeded it d be nice if the preprocessing time was some percentage less than the ray tracing time is all k is after all What s interesting about preprocessing schemes is that once they re done you can reuse them If you re making an animation of flying around a static scene that s a heck of a lot of pixels to compute which massively amortizes the cost of the one time preprocess Because of this I think we ll see more time spent preprocessing as the years go by though if CPU speed increases faster than memory size then it might not be possible to store the preprocess structures around for a large scene A little something to think about No computer in the world no matter what its word size no matter its memory size no matter what its architecture can prevent overflow no ray tracer in the world no matter what the internal data structure can perform in constant time you just can t ignore preprocessing as in the case of the SUPER SILLY EXAMPLE Yep constant time is an attention grabber and saying near constant time would be a bit more realistic If your efficiency structure has any hierarchy in it then you re not constant If you have a simple lookup structure like an evenly spaced grid or somesuch you re constant time lookup but short of infinite resolution you won t get a single object to test at every spot in the structure Well that was certainly long winded Anyway I thought it was worth mentioning the Pellegrini paper since it s pretty obscure and one of the few I ve seen that really tries to tackle the theoretical aspects Hopefully I didn t say anything too stupid here Brian Corrie responds Suppose we make a super general assumption that preprocessing time can be no greater than k of the ray tracing time Make k whatever you want but in So the preprocessing demands are too high using this k assumption Maybe it s a bad assumption but it s the one I see in the literature I have just run into an interesting result similar to this I am working on a MIMD parallel machine made by Fujitsu the AP1000 It has 128 processing nodes each processor being a SPARC chip running at 25 MHz Needless to say this thing is fast I have just gone through the process of parallelizing my Ray Tracer on this machine Let me clarify that I parallelized the rendering NOT the preprocessing I use Glassner s Space Subdivision acceleration technique Guess what in some cases the preprocessing actually takes longer than the rendering on this architecture Giving a demo just isn t too satisfying when the boss is looking over my shoulder saying Boss whats it doing now ME Oh preprocessing Boss Whats it doing now ME Still preprocessing ahhhh now its rendering oh there its done This certainly doesn t fit the k model that you state above It always seemed that the preprocessing stage was insignificant compared to the rendering time but it really isn t You just need some strange circumstances or some serious thought to see that the preprocessing time can not be ignored Masataka Ohta responds I would like to reiterate that I am not claiming that the work in OHT87 is incorrect I just think that a theoretical concept is misleading in a realistic research world No mudslinging and keep name calling to four letter words 8 Well at the presentation of OHT87 I received silly questions from those who can not understand the difference between realtime and constant time But it is not my problem Any paper is misleading to those who can not understand basic terminologies in it Constant timeness is a purely theoretical property Remember it THEORY OHT87 yes 3D grid no I agree Note that implicit simplification is that multiplication addition and address arithmetic are all O 1 When I wrote OHT87 many including me believed 3D grid is O log N and some even claimed O 1 without knowing what O 1 means REALITY Remember we re not talking theory here you can t have billions of ray directions There is some limit on the number of ray directions It is pointless Constant timeness is a purely theoretical property Theoretically you can have billions of ray directions There is no limit on the number of ray directions I m pretty sure this falls under the no coherence clause 8 No Constant timeness of your case is covered by a sentence p 308 It is worthwhile to note that nearly all images can be calculated in this very fast manner if we can use unlimited pre processing time and space p 308 Because the algorithm utilizes the coherence of the image the efficiency of the algorithm heavily depends on the coherence of the image If there is no coherence no performance will be gained So it s not constant time then No of course What my no coherence clause means is that with insufficient D the number of directions or M the number of origins it s not constant time With large enough D and M determined by the coherence of scene it will be constant time again FURTHER DISCUSSION A somewhat unrelated thought arises from a comment in OHT90 My algorithm may consume possibly long and computationally complex pre processing time to analyze a scene But the important fact is that the time for pre processing is dependent only on the scene and not on the number of rays I said analyze a scene not generate an image OK My first reaction is GNNNAAARRRR The number of rays in a scene is bounded above by a constant total number of pixels maximum size of a ray tree unless we assume an infinite ray tree unrealistic Neither of these factors is a function of the number of objects You misunderstand basic terminologies An image have fixed number of pixels but a scene itself has no resolution A scene can be rendered into images with various resolutions and various quality The number of rays to generate an image depends on required resolution and quality if you need antialiased but precise RGB value you often must fire large number of rays within a pixel and not limited by any constant Too often assumptions are made about the scene which are just too convenient Not only in this case but in many a sphere is just too simple an object to support a proof Again I don t doubt the theory here the proof itself is sufficient I doubt the reality I used spheres in measurement because it is most unfavourable to the implementation of my algorithm If you use complex shapes possible startup time for constant timeness might be masked Implementation of my algorithm might have required large constant time comparable to ray bicubic patch intersection which could have been masked if I used a scene with bicubic patches See Fig 4 for unbelievably small overhead nearly equals to the time for ray sphere intersection of the implementation In this case the reality is supported by convenient scenes which make it appear that the reality is sound and thus constant time What I m getting at is give me some really ugly objects e g GEARS database Then we can have beautiful but theoretically meaningless images What I want to show is constant time property To do so we must be able to control the number of objects in the scene up to several hundreds or more see Fig 8 and further comments from Masataka Ohta This certainly doesn t fit the model that you state above It always seemed that the preprocessing stage was insignificant compared to the rendering time but it really isn t You just need some strange circumstances or some serious thought to see that the preprocessing time can not be ignored When tracing state of the art realistic scenes with state of the art complex shading anti aliasing and so on tracing and shading time become much much longer than when tracing sphere only simply shaded non anti aliased scenes Hints for serious thought 1 the preprocessing time to achieve constant time property is constant once a scene is fixed 2 the preprocessing time to achieve constant time property is less than or nearly equal to tracing time for sphere only images in my paper 3 the preprocessing time to achieve minimal total preprocessing tracing shading time to render an image of a scene need not be the preprocessing time to achieve constant time property for the scene With the increase of the tracing shading time the trade off shifts toward increasing tracing time complexity and reducing preprocessing time complexity Brian Corrie responds It is true once the scene is fixed then pre processing is fixed so multiple frames can be produced without that overhead in certain situations That is if the camera moves lights go on and off attributes change then the preprocessing does not need to be re computed Only if the geometry changes is this step needed It is also true that if I render complex images with complex shading and scene interaction reflection refraction the preprocessing time can rapidly become insignificant again Insignificance is all in the eye of the renderer I suppose back to contents VLSI for Ray Tracing by Kenneth Cameron et al Kenneth Cameron kc dcs ed ac uk asks I m currently trying to get my Honours project sorted out for next year The idea is to produce some kind of raytracing radiosity rendering chip Yup thats right put the whole rendering system on a single piece of silicon I ve been trying to track down any past work on this So far the only mention I ve found is that of Ullner s work in An Introduction to Raytracing Can anyone suggest any papers I should be looking for George Kyriazis kyriazis rdrc rpi edu writes Oh boy I ll be a bit negative on this This is only my opinion so I d like to get some feedback from other people to see how much this makes sense Ray tracing and radiosity is a VERY computational intensive job Additionally it s a bit unhomogeneous What I mean by that is that there are lots of different algorithms that need to be done Traversing the space subdivision hierarchy various intersection algorithms possibly various shading algorithms etc Not to mention the immense amount of data that has to be fed in those poor processing elements In the past the market tried to provide special purpose hardware that is perfect for just one problem but has REAL trouble for others For example the Pixel Machine was great doing ray tracing but it had problems with interactive graphics An SGI style graphics pipeline is perfect for interactive 3 D applications but it just was not designed for ray tracing or radiosity type applications On the other hand general purpose floating point accelerators are getting faster and faster So my guess is that a whole bunch of fast general purpose machines will eventually win cause the can provide more functionality and a smaller overall design cost Now let s try to be constructive a bit here As I said before doing raytracing the traditional way is unstructured You are tracing a ray who knows how many levels of reflections deep but you don t really know what type of primitive you are going to hit so the rendering algorithm should be ready for anything There has been some work a couple of years ago I could be mistaken but I think at UIUC about using an SIMD machine for ray tracing Now if you think of normal ray tracing as a depth first algorithm we go as many levels deep as possible on the first pixel then go ahead on the next pixel etc you can think of the SIMD work as implementing ray tracing in a breadth first kind of way Finish up the first level of intersections for all pixels in the image then the ones who survive go on to the second level of reflection etc This brings some more structure into the algorithm Peter De Vijt devijt imec be writes A number of people did some studies on implementing a part of the algorithm the intersection calculations in silicon No real silicon has been demonstrated upto now Here are some refs A Ron Pulleyblank A John Kapenga T The Feasibility of a VLSI Chip for Ray Tracing Bicubic Patches J IEEE Computer Graphics and Applications V 7 N 3 D March 1987 P 33 44 O also appears as A VLSI Chip for Ray Tracing Bicubic Patches in Advances in Computer Graphics Hardware I W Strasser ed 1987 p 125 140 and in Tutorial Computer Graphics Hardware Image Generation and Display Computer Society Press Washington 1988 p 328 339 A Kadi Bouatouch A Yannick Saouter A Jean Charles Candela T A VLSI Chip for Ray Tracing Bicubic Patches J Eurographics 89 I Elsevier Science Publishers C Amsterdam North Holland D Sept 1989 P 107 24 A Alle Jan van der Veen T Intersection Test for NURBS B Proc of the IEEE Symp on Computer Architecture Real Time Graphics D June 1989 C Delft The Netherlands P 101 14 Implementing a complete raytracing radiosity algorithm on one chip is IMHO not possible The problem is that the algorithm itself is quite complex You ll have to calculate intersection points for various primitives reduce the search space for the primitives you are going to calculate the intersections with do shading calculations Given the huge amount of work you ll have to perform you will still need a multiprocessor solution to get the images at a reasonable rate After all you ve put a lot of effort in it so you want some performance back You need a very good scheduling mechanism to get more than an impressive number of Mythical FLOPS The basic algorithm for ray tracing is pretty simple The intelligent implementation isn t If you put the basic algorithm in silicon an intelligent software version will easily outperform your system A good vlsi implementation will have to implement the more elaborate and complex algorithm Yeah such is life The kind of parallelism you need for vlsi is different than the one you need for software On a general purpose multiprocessor system you can use all kinds of parallelism in vlsi you can t An ASIC can only be better than a uP if it can take advantage of some specific aspects of an algorithm If the algorithm is too complex you can not take advantage of that and the ideal implementation looks pretty much like an ordinary general purpose uP We better leave that to the big R D teams So forget about doing it on one chip The only thing you can do is to break the algorithm apart and implement each part or only the most interesting parts inner loops that will give you a performance gain such as the intersection calculations Here at IMEC we re doing just that as a sort of design exercise We re planning to implement a part of the algorithm on a couple processors The algorithm is split in three big pieces rendering narrowing the search space for the intersection calculations and the intersection calculations themselves The rendering will be done on general purpose processors for flexibility Data base search and spline intersection calculations on two custom processors The other intersection calculations will again be done on GP uP s for flexibility Also a special processor is being built for scheduling the operations in a multiprocessor environment The whole system is designed in such a way that each of these processors can be replaced by a general purpose one and that some operations can be modified eg more primitives than we planned a specific processor for This way we can build the system in different stages first the intersection processor the scheduler the data base searcher and last an optional MMU First versions of the intersection processor and the scheduler should be ready around july I must agree with George Kyriazis that eventually a GP machine will win but again this is only a design exercise and it s FUN Jon Leech leech cs unc edu writes I think the original poster would be better off doing some regular part of a rendering kernel perhaps a ray tracing hierarchy traversal chip Sam Uselton uselton nas nasa gov writes Two comments to add on the previous discussion 1 the SIMD parallel ray tracing I know of was done at Thinking Machines on a Connection Machine by Hubert Delaney who recently was kind enough to send me 2 tech reports which I haven t had time to read yet 2 Gershon Kedem and probably some other folks were working on VLSI support for ray tracing of CSG defined objects several years ago The work was being done at Duke University although other NC Research Triangle entities were probably involved I discussed the project with him in his office something like 3 years ago Sorry I don t have a reference Cornell is also involved See ray tracing bibliography under Kedem or Ellis EAH Thierry Priol priol irisa fr writes I agree with you ray tracing is so irregular data driven that designing a VLSI processor for ray tracing algorithms is a hard task We have done some works on MIMD machine General purpose parallel MIMD machines are able to produce very high efficiency for ray tracing algorithms especially if you are using a shared virtual memory on these kinds of machines see Ray Tracing on Distributed Memory Parallel Computers Strategies for Distributing Computation and Data in Parallel Algorithms and architectures for 3D Image Generation ACM Siggraph 90 Course 28 From rkaye polyslo csc calpoly edu Dega Dude I would suggest to approach the problem from a different angle While it would be an extreme job to implement an entire ray tracing radiosity system in silicon you could implement some generic routines that usually take a lot of CPU time quite easily You could code intersection and normal calculation routines for the basic primitives you would like to have in your system Some other things to code would be generic routines required by your acceleration techniques such as voxel object intersection routines or bounding volume routines There are many generic CPU intensive routines that can be implemented in silicon The software can then adapt around the chip s capabilities giving you the flexibility to change the system back to contents The Moon Revisited by Tom Duff td alice att com zap lysator liu se Haakan Andersson wonders about the moon s reflection function and why Phong shading doesn t render it well I won t quote any details The most important thing to remember about the moon is that while it is spectacularly un specular it is by no means a Lambertian reflector this is why Phong shading can t model it well contrary to hollasch kpc com Steve Hollasch Kubota Pacific Computer Inc An ideal full moon is equally bright everywhere its brightness does not drop off toward the edges The real moon differs from the ideal moon only in that its albedo is non uniform For example the maria are darker than the mountains A model that works well for the moon is to think of it as covered in a dust of microscopic Lambertian reflectors When viewed from the light source direction the dust particles will reflect light equally regardless of the direction of the moon s surface normal When viewed from some other direction i e when the moon is not full the dust particles still reflect light equally but some of them are shadowed by others Shadowing increases when the angle between the light and the viewing direction increases so that the reflected light travels through more dust and when the angle between the surface normal and the light direction increases so that the incident light travels through more dust Of course the total light reflected from the dust particles varies with viewing angle as well because they are only lit on one side There are many ways to convert this qualitative description into an analytic model depending on exactly how you model self shadowing of dust Jim Blinn has a paper on illumination functions for clouds of dust in 1979 Siggraph proceedings I think I don t have the precise reference at my fingertips that describes this in fair detail and gives a lunar reflection model that works really well I suspect that even people without my astigmatism have trouble telling by looking at its shape whether the moon is exactly full or one day away from it The difference in shading however is fairly dramatic When its full the moon looks like a silver dollar in the sky Even one day away and still looks like a perfect circle it shades off to one side or the other by a noticeable amount back to contents Soft Shadow Ideas compiled by Derek Woolverton woolstar gumby cs caltech edu Could anyone suggest any open solutions i e ones that I could implement without owing royalties I heard that the Pixar noise algo was patented Derek sent me his responses some of which are below EAH From Samuel P Uselton uselton wk207 nas nasa gov I m pretty sure that general Monte Carlo evaluation of an integral of a function is a general well known mathematical idea and as such not patentable If the PIXAR patent is valid it must patent some particular method implementation for doing this evaluation I assume it is the jitter sampling idea presented in papers by Cook et al I think our implementation of the integral evaluation is sufficiently different that it is OK See Redner Lee Uselton Statistically Optimised Sampling for Distributed Ray Tracing SIGGRAPH 85 Sorry I can t supply code The original source code we wrote actually mostly written by Lee belongs to Amoco and is in Fortran for an IBM 3090 anyway There is a plan to create a liberated version but it is not available at least from us If you or anyone wants to convince me I m wrong and that we really DO infringe the patent or that an arguable case could be made please let me know because we ARE extending our results From Lawrence Kesteloot lkestel gmuvax2 gmu edu The method you describe can be easily modified to make the lamp a rectangle instead of a sphere This makes the light into a fluorescent tube This method is quite good and realistic but as you said the noise is fairly bad for low n s I can also think of another way to do it but much harder to explain in writing It is similar to yours but would probably reduce the noise Imagine that you run a ray from the point in question to the light center You then find a circle centered at the light radius of the light which is perpendicular to the ray You then pick equidistant points on the edge of that circle and run rays through them This will give you good soft shadows and low noise because there is no randomness but might turn the shadow into rings of shades this would depend on the number of points obviously Also the process of finding that circle might be quite slow Maybe an approximation to the angle of the circle in 30 degree increments could be done 30 degrees would be enough I suppose But that might make the ring effect worse This was tried by Brigitta Lange and is in her paper The Simulation of Radiant Light Transfer with Stochastic Ray Tracing Second Eurographics Workshop on Rendering Barcelona Spain May 1991 Proceedings should be published by Springer Verlag realsoonnow Anyway her results were mixed giving ring artifacts as I recall EAH Let me know what you think Oh I almost forgot This is very important Don t sent rays from every point on the surface Before you start the picture use the position of the light and the spheres to make rectangles on the surface where the shadow is likely to fall for each object Then send 1 or 2 rays outside the rectangles and inside any rectangle If you need the formula for finding that rectangle I can send you that piece of code from my tracer John responds You then pick equidistant points on the edge of that circle and run rays through them This will give you good soft shadows and low noise And very visible banding Oh well What I am looking for is finding the plane perpendicular to the ray at the light and using a pre computed table of random offsets with a poisson distribution I still don t have a quick and elegant system of finding the plane and two basis vectors From philip bigben dle dg com Philip Gladstone The standard trick is to do adaptive sampling In my ray tracer I shoot a number of rays through each pixel and then randomly select a point on the surface of the light source to for shadow calculations After a few rays have been cast the standard deviation of the values returned is calculated to see if more rays need to be cast This is oversimplifying quite a lot as the points are not really chosen at random as there is a nearness check Further subsampling only takes place in an area of high standard deviation This also buys you antialiasing on edges etc This gives a very nice output for very little increase in cost I start out with four rays per pixel though this should probably be increased somewhat with a limit of 200 rays This givs an average number of rays per pixel of a reasonable picture of about 6 with a few pixels having 200 From shirley iuvax cs indiana edu peter shirley Just like pixel sampling light source sampling works better is the random points are replaced by quasi random points Quasi random points can be generated by making sure no two points are too close or by hand generating them for storage in lookup tables See the ray tracing book under jittering or Poisson disk sampling for further details PS I think you ll have better luck choosing points on the projected area of the light source Choosing from within the sphere would be correct if the light originated throughout the sphere back to contents Book Announcement Multiprocessor Methods for Computer Graphics Rendering by Scott Whitman slim tazdevil llnl gov Multiprocessor Methods for Computer Graphics Rendering by Scott Whitman Jones and Bartlett Publishers March 1992 ISBN 0 86720 229 7 The book can be ordered by mail directly from Jones and Bartlett Publishers 20 Park Plaza Boston MA 02116 or by phone 1 800 832 0034 or by e mail kpeters math harvard edu Prepaid orders MC VISA or check will not be charged postage or handling The problem of quickly generating three dimensional synthetic imagery has remained challenging for computer graphics researchers due to the large amount of data which is processed and the complexity of the calculations involved This book involves a thorough investigation into the problem of using a massively parallel computer to perform three dimensional computer graphics rendering The algorithms which are analyzed in this monograph present several alternative approaches to image space decomposition as well as remote memory access A number of pointers are given so that researchers intending to develop their own parallel rendering algorithm will be able to obtain high performance and good speedup from a variety of multiprocessor architectures Table of Contents 1 Introduction 1 1 Problem Description 1 2 Overview of Accelerated Rendering Techniques 1 3 Research Context 1 4 Document Overview 2 Overview of Parallel Methods for Image Generation 2 1 Criteria for Evaluation of Parallel Graphics Display Algorithms 2 2 Taxonomy of Parallel Graphics Decompositions 2 3 Conclusions 3 Issues in Parallel Algorithm Development 3 1 Architectural Choices 3 2 Comparison of MIMD Methodologies 3 3 The BBN Programming Environment 3 4 Summary 4 Overview of Base Level Implementation 4 1 Design of the Basis Algorithm 4 2 Testing Procedures 4 3 Performance Analysis 4 4 Summary 5 Comparison of Task Partitioning Schemes 5 1 Data Non Adaptive Partitioning Scheme 5 2 Data Adaptive Partitioning Scheme 5 3 Task Adaptive Partitioning Scheme 5 4 Conclusions 6 Characterization of Other Parameters on Performance 6 1 Shared Memory Storage and Referencing 6 2 Machine Parameters 6 3 Scene Characteristics 6 4 Conclusions 7 Conclusion 7 1 Summary 7 2 Future Work References Appendix A Information on Test Scenes B Data for Various Algorithms C Supplementary Graphs Index back to contents Eric Haines erich acm org Ray Tracing News Volume 5 Number 2 Ray Tracing News Volume 5 Number 2 Ray Tracing News Volume 5 Number 2 Ray Tracing News Volume 5 Number 2 Ray Tracing News Volume 5 Number 2 Ray Tracing News Volume 5 Number 2 Ray Tracing News Volume 5 Number 2 Ray Tracing News Volume 5 Number 2 Ray Tracing News Volume 5 Number 2 Ray Tracing News Volume 5 Number 2 http www acm org tog resources RTNews html rtnv5n2 html http www acm org tog resources RTNews html rtnv5n2 html http www acm org tog resources RTNews html rtnv5n2 html http www acm org tog resources RTNews html rtnv5n2 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv5n3.html%%==%%Ray Tracing News, Volume 5, Number 3%%==%%Ray Tracing News "Light Makes Right" September 2, 1992 Volume 5, Number 3 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%41362%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right September 2 1992 Volume 5 Number 3 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1992 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Intersection Between a Line and a Polygon UNDECIDABLE by Dave Baraff Tom Duff Fastest Point in Polygon Test by Aladdin Nassar Philip Walden Eric Haines Tom Dickens Ron Capelli Sundar Narasimhan Christopher Jam and last but not least Stuart MacMartin Polygon Intersection via Barycentric Coordinates by Peter Shirley Many Sided Polygon Intersection by Eric Haines Benjamin Zhu Code for Point in Polygon Intersectors by Eric Haines Introduction This special issue is dedicated to everyone s well at least my favorite computer graphics FAQ how do you find if a given point is inside a polygon John Griegg s FAQ posting points at An Introduction to Ray Tracing edited by Andrew Glassner This issue speeds up that algorithm count the crossings of a test ray and hopefully lays to rest the idea of using the sum the angles algorithm Plus there s a little discussion of what to do for special cases such as triangles and complex polygons and code for four different ways to do this test at the end of the issue back to contents Intersection Between a Line and a Polygon UNDECIDABLE by Dave Baraff Tom Duff To begin this issue here is one of the better pieces of obfuscatory writing in the field of computer graphics Reprinted from RTNews8 EAH From deb charisma graphics cornell edu Newsgroups comp graphics Keywords P NP Jordan curve separation Ursyhon Metrization Theorem Organization Program of Computer Graphics In article ncsmith ndsuvax UUCP Timothy Lyle Smith writes I need to find a formula algorithm to determine if a line intersects a polygon I would prefer a method that would do this in as little time as possible I need this for use in a forward raytracing program I think that this is a very difficult problem To start with lines and polygons are semi algebraic sets which both contain uncountable number of points Here are a few off the cuff ideas First we need to check if the line and the polygon are separated Now the Jordan curve separation theorem says that the polygon divides the plane into exactly two open and thus non compact regions Thus the line lies completely inside the polygon the line lies completely outside the polygon or possibly but this will rarely happen the line intersects the polyon Now the phrasing of this question says if a line intersects a polygon so this is a decision problem One possibility the decision model approach is to reduce the question to some other well known problem Q and then try to solve Q An answer to Q gives an answer to the original decision problem In recent years many geometric problems have been successfully modeled in a new language called PostScript See PostScript Language by Adobe Systems Incorporated ISBN 0 201 10179 3 co 1985 So given a line L and a polygon P we can write a PostScript program that draws the line L and the polygon P and then outputs the answer By output we mean the program executes a command called showpage which actually prints a page of paper containing the line and the polygon A quick examination of the paper provides an answer to the reduced problem Q and thus the original problem There are two small problems with this approach 1 There is an infinite number of ways to encode L and P into the reduced problem Q So we will be forced to invoke the Axiom of Choice or equivalently Zorn s Lemma But the use of the Axiom of Choice is not regarded in a very serious light these days 2 More importantly the question arises as to whether or not the PostScript program Q will actually output a piece of paper or in other words will it halt Now PostScript is expressive enough to encode everything that a Turing Machine might do thus the halting problem for PostScript is undecidable It is quite possible that the original problem will turn out to be undecidable I won t even begin to go into other difficulties such as aliasing finite precision and running out of ink paper or both A couple of references might be 1 Principia Mathematica Newton I Cambridge University Press Cambridge England Sorry I don t have an ISBN for this 2 An Introduction to Automata Theory Languages and Computation Hopcroft J and Ulman J 3 The C Programming Language Kernighan B and Ritchie D 4 A Tale of Two Cities Dickens C From td alice UUCP Tom Duff Summary Overkill Organization AT T Bell Laboratories Murray Hill NJ The situation is not nearly as bleak as Baraff suggests he should know better he s hung around The Labs for long enough By the well known Dobbin Dullman reduction see J Dullman D Dobbin J Comp Obfusc 37 ii pp 33 947 lemma 17 a line polygon intersection can be reduced to Hamiltonian Circuit without the use of Grobner bases so LPI to coin an acronym is probably only NP complete Besides Turing completeness will no longer be a problem once our Cray 3 is delivered since it will be able to complete an infinite loop in 4 milliseconds with scatter gather From deb svax cs cornell edu David Baraff Well sure it s no worse than NP complete but that s ONLY if you restrict yourself to the case where the line satisfies a Lipschitz condition on its second derivative I think there s an 89 SIGGRAPH paper from Caltech that deals with this back to contents Fastest Point in Polygon Test by Aladdin Nassar Philip Walden Eric Haines Tom Dickens Ron Capelli Sundar Narasimhan Christopher Jam and last but not least Stuart MacMartin Aladdin Nassar asked a variant on the classic question What is the MOST EFFICIENT way to find if a point lies within a SIMPLE polygon given a set of vertices in no particular order and the point coordinate Are there anonymous ftp sites with such canned functions instead of re inventing the wheel Excuse me if that is a trivial question Philip Walden pwalden hpcc01 corp hp com replies Another alternative to using a test ray is to sum the arc angles from the vertices to the test point If the sum is 2pi the point is inside if 0 it s outside i e give a polygon with a set of vertices v 1 n and test point p if SUM i 1 to n arcangle v i p v i 1 pi then p is inside else it s outside Eric Haines replies This method turns out to be exceedingly slow about an order of magnitude slower than the shoot a ray and count crossings method The problem is that the arcangle routine takes awhile you need to normalize your vectors you need to compute the dot product for the angle and cross product for the sign of the angle and you need the arccosine of the dot product for the angle itself This is done for every vertex of the polygon All of this adds up In fact I wrote a program to test the two algorithms head to head when I was deciding which to use code attached for a switch The test program makes polygons from 3 to 7 though you can change this and random scatters the vertices from 0 1 It then tests each of these polygons with a series of random points from 0 1 I won t claim that either implementation of the angle summation or segment crossing routines below are optimal though I do try to share intermediate results between vertices But I don t care how much you tune the angle summation algorithm it s still going to be slower than crossing counting Please do tell me of any hacks you make to get either algorithm faster anyway Code s at the end of this issue you should mess with TEST TIMES however you see fit I found you could set them pretty low but I felt better when they were relatively high i e the test times were greater than the granularity of the time command The crossing counting inside outside test is the one I wrote up in An Introduction to Ray Tracing edited by Andrew Glassner Academic Press plus a trick or two not in the book I should also mention that the tests below assuming that an even winding number means that the point is outside as this is how the Jordan Curve test is used Think of the winding number as the number of loops around a point As an example think of a star shape the interior pentagon is considered outside since points in it cross two lines You can modify the tests as shown in the comments if you want to test for just a non zero winding number i e the star is fully filled Timings are shown after the next comment Tom Dickens notes in a related article Additional logic in the barycentric test can be added to avoid checking triangles which are located in a region which has already been determined to be beyond of a side of a previous triangle which returned a negative check I don t know if such an enhancement is possible one triangle s outside is another s inside if the polygon is not convex but mention it here for interest s sake it is certainly not incorporated in my code EAH comments from Ron Capelli capelli vnet ibm com the arcangle routine takes awhile you need to normalize your vectors you need to compute the dot product for the angle and cross product for the sign of the angle and you need the arccosine of the dot product for the angle itself This is done for every vertex of the polygon See Fast Approximation to the Arctangent in Graphics Gems II p 389 The maximum error of this approximation allows polygons with up to about 40 vertexes to be handled safely No need to normalize take dot products or cross products either From the vector components dx dy from a test point to a polygon vertex get an angle using arctan or the fast approximation in which case do not scale to radians or degrees use the angle value in the range 0 to 8 Calculate the signed angle between two successive vertexes by subtracting the angles for each vertex Add up all the signed angle differences and compare to the mid range value The case of a test point coincident with a polygon vertex must be explicitly checked as the arctangent for a zero length vector is undefined Another fine point is that angle differences must be wrapped in the range 180 to 180 degrees As fond as I am of this method I still won t argue that the count ray crossings method is not better For a polygon with N edges an optimized count ray crossings algorithm requires at most one multiply one divide and about a half dozen add subtract compare operations per edge The add angle differences algorithm using the fast approximation to the arctangent requires only one divide but more than twice as many add subtract compare operations per edge Sundar Narasimhan sundar fiber one ai mit edu comments on Ron s post I think it is somewhat misleading to count worst case operations edge and then multiply it blindly by N esp since the count ray crossings algorithm can be optimized to consider only the subset of N edges that actually have a chance of intersecting the fired ray whereas I haven t seen any such pre filtering done to the add angle difference algorithm Christopher Jam phillips swanee ee uwa oz au writes For the count ray crossings method if your processor has no multiply or divide instructions the multiply and divide may be replaced by a binary search for the point on the edge with the same y coordinate as the point being tested Alternatively if you are going to draw the polygon at some stage generate a list of points on the line for plotting and keep these in a table to completely remove any requirements for multiplies divides or searches Just look up a point on the same line Stuart MacMartin sjm bcrki65 bnr ca comments I know the purpose of your code was for a simple comparison of the two algorithms but for production you might want to write optimal code The loop overhead is actually quite expensive as I found out when I optimized someone else s implementation of this algorithm Most of the time is spent looking for the next y that is on below the ray or the next y that is above the ray You should be able to get at lease a factor of 2 improvement by optimizing those two loops Call a subroutine if necessary for the deleted stuff Note that subroutines can be MORE efficient because the compiler may make a better use of registers for the time consuming part of the loop Use pointers to the y rather than to the x to avoid the extra adding and don t keep track of so many variables in the loop Finally is it necessary to use doubles With appropriate units will long suffice Just be careful if you make this switch if you have to have doubles in some places in your code watch out for conversions from long to double and back On some platforms definitely Apollo I don t know about others such casts take so long that they totally swamp anything else that is inefficient in a loop My code for the loop stop vertices numVertices ay while p ay p 2 Skip all lines below else if y stop break The routine requires that the first point is duplicated as the last Final for now comments by Eric Haines Other people noted the barycentric test as being a way to do inside outside testing The barycentric test is included below in Peter Shirley s article and is also written up on page 390 393 of Graphics Gems Didier Badouel s article You can do better than figuring out all the intermediate differences as shown in Badouel s article instead computing them as needed Also my code worries about zero area triangles just to be safe so it could be a bit faster without these sanity checks Badouel points out that triangle testing works for convex polygons you simply test all of the triangles and any intersection ends the test Most people assume that concave triangles must be intersected using a different test Not so As Berlin pointed out Vol 11 SIGGRAPH 85 course notes sorry for the obscure reference you can test a concave polygon by checking all its triangles generated from one vertex If the number of triangles hit is odd the point is inside the potentially concave polygon try it out it actually works You do have to test all triangles however if you knew the polygon was convex you can stop on the first intersection Also the barycentric coordinates become somewhat meaningless since more than one triangle can be found to overlap your test point So included in the new code which is at the end of this issue are two flavors of the crossings segment test one which is fairly fast and readable the other is macmartinized by me and runs a bit faster still The barycentric polygon intersector is also included and it works for all polygons concave self intersecting etc Random polygon testing number or range of vertices 3 4 5 3 7 20 100 angle 57 21 69 81 86 44 82 98 303 33 1435 78 barycentric 1 80 3 44 5 29 4 90 30 78 164 38 crossings 2 17 2 76 3 32 3 24 12 51 60 13 macmartin 1 86 2 35 2 87 2 64 11 04 52 27 inside 6 00 12 00 13 78 9 33 26 89 41 22 Times are in microseconds per intersection test on an HP 720 workstation The for loop for repeating each test is counted into these test times basically I repeat each polygon point test a number of times so that there s some reasonable amount of time to count not counting it just means the crossings tests is all that much faster Basically the macmartinized crossing test wins on my machine your mileage may vary Note that the barycentric intersector could be faster if the polygons are known to be convex since then a quick out could be taken i e the first hit ends testing I won t swear at all for the completeness of the barycentric code I suspect you can get into roundoff error problems for intersection points which lay exactly on some internal invisible triangle testing edge rare but possible There are also a few hacks I haven t done on the barycentric intersector you could make the set of if statements into two big if statements the variable v0 is not all that useful etc Also if the polygon is a triangle the test could be made a special case and the for loop and other baggage could be eliminated this I tried and it resulted in about a 20 reduction in run time However the code presented is at least readable and the general behavior is the same this intersector gets more expensive than the crossing methods as the number of polygon vertices rises Looking over the branch flow analysis I find that my test case polygons randomly generated points cause a lot of algebraic tests to occur when using the crossing algorithms i e the exact x intersection point has to be computed when a polygon edge goes from one quadrant to its diagonal opposite For real polygons this case is much less prevalent since vertices tend to be close to each other so the polygons I ve generated are more pathological than normally encountered For example if the polygons generated are regular polygons inscribed in a circle of radius 1 0 and given a random rotation about the origin the timings are Regular polygon testing number or range of vertices 3 4 5 3 7 20 100 angle 54 20 70 80 85 14 87 83 314 53 1522 00 barycentric 2 11 3 98 5 48 5 64 27 63 144 27 crossings 2 50 3 09 3 30 3 42 9 46 42 71 macmartin 2 32 2 81 2 91 2 92 6 29 23 91 inside 33 22 51 00 60 22 55 22 77 44 80 22 I m not sure why there s any noticeable difference in the angle summation tests since this test should be the same for any test point I suspect it s just the times routine s granularity The barycentric times change a little for better and worse probably due to times and to different polygon vs point tests The two crossings test noticeably improve for large polygons 29 and 54 savings respectively this is due to less difficult edges and for the macmartin test there are now longer series of edges fully above or fully below the test point These tests show off the real improvement of the macmartin algorithm when testing many sided polygons The near final word is that the crossings tests seems to be the most efficient overall the angle test should generally be avoided like the plague and the barycentric test is good for the special case of triangles and you also get the vertex interpolant weights Just to add to the confusion I talk about intersecting complex polygons in an article below if you re using a lot of these then another intersection algorithm might be a better route to go back to contents Polygon Intersection via Barycentric Coordinates by Peter Shirley shirley iuvax cs indiana edu One good way to do ray triangle intersection is to use barycentric coordinates If the triangle has vertices p0 p1 p2 then any point in the plane containing the triangle can be represented as p a p0 b p2 g p3 and the constraint a b g 1 will also hold If you want to interpolate colors or normals across the triangle you can use a similar formula A little messing around will convince you that for points inside the triangle a b and g are all positive and outside the triangle at least one is negative We can take this info and get rid of a p p0 b p1 p0 g p2 p0 The point p is inside if b and g are positive and b g A point on our ray can be represented as p o t v where o is the point of origin on the ray and v is the direction of propagation Plugging this into the triangle formula we can find whether any point on the ray is also a point on the plane o t v p0 b p1 p0 g p2 p0 Note that this is really 3 linear equations one for x y and z You can rewrite this as a 3 by 3 linear system and solve for t b g and there is a hit if and only if t 0 b 0 g 0 b g Alternatively you can first find the equation of the plane containing the triangle and find t This will give you an explicit point h on the plane You now have h p0 b p1 p0 g p2 p0 Now you have 3 equations and 2 unknowns Choosing any two of the equations is equivalent to projecting the problem onto one of the cartesian planes Watch out if the triangle is in one of the planes because the projection might be a line segment You can check the surface normal to see if it is one of those cases I just use the dimensions associated with the smallest magnitude components of the normal Note none of this is new GG II and the ray tracing book have other ways to do it Also if your scenes are large you are probably better off optimizing your spatial partitioning code the part which takes longer for bigger scenes For more info see Didier Badouel s article in Graphics Gems p 390 393 back to contents Many Sided Polygon Intersection by Eric Haines Benjamin Zhu Jon Bennett jb7m andrew cmu edu writes For a project i was working on i needed a very fast 2 D point in polygon routine for a monte carlo simulation and came up with a variation of the standard jordan curve theorem algorithm which ran approximately on the order of O n 20 when n 100 for mostly round ish polygons instead of O n What I can t find and no one here seems to know is for large polygons what is the best 2 D algorithm Everything they ve heard of runs in O n I know that n and n 20 are the same order but the you know what I mean I d like to know if there is something faster You might check Preparata Shamos s Computational Geometry book I believe they talk about faster algorithms Unfortunately much of the stuff in CG tends to be things like O K log n where K is something pretty large A simple way to test polygons with a large number of edges in O n K time is to sort the edges into buckets then find out which bucket the test point falls into Then you do the usual ray test but only against those edges in the bucket For example you could take a hundred edge polygon and find the Y extent in the polygon s plane Split this extent into say 20 buckets or whatever number you like more more efficient but also more memory and preprocessing Now take each edge and note which buckets it s in As an added speed up sort the edges by their leftmost X values in that bucket Now testing can begin When you test a point use the Y coordinate to find which bucket to check Now test each edge by the normal Jordan test against the point You only need to test edges to the left of the point i e you are using a test ray in the X direction so as soon as you reach an edge whose leftmost X is greater than the point s X you can stop testing The bucket sort immediately gets rid of a lot of edges and the X test means often not having to test all edges in the bucket it s optional icing If you re really into using memory and like preprocessing you could use a grid structure to place buckets on the polygon Each grid cell is inside outside or indeterminate There are some tricks but I leave these as an exercise for the reader Anyway this method can be very fast since much of the polygon s area is classified as in or out and much of the time no edges have to be tested at all The only limit is the grid cell resolution As the resolution rises the actual testing approaches constant time O 1 There s more preprocessing involved but if you re making a lot of tests then this is worth doing Benjamin Zhu zhu graphack asd sgi com comments on a similar question If your polygon is convex more generally your polygon is star shaped you can pre process the polygon into triangle strips by connecting any point in the kernel of the polygon with each vertex of the polygon This takes you O n pre processing time After that for each point you do a binary search in polar coordinates to locate the potential triangle where the point might lie Then you can determine if the point lies within this triangle which is trivial See Preparata and Shamos Computational Geometry for more details Obviously this algorithm will give you O log n time per point So you might consider this one if you need to solve the point inclusion problem many times back to contents Code for Point in Polygon Intersectors by Eric Haines Here it is code for the angle test the barycentric test and the two crossings tests with a main program to test their speeds You may need to use something other than srand drand48 for your random number generator and the times command for timing You ll also want to change the TEST TIMES constants if you re using something slower than an HP 720 workstation Feel free to complain about the slowness of any of the code I m always interested in new hacks Point in polygon inside outside tester Angle summation barycentric coordinates and ray along x axis crossings testing compared copyright 1992 by Eric Haines 3D Eye Inc erich acm org include include include include define X 0 define Y 1 double drand48 double AngleTimeTotal double BarycentricTimeTotal double CrossingsTimeTotal double MacmartinTimeTotal minimum maximum number of polygon vertices to generate define MIN VERTS 3 define MAX VERTS 7 number of different polygons to try define TEST POLYGONS 30 number of different intersection points to try define TEST POINTS 30 number of times to try a single point vs a polygon this should be 1 HZ approx single test time in seconds define ANGLE TEST TIMES 1000 define BARYCENTRIC TEST TIMES 10000 define CROSSINGS TEST TIMES 10000 define MACMARTIN TEST TIMES 10000 main argc argv int argc char argv int i j k numverts inside tot int angle flag barycentric flag crossings flag macmartin flag double pgon MAX VERTS 2 double point 2 srand 12345 AngleTimeTotal 0 0 BarycentricTimeTotal 0 0 CrossingsTimeTotal 0 0 MacmartinTimeTotal 0 0 inside tot 0 for i 0 i PI vtx0 pgon numverts 1 vec0 X vtx0 X point X vec0 Y vtx0 Y point Y if len hypot vec0 X vec0 Y 0 0 add angle due to dot product of vectors angle acos vec0 X vec1 X vec0 Y vec1 Y else subtract angle due to dot product of vectors angle acos vec0 X vec1 X vec0 Y vec1 Y get to next point vtx0 vtx1 vec0 X vec1 X vec0 Y vec1 Y test if between PI and 3 PI 5 PI and 7 PI etc if we care about is winding number 0 then just inside flag fabs angle M PI inside flag fmod fabs angle M PI 4 0 M PI 2 0 M PI timestop times timebuf time in microseconds AngleTimeTotal 1000000 0 double timestop timestart double HZ ANGLE TEST TIMES return inside flag barycentric a la Gems I with a little efficiency tuning int barycentrictest pgon numverts point double pgon MAX VERTS 2 int numverts double point 2 int i tris hit inside flag p1 p2 struct tms timebuf long timestart long timestop double tx ty u0 u1 u2 v0 v1 alpha beta denom do the test a bunch of times to get a useful time reading timestart times timebuf for i 0 i 1 0 goto NextTri if v1 pgon 0 Y pgon p2 Y 0 0 goto NextTri if alpha ty pgon p2 Y beta pgon p1 Y pgon p2 Y v1 1 0 goto NextTri if alpha u0 beta u2 u1 0 0 crossings 0 for j 0 j 0 0 else vtx1 pgon j yflag1 vtx1 Y point Y check if points not both above below X axis can t hit ray if yflag0 yflag1 check if points on same side of Y axis if xflag0 vtx0 X point X vtx1 X point X if xflag0 crossings else compute intersection of pgon segment with X ray note if point s X crossings vtx0 X dv0 vtx1 X vtx0 X vtx1 Y vtx0 Y point X test if crossings is odd if we care about is winding number 0 then just inside flag crossings 0 inside flag crossings 0x01 timestop times timebuf time in microseconds CrossingsTimeTotal 1000000 0 double timestop timestart double HZ CROSSINGS TEST TIMES return inside flag shoot a test ray along X axis macmartinized by me a bit messier int macmartintest pgon numverts point double pgon MAX VERTS 2 int numverts double point 2 int i inside flag xflag0 struct tms timebuf long timestart long timestop double p stop int crossings double tx ty y do the test a bunch of times to get a useful time reading timestart times timebuf for i 0 i ty p ty x crossing if xflag0 pgon numverts 1 X tx double pgon tx if xflag0 crossings else compute intersection of pgon segment with X ray note if point s X crossings pgon numverts 1 X y ty double pgon pgon numverts 1 X p y tx stop pgon numverts for y p p 2 p ty while p ty p 2 if p stop goto Exit y crosses if xflag0 p 3 tx p 1 tx if xflag0 crossings else compute intersection of pgon segment with X ray note if point s X crossings p 3 p 2 ty p 1 p 3 p p 2 tx else while p stop goto Exit y crosses if xflag0 p 3 tx p 1 tx if xflag0 crossings else compute intersection of pgon segment with X ray note if point s X crossings p 3 p 2 ty p 1 p 3 p p 2 tx Exit test if crossings is odd if we care about is winding number 0 then just inside flag crossings 0 inside flag crossings 0x01 timestop times timebuf time in microseconds MacmartinTimeTotal 1000000 0 double timestop timestart double HZ MACMARTIN TEST TIMES Eric Haines erich acm org Ray Tracing News Volume 5 Number 3 Ray Tracing News Volume 5 Number 3 Ray Tracing News Volume 5 Number 3 Ray Tracing News Volume 5 Number 3 Ray Tracing News Volume 5 Number 3 Ray Tracing News Volume 5 Number 3 Ray Tracing News Volume 5 Number 3 Ray Tracing News Volume 5 Number 3 Ray Tracing News Volume 5 Number 3 Ray Tracing News Volume 5 Number 3 http www acm org tog resources RTNews html rtnv5n3 html http www acm org tog resources RTNews html rtnv5n3 html http www acm org tog resources RTNews html rtnv5n3 html http www acm org tog resources RTNews html rtnv5n3 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv6n1.html%%==%%Ray Tracing News, Volume 6, Number 1%%==%%Ray Tracing News "Light Makes Right" January 27, 1993 Volume 6, Number 1 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%84708%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right January 27 1993 Volume 6 Number 1 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1992 1993 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction New People New Places etc An Easily Implemented Ray Tracing Speedup by Steve Worley Color Storage by Greg Ward Bounding Areas for Ray Polygon Intersection by Steve Worley and Eric Haines Simple Fast Triangle Intersection by Chris Green and Steve Worley Ray Tracing Roundup Spectrum Overview edited by Nick Fotis Comments on the Glazing Trick by Eric Haines Net News Cullings Graphics Gems IV Announcement by Paul Heckbert Announcing the ACM SIGGRAPH Online Bibliography Project by Stephen Spencer A Brief History of Blobby Modeling by Paul Heckbert Cool Raytracing Ideas Karen Paik Optical Effects and Accuracy by Sam Uselton Map Projections Reference Book by Mike Goss A Brief Review of Playmation by Chris Williams PV3D Quick Review by David Anjo Bounding Volumes Sphere vs Box by Tom Wilson Raytracing Swept Objects by Mark Podlipec Ray Transformation by Kendall Bennett Introduction This issue seems to have a theme of efficiency hacking It s interesting to note that there are still many engineering details which have not been worked out or at least are not commonly available Some of the articles here talk about ways to polish common algorithms bounding volume testing polygon testing that makes them noticeably faster On a related note recently I received a note from Ken Sykes at Microsoft He had sped up the rgbvary c code in Graphics Gems III by using integers instead of floating point Doing this reduced filtering time by a factor of 8 on his PC He wished more publicly available code used integer arithmetic when possible The ray tracing roundup in this issue shows that people are quite busy out there I ve broadened the bounds of the column a bit to include other rendering related releases since the dividing line between ray tracing and other algorithms is not particularly sharp nor important for example you may preview a ray trace with a z buffer algorithm or use scanline methods to accelerate your ray tracer back to contents New People New Places etc George Simiakakis SYS PG University of East Anglia Norwich NR4 7TJ England A118 CPC865 EAST ANGLIA AC UK Interests subdivision techniques radiosity For the moment I am investigating 5D subdivision techniques for ray tracing Starting from the Ray Classification algorithm I am trying to come up with a more efficient algorithm with less variance in it s performance The main ways of doing that are adaptive choice of subdivision parameters and degeneration of 5D subdivision to spatial subdivision where this is appropriate back to contents An Easily Implemented Ray Tracing Speedup by Steve Worley spworley netcom com Most ray tracing acceleration methods are variants of just a few simple ideas that somehow presort space to minimize the number of objects that must be tested for intersection Grids uniform and non uniform octrees and hierarchical bounding boxes are probably the most common methods though there are of course many more Grids and octrees are certainly the most popular and they do quite an effective job at speeding up intersections by reducing the number of candidate objects that the ray might hit More speed is always better of course so there are always variants of these methods usually with a time speedup at the expense of storage preprocessing and or programming complexity I ve thought up a small quick trick that can be included in almost any grid type sorting algorithm It trades off storage space for a decent speedup but its biggest charm is very easy implementation Modification of your favorite grid sorting algorithm is probably only an hour or two of work The trick is based on the observation that the number of cubes that a ray passes through per unit length is a function of the direction of the ray A uniform unit sized grid aligned along the world axes is the easiest demonstration of this though it works for non uniform grids and octrees too If a ray is pointed straight along the X axis it will obviously skewer an entire row of cubes At a distance of n units the ray has passed through n unit cubes If the ray s direction is different though it passes through MORE cubes At a 45 degree angle the unit vector is xn 0 707 yn 0 707 zn 0 0 the ray will have moved an x distance of 0 707 n units and a y distance of 0 707 n units It has passed through a total of 1 414 n cubes This is correct A ray will only pass from one cube to a cube that it shares a face with Most algorithms never even check for a diagonal step since this has a vanishingly small probability when you re dealing with floating point numbers For example a ray going from cube 0 0 to cube 1 1 might go from 0 0 to 0 1 to 1 1 and not straight from 0 0 to 1 1 The number of unit cubes a ray passes through at the limit of n large is just the sum of the absolute x y and z distances the ray traverses The important thing to notice is that the volume of space that contains objects that need to be tested for intersection with the ray is directly proportional to this number of cubes The more cubes the ray passes through the more intersections you ll probably have to do It is therefore cheaper to test a ray that moves right along an axis which passes through one cube per unit length than one that moves at a perfect diagonal along the lattice from 0 0 0 to the direction 1 1 1 which passes through 1 703 cubes per unit length THIS WORST CASE HAS TO TEST 70 MORE VOLUME AND OBJECTS THAN THE BEST CASE This is all due simply to the direction of the ray as compared to the coordinate system of the grid I wrote a quick program to find the average case which was about 1 3 cubes per unit length assuming all ray directions were equally likely My algorithm enhancement is based on this grid orientation dependency The basic idea is simple just make one or more EXTRA grids with the same objects but with the grids at an angle to the original grid To test a ray with the objects in the world you just choose which grid is most aligned with the ray along any axis This best alignment can be determined quickly and simply by looking at the normalized ray direction in each grid s coordinate system The function fabs xn fabs yn fabs zn tells you the number of cubes per unit length that the ray will pass through The smaller this number the better since less volume and on the average less objects will have to be tested Storage requirements are obviously increased two grids take twice the room of one Always a trade off But usually the grids aren t THAT large since they just store lists of object ID s and not the actual objects themselves The time to assemble the grid is obviously increased but I found that it was easy to modify the loop that decides what box es each object goes into so that it did all of the grids simultaneously with the same loop For two grids it increased preprocessing time by about 70 What kind of overall speedup is expected Well the more grids at different angles that are used the better your ray alignment will be on average meaning fewer cubes will have to be tested The testing to determine which set of boxes to use takes a trivial amount of extra time but the extra preprocessing to make the grids IS significant Also there will STILL be inefficiency every ray can t always be directly along an axis of one of the grids I implemented a two grid and a four grid model Though I didn t spend a whole lot of time in optimization the four grid method was horrible the preprocessing step took far too long for a scene with about 1000 objects slowing down the overall render time For two grids the second grid rotated at a 45 45 45 degree angle you know what I mean the speedup was evident Preprocessing was about 170 of the old time but actual rendering was about 25 faster Depending on how many objects were being traced the overall speedup was from 0 to 20 This is in no way a revolutionary speedup but for about two hours of programming it is not bad Also these numbers are based on a non optimized program and can only get better if I do a more careful implementation Why wasn t the rendering speedup more than 25 A couple of reasons The biggest is that when a ray passes though more volume there TENDS to be more objects that need to be intersected But there s often many objects that span adjacent boxes and these in a good implementation are not re tested so it doesn t matter much that the extra volume was passed though It depends on the object density and size if most objects were small compared to the box size and roughly uniformly distributed in space the number of objects tested would correlate better with the volume of the cubes that the ray passes through Which is really what we re reducing with this algorithm But even when most grids are empty or have objects that span many cells using the more aligned grid is never going to hurt testing less cells is going to be easier Anyway there might be some improvements to this idea it s only about a week old but it is so simple to implement that I thought I d pass it along I ve implemented it for uniform grids very simple but not necessarily the best and octrees I have not tried to make a non uniform grid yet but you d probably have to make a modification of the cost function based on the AVERAGE x y and z sizes of the boxes If anyone implements this idea or has any new ideas I d like to hear about it Meanwhile I ll hopefully get some time to run some more accurate benchmarks back to contents Color Storage by Greg Ward greg hobbes lbl gov From the Radiance Digest v2n4 dedicated to questions from users of Radiance For a free subscription write Greg Jim Callahan jmc sioux eel ufl edu writes I understand that Radiance stores images as 32 Bit RGB How does an adjustment of exposure effect the colors displayed Obviously it affects the brightness of the image but what are the differences between exposure and gamma correction Are both needed If a light source is too dim I want to know in absolute terms This is a bit confusing to me because I realize that the eye is constantly readjusting its exposure I would like to be able to say that the image is a realistic simulation of a scene but can this really be done Greg replies You ve touched on a very complicated issue The 32 bit format used in Radiance stores a common 1 byte exponent and linear uncorrected gamma values This provides better than 1 accuracy over a dynamic range of about 10 30 1 compared to about 3 accuracy over a 100 1 dynamic range for 24 bit gamma corrected color Changing the exposure of a Radiance image changes only the relative brightness of the image Gamma correction is meaningful only in the presence of a monitor or display device with a power law response function Gamma correction is an imperfect attempt to compensate for this response function to get back linear radiances Thus applying the proper gamma correction for your monitor merely gives you a linear correlation between CRT radiance and the radiance value calculated Radiance is named after the value it calculates in case you didn t already know However as you correctly pointed out linear radiances are not necessarily what you want to have displayed Since the dynamic range of a CRT is limited to less than 100 1 in most environments mapping calculated radiances to such a small range of dispayable values does not necessarily evoke the same response from the viewer that the actual scene would The film industry has known this for many years and has a host of processing and exposure techniques for dealing with the problem Even though computer graphics provides us with much greater flexibility in designing our input to output radiance mapping we have only just begun to consider the problem and it has not gotten nearly the attention it deserves If you are interested in learning more on the topic I suggest you check out the excellent CG A article not out yet should be good EAH and longer Georgia Tech technical report by Jack Tumblin and Holly Rushmeier Color is an even stickier problem Gary Meyer and others have explored a little the problem of mapping out of gamut colors to a CRT but offhand I don t know what work has been done on handling clipped over bright values This is another interesting perceptual issue ripe for exploration The best you can currently claim for a computer graphics rendering is that photography would produce similar results Combined with accurate luminance calculations this should be enough to convince most people In absolute terms the only way to know is by understanding lighting design and luminance illuminance levels appropriate to the task It will be many years before we will have displays capable of SHOWING us unambiguously whether or not a given lighting level is adequate Graphics Gems II has an article Real Pixels and code by Greg Ward for using 32 bit format for RGB The on line distribution has more code than the book as I recall EAH back to contents Bounding Areas for Ray Polygon Intersection by Steve Worley spworley netcom com and Eric Haines erich acm org The last issue of RTN v5n3 was devoted to fast methods of intersecting rays with polygons and particularly the subtask of determining whether a single point was inside a 2D polygon We Eric and Steve have been discussing another aspect of polygon intersection the best type of bounding volume to surround polygons with particularly complex ones that have enough sides that the is the point in the polygon test gets slow One particularly useful trick if you do have a bounding volume around the polygon say an axis aligned cube is to check the ray plane intersection POINT with the bounding volume The point in volume test is very cheap 6 compares and provides a way to trivially reject hits that are far from the polygon This quick rejection method has been developed by several people independently and Andrew Woo has a nice description in Graphics Gems I on page 394 The only possible danger of using this extra rejection is that that a polygon laying on an axis aligned plane will have a bounding box with no depth and the ray hits box and or point in box algorithms need to be robust enough to correctly handle it The method is therefore 1 Test to see if plane s normal is facing you 50 culling right here 2 Test to see if ray intersects bounding cube at all 3 Intersect the ray with polygon s plane 4 Test intersection POINT with bounding cube 5 Test intersection point for in out polygon But what if you eliminated the ray bounding cube test 2 completely and for ALL facing polygons you computed the ray plane intersection and tested that point with the bounds If you count up the ray bounding box test s costs you need 3 adds 3 divides and 13 compares This is from Woo s algorithm in GG I But intersection with a plane only costs 5 adds 5 mults and 2 compares since you already computed the dot product to test whether the plane was facing you or not So basically you can skip right ahead to the is the ray plane intersection POINT in the bounding box which provides better rejection than the ray cube intersection and you ll be ahead speed wise Now here s a neat trick if you re now JUST using the bounding volume to provide point rejection not ray rejection we might as well do it ONLY in the 2D projected plane we also do our in out tests in We don t even have to compute that third component the one we don t use for testing polygon in out anyway saving a mult or two We basically have a 2D bounding AREA and not a bounding volume The third coordinate did provide some additional rejection but how effective it is depends on the plane s angle the Z coordinate is a linear function of X and Y This also avoids any ugliness from a zero height bounding box The bounding AREA will do a fast rejection of trivial points far away from the center of interest RTNv5n3 had several discussions of different test methods but all of them might be helped by this trivial rejection depending on the complexity of the polygon Any bounding for a triangle is probably a waste but if you have a 500 sided polygon doing at least a gross rejection of far off points is going to be a severe win NOTE This does not mean that a bounding volume is necessarily a bad idea for a polygonal object It DOES mean that a bounding volume for a SINGLE polygon is definitely slower than doing a 2D point rejection instead The question is for these complex enough polygons what type of rejection to use The rest of this discussion assumes the XY plane is the plane being used for the polygon test but XZ or YZ are obviously just the same The bounding square max min X Y is by far the most obvious and useful since it only costs 4 compares and will reject all of the way off hits A tighter bound might be useful for a more complex figure however One logical further test would be to measure the maximum extents of the polygon along other directions such as the 45 and 135 degree angles you sort of get a tight shrink wrapped octagon bounding your polygon If you want to check the 45 degree angles you do a separate min max test on the value sqrt 1 2 X sqrt 1 2 Y which is just a coordinate rotation of the point by 45 degrees The 135 degree rotation is done by testing sqrt 1 2 X sqrt 1 2 Y The extra 4 rejections therefore cost 2 adds 4 mults and 2 compares Now here s a really sneaky trick What if you change to an UNNORMALIZED coordinate system Don t check sqrt 1 2 X sqrt 1 2 Y check instead X Y The maximum extent you re checking against absorbs that normalization constant but that is the only thing you ever use these min max numbers for so it is not a problem So to evaluate the shrink wrapped octagon you 1 Check min max X span 2 compares 2 Check min max Y span 2 compares 3 Compute A X Y 1 add 4 Check min max A span 2 compares 5 Compute B X Y 1 add 6 Check min max B span 2 compares You could continue into 16 sided shrinkwrapped hulls if you really need to C A X D B X E A Y F B Y but this is probably tight enough for anybody This type of bounding box is useful for other types of point sampling as well solid texturing evaluates functions of a single point and they often have a region where a color or pattern is applied to a central location and outlying areas are left alone or colored with a background A 16 sided bounding volume this time in 3D only takes 16 compares and 6 adds by coincidence the same as 2D This has been implemented in several textures in particular one that renders Bezier outline fonts on an object s surface A very different method for trivial rejection of 2D points takes much more precomputation but has the additional benefit of trivial ACCEPTANCE Basically you impose a uniform grid onto the XY plane and classify each box in the grid as inside outside or indeterminate Only when a point lies in an indeterminate box does the full point in polygon routine need to be called Any point that falls outside the grid is automatically rejected The grid is sized to just fit over the polygon This method is especially effective for many sided but simple polygons that have a lot of empty inner area since any hits on the inside away from the edges are quickly accepted This grid isn t too hard to make You render each polygon segment into the grid marking any boxes the line touches with an ID meaning indeterminate Flood fill any untouched boxes that lie along the outside edge of the grid using the N S E W neighbors with a flag saying outside Then use the point in polygon routine in the center of each of the remaining untouched squares to determine its state inside or outside When you determine a new square you can flood fill its unchecked neighbors This all works since the only indeterminate boxes are the ones that edges pass through and an edge and therefore an indeterminate box will always separate any transition between inside and outside This will work for either winding number or even odd methods of point in polygon definition The lookup grid is expensive in terms of memory but the speedup can be significant especially for large or complex polygons Each box in the grid needs two bits of storage since there are three possibilities to choose from A cheaper but slower alternative is to use only one bit to encode the in out indeterminate state During precompute count up the number of boxes for acceptance and rejection and encode the less common state as indeterminate I have implemented this algorithm and it works very well giving you near O 1 performance for reasonable data I used the outlines of continents for my polygons from 164 to 1152 points and had good results This algorithm would probably be good for GIS applications The indeterminate cells can be evaluated much faster by noting which edges actually pass through the cell Since you know the state of the corners of the cell i e each corner is in or out you draw a line segment from your test point to the nearest cell corner or any corner but the nearest should have less crossings Using the ideas of Mukesh Prasad in Graphics Gems II for line segment intersection testing you can quickly find how many crossings occur between the test point and the cell corner and so know the test point s status EAH One implementation danger is in ROBUSTLY identifying each square in the lookup grid that any edge passes though A vertical or horizontal polygon edge might lie right along the borders of a square in the lookup grid or less commonly a line might pass diagonally through a corner of one of the squares of the grid In both cases it is probably best to be conservative and identify the adjoining square s as indeterminate One modification of this algorithm can speed it up further Instead of recording just three states in the look up grid a fourth state meaning unprocessed is added During precomputation you mark all of the indeterminate squares as before but you don t do anything else Your grid after pre computation will therefore be filled only with indeterminate and unprocessed squares When you begin rendering you use the grid as before but when you hit an unprocessed square you do the point in polygon test record the answer in the grid do the flood fill of the neighbors and return the correct answer This method is a little bit more complex to implement but you ll only end up doing the minimum amount of work building the grid since you set it up partially on demand These bounding area methods are useful complements to the point in polygon test They provide quick rejections or acceptances the number of times that the relatively slow point in polygon routine is called exactly the same way that a bounding volume can provide quick rejection of ray object intersections back to contents Simple Fast Triangle Intersection by Chris Green chrisg cbmvax cbm commodore com and Steve Worley spworley netcom com Chris writes about RTNv5n3 I am always surprised to see articles advocating angle tests intersection counting or Barycentric coordinates for determining if an intersection point is inside of a 3d dimensional triangle when the simple way of determining this is also the fastest if you can live with a few more bytes stored per triangle My Method Store with each triangle 2 indices i1 and i2 These are the coordinate offsets for the two axes that will be considered in the test the axis with the largest component in the normal vector is dropped as usual Store the 2 coefficients and the 1 constant of the inside outside equation of each edge To test for intersection calculate C 0 X i1 C 1 X i2 C 2 X is the intersection coordinate and C are the 3 constants for the linear equation calculated at setup time over all 3 edges If any of them have a negative or positive depending upon which convention you choose result return NO INTERSECTION Assuming hardware multiply this can be coded extremely efficiently and can take advantage of multiply accumulate instructions if they are available In fact with a fast MAC instruction it might be more efficient to skip the coordinate indexing all together and just use the 3d equation of the plane passing through the edge perpendicular to the triangle on some architectures The only further optimization I take is that I store the edge equations sorted by the area of the 2d bounding volume of the triangle which is outside of that edge In 68040 code this all boils down to move l 0 a5 d6 w d4 d6 i1 a5 intersection point move l 0 a5 d7 w d3 d7 i2 muls l a4 d0 d4 C0 X1 muls l a4 d1 d3 C1 X2 add l d3 d4 addx l d1 d0 C0 X1 c1 x2 movem l a4 d1 d3 fetch 64 bit constant term add l d3 d4 addx l d1 d0 c0 x1 c1 x2 c2 bmi s no hit3 outside repeated 3 times Reply from Eric Haines I ll put your note in the next RTN thanks Berlin in the truly obscure reference A E P Berlin Jr T Efficiency Considerations in Image Synthesis B SIGGRAPH 85 course notes volume 11 D July 1985 K polygon intersection gives the same method you do he thinks of it as three planes I assume that your method works for convex polygons only unless you test all triangles within the polygon and check the parity see RTNv5n3 for more information The catch is most people don t code in assembler the counting crossings test is darned fast in assembler However your test is darned fast anyway at least for simple polygons The extra memory is something of a drawback but who can complain I coded it up looked pretty efficient and tried it in my test suite Here are the results For random polygons Number of vertices 3 4 5 3 7 20 100 plane 1 15 1 88 2 81 2 91 16 10 87 02 macmartin 1 90 2 33 2 76 2 67 10 63 51 47 inside 6 78 11 78 13 11 12 22 26 22 35 67 For regular polygons Number of vertices 3 4 5 3 7 20 100 plane 1 22 2 23 3 25 3 36 16 67 86 51 macmartin 2 33 2 80 3 03 3 10 6 31 23 78 inside 33 22 51 00 60 22 55 22 77 44 80 22 Admittedly for the regular polygons I could do the test for the plane set based on first hit means quit since the regular polygons are convex This will result in faster timings for it as it would for the macmartin tests if two crossings are found while doing the macmartin test for convex polygons then you can quit It s cool that your test is better for 3 and 4 vertex polygons since these are real common Chris replies Thinking about my method applied to polygons with large 4 numbers of sides I realized that the edge equations should be stored in bit reversed order assuming some bounding volume that reduces PIP tests to only those points which are somewhat near the polygon and also assuming most polygons are relatively regular Imagine an octagon surrounded by a rough bounding box If the first side didn t clip off the point the 2nd isn t that likely to if it is at a similar angle to the first one But the opposite side is more likely to The optimal thing to do is to calculate the area which is inside the bounding box which has not yet been clipped off by one of the previous edges but this would involve calculating intersections of the edges with each other which is probably too much work to do on a polygon which might only cover 10 pixels on the output image The algorithm is to check the point against the edge equations of each edge of the convex polygon the inside outside equation of the edge i e if v0 is one vertex and v1 is another and v2 is another point on the polygon a v1 x v0 x b v1 y v0 y c a v1 y b v1 x if a v2 x b v2 y c 0 then negate a b c to make the inside outside sense correct Which coordinate x and y are depends of course upon the surface normal of the triangle intersect x y intersection point of ray and plane projected onto the correct axis for each edge if x a i y b i c i 0 then no intersection All the abc i s are sorted in such a way based upon the bounding volume so as to make the probability high that the first test will reject the point For a many sided roughly regular convex polygon storing the sides in bit reversed order for an 8 sided polygon this is 0 4 2 6 1 5 3 7 causes the loop above to test the point against a bounding volume which homes in on the actual shape of the polygon For a triangle I store the sides based upon the area of the triangle cut out by the intersection of the edge and the bounding box Steve Worley spworley netcom com had some independent observations also realizing that half plane testing should be fast In RTNv5n3 Peter Shirley wrote about a fast triangle test using barycentric coordinates It seems to me that the fastest method by far to test whether a point is in a 2D triangle is to just do three half plane tests Represent each of the lines that make up the triangle with two real numbers A and B such that the line is described by the formula Ax By 1 If the triangle lies below that line a point on the wrong side of the line will satisfy the inequality Ax By 1 If the triangle is above the line you just test Ax By A slightly faster method would be to write each line in the form Cx y D instead which would save a multiply on each test However this causes a problem because of perfectly vertical lines which would make C and D become infinite An extra compare would be needed to check for this case so that the more general Ax By 1 test could be substituted While this method is probably about as fast as a 2D point in triangle test can get Shirley s barycentric method has one big advantage in that AFTER a hit the computed coordinates can be immediately used for Gouraud or Phong shading Depending on the percentages of tests versus hits your application gets it might be cheaper to use only barycentric if typical tests have a high enough hit rate Note also that both the barycentric and the half plane rejection methods will work on any convex polygon back to contents Ray Tracing Roundup The big news is that there is now an FTP site with some excellent 3D model datasets available Go to avalon chinalake navy mil 129 131 31 11 If you can t reach it or your connection is slow the site is mirrored on ftp kpc com 144 52 120 9 in pub mirror avalon The objects in obj Viewpoint are of particularly high quality there s a cow foot bones Beethoven s bust a brontosaurus a toy galleon and I forget all what else plus many road vehicles a helicopter etc There are also the Capone datasets in case you didn t get yours free at SIGGRAPH at the Viewpoint booth I liked these obj files well enough that I even wrote an obj2nff awk script which is also FTPable from avalon dig around And this is just one set of models there are others from many other sources If they re missing your favorite dataset upload it to them contact Francisco X DeJesus dejesus archimedes chinalake navy mil The February 1993 issue of National Geographic has a fold out image of Venus on page 37 This image was rendered by David Anderson at SMU using Craig Kolb s Rayshade software Also the computer firm Santa Cruz Operation is evidently using going to use images made from public scene files by Rayshade in showing off their SCO Open Desktop A new book on ray tracing has come out and comes with a disk of code for Bob a ray tracer of at least 8K lines of code Note that Stephen Coy is also the creator of the VIVID ray tracer I hope to review this book for the next issue of the RTN EAH It s at least 8k lines of code Photorealism Ray Tracing in C Christopher D Watkins Stephen B Coy and Mark Finlay M T Books a division of M T Publishing Inc 411 Borel Avenue Suite 100 San Mateo CA 94402 C 1992 ISBN 1 55851 247 0 Some comments from Stephen Coy Bob the raytracer in the book is basically Vivid with a few minor changes The changes tend to center around the parser I didn t want to use flex and byacc for the book so I spent a long day writing the parser from scratch in C Everything works except allowing the user to perform math functions in the input files I d like to see some benchmarks with Bob vs some of the other tracers out there Even though it is distantly derived from MTV I think it will generally beat MTV by quite a bit Before you ask the name Bob just sort of happened When I was working on the code I got tired of talking to Chris and calling it the ray tracer for the book I suggested that we just call it Bob until we came up with a better name The deadlines came first Another new book is Practical Ray Tracing in C by Craig A Lindley It contains a disk for the IBM PC and the ray tracer is DKB Trace I assume it has the same features as the PD one on the net and vice versa The book is evidently a 49 95 paperback with disk of course Tom Wilson wilson eola cs ucf edu Does anyone know anything about this book I haven t seen it and am unwilling to blow bucks on it Any review biased or no is appreciated EAH For those of you who still believe free software is worthless a comment from a guy at NASA on Radiance an industrial strength lighting simulator free from Greg Ward a ray tracer and much more By the way your package is a very good one in just 2 weeks we were able to trace complex space shuttle lighting very easily Nice work The source code from the notes of Siggraph 92 Course 23 Procedural Modeling and Rendering Techniques is now available for anonymous ftp from archive cis ohio state edu as pub siggraph92 siggraph92 C23 shar Without a copy of the course notes these files may not make sense David Ebert ebert hockey cis ohio state edu Human heads and an anatomically correct human skull data are available The data is a mesh and the demo contains convert utilities to translate into various other formats eg ASCII Wavefront IGES etc The demo runs on a SGI IRIS workstation Ftp from taurus cs nps navy mil login anonymous password guest file pub dabro cyberware demo tar Z George Dabrowski Cyberware Labs dabro taurus cs nps navy mil A simple public domain radiosity package is available at ftp yorku ca was nexus yorku ca 130 63 9 66 in pub reports Radiosity code tar Z also mirrored at wuarchive wustl edu The package contains C code for a progressive refinement solution using the following algorithms Wallace Ray traced form factors Haines Shaft Culling using automatic hierarchical bounding creation Salmon 87 Chen Progressive refinement with jitter hemicubes A partial implementation of Hanrahan s BF Refinement algorithm Additionally there are model preprocessors for conversion from QuickModel and OFF formats with geometric constraints of Baum s 91 Siggraph paper partially included and a scene walk through program with simple Gouraud shading The solution can be run stand alone on any Unix box but the walk through requires a SGI 4D Bernard Kwok g kwok cs yorku ca Version 2 2 of x3d a 3D wireframe hidden line hidden surface viewer that runs under X11 is now available via anonymous ftp at castlab engr wisc edu 144 92 60 140 and is found as pub x3d 2 2 tar Z Mark Spychalla spy castlab engr wisc edu If you use AutoCAD 11 Advanced Modelling Extensions AME software to build 3D objects it is now possible to convert these models to a raytracer compatible scene file format SCN which is used by the RTrace package raytracer plus utilities The converter code is available at asterix inescn pt 192 35 246 17 in directory pub RTrace scene conv acad files scn h and sol2scn h A MAC version of RTrace 1 0 version beta is available in directory pub RTrace Macintosh at asterix inescn pt 192 35 246 17 The code was made by me Reid Judd reid judd east sun com and Greg Ferrar gregt function mps ohio state edu made the Mac port Antonio Costa acc asterix inescn pt A new release of Tcl SIPP is available from ftp uu net graphics 3D tsipp 3 0b tar Z and should be available soon from barkley berkeley edu tcl extensions tsipp3 0b tar Z Tcl SIPP is a 3D image specification and rendering toolkit for use with Tcl and Tk It provides a Tcl command interface to SIPP the SImple Polygon Processor library This is used for creating 3 dimensional scenes and rendering them using a scanline z buffer algorithm The Tcl interpretive programming language is used to provide a powerful yet simple interface to this library The scene may be written to either a PPM format file as defined by the PBMPlus toolkit or a RLE file as defined by the Utah Raster Toolkit An interface to render to the photo widget in the Tk X11 toolkit is also provided Events such as button presses may take place while rendering is in progress markd NeoSoft com Mark Diekhans Under princeton edu pub Graphics rayshade 4 0 you ll find several new directories including Contrib User contributed enhancements header files etc Amiga DOS MAC OS2 Ports to various strange operating systems Pix Rayshade generated images texture maps etc There have been other changes to the archive poke around and you ll undoubtedly discover them I ve placed all of the old rayshade users messages on the princeton archive princeton edu pub Graphics rayshade users Feb Sep92 Z This file is completely unedited if it was sent to the list between February and September 28th it appears here If some brave soul wants to edit out the chaff I d be happy to replace the file with something more appropriate Utah RLE viewers for the IBM PC are available at cad0 arch unsw edu au pub rayshade dos They include drawutah13 exe SVGA Utah rle viewer drwrle15 exe Utah rle viewer Tseng Labs HiSierra 15 bit DAC drwrle24 exe Utah rle viewer Tseng Labs HiSierra 24 bit DAC The drawutah exe may also be available from princeton edu A new rsdefs package for Rayshade is available Changes made were new surfaces added copper several diamond several glasses to name a few fixed documentation all the examples should work now made primitives more easy to use added surface information file information for developing new surfaces just RI values and some color info sofar added a script for batch testing surfaces Larry Coffin lcoffin clciris chem umr edu NCSA Polyview 3 0 is now available via anonymous FTP to ftp ncsa uiuc edu 141 142 20 50 in SGI Polyview3 0 Polyview 3 0 is a software tool for interactive visualization and analysis of 3D geometrical structures Polyview 3 0 reads data files in NCSA HDF Vset format and automatically derives animation sequences based on available information Script based and graphical user interfaces complement each other in a seamless fashion to allow the easy creation of movie style animations Rayshade users on SGIs may be interested in this among other things it generates scene files in rayshade 4 0 format and also in Pixar s RenderMan format Marc Andreessen marca ncsa uiuc edu POLYRAY is a ray tracer that is more difficult to use but substantially faster Version 1 4 is available at faramir or ftp informatik uni oldenburg de 134 106 1 9 in pub dkbtrace incoming polyray Note that the file has probably moved somewhere by now This site also contains a number of POV DKBtrace scene files and images as well as 3d fonts for POV and Vivid Andy Haveland andy osea demon co uk If you re on or have access to an Amiga system then you may want to check out Vertex a shareware 40 3D object editor converter It will read Wavefront obj files and save them in Imagine Sculpt 3D Lightwave RayShade GEO and 3D Professional file formats While not perfect it does correctly read the Wavefront geometry from the file and you can modify smoothing and face colors right in Vertex Alex DeBurie cup portal com White Sands Missile Range 192 88 110 20 in pd1 msdos graphics carries Thunder a ray tracer from Germany A 512x512x24 bit Mandrill is available in PPM and JPEG formats from popeye genie uottawa ca in pub pics Dominic Richens dominic shamin genie uottawa ca The cameraman image is available via anonymous ftp from eedsp gatech edu in database images camera 256 The file is unformatted byte format with image dimensions 256x256 Stan Reeves sjreeves eng auburn edu Graphtal is a L system interpreter and includes a number of features including animation support X11 previewer z buffer preview and output for rayshade It is in C and currently works on SparcStations RS 6000 s and DEC Stations The first public release of graphtal is now available via anonymous ftp at iamsun unibe ch 130 92 64 10 and is found as Graphics graphtal 1 0 tar Z or Graphics graphtal no bison no flex 1 0 tar Z Christoph Streit streit iam unibe ch The Dr Dobb s Journal s FTP directory ftp mv com pub ddj packages has Xsharp a fairly fast hidden surface displayer for the IBM PC Source code in C and assembler is included and Xsharp now has some simple texture mapping capabilities The GRAPHIC CONNECTION can be reached at the following numbers by modem 503 591 8412 voice 503 591 0134 FAX 503 244 0919 V 32bis V 42 bis MNP 24 hours a day This BBS is owned and operated by Vertech Design is located in Portland Oregon TGC specializes in material texture files custom bitmap design graphics utilities and programs and specialized scanning services There will also be a large message base with topic specific areas for all areas of CAD and graphics support I tried this BBS out some time ago but had trouble getting any material texture samples the directory which was supposed to have these publicly available was inaccessible for some reason I paged the sysop but he didn t seem to know what was wrong either EAH For 3D stereo supplies one source is Reel 3D s mail order catalog Reel 3 D Enterprises Inc P O Box 2368 Culver City CA 90231 Phone 310 837 2368 Fax 310 558 1653 Alexander Klein editor of 3D MAGAZIN klein nadia stgt sub org ftp rahul net 192 160 13 1 pub bryanw has a number of programs related to JPEG and MPEG generation and display Bryan Woodworth bryanw rahul net VIS 5D is a system for interactive visualization of 5 D gridded data sets such as those made by numeric weather models One can make isosurfaces contour line slices colored slices wind vector slices wind trajectories etc of data in a 3 D grid and then rotate and animate the image in realtime There are also features for text annotation and video production Systems supported SGI IBM RS 6000 Stardent Stellar FTP from iris ssec wisc edu 144 92 108 63 It is also available on wuarchive wustl edu in the directory graphics graphics packages brianp ssec wisc edu Brian Paul Disc 1 Graphics is a collection of more than 426 MegaBytes of popular public domain shareware and freeware graphics programs and data files The disc contains more than 1200 programs 16 000 files The cost of the disc is 24 95 plus 5 to cover shipping and handling 15 overseas Orders may be FAXed to 916 872 3826 Prepaid orders may be mailed to Knowledge Media 436 Nunnelley Rd Suite B Paradise CA 95969 USA Paul Benson pbenson cscihp ecst csuchico edu The Copyright Guide from the ASMP American Society of Media Photographers is available in digital form now FTP from ftp eff org pub cud papers asmp guide or ftp ee mu oz au pub text CuD papers asmp guide Z or ftp moink nmsu edu Although written from a photographers perspective the Guide might help to clear up a few points of confusion about copyright protection of images Don Smith dsp halcyon com back to contents Spectrum Overview edited by Nick Fotis Here s a glimpse of the SPECTRUM rendering testbed proposed by A Glassner in the Frontiers In Resdering Course Note 12 from SIGGRAPH 91 the architecture supports the following features o Standard radiosity and distribution ray tracing features energy balancing soft shadows depth of field motion blur spectral sampling etc o User control of most rendering parameters with defaults o Programmable shaders selected by the user in run time including textures o Programmable sampling techniques Any sampling strategy may be used including bu not limited to staticc or adaptive uniform or noisy Any sampler may be used to draw samples on any two dimensional distribution Higher dimensional samplers may be used as well nfotis I think that would be a better idea to separate rendering and reconstruction as G Ward does with Radiance o Programmable reconstruction techniques appropriate for any two dimensional signal such as illumination spheres and screen images o Programmable radiation patterns for light emitters o Programmable cameras selected by the user at run time o Easily extended object and meta object classes o Still and animated sequence rendering o Any geometric object may be a light emitter o Sampling and reconstruction are techniques unified across screen and object domains All sampling procedures are interchangeable whether they are sampling the image plane the illumination arriving at an object surface the texture of a region etc Similarly reconstruction techniques are equally generic and applicable to all domains A sampler is simply considered a technique for gathering information on a two dimensional distribution Callback procedures are used to control a sampler for the different purposes of screen sampling shading texturing etc o Shaders receive as input a description of the illumination sphere They are not responsible for determining the incident illumination at a point and they may reconstruct a sampled illumination signal before processing o The incident illumination sphere is described as a collection of samples of the incident light Typically one determines this sphere by first building a set of samples that are directed to light emitting objects they return the color of the light foud along the ray whether it actually reached a light emitter or not Then this set may be passed to an adaptive sampler as a seed or starting signal This increases the likelihood that light emitters are sampled and allows the incident illumination sphere to be adaptively sampled until the sampled signal meets the criteria for that sampler This illumination sphere is then passed to a shader for modulation vy the bidirectional reflectance distribution function of the surface at this point o Objects may be queried by a shader for information This contrasts with the Renderman model where a shader may expect a number of variables to be precomputed and available Since the shaders in this system are not precompiled from a special purpose language if is difficult to determine a priori what information a shader requires from an object Thus each object contains a procedure that accepts a request from a shader in the form of a list of requested geometric values and returns the relevant information There is a performance penalty for this process but it only occurs once per shading point I consider that the extra overhead to parse the request list is compensated by the time saved by not calculating unnecessary values o Colors may be specified in a variety of formats including spectral distributions o Meta objects accelerators CSG trees abstract structures etc are considered first class back to contents Comments on the Glazing Trick by Eric Haines erich acm org Hans Kilian iqkili cbs dk writes In vol 5 issue 1 in The Glazing Trick Haakan Andersson says that pumping up the specular exponent makes the shiny spot smaller and not sharper If I m not mistaken this is because he uses point light sources and not area light sources If he uses area lights he will get correct results I m sure that Haakan knows this but I got the impression that he felt that this was Phong s fault and it really isn t You re right in that part of the problem is that he s using point lights However Phong s highlights are basically a way to simulate surface shininess After all a true point light would never reflect well except at one single point in a surface if the surface was perfectly reflective with no spread in the reflection Essentially Phong s trick is to spread out the reflected light in a cosine to a power distribution and note the value of this distribution from the eye s view angle a wider distribution gives a duller looking surface When you have area lights you can t use this easily you either have to reflect the lights directly in which case the lights are seen in the reflection as if the surface were perfectly reflective or you have to sample the area a sufficient amount to get the phong highlights and sum and scale these In theory what works for lights should work for light reflectors in the environment In other words you could sample the environment i e ray trace from the view of the surface and use Phong highlighting on these sample rays and so get a shiny or dull looking surface If you re smart you ll simply use the Phong distribution itself to determine where the rays are shot shooting more rays in the higher contribution areas This has been done and looks pretty good with enough reflection samples The problem with Phong s trick is that it is not energy conserving at all a low cosine power gives a lot more total energy light reflected from a surface than a high cosine power Phong kept peak intensity constant which is important for making it easy for a user to adjust the specular highlight s look but is lousy from any physically based standpoint This lack of energy conservation hit home when I tried doing texture mapping of the cosine exponent Say you texture this exponent and it varies from 0 to 10 The weird effect is that the surface brightness is brightest around 1 or less if you allow The thresholding trick is a neat trick that I didn t know about and it ll save a lot of rendering time when you do use point light sources and still want a large shiny spot on your objects Yes essentially you re saying you want the surface to look perfectly reflective i e mirrorlike not like brushed aluminum and for the light to have a finite radius The only problem I see is that the thresholding trick does not take into account the distance the object is from the light so that the light will always be reflected as the same relative size no matter what the distance the light is from the object back to contents Net cullings follow Graphics Gems IV Announcement by Paul Heckbert ph cs cmu edu We ve decided to bring out Gems IV in 1994 not 1993 to keep the quality of the series high The deadline for contributions is in the late Spring of 1993 Write to Academic Press not me for more detailed information about how to contribute Graphics Gems Editor Academic Press 955 Massachusetts Ave Cambridge MA 02139 or email jswetland igc org And if you ve got ideas for contributions and you d like to discuss their appropriateness with me email me at ph cs cmu edu Suggestions and criticisms of the previous volumes are also welcome back to contents Announcing the ACM SIGGRAPH Online Bibliography Project by Stephen Spencer biblio siggraph org A new resource for researchers is now available to the computer graphics community Over 15 000 unique bibliographic references from the computer graphics field have been compiled into a single database for use by students researchers and the computer community in general The project started with the DEC online computer graphics bibliography which covered the years 1976 through 1986 and added the contributed bibliographic databases of a number of individuals expanding the years covered as well as the sources of information This database includes references from conferences and workshops worldwide and from a variety of publications from magazines and journals to books dating back as far as the late 19th century The majority of the major journals and conference proceedings between the mid 1970 s and 1992 are listed here The database is formatted in the BibTeX bibliography entry format an easy to read and understand ASCII format It is organized into files by year except for the entries prior to 1975 which are collected into one file by themselves A set of tools for manipulating and searching the bibliography database is also available for downloading The database is available for anonymous FTP from siggraph org 128 248 245 250 in the publications bibliography directory Use anonymous as the username and your electronic mail address as the password to gain entry to the FTP area on this machine Please download and examine the file READ ME contained in the publications bibliography directory for more specific information concerning the database This project is an ongoing concern We plan to expand the bibliography both keeping it up to date as well as filling in missing pieces large or small and polishing and refining the format of the existing database In addition plans to provide interactive online searching of the database are underway Alternative distribution channels are also being considered Volunteers are always welcome Contact biblio siggraph org for more information on what needs to be done Questions corrections suggestions and contributions of material to the database can be directed to biblio siggraph org on the Internet back to contents A Brief History of Blobby Modeling by Paul Heckbert ph cs cmu edu I deleted the reference if you want these check the online SIGGRAPH bibliography see elsewhere in this issue for details EAH People have known for a long time that if you have two implicit surfaces f x y z 0 and g x y z 0 that are fairly continuous with a common sign convention f and g positive on the inside negative on the outside say then the implicit surface defined by f g 0 is a blend of the shapes See Ricci 1983 for a variant of this The van der Waals surfaces of molecules roughly speaking iso potentials of the electron density are described in Chemistry and Physics books and Max 1983 To create animation of DNA for Carl Sagan s COSMOS TV Series Jim Blinn proposed approximating each atom by a Gaussian potential and using superposition of these potentials to define a surface He ray traced these Blinn 1982 and called them blobby models Shortly thereafter people at Osaka University and at Toyo Links in Japan began using blobby models also They called theirs metaballs or when misspelled meatballs Yoichiro Kawaguchi became a big user of their software and their Links parallel processor machine to create his Growth animations which have appeared in the SIGGRAPH film show over the years The graduate students implementing the metaball software under Koichi Omura at Osaka used a piecewise quadratic approximation to the Gaussian however for faster ray surface intersection testing no need for iterative root finders you just solve a quadratic I don t know of any papers by the Japanese on their blobby modeling work which is too bad because they have probably pushed the technique further than anyone Bloomenthal has discussed techniques for modeling organic forms trees leaves arms using blobby techniques Bloomenthal 1991 though he prefers the term implicit modeling and for polygonizing these using adaptive surface tracking octrees Bloomenthal 1988 The latter algorithm is not limited to blobby models but works for any implicit model not just blobs Polygonization allows fast z buffer renderers to be used instead of ray tracers for interactive previewing of shapes A less general variant of this algorithm was described in the marching cubes paper by Lorensen 87 and some bugs in this paper have been discussed in the scientific visualization community in the years since In the sci vis community people call them iso surfaces not implicit surfaces Meanwhile in Canada and New Zealand the Wyvill brothers and grad students were doing investigating many of the same ideas approximations of Gaussians animation and other ideas See their papers listed below Rather than blobbies or metaballs they called their creations soft objects But it s really the same idea Bloomenthal and Wyvill collected many good papers on blobby and implicit modeling for a recent SIGGRAPH tutorial 1991 back to contents Cool Raytracing Ideas Karen Paik paik cgl citri edu au Karen comments on In general removing common sense restraints from rendering equations gives you flexibility to do a lot of ad hoc effects At Compugraphics 92 M Beigbeder and V Bourgin presented a paper titled New Perspectives for Image Synthesis in which they used artistic perspective projections instead of the usual one They had a fishbone perspective and a circular perspective These perspectives broke a lot of the fundamental assumptions Straight lines weren t always straight after they were projected and light didn t always travel in a straight line back to contents Optical Effects and Accuracy by Sam Uselton uselton wk207 nas nasa gov In article oberto genes icgeb trieste it Jacques Oberto writes I am trying to reproduce one of Newton s experiments with POV Would a simulated white light beam hitting a glass prism with the right angle be scattered into a rainbow spectrum Are POV and other ray tracers optically accurate in that respect Has anybody tested the properties of raytraced light other than reflection and refraction I don t know POV BUT If it is in the tradition of the standard ray tracers it starts at the eye shooting rays through pixels into a scene Essentially this is tracing ray paths in reverse Generally speaking ray paths are reversible so this is fine There are however difficulties When a ray hits an object in addition to reflected and refracted rays rays to the light sources must be generated to determine shadows intensity of illumination etc If one of these light source rays hits a refractive object it may no longer be headed for the light source once the refraction is done What one would LIKE to do is shoot the light source ray in a direction there may be several correct choices which will result in a ray pointed at the light AFTER the refraction Guessing what direction s this might be is HARD One solution is to shoot lots of illumination rays in various directions especially from a surface that is not perfectly specular use the BRDF as the distribution being randomly sampled distribution distributed ray tracing Another solution is to do the ray tracing from the light but then most of the rays won t get to the screen so the effort is wasted There are various schemes in the literature for getting around the difficulties but my guess is that they are not in most public domain code Another difficulty probably ignored in most PD code is that in order to break out the spectrum the refraction angle must be calculated on a wavelength dependent basis generally with a single ray turning into several rays to properly sample the spectrum We Redner Lee Uselton have done an image of the experiment I believe you are describing It was accepted into the SIGGRAPH slide set and distributed last summer at the conference It does involve a forward ray tracing phase and some stuff to remember these results in a way that can be used in a traditional backward ray tracer Harder than it looks Also see Mitchell Hanrahan s article in SIGGRAPH 92 about this topic EAH back to contents Map Projections Reference Book by Mike Goss goss CS ColoState EDU One of the best reference books for map projections is Map Projections A Working Manual by John P Snyder USGS Professional Paper 1395 US Gov t Printing Office 1987 383 pages It s available directly from USGS and was 20 a few years ago In the USA call 1 800 USA MAPS 1 800 872 6277 for ordering info Snyder covers all the projections used by USGS and a few others For each one he gives a bit of history some explanatory material detailed formulas and examples There is also some source code available for anonymous FTP at spectrum xerox com under directory pub map source I haven t used it but I ve seen it there back to contents A Brief Review of Playmation by Chris Williams chrisw fciad2 bsd uchicago edu Playmation is a good quality ray tracer and one of the few that renders patches Catmull rom The base package only renders at 256 colors but an they offer a 24 bit DOS based renderer for 100 00 It s a very nice renderer and renders with an 8 bit alpha channel The major nice points of the package are its modeler and animation capabilities I may review this entire package in the future BTW Will Vinton has had nothing to do with the software other than lending it his name The program has been in development on the Amiga for several years as Animation Apprentice then as Animation Journeyman It s still available on the Amiga and Mac and SGI versions are supposed to be in the works and in a later post If you are familiar with patch based modeling it is a fairly powerful modeling interface It IMHO gives Alias a run for the money at a tiny fraction of the cost I consider it the poor person s Alias back to contents PV3D Quick Review by David Anjo david anjo canrem com I promised one individual on the net s that once I had received my registered copy of PV3D I would post a general brief review of what I have found First and foremost the most current version of PV3D is v 0 50 I did download it from The Graphics Alternative BBS 510 524 2165 2780 before I received my copy in the mail I do not have ftp status from the mail site I use so I cannot suggest a location for those so inclined I would suspect that You Can Call Me Ray BBS 708 358 8721 5611 will have a copy available of v 0 50 I mention this because YCCMR is a free access board while TGA is subscriber based I highly recommend both systems for anyone interested in PC based raytracing The features included within the shareware version are identical to those in the registered version save the following you can save a created scene file for future manipulation the registered version includes two additional utilities of which one I have found to be most handy a screen capture to texture map facility very nice Source code is included for both larger screen previews of the online texture maps included with the product The preview screens certainly help in picking an appropriate texture for that object especially when you forget what the ell GRNT9 is supposed to look like As per the point above there are simple instructions on how to incorporate your designed textures to this online library a host of sample triangled DXF files something I certainly appreciate given the sweat I ve had creating them Their integration is seamless BTW For those who do not know what PV3D is here s a brief review PV3D is a wireframe modeler for those PC based raytracers using Persistence of Vision It is something more oriented towards the novice PoV user and for even the advanced experienced souls who just want to get on with creating hopefully interesting raytraced artworks Beyond providing the basic primitives sphere quad sphere cylinders cones cubes pyramids positive and negative blobs planes and torii PV3D can also generate spline based objects You can incorporate triangled DXF files Multiple lights can be positioned as well as the look at and camera locations very easily You can preview the textures used and the colours applied corresponding surface highlights to individual objects It is reasonably priced 250 Frebch Francs and although still in a beta stage extremely promising It has cut down my code time dramatically increasing my creative time ten fold I m a computer based artist and the goal is to produce art PV3D is a major benefit in that pursuit Back to the latest version The biggest change in v 0 50 as far as I m concerned is the new View 3D option This will give you a world view of your scene from the perspective of the camera location This is a major advantage especially when you get up close to the maximum of 150 objects and you are quite simply lost I know I certainly have been in the past Very nice addition The documentation is still hurting from a lack of a suitable French to English translation but I intend to offer my assistance in that regard Mind you if the author s English is bad my French is a lot worse I will be seeking a good translation program in this effort any suggestions for a bi directional program would be much appreciated unfortunately I didn t receive the second part of the review at our site so this is all there is EAH back to contents Bounding Volumes Sphere vs Box by Tom Wilson wilson cs ucf edu For those learning about the value of bounding volumes here s a summary EAH djb geovision gvc com Darren Burns wrote I had been under the impression that it was quicker to intersect a line with a sphere than with a box I just did a timing test Basically I had a bunch of spheres or boxes sitting there and I ray traced the scene once using spheres and once using boxes I found that the boxes were faster not a lot 11 seconds for spheres vs 9 for boxes The volumes were about the same for both types of objects actually the spheres were a little smaller You must be careful when drawing your conclusion I ve found 3D boxes faster too but it is very dependent upon what s inside as to whether or not it will be Depending on how optimized your code is the sphere BV may be faster to intersect with a ray but the comparison doesn t end there When a ray hits an object inside the BV both the sphere and the box are a waste of time When the object inside the BV is missed it is up to the BV to cull as many rays as possible You want to perform the ray object intersection code as few times as possible when it will miss the object you obviously must execute the code when there is a hit Also you must take into account the relative execution times of 1 ray sphere as BV int 2 ray box int and 3 ray object int If 3 is much greater than both 1 and 2 you may get a better answer from your test Suppose you have 2 BVs BV 1 is the slower of the two but culls more misses BV 2 is the faster of the two but culls fewer misses Which is better That depends on how many rays are actually involved in the comparison but let s be sloppy and just say if the time saved by using the faster BV 2 is lost by executing the slower ray object routine more times BV 1 may actually be the better choice Too many tests involve spheres or boxes around simple triangles Basically you are introducing yourself to an old but difficult to fully solve problem Much work has been done on the choice of BVs Couple that with a construction of a hierarchy of BVs and you really have a mess Find some of the bibliographies at ftp sites to see the work that has already been done also you might find my collection of ray tracing abstracts which might give you a clue about what is discussed before you actively seek the papers send me e mail for more details if you d like I don t want to bother at the moment The text An Introduction to Ray Tracing has a sufficient explanation of the background material The only strong conclusion I can make is that boxes work best for the scene s you tested They may be a good choice in general but that s a dangerous statement I hope I made some helpful comments Others are appreciated Me I ve given up bounding volume spheres and even ellipsoids boxes seem to almost always have tighter bounds and having only one bounding volume throughout your program saves a lot of messing around in the code EAH back to contents Raytracing Swept Objects by Mark Podlipec podlipec dgxyris webo dg com In article bagchi eecs umich edu Ranjan Drzzzzt Bagchi writes Consider this object I take a curve between two endpoints and rotate it 360 degrees about the y axis How would I go about ray tracing the solid I ve just swept out I ve given this some thought and I m fairly sure that in the general case this is quite difficult But are there any classes of curves which sweep out solids which are easy to get ray intersections and surface normals I ve implemented an object for rayshade a couple of years ago which is pretty similar to what you ve described I call it cubicspin You take any curve described by a 3rd degree polynomial and rotate it about an arbitrary axis End points are also specified A third degree polynomial rotated like that becomes a 6th degree polynomial and then you can substitute in the ray equations to find the point of intersection Throw in some checking for the end points and there ya go This is the brute force method I use natural cubic splines to specify the curve Now if you started with a 4th degree curve you would have to solve 8th degree equations etc But for the most uses the extra degrees don t buy you much My favorite article on this topic is still A Jarke J van Wijk T Ray Tracing Objects Defined by Sweeping Planar Cubic Splines J ACM Trans on Graphics V 3 N 3 D July 1984 P 223 37 EAH back to contents Ray Transformation by Kendall Bennett rcskb minyos xx rmit oz au an article for people trying to implement the viewing transform EAH belme waterloo hp com Frank Belme writes I was wondering what a good way is to calculate the direction of each ray for ray tracing a scene given an eyepoint eye direction and field of view angle Any help would be appreciated Thanks There is actually a better way of doing this that can take into account aspect ratio and fields of view prior to actually computing the ray direction the speedup in this routine are generally not that noticeable but it is nice to have something elegant The first step is to compute two vectors one in the direction of increasing x coordinates for the image and one for increasing y coords that are scaled to be the length of a pixel in each respective direction aspect ratio calcs go in here Then compute a vector that points towards the upper left corner of the screen I will give pseudo code later When you have this information you can quickly create any ray to fire by simply adding appropriately scaled versions of the x and y direction vectors to the vector pointing to the first pixel of course you want to normalise the final vector PreProcessing stage xdir 2 lookDistance tan hfov 2 xres ydir 2 lookDistance tan vfov 2 yres ydir aspect Adjust y pixel size given aspect ratio LLdir camera dir xdir xres 2 ydir yres 2 Computing the ray to fire dir LLdir xdir x ydir y dir dir normalised and you are done not rotations just simply vector additions and scales this is almost directly taken from my C ray tracer back to contents Eric Haines erich acm org Ray Tracing News Volume 6 Number 1 Ray Tracing News Volume 6 Number 1 Ray Tracing News Volume 6 Number 1 Ray Tracing News Volume 6 Number 1 Ray Tracing News Volume 6 Number 1 Ray Tracing News Volume 6 Number 1 Ray Tracing News Volume 6 Number 1 Ray Tracing News Volume 6 Number 1 Ray Tracing News Volume 6 Number 1 Ray Tracing News Volume 6 Number 1 http www acm org tog resources RTNews html rtnv6n1 html http www acm org tog resources RTNews html rtnv6n1 html http www acm org tog resources RTNews html rtnv6n1 html http www acm org tog resources RTNews html rtnv6n1 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv6n2.html%%==%%Ray Tracing News, Volume 6, Number 2%%==%%Ray Tracing News "Light Makes Right" July 1, 1993 Volume 6, Number 2 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%61726%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right July 1 1993 Volume 6 Number 2 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1993 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction New People Ray Tracer Races Round 2 by Eric Haines Simple Fast Triangle Intersection part II by John Spackman Review Photorealism and Ray Tracing in C and others by Eric Haines Comments on Various Ray Tracing Speedups by Andrew Woo Errata to Photorealism and Ray Tracing in C compiled by Eric Haines InterChange Plus Model Texture Data CD ROM by John Foust Ray Tracing Roundup Net News Cullings Re Intersection Between a Line and a Polygon UNDECIDABLE by Allen B Obfuscated Postscript Ray Tracer by Takashi Hayakawa Introduction Ugh what a backlog I ve tried for a month to find time to catch up with the deluge but seem to be running on a treadmill so how many mixed metaphors is that Anyway I m going to put out what I ve got think of this issue as coming out in April The Roundup is huge I tried to whittle what I could but there s been a lot of activity out there SIGGRAPH yes there will be another gathering of the clans i e the seventh meeting of the Ray Tracing Roundtable Sounds impressive Well it s simply an excuse to have a chance to meet other people interested in ray tracing and put names to faces As usual I ll give a brief intro people go around the room and briefly introduce themselves then we split up and talk about whatever This year we ll meet as a Birds of a Feather group BOF so look at the BOF sign at Registration for what room we re in I plan on a 5 15 pm meeting on Thursday after the papers By the way we re not a SIG this year because SIGGRAPH is charging 100 or so for setup cleanup fees or somesuch from SIGs but BOFs still seem to be free So who invented ray tracing Most people will say Appel in 1968 though twelve years later Whitted did the paper that brought it all together and Doug Kay also was working along similar lines at the time On the net the idea was floated that ray tracing came out of nuclear weapon testing True rays were used in simulations but this would be called ray casting at best it was not used to render realistic images By the same logic explorers of analytic geometry and ray object intersections could be considered the inventors Watt and Watt propose that Descartes was one of the first ray tracers because of his analysis of the rainbow By widening the definition of ray tracing even more it s maintained that Durer or one of his contemporaries was the inventor of ray tracing you know all those frustum and vanishing point drawings from around the Renaissance This question does bring up another that s a bit more profound would computer science have any existence without computers Some universities with a strong theory department would have us believe that computers are irrelevant to computer science Sure there was Boolean logic and finite math before computers but it s interesting to contemplate how much data structures sorting networks languages you name it would not exist if there was no hardware to make the theory have a point to it Computer science would be a disparate set of specialities in mathematics and nothing more A lot of computer graphics would go away with some linear algebra and analytic geometry being all that would be of interest Certainly the idea of figuring out a pixel s color would be up there with figuring out the next decimal place of pi as far as usefulness went What would people have thought of Foley Van Dam Feiner Hughes Computer Graphics if it were sent back 50 years Anyway I like the answer that Appel invented ray tracing then rightly ignored it as too expensive for the computers of 1968 back to contents New People John Foust Syndesis Corporation PO Box 65 235 South Main St Jefferson WI 53549 414 674 5200 414 674 6363 FAX Syndesis Corporation makes InterChange Plus a system of translators for exchanging data between 3D modeling programs such as AutoCAD DXF Wavefront Imagine LightWave 3D Studio and many others see announcement in this issue back to contents Ray Tracer Races Round 2 by Eric Haines Back in RTNv3n1 I timed Craig Kolb s Rayshade Mark Vandewettering s MTV and my own commercial code against each other Three years have passed and many new ray tracers are out there I recently received from Eduard Schwan a modified SPD package with new code by Alexander Enzmann and him SPD stands for Standard Procedural Databases and is a set of programs I created for testing ray tracer efficiency schemes available at princeton edu pub Graphics and other places The modified code allows output in formats other than NFF such as POV Vivid RTrace QRT Rayshade etc I hope to modify this code a little and distribute it with the next SPD release Since these new formats were now available I decided to have a race between the various ray tracers for just raw rendering speed I did not bother with QRT because I couldn t easily find it on the net it s pretty old and it does not have any efficiency speedups so almost everything will beat it I ran all tests on an HP 720 RISC workstation and compiled all ray tracers with optimized and profiler options Instead of using Vivid I used Bob which is essentially Vivid and which had source code available unlike Vivid I believe The source code is in Photorealism and Ray Tracing in C but not on the net reviewed elsewhere in this issue Rayshade runs fairly slow if the user does not take any action to improve efficiency However it is simple enough to add a spatial subdivision grid to the input data I added a grid of resolution ceil cube root of primitives to each database but did not include the ground polygon if present to the grid POV 1 0 has minimal efficiency support user defined bounding boxes which were too much work to use so I avoided these Vivid and RTrace both have automatic efficiency schemes the only way to go in my humble opinion Vivid Bob and RTrace are descendents of MTV s efficiency scheme and use Kay Kajiya space sorting to get a bounding volume hierarchy Note that if you have Bob you should definitely get the errata from wuarchive at graphics graphics books errata which has code which makes Bob 5 faster than the original code Two sets of tests were done one with SPD using a size factor of 1 which creates databases with from 4 to 147 primitives the other with the default size factors which gives 4000 to 10 000 primitives Small level 1 databases from 4 to 147 primitives times in seconds balls gears mount rings teapot tetra tree POV 1 0 377 32 31609 4 697 62 1853 09 1103 54 62 74 408 01 Rayshade 4 0 6 140 34 2126 6 143 38 472 45 330 24 32 94 116 18 Rayshade w grid 98 41 380 2 110 00 111 30 112 84 35 26 85 71 Bob Vivid 97 16 733 9 88 67 161 76 141 15 30 72 76 56 RTrace 114 55 867 2 141 96 183 59 no go 39 77 93 67 Notes Something screwy happened with converting cylinders for the rings database for POV this is probably the converter s fault not POV s so this database did not render correctly The cones for the tree database seemed weird at the ends too though they did render RTrace did not render the teapot at size one as it reasonably enough balked when it encountered the degenerate polygons with 0 0 0 normals These polygons have no area so can t be seen but their data is indeed bad POV and ungridded Rayshade can be compared for raw object intersection speed Rayshade wins by 2x or more Adding the efficiency grid to Rayshade makes performance increase by up to 6 times even with these simple scenes the exception is tetra which has only four primitives and in which the grid slows down performance Bob edges out RTrace by a little bit maybe 20 and is sometimes better sometimes worse than gridded Rayshade I should mention that I ran Rayshade with all objects casting opaque shadows so as to be comparable with POV and Bob and RTrace near as I can tell True filtered shadows would take awhile longer to compute for the gears database Default size SPD databases time in seconds balls gears mount rings teapot tetra tree POV 1 0 191000 1775000 409000 260000 45000 31000 250000 Rayshade w grid 173 04 326 7 158 22 327 38 133 75 54 43 147 05 Bob Vivid 398 83 1060 5 224 79 831 71 245 12 48 42 272 87 RTrace 667 25 1488 6 805 65 fail 347 15 156 78 371 39 Notes The POV times are approximate made by extrapolating the time for an 8x8 pixel rendering minus the time for a 1x1 rendering i e minus file read in time The record for POV goes to gears which would take about 3 weeks to render RTrace had a runtime too many SURFACES on rings and so did not render it If you were off the planet for the past decade and didn t think efficiency schemes would gain you much these timings would change your mind Since POV 1 0 doesn t have any efficiency scheme its speed is a tad slow A good grid makes Rayshade run like a speed demon outperforming almost everything every time Bob outperforms RTrace by a higher margin at this point Conclusions If you are willing to get your hands a little dirty with setting up the gridding use Rayshade I hope Craig will make gridding default in the next version For painless rendering Bob Vivid is good though RTrace is in the running and supports some interesting primitives and all sorts of other support see the Roundup in this issue POV is fun but slow The good news is that version 2 0 of POV will have automatic efficiency generation and will be out in a few months It will also fix a shading bug I noticed strange bright lines at the light silhouette edges of shiny spheres In the meantime you can add bounding boxes by hand if you want ugh it does make a significant difference in speed If anyone else has filters for SPD output for ART or any other competitors please do pass them on to me and I ll give them a whirl back to contents Simple Fast Triangle Intersection part II by John Spackman spackman lightwork co uk This is in response to last issue s article by Chris Green Steve Worley and myself on half plane testing for the inside outside test for ray tracing triangles John has a good illustration for what the barycentric coordinates mean EAH When the maths are boiled away the barycentric test IS the half plane test with the extra advantage that the half plane heights values are normalised o to the range 0 1 over the triangle s extent o to sum to 1 within the triangles supporting plane good for interpolation Taking a barycentric alpha beta gamma coordinate system for the triangle T beta 0 gamma 0 beta 1 gamma 1 A alpha 1 TT TTTT TTTTTT TTTTTTTT alpha 0 TTTTTTTTTT B C T alpha beta gamma alpha 0 beta 0 gamma 0 eg A 1 0 0 B 0 1 0 C 0 0 1 Notice that alpha is simply height above the alpha 0 half space plane beta is simply height above the beta 0 half space plane gamma is simply height above the gamma 0 half space plane In effect the triangle is simply the intersection of 0 1 slabs in alpha beta and gamma Of course it is true that taking alpha beta gamma over a projected 2D space may be faster than in full 3D space but that s something else again in a later note With the Half spaces you only get an early get out if alpha With the Barycentric coordinates you get an early get out if alpha 1 0 In other words the former regards a triangle as an intersection of singly bounded three half spaces whereas the second regards a triangle as an intersection of doubly bounded slabs John also points out But the half space test is just a homogeneous dot product height x y z 1 s t u v for the plane with outward normal s t u displaced at distance v from the origin in this direction Therefore height x y z 1 s t u v normalise normalise x y z 1 s t u v where s s normalise t t normalise u u normalise v v normalise is the same as the Barycentric test So just store s t u v instead of s t u v All normalisation is then precomputed the Barycentric test becomes as cheap as the half space test and the Limeys have saved the world again Eric Haines replies True that you get an early out with the bounding slab and I thought this would be a big win I included a lot of statistics here which basically come up with the result that the two tests are pretty similar in performance under a variety of conditions I will not bore you with the minutiae However doing the precomputation is certainly a win vs using the straight barycentric test see RTNv5n3 for code One interesting speedup that Steve Worley and I discussed for Chris Green s method is sorting the edges of each triangle by its length Longer triangles will tend to cut larger parts of the area of the bounding box surrounding the triangle away and so will cause earlier rejections of points outside the triangle The long and short of it was that this trick indeed decreases overall testing time in general and is simple to add to the preprocess for creating triangle half plane sets Steve points out that just getting the longest edge first should help a fair bit and be an even faster preprocess though I did find that the full sort helped a tad more Sorting the two edges touching the anchor vertex for the Barycentric test helps a bit too Some interesting related sorting possibilities exist for convex polygon testing If the triangle test is used then the largest triangles should be tested first in order to maximize the chance of an early hit If the exterior edge test test the point against all edges if it is outside any edge then you are done is used then there is an optimal ordering of edges to test in order to cut off the maximum amount of area per edge tested Getting this optimal ordering looks like an NP complete kind of a problem though This is pretty surprising given that the problem appears fairly simple on the face of it back to contents Review Photorealism and Ray Tracing in C and others by Eric Haines Photorealism and Ray Tracing in C is by Christopher Watkins Stephen Coy and Mark Finlay It s available through M T Books in paperback and comes with two PC 5 1 4 HD disks of code and data 482 pages 48 color plates 44 95 ISBN 1 55851 247 0 This book discusses most facets of ray tracing with a hands on perspective There are many code fragments scattered throughout along with a fully functional ray tracer Bob which is a descendant of Vivid A simple modeler and a back end to dither and display images on a PC are also provided Though the code is PC oriented I had very little difficulty compiling the ray tracer on my UNIX workstation Not a lot of space of the book is devoted to PC specific topics maybe 40 pages The disks include polygon models for a human skull an egyptian mummy head a human face a heart a duck a column Venus de Milo some cars chess pieces and other objects There are also a bunch of little programs which generate various procedural models which are enjoyable in their own right Also included are some texture maps The basics are covered along with some additional topics such as procedural modeling color and bump texturing depth of field effects soft shadows height fields and others There is not much heavy theory presented as the book strives to teach the lone hobbyist or student without risking losing them The color plates are a good mixture of educational and just for fun images and some of the renderings are excellent I believe the data to render all of the plates is present on the disks There are a few shortcomings with the book One is common to many computer paperbacks that of listing pages and pages of uninterrupted code This book is nowhere near the worst offender I ve seen but there are a fair number of pages of code which have little reason for being on the printed page e g does anyone really want to read noise function code Sampling every 20th page 20 40 60 of the book and seeing what was there I found 11 out of the 24 pages were code a fairly high ratio This translates to about 220 pages of code Some is useful to publish the rest is just bulk Another problem which is more serious is non standard terminology The ones I noticed height fields are referred to as z buffers the translation factors in a 4x4 matrix are presented in the first column with W in the top row instead of last row column the function to transform normals trans normal works but using the transpose of the inverse of the matrix would be faster and more readable An errata listing for this book is included elsewhere in this issue and the most current listing is kept at wuarchive wustl edu graphics graphics books I was dismayed to see under Where to Now a section at the very end of the book that the only books listed as places to go next were those sold by M T Books However at least there were references to some related papers and books though beware of typoes in the Bibliography There are some other minor problems but the book seems pretty solid otherwise Stephen Coy sent me a list of corrections which I will try to edit up and get put in the graphics book errata area at wuarchive If you wish to understand the basics of ray tracing and quickly get a ray tracer going on your machine consider getting this book Of the disk in the back trade books out there this one is reasonable in its approach and covers a wide range of topics From what I can tell it seems to be the best with code book currently on the market BOB VIVID is the fastest free well you have to get the book if you want the source ray tracer available today Rayshade datafiles can be tweaked to be made faster but this involves sometimes complicated user intervention There are a few other trade books on ray tracing Roger T Stevens Fractal Programming and Ray Tracing with C is fairly old and nowhere near as good see RTNv4n2 for a brief scathing review A book I have not had the opportunity to read i e I don t want to fork out for it is Craig Lindley s Practical Ray Tracing in C around 49 95 from Wiley which has a disk of software for DKB Trace the ancestor of POV What little I glanced at was not quite right For example someone pointed out his ray definition is a little odd Indeed he says the t in point origin t direction stands for time Not really it s just a parameter and it certainly does not stand for time unless your name is Ping Kang Hsiung and you re doing relativistic ray tracing I also have not seen the book The Image Lab from Waite Group Press so cannot say much about it This book is a collection of shareware freeware programs such as the POV ray tracer the PICLAB image processing program CSHOW for viewing graphics files IMPROCES super VGA paint program and Image Alchemy image converter all of these programs can be found on the net It seems unlikely that the book has much of a chance to go into any detail about POV s basis given the number of programs included As an aside Bob is faster than the current POV 1 0 and does not show any serious rendering bugs see the timings test article in this issue For more advanced or textbook type material there are a few good choices though none have any code provided with them An Introduction to Ray Tracing by Glassner et al including myself is a bit old but still a comprehensive overview of the theory though it is a little disjoint at times and weak in some areas of interest e g texture mapping I should mention this book is now in its fourth printing and all the typos and mistakes we know about have been corrected Watt Watt s new book Advanced Rendering and Animation Techniques Theory and Practice is a good unified guide to advanced rendering in general and I highly recommend it Think of it as a condensed and simplified Best of SIGGRAPH for the past decade and you won t be too far wrong I hope to review it next issue Foley and Van Dam and Feiner and Hughes Computer Graphics includes an overview of ray tracing if you don t feel like learning too much other recent textbooks also include summaries of the algorithms involved back to contents Comments on Various Ray Tracing Speedups by Andrew Woo awoo alias com With respect to Steve Worley s speedup idea with multiple grid orientations An Easily Implemented Ray Tracing Speedup RTNv6n1 Our raytracer at Alias raytraces in eye space i e eye is at 0 0 0 staring perpendicularly into the scene Andrew Pearce did this to be consistent with our non raytrace renderers This requires an initial transform of everything at the beginning lights geometry etc However this has turned out to be quite advantageous for our raytracer Working in eye space means that most of our primary rays will benefit from Steve s multi grid idea i e most primary rays are almost in the grid orientation According to Steve s assumption working in eye space is then most idea for primary rays for orthographic cameras However I have found little performance increase with this maybe because our raytracer already has ray bounding boxes ala Snyder Barr Siggraph 87 and the advantages of Steve s approach have already been accounted for by the ray bounding boxes Maybe not keep on hacking Steve interesting idea you have here Onto the bounding areas for ray polygon intersection by Steve Worley and Eric Haines The general ray polygon process that I find useful is very similar to yours 1 back face culling same as you suggested 2 intersect with the polygon plane and determine a distance value T This evaluation is simply T d N O N D where N d form the plane equation O ray origin D ray direction 3 check that T epsilon and T There is no need to intersect with the ray intersect the polygon bounding box that s too expensive And I do step 4 with respect to the 3d polygon bounding box because I already have those for the ray bounding box approach This is actually identical to what I use Steve s 2D bounding test is just a slightly faster way to do step 4 since you can precompute once which plane to cast the polygon upon you can also precompute once which 2D box to use and you can combine the two this is of course if you like longwinded duplicated code for speed me though I can see its use I haven t implemented the 2D test since it s just too much hacking EAH Now here s the neat extension to eye space raytracing for perspective again Since the primary rays always have a ray origin at 0 0 0 the evaluation of T just becomes d N D and the intersection point is now just TD This can be advantageous for some traversal schemes as well where O TD needs to be evaluated quite often I was also hacking with reducing the T evaluation for future generation rays I was able to reduce the floating point count but found little improvement sigh Ok I will stop shooting off my mouth and get some work done back to contents Errata to Photorealism and Ray Tracing in C compiled by Eric Haines book contact Stephen Coy 70413 136 compuserve com Compiled by Eric Haines erich acm org from Stephen Coy s notes and my own The newest version of this errata listing with all the code patches is in wuarchive wustl edu graphics graphics books errata version 1 0 date 6 23 93 plate 2 Image should be rotated and returned to correct aspect ratio plate 17 Text should be Varying texture amplitude on spheres plate 18 Text should be Varying texture terms on spheres plate 34 Sphereflake not Sphere Lake pg 124 define NLAMBDA has the comment not used anywhere true this is just left over from Mark Vandewettering s code upon which Bob is based pg 157 Equation 6 1 is totally messed up Should be REFL DIR RAY DIR 2 RAY DIR dot NORMAL NORMAL pg 164 is simply to cast more than one ray per screen pixel in other words subsampling should say supersampling pg 168 top in the code as parallax projection should be flat projection pg 168 Note that most of the samples have up 0 0 1 not 0 1 0 and the left vector is calculated from up and the to and from points pg 168 169 Seems to imply that spherical projection differs from fisheye It doesn t pg 169 Replace Parallax with NoParallax pg 170 The sphere in plates 9 10 is reflective not transparent pg 173 Bob s adaptive supersampling does not cast a ray through the center of the pixel It first looks at the corners pg 176 Where it says Figure 7 3 shows it should say Plate 20 shows pg 221 Replace baricentric with barycentric pg 230 The reference to figure 8 6 should be 8 5 pg 232 top For example a list of 10 requires on average five intersection calculations per ray WRONG the correct answer is 10 lights 5 reflected refracted pg 234 paragraph three Now compare the maximum of the tnear values and the minimum of the tfar values If the ray intersects the volume then tmax is greater than tmin No correct this to Now compare the maximum of the tnear values tmax and the minimum of the tfar values tmin If the ray intersects the volume then tmax is less than tmin pg 241 2nd paragraph if the value of t for the bounding volume of the node is less that the current tmin value should say greater than pg 274 near bottom The reflecting sphere would be next to impossible without great additional cost if solid texturing were not used Huh What sphere This sentence looks lost pg 333 Replace Kunni with Kunii pg 351 A less overloaded term than z buffer would be heightfield pg 473 Replace Carpender with Carpenter pg 474 Replace Glasner with Glassner Peachy with Peachey Code patches The patches for the code are attached at the end of this file Tokens c has a fix to correct a bug in the handling of numbers in scientific notation Inter c has been optimized in a big way and gains an additional 5 overall for the raytracer Sponge zip contains the correct version of the program to generate the sponge image in the book Porting to a unix system is pretty trivial A makefile is needed and little in the code needs to be changed The delimiter in file c on line 70 may have to be modified The code uses so those using will have some macro defines ahead of them patches are not included here for brevity if you can t ftp the errata I can send them to you EAH back to contents InterChange Plus Model Texture Data CD ROM by John Foust Syndesis Corporation 76004 1763 compuserve com Though a tad pricey I thought this CD ROM and software was of sufficient interest to readers here to warrant publication Also note the offer of free if you contribute to it The text is written by a representative of the company but sounds reasonable BTW I m certainly interested in noting any other commercial products out there that are related to ray tracing and are affordable by mere mortals i e less than 300 is a good target less than 100 even better EAH My company makes InterChange Plus a system for translating between many different 3D modeling file formats We ve been in the Amiga market since 1987 but we re moving to Windows later this year The Syndesis 3D ROM is a CDROM collection of more than 500 freely distributable 3D models all present in AutoCAD DXF 3D Studio Wavefront obj Video Toaster LightWave and Impulse s Imagine PC Amiga formats We didn t attempt to fix the normals from objects that have random orientation Since InterChange doesn t do that yet I didn t want to mislead people about its abilities It s also got more than 400 tileable wrappable texture maps It includes a fully indexed cross referenced catalog of the objects The disc includes demonstration models from companies such as Viewpoint Animation Engineering All 28 Viewpoint demo models are present including the yet unreleased Siggraph 93 set More demo objects were contributed by Noumenon Labs VRS Media Mira Imaging and other commercial modeling companies The 3D ROM is a demonstration of the translation abilities of InterChange Plus Syndesis s system for converting between 3D file formats InterChange Plus translates between AutoCAD DXF 3D Studio Digital Arts Wavefront Swivel Sculpt VideoScape LightWave Imagine CAD 3D PAGErender and Vista DEM formats Soon to come is support for StereoLithography Macromedia 3DGF Super 3D Alias StyleGuide Topas Softimage Inventor and Vertigo formats All material and hierarchy information is preserved as best as possible We don t sell source but we do license to several companies in executable form This ISO 9660 disc is fully accessible from MS DOS Macintosh Amiga and Unix workstations The price is 199 95 If you d like to find out about this CDROM we d be glad to add you to our mailing list See us at Siggraph 93 booth 2244 Hall D We re not trying to get into the 3D object business we re trying to tell people about InterChange Plus and to get more freely distributable objects into the hands of artists We re going to make more editions of the 3D ROM with new objects In the newsletter we ll describe how people can send us objects and then get a free CDROM that contains their objects That s how we re going to thank everyone who contributed I d really like to flush out all those nifty university created and government created data sets and objects we re see over the years and convert them into useful popular 3D formats The Internet avalon site was kind enough to make me an 8mm Exabyte copy of the 3D collection there and I got the DEMs from the Xerox spectrum site Some of the avalon objects made it to the first disc and more DEMs will be present on future discs Syndesis Corporation P O Box 65 235 South Main Street Jefferson WI 53549 414 674 5200 414 674 6363 FAX back to contents Ray Tracing Roundup There are a few things of note in ray tracing software out there Rayshade is getting used more and more on workstations for serious rendering as in zillions and zillions of polygons for example POV has a ton of people cranking out utilities and whatnot RTrace does not seem to get the attention it deserves perhaps because of the sometimes hideous ftp connection to Portugal George Kyriazis any chance of mirroring this site at wuarchive It supports a good set of primitives and has a ton of converters to its format including some unique ones like IRIS Inventor IRIT etc see the RTrace section below for a diagram of formats supported The site wuarchive wustl edu will soon mirror the entire net At least that is how it s starting to look like if you re having problems getting into avalon chinalake navy mil or find faramir informatik uni oldenburg de too far away they are mirrored along with many other graphics hosts at wuarchive in mirrors mirrors graphics For animation for any ray tracer there is a utility called Animdat freeware shareware that will replace variable names in a template file and output a series of data files with the variables incremented in the right places hed cats ucsc edu There s also a very useful and similar package called RTAG It s a PC binary only though It is ASP software 20 by P Sherrod It supports more functions I believe than Animdat such as spline curves for animation paths If Animdat currently supports splines I apologize Last time I saw it it didn t It s worth a look if you have a PC and do animations with any of the popular raytracers the Rtag and Animdat packages aren t hard coded to deal with only POV I ve uploaded it onto wuarchive wustl edu 128 252 135 4 under pub msdos uploads graphics rtag20 zip Russell Webb rwebb nyx cs du edu This commercial program has a large and devoted group of Amiga users out there and their mailing list requests imagine request email sp paramax com is quite active EAH There is a new product for the IBM ers out there It is called IMAGINE and it just started shipping I can personally attest that it will blow the doors off of 3D Studio It is made by IMPULSE and is in its 3rd version 1st for the IBM It can do morphing your standard key framing animation it is a raytracer reflections shadows and can do apply special FX to objects like ripple explode bounce things of that nature Also it has algorithmic texture maps and your standard brushmapping also You can have animated brushmaps i e live video mapped on the objs also animated backdrops i e live video backgrounds also animated reflections maps Don t let the low price fool you this product can do it all when it comes to 3D animation and rendering Tony R Boutwell trb3 Ra MsState Edu I finally received the information about Imagine for the PC They are presently shipping Version 2 0 of the software and will release Version 3 0 in the first quarter of 1993 or so they say The upgrade from 2 0 to 3 0 is 100 00 To purchase Imagine 2 0 it costs 495 00 or if you are upgrading from another eligible call them for info modeler it is only 200 00 plus shipping handling It requires a PC with 4 Megs a math coprocessor and DOS 5 0 or up and a Microsoft mouse and SVGA card Scott A Snowiss sasst11 pitt edu I work the same hours as Impulse so I had a friend call them for me They told her the price was 495 but I could get it for 200 if I would send in a photocopy of the manual cover from another ANIMATION program She asked them what animation program would do They asked her which animation programs I had She told them Deluxe Paint Animation and Disney s Animation Studio They said either one would do Jim Nobles usenet ornl gov Impulse Inc 8416 Xerxes Avenue North Minneapolis MN 55444 1 800 328 0184 The ray tracing and radiosity bibliographies that I maintain were updated around January of 1993 with the previous year s new references See the computer graphics FAQ for more info or just get them at princeton edu pub Graphics EAH The 5th and perhaps final release of the collection of ray tracing abstracts is ready I ve put it in several ftp sites the usual such as princeton edu pub Graphics ask Tom if you need one near you Get rtabs 4 93 shar Z The abstracts RTabs tex are only available in Latex form now Significant changes have been made A second file RTnew tex contains just the abstracts added since the last release if you don t want to print the whole thing again Version 5 April 1993 Number of printed pages RTnew 11 RTabs 95 Number of abstracts RTnew 34 RTabs 334 45 non unique refs Tom Wilson wilson forest dab ge com In addition to the cyberware demo tar Z file mentioned last issue there is a new addition to the FTP site taurus cs nps navy mil pub dabro The file cyber tar Z contains some ASCII translations of a few of the 3D data sets that I did for someone who wanted a lower resolution data base It contains several polygonal descriptions of a head face skull vase etc The format of the files is a list of vertices normals and triangles There are various resolutions and the name of the data file includes the number of polygons eg phred 1 3k vbl contains 1300 polygons George Dabrowski Cyberware Labs dabro taurus cs nps navy mil Polyray is a ray tracing program written by Alexander Enzmann It is at uni oldenburg it s also mirrored at wuarchive in mirrors mirrors graphics It only comes in executable form for the PC but has some neat features that PoV does not have It also supports animation within the script file for the scene There is a utility called KALEIDO which generates the coordinates edge and face lists for 80 different objects My favourites are the dodecahedron icosahedron soccer football and other exotic polyhedra made from the combination of triangles squares and hexagons 18 and 33 It also includes the basic objects like the tetrahedron cube and hexahedron The author is Dr Zvi Har El rl gauss technion ac il KALEIDO is available from wuarchive wustl edu graphics graphics kaleido and at gauss technion ac il One slight problem is that the polygon vertex lists are not ordered for polygon rendering Gouraud shading I had to write a utility to do this automatically Michael S A Robb michaelr spider co uk Rayshade related A font consisting of upper and lowercase letters and numbers formed from cylinders spheres and torii is available font rh There are no restrictions on its use There is also a program text to rayshade c Paul Chamberlain tif austin ibm com Daniel Peisach peisach hydra rose brandeis edu I have placed the new rsdefs v2 0 on weedeater math yale edu in the incoming directory Changes include new objects chessboards text characters font rh rounded boxes cylinders and discs bathroom objects soap soap dish drinking glass toothbrush and glass holder jewels a better interface for using objects and surfaces in scene files and more example files For those who have never heard of the rsdefs package the package is a group of files for use with rayshade that are included into a scene file The files define commonly used settings constants macros surfaces and objects inorder to make them commonly accessible to the user and to help reduce the amount of work necessary for creating new scenes There are also several example files that show the use of the predefined creations that also serve as general examples for the use of rayshade The creations have been defined so that they impart no extra overhead in the way of memory to rayshade unless specifically invoked in a scene file The creations only exist in the C preprocessor s memory Objects and surfaces can be used either as instances or as named objects the name declaration for objects and surface declaration for surfaces The objects can also be used inside aggregates CSG list grid and can be followed by transformation calls that will transform the whole object Currently there are 57 surfaces 184 superprimitives 29 constants viewing parameters for several different output media and several macros and textures defined Larry Coffin lcoffin clciris chem umr edu By request I have placed the source for the stereo image pairs I generated a while back on weedeater math yale edu in the incoming directory The file is called ster src tar Z and contains the source for the subs pipes chains and view images Stuart Warmink sw groucho att com Joy over joy there s a new Inetray version out Apart from fixing a few un niceties it has one major advantage over version 1 0 1 it can be used in pipes and with stdin redirection This means that access to ray files is no longer necessary in the normal case Everything which is presented to inetray on stdin is automatically sent to all worker machines That means that something like this works echo sphere 2 0 0 0 inetray sphere rle Again NO remote file access is required Inetray is an application allowing you to concurrently raytrace an image using a lot of machines The task is dynamically distributed to all machines offering this service Inetray is based on the Rayshade 4 0 libraries It does not require any modification to the rayshade source and is compatible with all patches known to me As usual I uploaded inetray 1 1 0 tar Z to maggia ethz ch where it can be collected by anonymous ftp If you have any questions and or comments please send mail to Andreas Thurnherr ant bernina ethz ch The February 93 issue of National Geographic Magazine features a 3 page foldout generated with Rayshade The image shows the surface of Venus near a large double vented volcano named Sappas Mons The picture was generated from NASA Magellan radar and altimetry data using Rayshade 4 0 modified to deal with large 256Meg heightfields and image files The May issue of Scientific American has a short article on pp 26 27 which includes one of our Venus Landscapes The cover of the April 23 issue of Science Magazine features yet another Venus landscape generated with Rayshade The image shows the surface of Venus near a large circular feature called Miarlaidji Corona The rayshade heightfield used is 3556x3556 by 32 bit floats and an 8bit SAR radar image the same size was texture mapped onto the surface This was done on a 4 headed SPARC 6 40 with 64Meg of RAM and a couple Gig of disk space and took about 6 hours to render at size of 2200 by 2800 pixels David P Anderson dpa io isem smu edu Check out the June issue of Omni Magazine page 52 The computer generated image of HIV created on a Cray Super Computer was done with Rayshade It really looks much larger in person A larger version of this image may be found on fconvx ncifcrf gov in tmp rayshade as virion rle Z For more info you can contact me at mcgregor ncifcrf gov or Connor McGrath at mcgrath ncifcrf gov Please see the acknowledgment txt file for a few more details George McGregor mcgregor ncifcrf gov SCO Open Desktop has been using Rayshade rendered images in their demonstrations Robert Walsh robertwa sco COM The following files are temporarily at least available for anonymous ftp at ftp ncsa uiuc edu in outgoing marca natural textures NTRL TXTRS README grass rocks rle Z grass02 rle Z ivy rocks02 rle Z bark rle Z grass01 rle Z ivy rocks01 rle Z ivy stucko rle Z David DeBry ddebry dsd es com Vivid BOB and POV related I have a new modeler out called Sculptura that you might want to try It has Vivid and POV output and it can read in DXF files so you can use it to model new shapes or you can use it as a pathway for DXF to POV or Vivid There is a demo version at wuarcive wustl edu in mirrors mirrors win3 demo demo3d zip Michael Gibson gibsonm stein u washington edu POV related POVCAD and PV3D are two modelers for POV faramir informatik uni oldenburg de is a good site for both this site is mirrored at wuarchive see note at the beginning of the roundup The newest PV3D tends to be in pub dkbtrace incoming as file pv3dv100 zip There also exist a GUI called aewire by Alexander Enzmann Contact him 70323 2461 compuserve com for more information Ville Saaris expression evaluator code for PoV allows very easy animation generation using formulas on framenumber or time Another but more complicated solution is Rayscene Andre Beck beck irzr17 inf tu dresden de The Graphics Alternative BBS 510 524 2780 carries many POV related software packages etc I wrote a PM for IBM s OS 2 interface for DKB The file is dkbpm zip or dkbpm2 zip and is available at hobbes nmsu edu in a graphics directory somewhere sorry I can t remember the exact path It has a statistics window with time stats a bitmap image viewing window and a transcript window for progress reporting Menus and dialogs to set all the options Source is also included I m working on the next release of POV for PM and NT The beta I have for OS 2 is pretty similar to the DKB version The NT beta I have has a quantization thread that constantly quantizes the image and adjusts the palette accordingly It also can launch multiple render threads if you have a multiprocessor NT machine I m in the process of migrating the quant and palette stuff back to OS 2 I ll let you know when povpm and povnt are available Michael Caldwell mcaldwel netcom com Daniel Gross entropy Panix Com writes I gave up on the Transputers sent em back and am now building a new parallel processor based on 386 motherboards Cheaper better performance easier to port software Plus in a pinch if I get lazy I could just run Win4Workgroups or NT on each of em and get no code concurrent multiprocessing For now though I m still trying the harder way i e modifying PoVRay code to optimize for parallel execution One of the best utilities I ve found for POV it called SP Dave s Spline Path Generator You can find this on the You Can Call Me Ray BBS Basically you make a data file of a number of points and some other information and SP will calculate position and rotations for your camera You can do acceleration deceleration etc with it as well Its downfall at least as of version 0 3 is that it only does one frame at a time you tell it which of the N frames to compute It s relatively easy to make a batch file for this though Jason Barile barilejb ctrvax vanderbilt edu I produce POV 3D fonts and have a range of about 500 so far Price is about 65 UK pounds or 90 for two The data is about 3 4 meg uncompressed for each font and each letter has to be included and assigned a texture details and examples are included with the font The level of detail is very high and looks good even when flying through the bowl of a P for example I decided on a standard where the baseline of the font is at zero with the leading height at 1 with the font being 1 unit deep This makes changing fonts easier though still a little fiddly adjusting kerning There is as yet no easy way of making them the process takes several hours of hard work with W4W macros Available in Vivid format too Andrew Haveland Robinson andy osea demon co uk RTrace related There is a new version of the RTrace ray tracing package 8 2 0 at asterix inescn pt 192 35 246 17 in directory pub RTrace Check the README file Most perhaps all of this is mirrored at wuarchive in graphics graphics ray RTrace EAH The MAC RTrace 1 0 port is in directory pub RTrace Macintosh Thanks to Reid Judd reid judd east sun com and Greg Ferrar gregt function mps ohio state edu For all the Mac users of RTrace there is a Compact Pro HQX file called movies cpt hqx in pub RTrace Macintosh at asterix inescn pt 192 35 246 17 In this file I ve put 2 small animations to be played with SimplePlayer or any similar program in the Mac of course For all the users of RTrace there is a specification of the format RTrace uses in a Postscript compressed file called sffv8 ps Z SFF is something like NFF vastly extended to handle splines textures etc EAH There is also a 3D Studio 1 0 file converter in pub RTrace scene conv called 3ds2scn awk You must have a reasonably good AWK program preferably gawk 2 14 to process the ASCII files that 3D Studio creates and convert them to SCN format RTrace now can use the SUIT toolkit to have a nice user interface Compile it with DSUIT or modify the Makefile SUIT is available at suit uvacs cs virginia edu I have binaries of RTrace with SUIT for SUN Sparc SGI Indigo and DOS GO32 Please contact me if interested Here goes a short description of current converters from CAD molecular chemistry packages to the SCN format The package programs are related as below those marked with have been modified irit2scn IRIT NFF nffclean nffp2pp sol2scn ACAD11 nff2sff mol2scn v scn2sff v rtrace ALCHEMY SCN SFF PIC or PPM cpp pdb2scn picmix PDB picblend ppmmix chem2scn ppmblend CHEMICAL 3ds2scn 3D STUDIO iv2scn IRIS Inventor The DOS port of RTrace is in pub RTrace PC 386 rtrac820 arj utils820 arj and image820 arj See the README file there Requires DJGPP GO32 DOS extender version 1 09 included which can be found in directory pub PC djgpp and in many sites around netland There are also demo scenes manuals and all the source code Antonio Costa acc asterix inescn pt back to contents USENET cullings follow Re Intersection Between a Line and a Polygon UNDECIDABLE by Allen B ab nova cc purdue edu Curiously in modern PostScript the point in a polygon problem can be solved even more easily To wit Title Point in Polygon Creator Allen B ab cc purdue edu For the amusement of comp graphics regulars LanguageLevel 2 DocumentNeededResource humor sense thereof EndComments This program will test whether a point is inside a given polygon Currently it uses the even odd rule but that can be changed by replacing ineofill with infill These are Level 2 operators so if you ve only got Level 1 you re out of luck The result will be printed on the output stream Caution only accurate to device pixels Put a huge scale in first if you aren t sure Point to test PUT X AND Y COORDINATES HERE 50 75 Vertices of polygon in counter clockwise order PUT ARRAY OF PAIRS OF COORDINATES HERE 0 0 100 0 100 100 67 100 67 50 33 50 33 100 0 100 dup 0 get aload pop moveto dup length 1 dup 3 1 roll sub getinterval aload pop lineto forall closepath ineofill Yes No ifelse back to contents Obfuscated Postscript Ray Tracer by Takashi Hayakawa h takasi isea is titech ac jp This was an entry in the Obfuscated Postscript contest some time back A pretty minimal piece of work and the image looks decent too EAH This is a shell archive Remove anything before this line then unpack it by saving it in a file and typing sh file This archive contains Tiny RayTracing HINT Tiny RayTracing ps LANG export LANG PATH bin usr bin PATH export PATH echo x Tiny RayTracing HINT cat Tiny RayTracing HINT h takasi isea is titech ac jp p floor S add A copy n exch i index J ifelse r roll e sqrt H count 2 idiv exch repeat def q gt h exp t and C neg T dup Y pop d mul w div s cvi R rlineto load def H c j1idj2id42rd G 140N7 Q 31C85d4 B V0R0VRVC0R K WCVW U 4C577d7 300 T translate I 3STinTinTinY l 993dC99Cc96raN k X E9 1 J Z blxC1SdC9n5dh j 43r O Y43d9rE3IaN96r63rvx2dcaN z 93r6IQO2Z4o3AQYaNlxS2w N 3A3Axe1nwc W 270 def L 1i2A00053r45hNvQXz vUX UOvQXzFJ FJ J D cjS5o32rS4oS3o v 6A b 7o F vGYx4oGbxSd0nq 3IGbxSGY4Ixwca3AlvvUkbQkdbGYx4ofwnw vlx2w13wSb8Z4wS J X 4I3Ax52r8Ia3A3Ax65rTdCS4iw5o5IxnwTTd32rCST0q eCST0q D1 EYE0 J EYEY0 J0q V 3 def x jd5o32rd4odSS a 1CD E YYY o 1r f nY9wn7wpSps1t1S n T 0 4 3 r put T q T 9 q cvn s J q J J cvx forall cvx def H K K L setgray moveto B fill for Y for showpage You can change the 3 in 3 def x on line 10 to be 1 for more resolution but a much slower print or 6 for a faster print your printer might be able to handle this with less resolution EOF chmod 644 Tiny RayTracing HINT echo x Tiny RayTracing ps cat Tiny RayTracing ps A copy p floor q gt S add n exch i index J ifelse r roll w div H loop stopped Y def t and C neg T dup h exp Y pop d mul s cvi e sqrt R rlineto load def H 300 T translate V2L 1i2A00053r45hNvQXz vUX UOvQXzFJ FJ J O Y43d9rE3IaN96r63rvx2dcaN G 140N7 U 4C577d7 z 93r6IQO2Z4o3AQYaNlxS2w f nY9wn7wpSps1t1S D cjS5o32rS4oS3o Z blxC1SdC9n5dh I 3STinTinTinY B V0R0VRVC0R N 3A3Axe1nwc l 993dC99Cc96raN a 1CD E YYY F vGYx4oGbxSd0nq 3IGbxSGY4Ixwca3AlvvUkbQkdbGYx4ofwnw vlx2w13wSb8Z4wS J c j1idj2id42rd X 4I3Ax52r8Ia3A3Ax65rTdCS4iw5o5IxnwTTd32rCST0q eCST0q D1 EYE0 J EYEY0 J0q x jd5o32rd4odSS K WCVW Q 31C85d4 k X E9 1 J v 6A b 7o o 1r j 43r W T 0 4 3 r put T q T 9 q cvn s J q J J cvx forall 270 def H K K L setgray moveto B fill for Y for showpage EOF chmod 644 Tiny RayTracing ps exit 0 back to contents Eric Haines erich acm org Ray Tracing News Volume 6 Number 2 Ray Tracing News Volume 6 Number 2 Ray Tracing News Volume 6 Number 2 Ray Tracing News Volume 6 Number 2 Ray Tracing News Volume 6 Number 2 Ray Tracing News Volume 6 Number 2 Ray Tracing News Volume 6 Number 2 Ray Tracing News Volume 6 Number 2 Ray Tracing News Volume 6 Number 2 Ray Tracing News Volume 6 Number 2 http www acm org tog resources RTNews html rtnv6n2 html http www acm org tog resources RTNews html rtnv6n2 html http www acm org tog resources RTNews html rtnv6n2 html http www acm org tog resources RTNews html rtnv6n2 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv6n3.html%%==%%Ray Tracing News, Volume 6, Number 3%%==%%Ray Tracing News "Light Makes Right" September 28, 1993 Volume 6, Number 3 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%126483%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right September 28 1993 Volume 6 Number 3 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1993 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction New People Free Ray Tracer Summary compiled by Eric Haines Ray Tracer Races Round 2 by Eric Haines An Enhanced Standard Procedural Databases Package by Eric Haines Shadows from Refractive Objects by Steven Collins Shadows Through Transmitters by Eric Haines Greg Ward Alexander Enzmann Stephen Coy and David Hook Faster Bounding Volume Hierarchies by Brian Smits and Eric Haines Simple Sun Position Program by James Ashton Sphere and Cylinder Cone Disc Annulus Definition by Eric Haines Ray Tracing Roundup Simple Sphere Tessellation by Mike Castle Syndesis CD ROM Review by Eric Haines Ray Tracing Related Abstracts from the Proceedings of Graphics Interface 93 Ray Tracing Papers in the First Bilkent Computer Graphics Conference ATARV 93 Ankara Turkey July 1993 Fourth Eurographics Workshop on Rendering Paris France June 14 16 by Francois Sillion Gamma Correction Frequently Asked Questions by Graeme Gill 3D Studio Rendering by Chris Williams Ray Bezier Patch Intersection by Chuck McKinley Max Froumentin Turbulence and Noise by Ken Perlin Ray Tracing Research Ideas by Klaus Lisberg Kristensen Christian Gautier POV Ray Utilities by Dan Farmer SPD Platform Compiler Results by David Hook Introduction Another SIGGRAPH has come and gone and it was pretty fun for me from a Ray Tracing News perspective I got to meet some of the creators of POV the ray tracer derived from DKB that s been taking the CompuServe CIS for short world by storm The CIS world is a different kind of place than the Internet There be demigods there that can give you various free privileges if they deign that what you are doing is entertaining to the masses and so generates connect time revenues The ray tracing technology available on CIS seems a bit old fashioned with things like QRT and DBW still in active existence there and in the general BBS world among some users POV 1 0 doesn t have an automatic efficiency scheme something that dates back at least five years with MTV s introduction on the Internet However I suspect POV 2 0 and onwards will rule the earth 2 0 has a built in efficiency scheme and while most of the other free ray tracers out there are still faster this scheme at least brings POV into the same league What will make POV the most popular free renderer is that there are a ton of utilities out there to support it see Dan Farmer s article this issue One of the most significant is MORAY a shareware modeling and scene composition program that s very nice available only on the IBM PC Right now Rayshade has more features than POV and is faster and there are some programs which output data in Rayshade format so it s got many users But Craig Kolb is a busy guy and there doesn t look to be any new version coming out soon There will still be people out there using Rayshade for its speed and for its multiprocessing utilities e g the separate Inetray utility runs Rayshade on a network of processors machines Rayshade will be just fine for many people The art ray tracer from Australia has a slightly brighter future it has many of the features of Rayshade plus its developers have time to actively support it Radiance will still have its users too anyone dealing with lighting in a true physical sense will use this package Unfortunately Greg Ward tells me that the DOE who funded the development of Radiance may not release newer versions for free keep your fingers crossed BRLCAD has its devoted users but takes more work than just downloading to get you must be a US citizen you sign some agreement etc etc So even though it s free if you qualify it s much more for the serious user and so has nil hacker momentum There are some other free ray tracers out there RTrace VIVID BOB etc each with some advantages but in the main the large number of people using POV and creating utilities for it will make these others of peripheral interest in the long run 90 of the utilities developed for POV might be clunky junk but there will be enough hits such as MORAY that this renderer is made usable by the masses Whether this is good or bad or whatever well I don t really know but this is my current impression of the short term future of free ray tracing software out there Anyway this is an incredibly long issue as I finally caught up with the backlog from March onwards Given its length I hope you ll take it all in hey use split and at and send yourself this issue in installments There s a summary of the features and speeds in two separate articles of most of the free ray tracers out there I ve also started listing new papers that might be overlooked i e weren t in SIGGRAPH Something for everyone I hope or if nothing else at least all this stuff is organized so that I can find it again back to contents New People J Eric Townsend massively parallel engines vr NAS NASA Ames M S 258 6 Moffett Field CA 94035 1000 415 604 4311 I m supposed to be administrating a CM 5 but I spend as much of my time as possible working on parallel ray tracers My current project uses SEADS decomposition with cells distributed over the nodes Cells are requested asynch and cached locally Performance numbers coming soon What s the biggest thing you ve ray traced so far in terms of sheer number of objects size of database I m still working on my massively parallel raytracer but I ve gotten official approval to work on it as part of my job so I m getting a lot done these days One thing I ve realized is that I ll be able to trace some huge numbers of objects or at least I think it s a large number Right now an sphere surface characteristics takes up about 512bytes of storage in my system actually any object takes up about that much space because the Object type is just a union of all the objects I support Yes that s a lot I haven t tried optimizing for size yet As I mucked about on our CM 5 I realized hey I ve got a lot of free ram for storage even with a sizable local cache Each node on our CM 5 has 2 banks of 16MB each Assuming one bank is taken up with OS code object cache data structures generic BS that leaves 16MB node for permanent object storage 16MB 32nodes smallest partition one can grab 512bytes sphere 1M 1Kx1K actually spheres Using all 128 nodes I can easily have 4M spheres in my permanent object storage That s an awful lot it seems to me 4 million spheres is roughly equal to 568 sphereflakes 4 7 sphereflakes 6 a single sphereflake 7 5 3M spheres actually Maybe it isn t a lot of objects Regardless I sat around trying to figure out how to use 4M spheres and I came up with a few ideas particle methods run on another machine when we get hippi going we could run code on one machine and trace on another use spheres as voxels try some volume ray tracing bad abstract animation using too many spheres Another probability is that ll I ll try some stuff with a special object that has very simple parameters position pointer to an object definition and a pointer to a color index That d make it quite easy to get another few million objects floating about in the big database So am I completely off my rocker Name Steven G Blask Fancy title Research Associate But I m really PhD candidate serf will hack computer vision graphics image processing AI under UNIX C X Windows environment for food Affiliation Robot Vision Laboratory Snail mail School of Electrical Engineering 1285 Electrical Engineering Building Purdue University West Lafayette IN 47907 1285 Voice 317 494 3502 FAX 317 494 6440 E mail blask ecn purdue edu Interests In short I am doing my part to get ignorant computers to visually interpret their environment initially for but not limited to robotic applications Specifically I am doing expectation based image understanding integrating a number of related research areas into a single unified system I have created a B rep solid model of the hallways outside our lab which is used as an internal map by our mobile robot Based on where the robot thinks it is an expected view of the environment is rendered via a not yet so fast ray tracing algorithm which incorporates illumination effects While most rendering systems are focused on obtaining pretty pictures as quickly as possible my application must also maintain links back to the underlying solid model so that in addition to the appearance information the 3D geometry and topology stored in the B rep is efficiently made available to the scene interpretation process This brings up many issues not normally addressed in the graphics literature which prevent me from taking advantage of some of their proposed speed ups However it has caused me to re examine some of the solved problems of computer graphics from a new perspective which has yielded much dissertation fodder and has allowed me to propose new speed ups based on a slightly modified architecture Related non graphics areas I have addressed include low level image processing to remove noise from digitized images or enhance rendered images robust segmentation and symbolic conversion of digitized greyscale video images and distance images produced by a range sensor integration of these symbolic conversion routines into the solid modeler sensor modeler ray tracer which also has facilities for the interactive construction examination and modification of objects an evidential reasoning scheme that organizes and utilizes the rich structural and appearance information in an efficient manner during the image understanding process Artificial intelligence techniques such as evidence accumulation uncertainty management and symbolic reasoning must be utilized since there is a huge amount of input data and it will be noisy the expectation will not be exact due to errors in mobile robot odometry indeed vision is intended to be its position updating mechanism and it is impractical or impossible to completely or accurately model all of the environment and its many aspects By processing both expected and observed scenes with the same greyscale or range image segmentation routines the integrated system can predict the detectability of various structural features and appearance artifacts and determine their usefulness w r t the image interpretation process Obviously I have taken a big bite out of a large apple so please excuse me if I talk with my mouth full I hope this tome makes the ray tracing community more aware of the vast usefulness of this rendering paradigm to those who would do model based interpretation of video and range sensor images Ray tracing is a natural fit for my particular application since it tells me what object I hit how far away it is and what color it is Computer vision computer graphics are two sides of the same coin and it is once again time to flip it over see if the other guy has solved your problem yet It is also probably time for the two communities to start working on an integrated modeling system that can drive the image formation generation process both ways I was forced to implement the aforementioned system myself since I could find no existing system that gave me the access I needed in order to efficiently integrate everything that needs to be done Sorry this is so long but I thought you might find it interesting and possibly motivating I encourage anyone interested in the further development of an integrated vision graphics system to contact me I am racing to defend my dissertation by December so I may be slow to respond until then P S I am obliged to say that Purdue Robot Vision Lab is a diverse group of researchers investigating all aspects of sensory based robotics including planning for sensing robot motion grasping and assembly object and sensor modeling computer vision image processing range data processing object recognition symbolic and geometric reasoning uncertainty management and evidence accumulation learning Smart aware easy to program robots are our goal Prof Avinash C Kak is our fearless leader back to contents Free Ray Tracer Summary compiled by Eric Haines Here are some of the better ray tracers out there and most can be found at wuarchive wustl edu in graphics graphics somewhere or ask me RayShade a great ray tracer for workstations on up also for PC Mac Amiga POV son and successor to DKB trace written by Compuservers Also see PV3D For more questions call Drew Wells 73767 1244 compuserve com or Dave Buck david buck carleton ca Radiance see Radiosity below A very physically based ray tracer ART ray tracer with a good range of surface types part of VORT package RTrace Portugese ray tracer does bicubic patches CSG 3D text etc etc An MS DOS version for use with DJGPP DOS extender GO32 exists also as well as a Mac port VIVID2 A shareware raytracer for PCs binary only 286 287 Author Stephen Coy coy ssc vax boeing com The 386 387 no source version is available to registered users US 50 direct from the author Bob is a subset of this ray tracer source available only through disks in Photorealism and Raytracing in C by Christopher Watkins et al M T Books Which one s the best Here s a ray tracer feature comparison of some of the more popular ones I assume some basics like each can run on a Unix workstation can render a polygon has point lights highlighting reflection refraction etc A means no Things in parentheses mean no but there s a workaround For example POV 1 0 has no efficiency scheme so takes forever on scenes with lots of objects but there are programs which can generate efficiency structures for some POV objects also in this case POV 2 0 will fix this deficiency Rayshade POV 1 0 RTrace Radiance Bob ART IBM PC version Y Y Y in 2 2 Y Y Amiga version Y Y Y Y Mac version Y Y Y A UX Y Sphere Cylinder Cone Y Y Y Y Y Y Torus primitive Y Y Y Y Spline surface prim Y Y Y Arbitrary Algebraic prim Y Y Heightfield primitive Y Y Y Metaball primitive Y Y Y Modeling matrices Y Y Y Y Constructive Solid Geo Y Y Y antimatter clipping Y Efficiency scheme grids user 2 0 ABVH octtree ABVH kdtree 2D texture mapping Y Y Y Y Y Y 3D solid textures Y strong Y Y Y Y Advanced local shading Y Y Much Atmospheric effects Y Y Y Y Radiosity effects Y Y Soft shadows Y 2 0 Y Y Y Y Motion blur Y Depth of field effects Y Y Y Stereo pair support Y Y Advanced filter sample Y Y Y Y Animation support Y S W Y some Y Alpha channel output Y Y Y Modeler lib P3D IBM convert on Mac w code P3D Model converters from NFF Many Many some NFF OFF Network rendering Inetray in 2 2 dart nart User support maillist maillist good digest little good Other S W support some Much a bit some a bit some For timing comparisons see the next article back to contents Ray Tracer Races Round 2 by Eric Haines After running timings of the various ray tracers out there in the last issue I received various comments from authors David Hook and Bernie Kirby went so far as to run a bunch of the ray tracers on different platforms under different compiler options see their results at the end of this issue The POV developers sent me a beta of POVRAY 2 0 so that the snail s pace of 1 0 could be massively improved Also there were some interesting comments on how shadows for transmitters are computed see the relevant articles on this topic Without further ado here are the current results Timings default size SPD databases i e up to 10 000 objects in a scene time in seconds on HP 720 workstation optimized and gprof profiled code Includes time to read in the ASCII data file and set up Note that profiling slows down the execution times so real times would be somewhat faster in all cases about 30 plus the profiler itself is good to 10 Also these timings are purely for this machine results will vary considerably depending on the platform see David Hook s article Now that I ve explained why these are useless here goes balls gears mount rings teapot tetra tree Art Vort 478 1315 239 595 235 84 381 Art Vort float 415 1129 206 501 203 72 327 Rayshade w tweak 188 360 174 364 145 61 163 Rayshade w grid 1107 412 174 382 145 61 1915 Radiance 289 248 165 601 150 42 197 Bob 402 747 230 831 245 50 266 RTrace 664 1481 813 1343 341 153 372 RTrace c6 m0 652 1428 811 1301 331 155 363 POV 2 0beta 588 1895 668 1113 306 56 542 POV 1 0 191000 1775000 409000 260000 45000 31000 250000 The gears and mount tests are probably worth ignoring because everyone handles shadows for transparent objects differently Some consider them opaque to shadows others handle it differently Here are timing ratios i e 1 is the fastest time for a given test with the other timings normalized to this value balls gears mount rings teapot tetra tree Art Vort 2 54 5 30 1 45 1 63 1 62 2 00 2 34 Art Vort float 2 21 4 55 1 25 1 38 1 40 1 71 2 01 Rayshade w tweak 1 1 45 1 05 1 1 1 45 1 Rayshade w grid 5 89 1 66 1 05 1 05 1 1 45 11 75 Radiance 1 54 1 1 1 65 1 03 1 1 21 Bob 2 14 3 01 1 39 2 28 1 69 1 19 1 63 RTrace 3 53 5 97 4 93 3 69 2 35 3 64 2 28 RTrace c6 m0 3 47 5 76 4 92 3 57 2 28 3 69 2 23 POV 2 0beta 3 13 7 64 4 05 3 06 2 11 1 33 3 33 POV 1 0 1015 96 7157 26 2478 79 714 29 310 34 738 10 1533 74 Art Vort was compiled with and without a f compiler option with it on floating point numbers are not promoted to doubles during expression evaluation and so things runs noticeably faster Other packages may benefit from such compiler options Rayshade had some minor user intervention The ceiling of the cube root of the number of objects in the scene was used as the efficiency grid resolution For example balls has 7382 objects cube root is 19 47 ceiling is then 20 so a 20 x 20 x 20 grid was used Rayshade needs hand tweaking of the grid structures for extra efficiency esp with balls and tree though this is fairly simple for the SPD tests i e leave the background polygon out of the grid structure Tweaking in these cases means leaving ground plane polygon if it exists out of the grid structure Radiance is quite different in its approach as it is more physically based Efficiency structures are built in a separate program so the time spent doing this is not included in the above stats Also Radiance outputs in a floating point format which can be quite handy RTrace is often a bit faster when the c6 m0 options are used POV 2 0 has an efficiency scheme built in and so is comparable to the others so don t get freaked out by the POV 1 0 performance numbers Notes from Antonio Costa on RTrace Let me make just some small remarks about RTrace Perhaps you haven t explored its options but I think it could perform slightly better at least 8 better according to some simple tests I did Please run it with options c6 m0 c6 enclose at least 6 objects per enclosing box default is c4 m0 use simple lighting model default is m1 which uses a model developed by Paul Strauss of SGI it s much more complex When scenes have a larger amount of simple primitives like spheres and boxes the enclosing strategy isn t as efficient as when they have cones patches triangles letters etc The value c4 is a compromise normally the user shouldn t change it but sometimes some tuning can be done c6 turns out to be a bit better in most cases but using both options improved performance by at most 4 maximum on my machine EAH The Strauss model uses some math functions that unfortunately make the rendering somewhat slower then the standard Phong model this is an area where I think good improvements can be done approximating functions like power sqrt acos You can also avoid the problem with the rings scene using an option that increases the number of surfaces option S2000 means 2000 surfaces default is 256 To increase the number of objects or lights you can also use Sn or Ln For those of you who want to know the particulars of the tests read on Here are the command lines I used for the various tracers I tried to use the fastest method available for shadows for transparent objects each tracer does this a bit different Mostly I would say ignore the results for gears and mount because of the way the methods differ I used the enhanced Standard Procedural Database package next article to test the ray tracers POV time povray ms5000 i dog pov ft w1 h1 odummy tga ART time art dog art 512 512 RAYSHADE time rayshade dog ray o R 512 512 O dog rle RTRACE time rtrace c6 m0 S2000 w512 h512 O1 dog rt dog ppm BOB sed f vivid2bob sed dog b tmp junk mv tmp junk dog b time bob s dog RADIANCE uses a converter Greg Ward sent which I call NFF2Radiance dog r 1 NFF2Radiance vf dog vp dog rad oconv dog rad test oct time rpict vf dog vp test oct dog pic Addendum more timings are available from Andrew Woo in RTNv10n3 back to contents An Enhanced Standard Procedural Databases Package by Eric Haines Alexander Enzmann and Eduard Schwan took the SPD package which as you may know generates procedural models for testing ray tracer speed and added a ton of code to it The new code now outputs to these formats NFF used by MTV ray tracer but the SPD always output using this POV Ray 1 0 Polyray v1 4 v1 5 Vivid 2 0 Rayshade RTrace 8 0 0 Art 2 3 QRT 1 5 POV Ray 2 0 no it s not officially out yet format subject to change PLG format for use with rend386 Raw triangle output It can also output the models as line drawings to the screen for previewing IBM Mac and HPUX drivers are provided and new drivers are trivial to write i e draw a line There is also a program showdxf which will convert or display DXF files actually a limited subset of these just 3DFACE entities There are two sample DXF files a skull and an f117 included There s also a sample code file which can be used as a template for writing your own output programs What s nice about this package is that by writing a program representing your model or interpreting your model as input a la showdxf c you can then convert it to a wide number of formats I d love to see more show c interpreters e g one for Wavefront obj format so that the cool Viewpoint models at avalon chinalake navy mil can be converted and other output formats I did some polishing and whatnot to the distribution and have placed the whole thing at weedeater math yale edu s incoming directory as SPDup31 tar Z and SPDup31 zip Hopefully I didn t futz things too badly I suspect there needs to be some file renaming for the Mac version but let me know if I did Anyway I hope that the permanent home of the code will be princeton edu pub Graphics somewhere back to contents Shadows from Refractive Objects by Steven Collins steve crl hitachi co jp gophcide cs montana edu Brett Donahue writes After tracing a ray from the view plane and hitting an objects surface you cast a ray from that point to the light source What do you do if there is a total transparent object with an index of refraction on the path to the light source Once this ray is refracted it will not hit the light source Do you just ignore the object That is what I think POV ray is doing I put a transparent object between a plane and the light source and there was no shadowed areas There should be some areas on the plane where the refracted light would not hit A moot point indeed Not many ray tracers handle this problem correctly Most take the easy way out of either a ignoring the ray if any obstacle is encountered between the surface and the lightsource or b if the ray passes through transparent objects only then attenuate the lighting according to some scattering approximation function a always gives rise to completely dark shadows whereas b is an improvement in that it gives rise to lighter regions of shadow where the light has been attenuated proportional to the distance of refractive material passed through Either of these approaches do not capture the caustics effects There seems to be 2 methods around to do this either a send out lots of rays from the surface in the hope that some of them will hit the light source i e sample the hemisphere above the point of intersection and trace these rays For better results the hemi sphere may be importance sampled by determining the solid angle subtended by all light sources This is of course incredibly expensive computationally and leads to very noisy caustic effects The alternative approach is to shoot rays from the light sources in a pre processing step A number of approaches to this exist Heckbert proposed shooting may rays from the light sources and storing the intersections of these rays with surfaces as a texture map of sorts Thus when executing the secondary phase intersections with surfaces use these texture maps as an estimate of the light incident on the surface Another approach is that of Watt Watt where a beam tracing first phase performs a similar operation but this time only polygonally defined surfaces are catered for due to the beam tracing approach Here light beams are traced through the scene and the intersections of these beams with surfaces are stored as polygon feature polygons and used in the eye phase to estimate the caustic light energy Finally more recent work I ve just shipped my Siggraph 92 procs over 3 000 miles away so forgive not being able to give the exact reference published in Siggraph 92 was it Kirk and Barr or Snyder or Arvo these guys do so much excellent stuff its hard to keep track no it was Mitchell and Hanrahan EAH which involved a more analytic approach to determine the location of the caustic effects by analytically estimating the wave fronts and caustic cusps resulting from light interacting with a surface of gaussian curvature This is as you can probably guess an area of interesting on going research back to contents Shadows Through Transmitters by Eric Haines Greg Ward Alexander Enzmann Stephen Coy and David Hook In doing the SPD timings tests on the various ray tracers available I found that each renderer does shadowing of transmitters its own way This is fair enough when a transmitter blocks a light there are many ways to handle the situation One is to treat the transmitter as opaque and simply block any light Another is to filter the color of the light by the transmitter s surface color A more elaborate method is to actually compute the length of the ray inside the transmitter and then also attenuate the color using this distance e g Radiance does this For my tests I tried to pick the fastest option available with the ray tracer Some comments from the designers From Greg Ward the main author of Radiance As for the shadow under a refracting sphere or such I just follow the rays through the object to the light source following a refracted path and if I hit it I get it if I don t I don t It s not the correct thing to do but it s better than throwing the contribution away or pretending it s not there and it does give the appearance of light concentration in some cases To be honest I don t care that much about refracting objects as they rarely turn up in architectural scenes Windows yes crystal balls no Yes the refracted path source testing depends on the size of the light source among other things so it s not a correct approach as I said But it s easy and strikes me as better than nothing I don t do any special type of sampling with regards to ray direction I just shoot assuming that there s nothing in the way and if I hit a dielectric surface I continue to follow the refracted but not the reflected ray Works great for planar surfaces so it makes most of my users happy From Alexander Enzmann an author of POV Ray Another thing to consider with POV Ray especially in gears is that diffuse shadows are computed for all surfaces Several tracers have an option for how many surfaces will have shadows computed Rayshade and RTrace have several options some tracers don t ever compute shadows for an interior surface of a transparent object Vivid BOB POV Ray always does the maximum work The high ratio you got on the gears benchmark comes from that to a great extent and from the fact that POV Ray doesn t do polygons has to have the gears broken down into triangles From Stephen Coy an author of the Vivid Bob ray tracers There actually seem to be two issues here The first is how the intersection with an interior surface is shaded The second is how shadow colors are calculated When Vivid Bob intersects an interior surface the only component that is taken into account is the transparency This implies that the surface doesn t have a diffuse component hence no shadows it doesn t have a specular highlight and there are no reflected rays generated I ve come to believe that my handling of the specular rays and highlights is wrong As far as the diffuse component goes I think the correct solution is quite a bit tougher I think that the proper solution would involve the effects of the light all along the ray as it passes through the transparent material In effect transparent materials should be treated like participating media where you actually have a diffuse contribution and shadows cast throughout the volume When it comes to calculating the color of shadows Vivid Bob gives you a couple of options With the no exp trans flag set the light color is simply filtered by the transparent component of the material When this flag is not set the default the amount of the filtering is attenuated exponentially based on the distance the ray travels through the material Note that this has the side effect of making the material definition scale dependent Additionally Vivid Bob also supports fake caustics For these the color of the shadow ray is further tweaked based on the angle between the surface normal and the direction of the shadow ray This was inspired by Andrew Pearce s trick in Graphics Gems I From David Hook an author of the art ray tracer Art traces the ray straight through the object checking for texturing and modifying the light passed through accordingly Apart from the texturing it doesn t seem to cause to much heartache computationally although as Greg Ward points out going straight through without taking into account effects due to refraction fails to produce any caustics which are the things that make refractive light the most interesting On the satisfaction with the image side we have another program using the same shading model that is used by architects and the lack of caustics has never caused any problems I sometimes wonder if computer graphics people are the only ones who notice them back to contents Faster Bounding Volume Hierarchies by Brian Smits bes graphics cornell edu and Eric Haines I m writing up this idea that Brian passed on to me It turns out to be quite old mentioned in Goldsmith s article and in Arvo Kirk s section of An Introduction to Ray Tracing For whatever reason I didn t know about it until Brian filled me in guess I should read things a bit more carefully I haven t seen the idea applied to Kay Kajiya s scheme nor have I seen any test data about it or seen it used in any free ray tracing software It s pretty trivial to implement so I recommend it EAH This article presents a simple way to improve the performance of automatic bounding volume hierarchy schemes Automatic bounding volume hierarchy methods are one way to improve the efficiency of ray tracing By putting objects in a nested hierarchy of bounding boxes and testing each ray against these most of the objects in a scene can be quickly rejected as not intersecting the ray Goldsmith Salmon Scherson Caspary explored methods of building up a hierarchy of bounding volumes automatically as did Kay Kajiya Kay Kajiya simply built a hierarchy of boxes by sorting the object set by the object centroid locations in X then Y then Z For example with a hundred objects in a scene the objects 3D center points would be sorted by X and then this sorted list would be split into two sublists of fifty objects each with a box put around each list Each sublist in turn would be sorted by their Y centroid values and split into two subboxes with twenty five objects each on down until boxes with two objects are created at the bottom of the hierarchy Goldsmith Salmon wished to group objects more tightly Splitting a list of objects may not be such a great strategy imagine that of our hundred objects fifty one made up a light fixture and forty nine made up a stapler that the light shines upon Splitting into two groups of fifty means that one box will include all of the stapler and one piece of the light and so giving a box which contains a large amount of empty area between the light and the stapler A tighter bound e g having a box around the stapler and another around the light would yield better timings Goldsmith Salmon s strategy is to randomize the list of objects and feed these into a hierarchy placing each new object in the hierarchy so as to minimize the overall growth in size of the boxes in the tree By randomizing the list the first few primitives will tend to create a skeleton upon which the rest of the primitives can efficiently become a part See the RTNews2 file at princeton edu for more information Brian Smits implemented this scheme in his ray tracer and Jim Arvo pointed out a simple speed up mentioned in Goldsmith s article By trying different randomized lists various different configurations of the hierarchy occur These hierarchies can be analyzed by examining their efficiency The criterion Brian used is the internal cost of the root node see p 212 of An Intro to RT Another simple criterion is to sum up the areas of all of the bounding volumes Each configuration will generate a different value using the hierarchy with the best value will generally improve performance since fewer bounding volumes should be intersected overall So time can be saved overall by spending a little extra time up front generating a few different configurations using different random number seeds The best random number seed can be saved for a particular scene and reused later to generate this best hierarchy This is quite a nice thing for fly through animations in particular one can spend a lot of time up front getting a good hierarchy and then store just one number the seed for the best efficiency scheme for the scene Brian notes I found that on some environments that a good hierarchy could take half to a third of the time of a bad hierarchy Average hierarchies tended to be closer to good hierarchies than bad hierarchies though Eric Haines I have a few comments This same idea could be used on Kay and Kajiya Which axis is sorted first and which order the axes are sorted e g XYZ or XZY gives six different generation combinations when using Kay and Kajiya By examining the fitness criterion of the boxes generated for each of these six the tightest of the six can then be used I have a copy of POV 2 0beta sitting around which does Kay Kajiya so I hacked it to try the various combinations POV 2 0beta actually uses a different scheme than pure Kay Kajiya it sorts each box along the longest axis For example if you had 8 spheres in a row along the Z axis it would come up reasonably enough with a hierarchy with each box s contents sorted along the Z axis Timings for Kay Kajiya balls gears mount rings teapot tetra tree shells longest 588 1895 668 1113 306 56 542 1464 area 5214 881 205 30995 1514 74 74548 604068 XYZ 513 2019 639 1158 288 54 516 1661 area 4420 938 195 29174 1367 72 74361 688388 YZX 512 2316 644 1188 292 52 531 1605 area 4399 1071 211 29944 1343 72 74402 686440 ZXY 513 1735 659 1215 298 52 549 1554 area 4388 764 233 30936 1334 72 85085 649846 YXZ 507 1916 656 1182 301 52 514 1658 area 4420 884 190 29583 1456 72 74557 696927 ZYX 513 2006 658 1183 289 52 532 1572 area 4385 869 226 30254 1321 72 74382 651506 XZY 508 1892 642 1187 293 52 552 1579 area 4402 910 215 30066 1373 72 74616 673416 longest is the sort on the longest axis scheme which comes with POV 2 0 XYZ means sort on the topmost level along X then the subboxes along Y then Z etc The lowest value in a column among the simple orderings and category is marked with the highest with As Brian notes there s usually one bad hierarchy among the lot next to a bunch of reasonable ones There is some correlation between the area summation and the resulting rendering time gears in particular has significantly different results and the best area summation is 1 33 times as fast as the worst and the area of the best is 1 4 times smaller than the worst Most of the models have a fair bit of similarity along each axis Tetra s symmetry is a great example the axes order just does not matter Gears does not and so different schemes have significantly different results Using more realistic scenes would be interesting and probably give larger variances in results What s also interesting is that many of the simple XYZXYZ orderings beat the pick the longest axis method in overall timing In the mount and shells models the longest axis method is always better in both timing and area summation and in the balls and teapot models the longest axis is always the worst strategy Another scheme which deserves exploration is to sort on each axis XYZ and compare results using the axis which creates two boxes with the smallest total area would be an interesting strategy which should give fairly low area summations overall I suspect there is also not much difference between schemes because of the nature of the databases there s usually one object cluster instead of a few objects separated by distances as would occur in a room say so the different schemes don t make too much difference I would also suspect wider variations when using Goldsmith Salmon as there is a lot more randomness and opportunity to seriously improve or degrade performance As it stands for these models doing multiple hierarchies for Kay Kajiya and picking the best doesn t save much time maybe 4 on average kind of disappointing Using the absolutely longest axis doesn t seem to be a win for these scenes though for other less homogeneous scenes it might perform better I don t know why it performs consistently worse for some databases if nothing else it does show that intuition is not always a good guide when designing new efficiency schemes back to contents Simple Sun Position Program by James Ashton jaa101 deakin anu edu au Guy Carpenter asks I d like to be able to specify lon lat elev date time and get an accurate position for the sun and position phase and orientation for the moon I think I have all the necessary alg s kicking around so it shouldn t be too hard has anyone already done this I haven t done it very accurately but I did scrape together a quick and dirty Sun position generator in C It s only a rough approximation with no attempt to model the equation of time or lesser effects You provide latitude in degrees month Jan 0th 1 0 Dec 15th 12 5 etc and local time of day midnight 0 0 midday 12 0 and it gives the x y z coordinates for a rayshade light source direction Z is up but I forget which axis I made North It was designed to aid in designing a Solar house and I m sure it s accurate enough for that purpose It s a model of inefficiency but who cares include include define DTOR d d M PI 180 0 define SEASON ANGLE month sin month 9 7 6 M PI 0 41 define HOUR ANGLE hour hour 12 M PI define POSITION ANGLE latitude DTOR latitude double latitude month hour main double x y z for if scanf lf lf lf latitude month hour 3 fprintf stderr bad floats read n exit 1 x cos SEASON ANGLE month sin HOUR ANGLE hour y sin SEASON ANGLE month cos POSITION ANGLE latitude cos SEASON ANGLE month cos HOUR ANGLE hour sin POSITION ANGLE latitude z sin SEASON ANGLE month sin POSITION ANGLE latitude cos SEASON ANGLE month cos HOUR ANGLE hour cos POSITION ANGLE latitude printf f t f t t f n x y z back to contents Sphere and Cylinder Cone Disc Annulus Definition by Eric Haines Jonathan Roy asked me what I liked for quadric definitions I worked on this question professionally a few years back and thought I d pass on what I found I like for a sphere radius origin axis for north pole axis for start point on equator and optionally right or left handedness The axes are important when you re applying a texture to a surface otherwise can be ignored Of course the user doesn t have to see it this way For defining ellipsoids no one bothers with defining the foci you simply need to non uniformly scale e g stretch a sphere with a transformation matrix You have to be sure to stretch the normal equation for the sphere by the transpose of the adjoint of this matrix to get the normals right see An Intro to Ray Tracing in Pat Hanrahan s section for a little more on this and see old issues of this newsletter I like for cylinders cones annuli i e washers base origin axis vector base radius apex radius height axis for starting texture point on equator This is real general and gives you three different primitives all in one In the code you will probably want separate intersectors for them though i e height of 0 0 means it s a washer and the cone equation will tend to explode at this height back to contents Ray Tracing Roundup Watt Watt s book Advanced Rendering and Animation Techniques Theory and Practice is a good unified guide to advanced rendering in general and I highly recommend it Think of it as a condensed and simplified Best of SIGGRAPH for the past decade and you won t be too far wrong Eric Haines The 3rd edition of the cross indexed bibliography on ray tracing and related topics is available Included in this edition will be some 600 citations papers from all the major graphics conferences and full keywording of citations Cross reference files by keyword and author and a glossary of the 120 keywords used are also slated for inclusion Rick Speer speer cs colorado edu Texture Library Site The beginning of a texture library for rendering applications is being started on wuarchive wustl edu located in the mirrors architec directory Please FTP the README file first There are around 100 texture images stored in compressed TIFF format Paul David Bourke pdbourke ccu1 aukuni ac nz I looked at the initial 40 of these Good idea but only a very few of them were tileable i e could be repeated seamlessly over a surface EAH Inventor 3D File Format by Gavin Bell gavin sgi com You can do a great service to everybody if you avoid creating yet another 3D object file format and at least adopt Inventor s ASCII file format for your system If not the objects at least the syntax to make translation easy Documentation on the file format is free you can anonymously ftp it from sgi com sgi inventor Doc tar Z Ray Traced Church Interiors There is a series of five images of the interior of the Renaissance church Il Redentore in Venice The original huge Utah RLE images are available from cad0 arch unsw edu au pub rayshade images Il Redentore The images were produced using Rayshade the images and the model were created by Nathan O Brien as part of his undergraduate dissertation Building Preservation and Three Dimensional Computer Modelling at UNSW These images are extremely good IMHO and well worth the effort of getting Stephen Peter steve keystone arch unsw edu au You may ftp jpeg versions of them perhaps for a limited time only from services more net 128 206 20 15 Columbia Missouri USA in pub jpg Il Redentore These are not the jpegs which appeared on alt binaries whatever but were jpegs recreated from the original rle files by me David Drum UC512052 mizzou1 missouri edu My book is coming out in October and is called Adventures in Raytracing published by QUE It covers Polyray from top to bottom The book is dedicated to raytracing with Polyray 3d modeling with POVCAD my program and animation The book has an almost complete reference on Polyray and it even includes a tear out card with the command lines language syntax etc It includes a disk with Polyray 386 no 387 and 386 486 387 version POVCAD windows and Dos version and CompuShow image file viewer utility Right now I ve also written a small utility called CLAY ZIP which does free form deformation on RAW data files The output comes out as RAW also In addition I ve written another utility to tween 2 RAW data files in Polyray the good thing about it is that it can do linear quadratic or cubic interpolation and the output from the utility is just 1 file independently of how many frames are required Alfonso Hermida afanh stdvax gsfc nasa gov I ve just completed a book on 3D graphics animation with Dave Mason called Making Movies on Your PC Lots of pretty pictures mostly beginners tips on creating FLI FLC format animations on IBM clones Alexander Enzmann 70323 2461 compuserve com This book also includes Polyray and 2D morphing software EAH YART 0 40 a Fast Growing Framework for Obj Or Graphics Ekkehard Beier ekki prakinf tu ilmenau de The time is good for a new graphics system including both ray tracing and gouraud shading facilities This system should be object oriented highly extensible and highly interactive Real time raytracing or real time shading and raytracing if explicitly wanted Using SGI GL PHIGS PEX shading for built in modelling and direct interaction and Raytracer for HiQuality final images YART Yet Another Ray Tracer is a first implementation of such a system there is a mailing list yart prakinf tu ilmenau de PLATFORMS SGI Iris SUN Sparc Linux PC MS Windows in work ftp from metallica prakinf tu ilmenau de 141 24 12 29 pub PROJECTS login as ftp password HARLEY FUCKIN DAVIDSON PRECONDITIONS C At T cfront 2 1 Tcl GL or X11 or PHIGS PLUS There s lots more text contact the author for more info EAH General software 3DS2POV is a utility that converts 3D Studio files to POV Ray Vivid Polyray or raw triangle formats A bounding volume hierarchy is added to the POV Ray files The latest version converts from the binary 3DS format where previous versions used the ascii format If you ve got the time or a Cray it ll convert whole animation sequences as well This program is on the YCCMR BBS and the TGA BBS as 3DSPOV17 ZIP Both DOS binaries and C source are included Steve Anger 70714 3113 CompuServe COM I haven t mentioned BRLCAD for awhile so here s a blurb The US Army BRLCAD package brl cad mil Ballistic Research Laboratory is available as encrypted source code via anonymous ftp from ftp brl mil brl cad FAX a completed copy of the agreement file to BRL for the crypt key BRLCAD is very mature also runs in parallel on a heterogeneous mixture of systems image quality is good but perhaps not extraordinary Alexander James Annala It really does look like an amazing system worth checking out if you plan on doing any serious modeling esp CAD related EAH Radiance related A fellow by the name of Georg Mischler of ETH in Zurich Switzerland has written a new translator for exporting Radiance files from within AutoCAD This new AutoLISP program seems to be quite capable and he has installed it in the pub translators directory on the anonymous ftp account of hobbes lbl gov 128 3 12 38 I invite users with AutoCAD to try it out Gregory J Ward greg hobbes lbl gov Rayshade related I have just compiled the Enhanced version of Rayshade patchlevel 6 for a PC running MSDOS and it appears work fine You can get it from telva ccu uniovi es 156 35 31 31 pub graphics raytrace rayshade MSDOS Erayshade for PC zip You ll need a 486 yeah you ll can run it on a 386 but S L O W Also I packed a shower and a converter from to the RLE file format Raul y Quique nuevos hp400 ccu uniovi es Princeton EDU I am placing in weedeater math yale edu incoming 3 executables getX11 rayshade 4 0 6 raypaint 4 0 6 which have been ported to SCO UNIX Univel SVR They will run in both environments These have been optimized for INTEL 486 Pentium processors to use on chip FPU cache memory Robert Walsh SCO robertwa sco com I have just uploaded a port of rayshade 4 0 6enh2 to OS 2 2 1 to weedeater math yale edu Most of the patches posted through July 20 1993 to this list have been added David C Browne DBROWNE diamond kbsi com Check out the June issue of Omni Magazine page 52 The computer generated image of HIV created on a Cray Super Computer was done with Rayshade It really looks much larger in person A larger version of this image may be found on fconvx ncifcrf gov in tmp rayshade as virion rle Z For more info you can contact me at mcgregor ncifcrf gov or Connor McGrath at mcgrath ncifcrf gov Please see the acknowledgment txt file for a few more details RTrace Radiosity related The lightR radiosity program from Bernard Kwok ae140 freenet carleton ca is now available to run in a PC with DOS DJGPP GO32 extender You can ftp a working version with some scenes and utils at asterix inescn pt 192 35 246 17 in directory pub LightR PC 386 lightr12 arj The source code is in pub LightR PC 386 src lightr arj I found the program very interesting and it helped me to learn a lot about Radiosity a rendering algorithm I have also adapted its output to the RTrace ray tracer so that nice images could be produced lightr scn2sff rtrace PAT VW SCN SFF PIC PPM I included minimal docs and specs but I intend to improve this area in the future Please feel free to contact me Antonio Costa acc asterix inescn pt There is a new version of the RTrace ray tracing package 8 3 2 at asterix inescn pt 192 35 246 17 in directory pub RTrace Check the README file RTrace now can use the SUIT toolkit to have a nice user interface Compile it with DSUIT or modify the Makefile SUIT is available at suit uvacs cs virginia edu I have put in pub RTrace here 2 PostScript docs describing the syntax of both SFF and SCN I would many people to read them and send me comments if possible The files are sffv8 p ps Z and scn15 p ps Z Antonio Costa acc asterix inescn pt There are undoubtedly a large number of other changes and additions to RTrace by this time Antonio seems to have unlimited time and energy for this thing For example I noticed he now has an IRIS Inventor input interpreter Check with him for the latest EAH Vivid Bob related Triangular Glob Generator v1 0 copyright 1993 Dov Sherman For use with Stephen Coy s Vivid Raytracer v1 0 or higher GLOB is a handy utility for creating more realistic rounded objects without relying on bezier patches which are still good but hard to work out on paper GLOB takes an ASCii file containing the coordinates and radii of a series of spheres and creates smooth connections between each sequential pair connecting the first and third spheres in each sequential triple and placing a triangular polygon over the gap created by a sequential triple I ll try to explain this better later The output is in the form of an include file for Stephen Coy s Vivid Raytracer Other raytracer formats may be supported in future versions if I ever manage to figure out the other ones GLOB10 ZIP is available from wuarchive wustl edu I just put it in pub MSDOS UPLOADS graphics Also available on the You Can Call Me Ray BBS Dov Sherman DS5877 CONRAD APPSTATE EDU POV related Ray Tracing Creations Drew Wells Chris Young Dan Farmer The Waite Group 1993 ISBN 1 878739 27 1 This book covers the POV ray tracer from soup to nuts with lots of examples and whatnot Essentially it s a users manual for POV and it comes with POV 1 0 on disk Eric Haines There s a new GUI modeller call MORAY out for POV Ray This is the most complete modeller for POV Ray I ve seen so far It supports most of POV Ray s primitives CSG hierarchical linking and has an nice bezier patch editor Here s a short description from the docs MORAY V1 3 is an easy to use GUI modeller for use with POV Ray 1 0 and 2 0 when released It supports the cube sphere cylinder torus cone heightfield and bezier patch primitive as well as adding conic rotational and translational sweeps You can add spot lights bounding boxes textures and cameras which show the scene in wireframe 3D Shareware US 59 Not crippled Requires 286 or higher mouse runs on VGA and SVGA VESA MORAY version 1 3 is available at ftp informatik uni oldenburg de in pub dkbtrace incoming Steve Anger 70714 3113 CompuServe COM No POV 2 0 is not out yet To whet your appetite POV 2 0 includes automatic bounding boxes better textures recursive antialiasing primitives for finite cylinders cones The parser will now accept mathematical expressions for vectors and floating point numbers It also has some bugfixes When using PoV on a X window based Unix system as f i Linux you may use my x256q Previewer code instead of the xwindows code that comes with PoV It resides on irz301 inf tu dresden de pub gfx ray misc x256q Andre Beck beck irzr17 inf tu dresden de Check out the 3d l system generator ms dos for POV Ray raytracer I found on the graphics alternative bbs 510 524 2780 the qbasic source makes a raw coordinate file for input to raw2pov for smooth triangle output 3 examples from algorithmic beauty of plants provides about 8 variables that one can fuss with to produce diff shape trees bushes uploaded as treebas zip to ftp informatik uni oldenburg de pub dkbtrace incoming mirrored on wuarchive wustl edu graphics graphics mirrors ftp infor Tony Audas taudas umcc umcc umich edu I use POVRAY and the small Makeanim program to do animation using makeanim you create a file with a series of movement variables and it defines them into the pov code and raytraces them all in sequence So if you want a camera pan diagonally upward your anm file should look like pan x pan y 0 0 1 1 2 2 etc It will define these for you and they should be used instead of x and y in your camera definition Makanim will only handle 20 variables unfortunately so you can really only make 20 or less things move but if you move the camera around this can make up for things Dane Jasper dane nermal santarosa edu RAW2POV is a utility that converts triangle data listed in xyz triplets to POV Ray smooth triangles It automatically adds its own bounding volume hierarchy to overcome POV Ray s lack of an efficiency scheme This program is on the YCCMR BBS and the TGA BBS as RAWPOV17 ZIP Both DOS binaries and C source are included Also see 3DSPOV writeup above Steve Anger 70714 3113 CompuServe COM If you have any comments or suggestions about POVCAD please let me know The home of POVCAD is Pi Square BBS 301 725 9080 in Maryland USA You may download POVCAD DOS or Windows version and get the latest info on it POVCAD is up to version 2 0b for Windows by now and has more features than the non Windows version there are also rumors that an X Windows version may be forthcoming EAH Alfonso Hermida afanh stdvax gsfc nasa gov A lot of developers A Hermida Lutz Kretschmar Dan Farmer Stephen Coy also hang out the PCG Professional CAD Graphics Net You can get access to this net via the BBS es mentioned in the PoV docs and in Europe via BBS Bennekom fido node 2 281 283 telephone 31 8389 15331 Using Bluewave I can read and write in the echos for free Han Wen Nienhuys hanwen STACK URC TUE NL In the PC world I have use a program called VVFONT It uses the stroke fonts in borland and produces the characters as unions of spheres codes planes boxes cylinders etc It produces very good results and allows for rounded block and beveled format for POV DKB and Vivid ray tracers If I don t see it on the net I will check with the author and download it somewhere and post the location if there is any interest shown Mike Hoyes hoyes rock concert net I ve uploaded my uppercase only alphabet to ftp informatik uni oldenburg de pub dkbtrace incoming or some such place you know the one I mean The letters consists of cylinders and torii suitably bounded for performance reasons There is also a utility for writing strings and two sample pov files Oh yes almost forgot The file is called beta zip as there is already an alpha zip Imaginative huh Reidar Radar Husmo radar cs keele ac uk There are a few other ways to render text Look in ftp informatik uni oldenburg de pub dkbtrace there are two alphabet pov files alpha zip and beta zip examples of using pov shape types in creating 3D text Another way I can think of is to use the connect the dots utility to create letters Further possibilities include using Vision 3D s extruder to extrude the text and output DXF then convert to pov triangles A third method I think may work is to use Paul Bourke s BitSurface utility which converts bit maps to DXF and again convert to pov Helmut Dotzlaw dotzlaw CCU UMANITOBA CA I produce fonts for PoV commercially see RTNv6n2 for more info EAH For a demo and some sample letters have a look in ftp informatik uni oldenburg de pub dkbtrace incoming or pub dkbtrace utils for some of these avantest zip 38988 21 10 92 5 14 fntbench zip 33628 21 02 93 17 25 fntsamp zip 132164 23 07 93 5 58 tms rom jpg 27560 21 02 93 17 28 Kirk2 jpg illustrates the use of the fonts in a more professional capacity Andrew Haveland Robinson andy OSEA DEMON CO UK One of the best utilties I ve found for POV is called SP Dave s Spline Path Generator You can find this on the You Can Call Me Ray BBS Basically you make a data file of a number of points and some other information and SP will calculate position and rotations for your camera You can do acceleration deceleration etc with it as well Its downfall at least as of version 0 3 is that it only does one frame at a time you tell it which of the N frames to compute It s relatively easy to make a batch file for this though Jason Barile barilejb ctrvax vanderbilt edu A good many of the utilities for POV Ray have been designed to use what we call raw format bare vertex data which can be bound very tightly in a hierarchical structure of bounding boxes by a utility by Steve Anger called RAW2POV RAW2POV can also do Phong interpolation on the triangles if desired Any serious raytracing of large triangle databases in POV 1 0 is done with data that has been processed by RAW2POV Nobody tries it twice without it Dan Farmer CIS 70703 1632 POV on Mac utilities Thanks to The Evil Tofu I was recently made aware of a collection of utilites for POV which have been ported to the Mac by Eduard esp Shwan of the Compuserve Group called POV Mac Utilities 1 1 With kind permission of the author it has been uploaded to the Internet The application contains the following utilities Coil Generator Bill Kirby Connect the Dots CDTS Truman Brown Dat2POV Drew Wells DXF2POV Aaron A Collins Lissa Lissajous Generator Eduard esp Schwan POV Suds Generator Sam Hobbs Dan Farmer Raw2POV Steve Anger Shell Generator Dan Farmer Sponge Generator Stephen Coy Swoop Douglas Otwell Also I think worthy of mention is that Paul D Bourke s Vision 3D modeller for the Mac which can export DXF files supports lathing and extruding capabilities Hmm I wonder if I lathed something and used Mac POV Utils to generate a DXF POV Paul has also recently written a program BitSurface which will generate DXF from bitmap files Hmm again Mac POV Utils 1 1 can be found at summex aim stanford edu info mac grf util pov utilities 11 hqx Freeware Vision 3D and BitSurface can be found at wuarchive wustl edu mirrors architec Shareware Helmut Dotzlaw dotzlaw CCU UMANITOBA CA Does anyone have a leaf generator a tree generator flowers Look at treebas tree generator in qbasic msdos Is there a technique for getting that rainbow effect that you see on a Compact Disc Look at the texture in bubble pov an iridescent shimmering rainbow smear Both are available by anonymous ftp in ftp informatik uni oldenburg de pub dkbtrace incoming mirrored on wuarchive wustl edu graphics graphics mirrors ftp infor Tony Audas taudas UMCC UMICH EDU Xmgf 1 1 Motif based 3D Object Viewer xmgf can be found on export lcs mit edu in contrib files xmgf README xmgf 1 1 tar Z You ll need MOTIF and patience Have fun and feedback will be welcomed good and bad Paul Hoad P Hoad ee surrey ac uk SIGGRAPH May issue on line By popular demand we have created a tar ed and compress ed version of the May 93 experimental online edition of the SIGGRAPH Computer Graphics newsletter It is in file ftp publications May 93 online May 93 online tar Z available via anonymous ftp from siggraph org This file contains the PostScript version of the newsletter It is 3 2MB in size compressed and uncompresses to 15MB Sue Mair mair ucs ubc ca A friend of mine Jason Wilson created a very basic radiosity package This package runs on the Next Platform version 3 0 or higher ftp cs rose hulman edu under pub CS dept file NeXtrad tar Z Leslie Donaldson Donaldlf cs rose hulman edu MacCubeView 1 0 0 A 3D image display programme for the Macintosh is now available via anonymous ftp from ftp ftp hawaii edu mirrors info mac sci mac cube view 16 hqx This programme is suitable for viewing 3D eight bit medical images A 3D MR image of the author s head is included Daniel W Rickey physics escape ca Some weeks ago we sent a public message with the press release of Real Light 1 0 a radiosity based rendering package People interested in watching some RGB image of environments created by Real Light can take them by anonymous ftp at ftp iunet it 192 106 1 6 in the directory ftp vendor Atma Cristiano Palazzini atma relay1 iunet it There is an interesting 3D Space Shuttle model database in dxf AutoCad nff neutral file format for Sense8 and vid amiga VideoScape ftp anonymous artemis arc nasa gov 128 102 115 149 in sig wtk models directory Emerico Natonek natonek imtsg5 epfl ch Is there any public domain code out there for generating polygonal models of human faces given a small set of parameters There are some things available by anonymous ftp to wuarchive wustl edu under graphics graphics misc facial animation James R Jim Bob Bill jimbob rainier ucsc edu Thanx to Juhana the PostScript version of my thesis can be obtained from nic funet fi pub sci papers graphics suma93 tar gz 1115072 bytes He promises that it will be made available from princeton edu pub Graphics Papers suma93 tar gz The file is GNU zip compressed He says GNU zip gives him better compression So gunzip has to be used for uncompression Sumanta N Pattanaik sumant saathi ncst ernet in A Sumanta N Pattanaik T Computational Methods for Global Illumination and Visualisation of Complex 3D Environments R PhD thesis I Birla Institute of Technology Science Computer Science Department Pilani India D November 1990 K adjoint illumination equations particle model of light random walk importance sampling Given the number of modelers coming out for ray tracers IRIT 4 0 should be out soon by the way I thought I should give a plug to Ken Shoemake s wonderful ArcBall technique for interactive rotations of objects The original paper is AUTHOR Ken Shoemake TITLE ARCBALL A User Interface for Specifying Three Dimensional Orientation Using a Mouse PROCEEDINGS Graphics Interface 92 YEAR 1992 PAGES pp151 It s a very intuitive easy to implement technique which can be used for unconstrained or constrained rotations I needed one hint to understand the full functionality of the technique other than that it was obvious to use The short paper available on the net for the Mac see below explains it all Eric Haines An example written for the Mac by Shoemake is available on linc cis upenn edu in the directory pub graphics arcball The file arcball is the example while the arcball paper is the GI paper Note to decode the files you need to use BinHex 4 0 BinHex 5 0 will not work for these files unless you are willing to edit off the heading portion of them Duanfeng He Jackson Duanfeng He AtlantaGa NCR com I have a version of Shoemake s ArcBall I wrote and I m making it available You ll have to do some work however as it uses my graphics library You have to know enough about programming in your own 3d library to be able to convert some types and routines although it will be really simple a matter of finding equivalents for types such as vectors and matrices and using your own draw routines If you use something like GL it will be trivial as that s what my graphics library is based on It s available on cs columbia edu pub bm arcball That said I d like to thank Ken for his excellent paper The ARCBALL concept aside the arc drawing routines are pretty darn cool Blair MacIntyre bm shadow columbia edu Hidden surface renderer well it s not really ray tracing related but I m not a purist I m after a Gourand Z buffer polygon scanline example The one in Gems I PolyScan looks pretty good but as poly scan c is dated 1985 and 1989 I was wondering if any improvements or optimizations have been made or bug fixes I haven t used the code as it is but am looking around before writing my own redering library You may want to grab libXG 2 0 tar Z from ftp ai mit edu down pub users sundar It has examples of sutherland hodgman clipping z buffer scanline code etc The doc directory contains a postscript manual which documents all the functions This is a 3 d graphics library that runs under X It doesn t aim to be super fast but it does handle multiple polygons with loops or holes inter penetrating polygons polygons with cyclical overlap etc Sundar Narasimhan sundar ai mit edu Least impressive ray tracer dept A recent issue of RS Magazine has an article on using the IBM RS 6000 for mechanical CAD and they found it worthwhile to include a picture of an RX 6000 displaying a ray traced picture of a first level sphereflake They liked it so much they used it three times But since it s only first level a big sphere surrounded by several spheres just a bit smaller it doesn t exactly cry out that the RS 6000 is a power cruncher does it Tim O Connor back to contents Simple Sphere Tessellation by Mike Castle mcastle cs umr edu How sphere c works at wustl and other places Start off with 6 points on a unit sphere 1 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 1 These form a octahedron Each of the 8 triangles is taken one at a time Take one triangle and choose its midpoint by averaging the coordinates of the three points Normalize that point so it s now projected back onto the unit sphere Replace the original triangle with 3 triangles based on the original 3 points and the new 4th point Recurse the level of recursion is user specified Voila tessellated sphere back to contents Syndesis CD ROM Review by Eric Haines This is the CD ROM mentioned last issue It contains more than 600 models and more than 400 textures and costs 200 I received a review copy during SIGGRAPH and it s an interesting collection The collection was made as a way of publicizing Syndesis InterChange Plus software which converts 3D model data in various formats Though it s ISO 9660 and all that I still had problems reading it on the Gateway CDROM drive next to me I don t know where the problem lay but our systems administrator said such problems are fairly common I was able to read the CDROM on other drives just fine There are of course a ton of files on the disk There should also be more disks in the future and Mr Foust has a policy in which contributors whose creations are accepted get a free disk contact him for more information In fact if you can identify yourself as the author of any of the works on this first disk you can get a free disk a bit of a key locked in the treasure chest situation admittedly since you pretty much need the disk to see if your creation is on it The book that comes with the disk is quite useful as it has thumbnail grayscale images of some of the textures and some of the models included on the disk Unfortunately not all of them are shown only about 160 of the 600 models are displayed and the synthesized textures are not shown However the models are all listed with descriptive titles and there is also an index which can be pretty helpful On the disk there are summary images of the textures available showing thumbnail sketches of all textures available The models come in 3D Studio Autocad DXF Imagine IOB Wavefront OBJ and Lightwave formats I should note that it s pretty easy to convert from IOB to many formats by using the converter at wuarchive wustl edu in graphics graphics objects TDDD The models vary in quality of course but the disk is not a collection of every free model ever made while limited to what was out there for free there are few trivial or poorly modeled objects The scope is quite amazing and Syndesis has done quite a job in making this collection On the disk there are some interesting models from Viewpoint which were supposed to be in their SIGGRAPH 93 free distribution but in fact were not distributed there they distributed a bunch of beach related models instead a car Big Ben a deer head elbow bones and various military hardware The textures are all tileable and in TIFF GIF IFF formats It s a little annoying that the tiff images do not have the standard tif suffix The textures overall are usable but nothing fantastic The synthetic textures some 262 of these are 256x256 and some are pretty interesting but they tend to have the same feel to them The other textures about 150 of these described below are fairly low resolution 128x128 at very best Some of these are tileable simply by doing mirroring along the x and y axes All in all some cute stuff but don t expect a professional quality tileable wood or marble here In addition in a demos directory there are a bunch of stills and FLI animations for the various companies whose work is on the disk There is also a text area with an archive of the Imagine and Lightwave electronic mailing lists literally megabytes of advice here All in all this is a great resource for amateurs and professionals who make 3D images Some of the models are incredible and the textures while not particularly fantastic in and of themselves I consider pure icing There s a lot to explore here Considering that a single model from Viewpoint can cost much more than this entire disk if you re a professional and use even just a few models from this CDROM you re ahead of the game John Foust notes About 135 of the textures were captured and massaged from hand made public domain Macintosh desktop textures PPAT resources they call them The others were generated by a super Mac program called Texture Synth which uses a few basic seed textures recombined with color and multiple sine wave textures They look very nice a little synthetic at times but in an organic synthetic sort of way Contact John Foust Syndesis Corporation 76004 1763 CompuServe COM back to contents Ray Tracing Related Abstracts from the Proceedings of Graphics Interface 93 May 19 21 1993 Toronto Ont CA These proceedings are available from Morgan Kaufmann Publishers 415 965 4081 ISBN 0 9695338 2 9 A Alain Fournier A Pierre Poulin T A Ray Tracing Accelerator Based on a Hierarchy of 1D Sorted Lists A Jon Genetti A Dan Gordon T Ray Tracing With Adaptive Supersampling in Object Space A David P Dobkin A Don P Mitchell T Random Edge Discrepancy of Supersampling Patterns back to contents Ray Tracing Papers in the First Bilkent Computer Graphics Conference ATARV 93 Ankara Turkey July 1993 A Parallel Implementation of a Ray Tracer on a Shared Memory Multiprocessor E Camahort G Quintana R Vivo and A M Vidal Departamento de Sistemas Informaticos y Computacion Universidad Politecnica de Valencia SPAIN An Efficient Parallel Spatial Subdivision Algorithm for Parallel Ray Tracing Complex Scenes V Isler C Aykanat and B Ozguc Dept of Computer Eng and Information Science Bilkent University TURKEY Modelling Rodin s Thinker A Case Study Combining PHIGS and Ray tracing G Williams A Murta and T Howard Dept of Computer Science University of Manchester U K A File Format for Interchange of Realistic Scene Descriptions P Guitton and C Schlick LaBRI Talence FRANCE back to contents Fourth Eurographics Workshop on Rendering Paris France June 14 16 by Francois Sillion sillion dmi ens fr There may be some proceedings left for sale contact Francois for information The program included 24 contributed papers on a variety of topics and three invited presentations Dynamic Stratification Andrew Glassner Progressive Ray Refinement for Monte Carlo Radiosity Martin Feda Werner Purgathofer Invited Realism in real time Erik Jansen Making Shaders More Physically Plausible Robert Lewis Illumination of Dense Foliage Models Christopher Patmore A Customizable Reflectance Model for Everyday Rendering Christophe Schlick Importance and Discrete Three Point Transport Larry Aupperle Pat Hanrahan A Continuous Adjoint Formulation for Radiance Transport Per Christensen David Salesin Tony DeRose Wavelet Projections for Radiosity Peter Schroeder Steven Gortler Michael Cohen Pat Hanrahan Continuous Algorithms for Visibility The Space Searching Approach Jenny Zhao David Dobkin Invited paper Viewpoint Analysis of Drawings and Paintings Rendered Using Multiple Viewpoints Cases Containing Rectangular Objects Yoshihisa Shinagawa Saeko Miyoshi Tosiyasu Kunii Constant Time Filtering by Singular Value Decomposition Craig Gotsman Measuring the Quality of Antialiased Line Drawing Algorithms Terence Lindgren John Weber Invited How to solve it Pat Hanrahan Numerical Integration for Radiosity in the presence of Singularities Peter Schroeder Optimal Hemicube Sampling Nelson Max Roy Troutman Fast Calculation of Accurate Form Factors Georg Pietrek Grouping of Patches in Progressive Radiosity Arjan Kok Blockwise Refinement A New Method for Solving the Radiosity Problem Gunther Greiner Wolfgang Heidrich Philipp Slusallek Analysis and Acceleration of Progressive Refinement Radiosity Method Min Zhi Shao Norman Badler Texture Mapping as a fundamental Drawing Primitive Paul Haeberli Mark Segal A Methodology for Description of Texturing Methods Pascal Guitton Christophe Schlick Visualization of Mixed Scenes based on Volumes and Surfaces Dani Tost Anna Puig Isabel Navazo Physically Realistic Volume Visualization for Interactive Image Analysis H T M Van der Voort H J Noordmans J M Messerli A W M Smeulders Reconstruction of Illumination functions using Bicubic Hermite Interpolation Rui Manuel Bastos Antonio Augusto de Sousa Fernando Nunes Ferreira Mesh Redistribution in Radiosity Miguel P N Aguas Stefan Muller Accurate Rendering of Curved Shadows and Interreflections G R Jones C G Christou B G Cumming A J Parker back to contents Gamma Correction Frequently Asked Questions by Graeme Gill graeme labtam labtam oz au I get regular questions about gamma correction since I go to great pains to deal with it properly in xli the image loader program I maintain Here is an explanation I often use to answer these questions A note on gamma correction and images Author Graeme W Gill graeme labtam oz au Date 93 5 16 What is all this gamma stuff anyway Although it would be nice to think that an image is an image there are a lot of complications Not only are there a whole bunch of different image formats gif jpeg tiff etc etc there is a whole lot of other technical stuff that makes dealing with images a bit complicated Gamma is one of those things If you ve ever downloaded images from BBS or the net you ve probably noticed with most image viewing programs that some images look ok some look too dark and some look too light Why is this you may ask This is gamma correction or the lack of it Why do we need gamma correction at all Gamma correction is needed because of the nature of CRTs cathode ray tubes the monitors usually used for viewing images If you have some sort of real live scene and turn it into a computer image by measuring the amount of light coming from each point of the scene then you have created a linear or un gamma corrected image This is a good thing in many ways because you can manipulate the image as if the values in the image file were light i e adding and multiplying will work just like real light in the real world Now if you take the image file and turn each pixel value into a voltage and feed it into a CRT you find that the CRT doesn t give you an amount of light proportional to the voltage The amount of light coming from the phosphor in the screen depends on the the voltage something like this Light out voltage crt gamma So if you just dump your nice linear image out to a CRT the image will look much too dark To fix this up you have to gamma correct the image first You need to do the opposite of what the CRT will do to the image so that things cancel out and you get what you want So you have to do this to your image gamma corrected image image 1 crt gamma For most CRTs the crt gamma is somewhere between 1 0 and 3 0 The problem is that not all display programs do gamma correction Also not all sources of images give you linear images Video cameras or video signals in general Because of this a lot of images already have some gamma correction done to them and you are rarely sure how much If you try and display one of those images with a program that does gamma correction for you the image gets corrected twice and looks way to light If you display one of those images with a program that doesn t do gamma correction then it will look vaguely right but not perfect because the gamma correction is not exactly right for you particular CRT Whose fault is all this It is really three things One is all those display programs out there that don t do gamma correction properly Another is that most image formats don t specify a standard gamma or don t have some way or recording what their gamma correction is The third thing is that not many people understand what gamma correction is all about and create a lot of images with varying gamma s At least two file formats do the right thing The Utah Graphics Toolkit rle format has a semi standard way of recording the gamma of an image The JFIF file standard that uses JPEG compression specifies that the image to be encoded must have a gamma of 1 0 i e a linear image but not everyone obeys the rules Some image loaders for instance xli an X11 image utility allow you to specify not only the gamma of the monitor you are using but the individual gamma values of image you are trying to view Other image viewers e g xv another X11 image program and utilities e g the pbm toolkit provide ways of changing the gamma of an image but you have to figure out the overall gamma correction yourself allowing for undoing any gamma correction the image has and then the gamma correction you need to suite your CRT monitor Note that xv 2 21 doesn t provide an easy way of modifying the gamma of an image You need to adjust the R G and B curves to the appropriate gamma in the ColEdit controls Altering the Intensity in the HSV controls doesn t do the right thing as it fails to take account of the effect gamma has on H and S This tends to give a tint to the image The simplest way to do that is to try loading the file chkgamma jpg provided with xli distribution which is a JFIF jpeg format file containing two grayscale ramps The ramps are chosen to look linear to the human eye one using continuous tones and the other using dithering If your viewer does the right thing and gamma corrects images then the two ramps should look symmetrical and the point at which they look equally bright should be almost exactly half way from the top to the bottom To find this point it helps if you move away a little from the screen and de focus your eyes a bit If your viewer doesn t do gamma correction then left hand ramp will have a long dark part and a short white part and the point of equal brightness will be above the center If your viewer does have a way of setting the right amount of gamma correction for a display then if the equal brightness point is above center increase the gamma and decrease it if it is below the center The value will usually be around 2 2 with xli for instance you can adjust the display gamma with the dispgamma flag and once you ve got it right you can set the DISPLAY GAMMA environment variable in your profile This is the most tricky bit As a general rule it seems that a lot of true color i e 24 bit ppm jpg images have a gamma of 1 0 linear although there are many about that have some gamma correction It seems that the majority of pseudo color images i e 8 bit images with color maps gif etc are gamma corrected to some degree or other If your viewer does gamma correction then linear images will look good and gamma corrected images will look too light If your viewer doesn t do gamma correction then linear images will look too dark and gamma corrected images will ok One of the reason that many high quality formats such as Video use gamma correction is that it actually makes better use of the storage medium This is because the human eye has a logarithmic response to light and gamma correction has a similar compression characteristic This means images could make better use of 8 bits per color for instance if they used gamma correction The implication though is that every time you want to do any image processing you should convert the 8 bit image to 12 or so linear bits to retain the same accuracy Since little popular software does this and none of the popular image formats can agree on a standard gamma correction factor it is difficult to justify gamma corrected images at the popular level If some image formats can standardize on a particular gamma and if image manipulation software takes care to use extra precision when dealing with linearized internal data then gamma corrected distribution of images would be a good thing I am told that the Kodak PhotoCD format for instance has a standard gamma correction factor that enables it to get the highest quality out of the bits used to hold the image back to contents 3D Studio Rendering by Chris Williams chrisw fciad2 bsd uchicago edu I ve read numerous times in this newsgroup that Autodesk 3d Studio v2 doesn t support ray tracing I m just wondering how one renders images with lights objects casting shadows as well as reflection mapping materials without raytracing Can someone tell me what I m missing here Shadows are done via Z buffering Imagine that you wish to have an object cast a shadow on a floor Render the scene once from the point of view of the shadow casting spotlight The areas that are obscured in that image the underside of the object and part of the floor will be in shadow when rendered from the regular camera When the scene is actually rendered that image which also contains depth information i e how far each surface was from the shadow spot is used to to determine what is and isn t in shadow Reflections are done with reflection maps or cubic environment maps Take the example of a chrome ball on a checkered floor please Place the camera inside the chrome ball Render six images one in each of the cardinal directions square These six pos X neg X pos Y neg Y pos Z and neg Z are combined into one image that is wrapped around the ball It usually works pretty well Frankly most people pay little attention to the content of a reflection and it s possible to cheat like a professional wrestling villian One other advantage of reflection maps once the reflected items are in the map if they aren t otherwise visible in the scene they no longer need to be in the scene In raytracing every reflected object has to be there and costs quite a bit If your object is a brushed metal for instance you can just paint blobs of color and blur the whole thing and use that as your reflection map back to contents Ray Bezier Patch Intersection by Chuck McKinley Max Froumentin mckinley fed3005 ne1300 ingr com froument lifl lifl fr Chuck McKinley writes If some kind person has access to a mathematical package such as Mathematica Maple I would like to ask you for the solution to the following problem I sometimes have algebra problems like this where I would like a simplified symbolic solution Is there a FTP able package out there that can handle such beasts I would like to solve the following ray Bezier patch intersection for the scalar constant t in P t V Q u w origin point in 3D dir vector 3D Max Froumentin replies Well there is a formula But you probably don t want to know it One usual method is to write the Bezier parametric equation Q u v in the form of an implicit surface f x y z 0 where f is a polynomial You can then insert the parametric equations of your ray and get a equation in t giving you the intersection points That s all right for low degree surfaces like planes or quadrics But for a Bezier patch of parametric degree n the resulting implicit equation is of degree 2n 2 As you use degree 3 Bezier patches you will get an implicit equation of degree 18 Even if you type the whole formula in your program you probably know of the extremely low accuracy of high degree polynomials in computers Instead people use approximation methods like two dimensional Newton iteration See the book by Glassner on ray tracing for further details or look at the POV source code back to contents Turbulence and Noise by Ken Perlin Since course notes are so hard to get I thought I would reprint this Bernie Kirby sent this to Thomas Setzer who posted it and now it s here EXCERPTED FROM SIGGRAPH 92 COURSE 23 PROCEDURAL MODELING Ken Perlin New York University 3 6 TURBULENCE AND NOISE 3 6 1 The turbulence function The turbulence function which you use to make marble clouds explosions etc is just a simple fractal generating loop built on top of the noise function It is not a real turbulence model at all The key trick is the use of the fabs function which makes the function have gradient discontinuity fault lines at all scales This fools the eye into thinking it is seeing the results of turbulent flow The turbulence function gives the best results when used as a phase shift as in the familiar marble trick sin point turbulence point point x Note the second argument below lofreq which sets the lowest desired frequency component of the turbulence The third hifreq argument is used by the function to ensure that the turbulence effect reaches down to the single pixel level but no further I usually set this argument equal to the image resolution float turbulence point lofreq hifreq float point 3 freq resolution float noise3 freq t p 3 p 0 point 0 123 456 p 1 point 1 p 2 point 2 t 0 for freq lofreq freq 3 6 2 The noise function noise3 is a rough approximation to pink band limited noise implemented by a pseudorandom tricubic spline Given a vector in 3 space it returns a value between 1 0 and 1 0 There are two principal tricks to make it run fast Precompute an array of pseudo random unit length gradients g n Precompute a permutation array p of the first n integers Given the above two arrays any integer lattice point i j k can be quickly mapped to a pseudorandom gradient vector by g p p i j n k n By extending the g and p arrays so that g n i g i and p n i p i the above lookup can be replaced by the somewhat faster g p p i j k Now for any point in 3 space we just have to do the following two steps 1 Get the gradient for each of its surrounding 8 integer lattice points as above 2 Do a tricubic hermite spline interpolation giving each lattice point the value 0 0 The second step above is just an evaluation of the hermite derivative basis function 3 t t 2 t t t in each by a dot product of the gradient at the lattice Here is my implementation in C of the noise function Feel free to use it as long as you reference where you got it noise function over R3 implemented by a pseudorandom tricubic spline include include define DOT a b a 0 b 0 a 1 b 1 a 2 b 2 define B 256 static p B B 2 static float g B B 2 3 static start 1 define setup i b0 b1 r0 r1 t vec i 10000 b0 int t B 1 b1 b0 1 B 1 r0 t int t r1 r0 1 float noise3 vec float vec 3 int bx0 bx1 by0 by1 bz0 bz1 b00 b10 b01 b11 float rx0 rx1 ry0 ry1 rz0 rz1 q sy sz a b c d t u v register i j if start start 0 init setup 0 bx0 bx1 rx0 rx1 setup 1 by0 by1 ry0 ry1 setup 2 bz0 bz1 rz0 rz1 i p bx0 j p bx1 b00 p i by0 b10 p j by0 b01 p i by1 b11 p j by1 define at rx ry rz rx q 0 ry q 1 rz q 2 define surve t t t 3 2 t define lerp t a b a t b a sx surve rx0 sy surve ry0 sz surve rz0 q g b00 bz0 u at rx0 ry0 rz0 q g b10 bz0 v at rx1 ry0 rz0 a lerp sx u v q g b01 bz0 u at rx0 ry1 rz0 q g b11 bz0 v at rx1 ry1 rz0 b lerp sx u v c lerp sy a b interpolate in y at lo x q g b00 bz1 u at rx0 ry0 rz1 q g b10 bz1 v at rx1 ry0 rz1 a lerp sx u v q g b01 bz1 u at rx0 ry1 rz1 q g b11 bz1 v at rx1 ry1 rz1 b lerp sx u v d lerp sy a b interpolate in y at hi x return 1 5 lerp sz c d interpolate in z static init long random int i j k float v 3 s Create an array of random gradient vectors uniformly on the unit sphere srandom 1 for i 0 i 1 0 If not in sphere try again s sqrt s for j 0 j 0 i 2 k p i p i p j random B p j k Extend g and p arrays to allow for faster indexing for i 0 i back to contents Ray Tracing Research Ideas by Klaus Lisberg Kristensen lisberg daimi aau dk Christian Gautier Some of these ideas have already been researched a bit some ideas I don t understand but I thought I d pass on the list EAH We put a request out for research topics in ray tracing We have received a lot of good ideas articles etc and we are now going through all of them The areas suggested are in very short terms Methods to model the colors using spectral curves for the light sources This could help problems like color aliasing and machine dependency Modelling reflections from oil in a water puddle turbulent water stream human bodies or dinosaurs by modelling every muscle Modelling dirt was suggested by several people Alternative ray tracing methods Non realistic rendering Don Mitchell s interval arithmetic approach to intersection A memory efficient algorithm for discrete ray tracing Radiosity simulation by stochastic ray tracing Optically correct lens emulators Modelling clouds misty nights or a river in the mountains back to contents POV Ray Utilities by Dan Farmer 70703 1632 CompuServe COM This listing is about a year out of date I thought I would include this old list to give a sense of the support out there for POV There s lots more out there than just this anyone with a current list please do send it on EAH Object Creation Utilities CHAIN101 ZIP Chain generator CHEMCONV ZIP Convert data from Larry Puhl s CHEM molecular modeller CM ZIP CircleMaster Truman Brown allows you to create clipped spheres and ellipses that can cap your hyperboloids of two sheets perfectly giving the illusion of quartic blobs WORM02 ZIP Paint with spheres to generate points for CTDS CTDS ZIP Connect The Dots Smoother Truman Brown Raytrace sources makes your WORM output POV compatible Writes a file using the WORM data with your choice of spheres or ellipsoids and will either connect the spheres with cones and cylinders or just output the dots FONT2DAT ZIP Converts GRASP fnt and set font files to POV Ray text Fonts included FRGEN13 ZIP Midsection triangular displacement fractal surface generator LISS152 ZIP Generate 3D Lissajous traces with spheres LISSAJ ZIP Another Lissajous path generator w graphics preview PICKSHEL ZIP Make snail shells from spheres POVCOIL2 ZIP Hard to describe twisted coil objects POV Sources POVTORUS ZIP Makes torus like objects using cylindrical sections SHADE1 ZIP Lampshade generator SPIKE ZIP Generate shapes with radial projection SPRING12 ZIP Generates and animates springs SUDS ZIP Generates a glob of tangent spheres rather like suds TTG ZIP Creates POV Ray torus data the easy way Truman Brown TWISTER ZIP Twisted objects such as Archimedes spirals SWOOP ZIP Hard to describe extrusion generator Very versatile Miscellaneous Utilities CRNDR CRENDER allows you to drop in and design that elusive color lighting combination that you are looking for it shines when it comes to designing just the right surface qualities Lets you interactively play with many texture variables and see them rendered almost instantly on screen then dump the texture to a POV file Highly recommended for learning about textures POV sources MAKETILE ZIP Actually a PICLAB script Great for making imagemaps SPLITPOV ZIP Run a POV Ray image in sections on multiple computers and glue them back together automatically Best for use over a network Generates batchfiles TCE201 ZIP The Color Editor Dan Farmer A color viewer editor Create edit your colors inc file Animation Utilities ACCEL ZIP Generate acceleration data for use in an animation ANIMK05B ZIP Excellent animation generator CAMPATH1 ZIP Generate circular lemniscate polar and other camera path data RTAG ZIP Special animation language shareware ANIBATCH ZIP Simple linear motion generates a single batch file that creates frame data at runtime AWKBLOB AWK Converts raw sphere data in the form of x y z r into blob components for POV Ray HSM2POV AWK Convert data from Mira Imaging s Hyperspace format to POV Ray triangle data HSM2RAW AWK Convert data from Mira Imaging s Hyperspace format to raw triangle data By adding a sphere radius to the output vector and running the output through AWKBLOB AWK you could also convert Hyperspace data to blobs Data Conversion Utilities RAW2POV ZIP Steve Anger raw triangle vector data to well bounded POV Ray format as either normal or Phong shaded triangles Very useful with other programs but it doesn t really do anything by itself 3DS2POV ZIP AutoDesk 3D Studio ASCII data to POV Ray files 3D2POV15 ZIP Amiga Sculpt3D to POV Ray format 3D2 POV Cyber Sculpt Atari 3D2 files DXF2POV ZIP AutoCAD and other DXF file data to POV Ray files SA2POV ZIP Sculpt Animate data to POV Ray files SNDPPR ZIP raw triangle data to Phong shaded VCAD2POV ZIP Versa CAD to POV Ray As I mentioned above this listing is old and is very definitely only a sampler of what is available Almost all of these are free the rest are inexpensive shareware Most are available on CIS GO GRAPHDEV YCCMR BBS Chicago 708 358 5611 or TGA BBS 510 524 2780 as well as many of the nodes of the PCGNet of which TGA is a hub back to contents SPD Platform Compiler Results by David Hook dgh ecr mu oz au many thanks to David and Bernie Kirby for running the SPD test on a variety of platforms with various compiler options Most of you will be bored to tears by this stuff but I include it mostly so it gets archived somewhere The things that are most noticeable are how performance varies between machines Also Rayshade does everything in doubles and most of the other ray tracers do everything in floats so machines that can t or don t override the double float conversions that C requires tend to take a hit on these others EAH About the benchmarks run a The Standard Benchmarks are run using the best available NFF to converter available For example this means that the awk script for rayshade was used as it supplied a default grid of 22x22x22 where as the other converter didn t The rational behind this is that if the rayshade people have it in their converter then it is the preferred option b The tweaked benchmarks are run with various grids and with the ground or backing polygon removed thus balls 20x20x20 take background out of grid structure gears 21x21x21 take background out of grid structure mount 21x21x21 rings 21x21x21 take background out of grid structure teapot 22x22x22 The floor IS kept tetra 16x16x16 tree 21x21x21 take background out of grid structure These pertain only to the ART rayshade results where the tweaking could be easily done I hate to be the one to say this but it looks as if in some cases this actually slows the renderer down These results are presented in a separate table as it didn t seem realistic or fair to compare the different ray tracers by massaging the input files In any case they are only relevant to balls gears rings and tree The figures for art using a kdtree where provided indicate that taking the backing polygon out results in a nicely distributed data set in the subdivision and using a non uniform subdivision is more a hindrance than a help which is basically what you d expect There are art kd results where art uses a KD tree for efficiency and art ug results where art uses a uniform grid Both versions of the code are available on the net EAH c All programs are compiled with Maximum optimization and appropriate floating point In the case of Art Vort dp this means that the float fsingle or whatever was not used but that everything was compiled with Dfloat double d The Bob Vivid raytracer had its robust memory allocation scheme replaced with standard malloc s as the robust scheme caused core dumps on SGI and RS6000 machines e All Benchmarks include the time taken to read the scene in f All times are in CPU seconds g We don t own any SGI RS6000 or HP machines The use of these machines was kindly allowed by their respective owners admins As such we couldn t run every raytracer as we were wearing out our welcome as it was h All runs were done to completion at 512x512 pixels i We DID try to run POV but as it was taking over 24 hours of CPU time we simply had to stop Perhaps there is an NFF converter that inserts some bounding boxes automatically j Ratios calculated below for the Standard SPDs are done on the basis of Art Vort kd the base line it s the first in alphabetical order k In all cases we used the latest available versions of the software hence the difference in Rtrace I have added after the fastest ratio for easy visual comparison EAH Standard SPDs Machine SGI PI balls gears mount rings teapot tetra tree Art Vort kd 761 7 2296 414 6 1042 393 6 118 3 640 5 Art Vort ug 5958 1093 312 4 620 1 235 2 68 5761 Rayshade 2847 1950 899 5 1228 464 116 5602 Bob Vivid 811 1369 446 1854 495 93 5 511 Rtrace8 1779 6236 2957 4840 1199 291 933 Ratios Art Vort kd 1 0 1 0 1 0 1 0 1 0 1 0 1 0 Art Vort ug 7 8 0 47 0 75 0 6 0 6 0 57 8 99 Rayshade 3 7 0 85 2 17 1 18 1 18 0 98 8 75 Bob Vivid 1 06 0 6 1 08 1 78 1 26 0 79 0 79 Rtrace8 2 33 2 71 7 13 4 64 3 05 2 45 1 46 Machine IBM RS6000 balls gears mount rings teapot tetra tree Art Vort kd 591 7 1847 325 812 334 107 534 Art Vort ug 3537 815 234 454 187 55 3215 Rayshade 1410 846 406 548 230 70 2418 Bob Vivid 506 909 309 1095 323 68 348 Rtrace8 861 4684 1414 2267 587 145 469 Ratios Art Vort kd 1 0 1 0 1 0 1 0 1 0 1 0 1 0 Art Vort ug 5 98 0 44 0 72 0 56 0 56 0 51 6 02 Rayshade 2 38 0 46 1 25 0 67 0 68 0 65 4 53 Bob Vivid 0 86 0 49 0 95 1 35 0 97 0 64 0 65 Rtrace8 1 45 2 54 4 35 2 79 1 76 1 35 0 88 Machine SUN SPARCstation2 balls gears mount rings teapot tetra tree Art Vort kd 705 1900 389 951 369 112 574 Art Vort ug 5768 974 319 570 231 71 5327 Rayshade 2422 1309 671 940 366 106 4473 Bob Vivid 715 1181 392 1419 412 87 429 6 Rtrace8 1084 3151 1991 2950 765 204 573 Ratios balls gears mount rings teapot tetra tree Art Vort kd 1 0 1 0 1 0 1 0 1 0 1 0 1 0 Art Vort ug 8 18 0 51 0 82 0 6 0 62 0 63 9 28 Rayshade 3 43 0 69 1 72 0 99 0 99 0 95 7 8 Bob Vivid 1 01 0 62 1 01 1 49 1 11 0 78 0 75 Rtrace8 1 54 1 66 5 12 3 10 2 07 1 82 0 99 Machine HP 720 balls gears mount rings teapot tetra tree Art Vort kd 308 915 156 400 155 58 1 252 Rayshade 870 507 203 292 122 41 7 2079 Ratios balls gears mount rings teapot tetra tree Art Vort kd 1 0 1 0 1 0 1 0 1 0 1 0 1 0 Rayshade 2 82 0 55 1 3 0 73 0 78 0 72 8 25 Tweaked SPDs In cases where xxx appears for one reason or another we were unable to run the benchmark Machine SGI PI balls gears mount rings teapot tetra tree Art Vort ug twk 208 4 1259 312 3 478 3 334 1 67 9 97 8 Rayshade twk 377 7 2647 937 877 548 141 171 Ratios Art Vort ug twk 1 0 1 0 1 0 1 0 1 0 1 0 1 0 Rayshade twk 1 8 2 1 3 00 1 83 1 64 2 07 1 75 Machine IBM RS6000 balls gears mount rings teapot tetra tree Art Vort kd twk 353 1970 5 333 7 739 6 423 7 56 5 111 1 Art Vort ug twk 153 4 887 238 352 269 56 75 Rayshade twk 183 1078 407 428 292 88 88 Ratios Art Vort kd twk 1 0 1 0 1 0 1 0 1 0 1 0 1 0 Art Vort ug twk 0 43 0 45 0 71 0 48 0 63 1 0 0 67 Rayshade twk 0 52 0 55 1 22 0 58 0 68 1 56 0 79 Machine SUN SPARCstation2 balls gears mount rings teapot tetra tree Art Vort kd twk 417 2130 389 846 369 112 128 Art Vort ug twk 202 1081 319 436 366 72 103 Rayshade twk 293 1635 675 750 467 130 148 Ratios balls gears mount rings teapot tetra tree Art Vort kd twk 1 0 1 0 1 0 1 0 1 0 1 0 1 00 Art Vort ug twk 0 48 0 51 0 89 0 51 0 99 0 64 0 80 Rayshade twk 0 70 0 77 1 74 0 89 1 27 1 16 1 16 Machine HP 720 balls gears mount rings teapot tetra tree Art Vort kd twk 186 1029 156 xxx 155 58 1 91 Art Vort ug twk 89 527 xxx 168 138 7 41 4 39 7 Rayshade twk 99 676 202 237 161 51 4 51 2 Ratios balls gears mount rings teapot tetra tree Art Vort kd twk 1 0 1 0 1 0 xxx 1 0 1 0 1 0 Art Vort ug twk 0 48 0 51 xxx 1 0 0 89 0 70 0 42 Rayshade twk 0 53 0 65 1 29 1 41 0 96 0 88 0 56 My figures do not seem to match these that well in my tests on the HP 720 Rayshade seemed to always outperform art We re not sure why there s a mismatch EAH A comparison of float vs doubles where float promotion to double can be disabled As art seems to be the only one that declares most things as floats this is the subject of these runs Machine SGI PI Option Single precision float Double precision Dfloat double balls gears mount rings teapot tetra tree Art Vort kd 761 7 2296 414 6 1042 393 6 118 3 640 5 Art Vort kd dp 978 3000 xxxx 1365 520 152 777 Art Vort ug twk 208 4 1259 312 3 478 3 334 1 67 9 97 8 Art Vort ug twk dp 295 1882 449 681 514 109 141 Ratios Art Vort kd 1 0 1 0 1 0 1 0 1 0 1 0 1 0 Art Vort kd dp 1 28 1 3 1 3 1 32 1 27 1 21 Art Vort ug twk 1 0 1 0 1 0 1 0 1 0 1 0 1 0 Art Vort ug twk dp 1 4 1 49 1 43 1 42 1 53 1 6 1 44 Machine IBM RS6000 No such option The times were much the same Machine SUN SPARCstation2 Option Single precision fsingle Double precision Dfloat double balls gears mount rings teapot tetra tree Art Vort kd 705 1900 389 951 369 112 574 Art Vort kd dp 791 xxx 413 1034 428 127 625 Art Vort ug twk 202 1081 319 436 366 72 103 Art Vort ug twk dp 214 1219 341 476 1027 78 114 Ratios balls gears mount rings teapot tetra tree Art Vort kd 1 0 1 0 1 0 1 0 1 0 1 0 1 0 Art Vort kd dp 1 12 xxx 1 06 1 08 1 16 1 13 1 08 Art Vort ug twk 1 0 1 11 1 0 1 0 1 58 1 01 1 0 Art Vort ug twk dp 1 06 1 13 1 07 1 09 2 8 1 08 1 1 Machine HP 720 Option Single precision f Double precision Dfloat double balls gears mount rings teapot tetra tree Art Vort kd 308 915 156 400 155 58 1 252 Art Vort kd dp 300 926 138 390 155 60 3 244 Art Vort ug twk 89 527 xxx 168 139 41 4 39 7 Art Vort ug twk dp 117 560 xxx 234 168 43 1 46 Ratios balls gears mount rings teapot tetra tree Art Vort kd 1 0 1 0 1 0 1 0 1 0 1 0 1 0 Art Vort kd dp 0 97 1 01 0 88 0 975 1 0 1 03 0 97 Art Vort ug twk 1 0 1 0 xxx 1 0 1 0 1 0 1 0 Art Vort ug twk dp 1 31 1 06 xxx 1 39 1 2 1 04 1 15 back to contents Eric Haines erich acm org Ray Tracing News Volume 6 Number 3 Ray Tracing News Volume 6 Number 3 Ray Tracing News Volume 6 Number 3 Ray Tracing News Volume 6 Number 3 Ray Tracing News Volume 6 Number 3 Ray Tracing News Volume 6 Number 3 Ray Tracing News Volume 6 Number 3 Ray Tracing News Volume 6 Number 3 Ray Tracing News Volume 6 Number 3 Ray Tracing News Volume 6 Number 3 http www acm org tog resources RTNews html rtnv6n3 html http www acm org tog resources RTNews html rtnv6n3 html http www acm org tog resources RTNews html rtnv6n3 html http www acm org tog resources RTNews html rtnv6n3 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv7n1.html%%==%%Ray Tracing News, Volume 7, Number 1%%==%%Ray Tracing News "Light Makes Right" February 2, 1994 Volume 7, Number 1 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%88169%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right February 2 1994 Volume 7 Number 1 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1993 1994 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Quick Book Reviews by Eric Haines Ray Tracing Roundup 3D Artist Magazine Information by Tim Riley Updated Graphics CD ROM from Knowledge Media by Paul A Benson The Desert Isle List by Amanda Osborne Raytrace Utilities List for DOS and Windows by Amanda Osborne Brief Reviews of a Bunch of Useful PC Stuff by Tim Lister Tree and Plant Image Generation by Phil Drinkwater and Jason Weber POV Ray 2 0 Released by Dave Buck JPEG Texture Maps by Petri Nordlund ArchiCAD Model Translator and other notes by Paul D Bourke New Radiance Version Available by Greg Ward Previewer Program for Radiance by Greg Ward IRIT Solid Modeller Version 4 0 by Gershon Elber Object Oriented Graphics GOOD 0 50 by Ekkehard Beier GFX News by Eric Hsiao New Wavefront Listserv by George H Otto Optimized POV 2 0 version by Peter K Campbell Errata for Adventures in Ray Tracing by Alfonso Hermida Introduction In celebration of Ground Hog s day we re having a special two for one sale This issue is dedicated to personal computer related resources for ray tracer users It includes information and reviews for the latest releases of various free packages book recommendations and other assorted articles The other issue v7n2 is more for researchers and programmers There was enough accumulated stuff that I decided to try splitting things along these lines Let me know if the split was worthwhile This issue has a lot of access information 3D Artist is a great resource for users the Knowledge Media CD ROM sounds worthwhile and is certainly cheap there are a lot of new reference books out etc I have also been collecting and soliciting users opinions you think I have time to actually use any of this software of packages out there I m particularly appreciative of Ms Osborne s quick response with her useful summaries One resource which is in the other issue v7n2 but is worth mentioning here is Nicholas Wilt s Object Oriented Ray Tracing in C book as he s made the code for the class libraries available Though it s more a programmer s book than a user s it s also useful as a tool for learning C back to contents Quick Book Reviews by Eric Haines There have been quite a few trade paperbacks which have come out in the past year or so on ray tracing Some of these have been reviewed in these pages screens already The good news is that these books are getting better and better in quality The bad news is that in many cases the authors have already updated their software so that the books are already dated Practical Ray Tracing in C Craig Lindley John Wiley Sons ISBN 0 471 57301 9 1992 49 95 comes with software This one is quite old as ray tracing books go two years Here s the table of contents 1 Background Information 2 Introduction to Ray Tracing Theory 3 A First Ray Tracer Program 4 Color Quantization and Display of Image Data 5 Graphics File Formats and Functions 6 DKBTrace and the Image Development Process 7 Basic Ray Tracing Techniques 8 Intermediate Ray Tracing Techniques 9 Image Model Discussions Further Reading Glossary The Companion Disks RGB Color Tables As you can see this book is based on the DKBTrace software which has been superceded by POV 1 0 and 2 0 The book has what you need to get going and deals with all the side issues like image file formats VGA VESA quantization etc Actually there s quite a lot about these topics 400f the book goes towards them Modeling is not discussed much which is fine the book checks in at 506 pages as it is The code per page ratio i e how much code listing there is in the book a very common practice in these trade paperbacks is a relatively low 35 The text about ray tracing deals with the theory of ray tracing and also acts as a user s manual for DKBTrace All in all it s not a bad book but I can t get excited about it If you want to use a ray tracer get the book by Wells and Young on POV If you want to understand or write a ray tracer get Wilt s book Ray Tracing Creations Drew Wells and Chris Young The Waite Group ISBN 1 878739 27 1 1993 39 95 includes disk You should get this book if you are a serious user of the POV ray tracer Yes it s a little dated now that POV 2 0 is out yes you might already know POV 1 0 backwards and forwards still get it It s a 573 page user reference manual for POV which puts a lot of commercial software documentation to shame Since it s a user s manual there are no pages and pages of code sections throughout most of the text they did kill a few extra trees in Appendix A though listing 65 pages of include files Input language examples are kept short and sweet throughout never more than the lines you need The first part of the book is a user s manual which after getting you through the basics then gets you using POV to try things out The last part is a reference manual for the input language What makes this book so wonderful is the use of images figures and layout There are elaborate POV images at the beginning of each chapter but what most impressed me was the lavish use of images to illustrate techniques concepts and effects POV images are used in many cases but not slavishly so artist s renderings are used when appropriate There are pretty pictures on the back fold out cover but the plates are color renderings of the grayscale reference section images About the only criticism I can make is the darkness of many of the example grayscale images All in all this is a great manual I particularly enjoyed Mitch Waite s publisher s note showing how he got sucked into playing with the ray tracer Adventures in Ray Tracing Alfonso Hermida Que Corp ISBN 1 56529 555 2 1993 27 95 includes disk Let s start off with the table of contents 1 Introduction to Ray Tracing 2 Your First Ray Traced Image 3 Using Polyray 4 Lights Colors and Textures 5 Constructive Solid Geometry 6 Additional Features 7 Using a 3 D Modeler POVCAD 8 Animation If you want to get someone a single book for playing with a ray tracer consider this one they ll need an IBM clone with Windows It covers Polyray Alexander Enzmann s ray tracer along with POVCAD Polyray is almost something of a testbed for POV with some features in Polyray eventually migrating into POV POVCAD is one of the better modelers for Polyray and POV The two together make for a pleasant combination Right now the code that comes with it is pretty up to date POVCAD has been updated once since the book s release and Polyray is still the same for now The information and layout of this book are good with illustrations and renderings of equal quality to those in the Wells Young book There are a few oddities in wording in Polyray e g a directional light to Polyray means a light that does not cast a shadow this term is used in most other renderers to mean a light at infinity or maybe a spotlight but otherwise it seems to be a fine renderer There are some errors in the text and Alfonso kindly contributed his errata list to this issue the last article The animation section is a bit short for my tastes but does get you started But if you re interested in animation then Making Movies on Your PC David K Mason and Alexander Enzmann The Waite Group ISBN 1 878739 41 7 1993 34 95 with disks Table of contents 1 Introduction concepts tools on the disk 2 Getting Your Feet Wet running the software 3 Making a Movie in Eight Steps 4 Advanced Techniques 5 Movie Making Tools heart of the book Polyray DTA SP DMorf 6 The Movie Pages a series of complete animations This book stresses animation obviously Its approach is to teach you to use a variety of shareware tools to do it Polyray Dave s Targa Animator which converts a series of Targa images into a flic file SP a spline path generator program and DMorf a 2D image morpher It s a pleasantly short book weighing in at 210 pages The layout is of good quality with ample illustrations There are a few tiny images which are hard to discern but nothing too terrible This book is not meant to be a guide for programmers or students it s meant for some serious playing around If you already understand the tools listed you probably won t gain much from this book which I guess could be said of any of the books above But if you re starting out and would like to understand a bit more about how and why these tools work consider getting this one You don t necessarily have to design a movie from scratch either there are nine movie scripts provided which you can modify to your heart s content There s also a contest for best animation which is over Oh well I ll be interested to see the results judging is at the end of March Tricks of the Graphics Gurus Dick Oliver Scott Anderson James McCord Spyro Gumas Bob Zigon SAMS Publishing 1993 49 95 This is a monster coming in at 894 pages two disks and 3D glasses Polyray is used on the ray tracing front and lots of other graphics programs are covered as I recall morphing fractals image processing etc etc etc It was certainly a ummm heavy book I wasn t incredibly impressed paging through it there seemed to be a lot of techniques thrown around but not used particularly well However this is based on looking at it for a few minutes at Electronics Boutique with a sales drone hovering about so take this gut reaction with a grain of salt or three Object Oriented Ray Tracing in C Nicholas Wilt John Wiley Sons ISBN 0471 304 158 1993 36 95 See the next issue coming out minutes after this issue for information on this one and where to get the code on the net It s a programmer s book and is pretty good for what it is back to contents Ray Tracing Roundup Lparser is an interesting looking program to explore L systems The software takes in an L system definition and creates output files in a variety of formats including POV There is also a viewer to get a rough idea of the results The authors draw heavily on the wonderful book The Algorithmic Beauty of Plants Unfortunately my system does not have enough memory to run lparser and there s no source code provided so I can only admire some of the images produced with it Pretty impressive stuff trees various creatures procedural objects etc It also includes a mutation facility so that you can evolve creatures a la Latham s work though probably not render them half so beautifully Check out issue 12 of 3D Artist magazine see elsewhere in this issue for a more in depth review and images Find the latest lparser lparser2 zip which does POV 2 0 output on weedeater math yale edu in incoming and hopefully elsewhere but I didn t see it at oldenburg Eric Haines Coprocessor speed I have followed everyone s suggestions and purchased a math coprocessor Here were the results of running POV on a scene not sure which EAH 386DX 33MHz w out 387 29hours 54 minutes 49 seconds 386DX 33MHz w 387 1hour 47minutes 32seconds Definitely a huge time saver It s neat having my 386 387 outperform a 486SX which took over 12 hours to render At any rate if you re having any trouble with rendering times an investment in a coprocessor is VERY RECOMMENDED John Warren jwarren silver ucs indiana edu New Pv3D Available Ludovic Lecointe has released a new version of Pv3D to coincide with the new release of Persistence of Vision v 2 00 The new release is not complete coming in under the version number of 1 91 However preliminary testing has shown that it is certainly PoV v 2 00 compliant including flat image texture mapping and height fields Availability has been confirmed at the following source The Graphics Alternative BBS 1 510 524 2780 PV3D modeler Version B1 91 For POVRAY 2 0 and VIVID 2 00 Graphics interface GUI with mouse Many function are modified since the last version Includes 3D animation function 3D visualisation with camera look at Vectoriel object structure XMS Support POV primitives support Blob structure Height Field Shape Mapping Texture Bumping Function GIF viewer VIVID 2 00 primitives support External Textures Library POV VIVID Dynamic Rotate Move Scale R M S NEW Support Groupe and Object Library CSG Constructive Solide Geometry Direct generation of POV RAY 2 0 files Direct generation of VIVID 2 0 files And more and more Splines Smooth and Patch TXT shapes POV VIVID I talked with Ludovic on 10 11 and we discussed various future improvements including the documentation I am hoping he has the opportunity to work on the new lighting improvements that PoV v 2 00 has brought to the fore In conclusion I have to admit that I did not expect to see a new release so quickly I did know that Dave Mason sent him an early copy of PoV so perhaps that helped Regardless it is here so let s just get on with it David Anjo david anjo canrem com POVCAD 2 0c for Windows ready Hi POVCAD 2 0c for Windows now supports POV 1 2 and Polyray 1 6 It s AVAILABLE NOW from my BBS 301 725 9080 in Maryland USA It should be at oldenburg by now EAH Alfonso Hermida afanh stdvax gsfc nasa gov PV3D vs Moray vs Francisco J Diaz as789 cleveland Freenet Edu wrote And wich one is better MORAY or PV3D I m checking both out to see which one I ll stay with Thanks Actually both have advantages and disadvantages I find that I need both of them most of the time Also check out povcad2c somewhere on the net More than likely you will keep all three I like Moray s features and the way it handles CSG bounding boxes texture editing bezier patches and the surfaces of rotation extrusion and conic rotation But it has many shortfalls a limited number of primitives and the copy feature is a drag PV3D v100 is more flexible in this area but it too has many good features and drags too Same can be said for POVCAD BUT don t get me wrong the guys who are working on this stuff are doing an unbelievable and great job I say get all three and if you have the space on your disk keep all of them and don t forget to register if you can afford it ehhh he he he errmm caugh caugh Ford Prefect gee I wonder if that name s real ara wam umd edu My personal opinion is that I like Moray better than POVCAD or PV3d also on oldenburg POVCAD seems a bit clunky to me and PV3d has the worst documentation in the world the program s okay but the docs are in broken English inexpertly translated from French which makes the program hard to use Perhaps the next version of PV3d will be better but I really like Moray Get more memory Gavin S Patton mirth genesis MCS COM Fonts for POV A while ago I wrote a program DXF2TRI that converts polygons in a DXF file to raw triangle data The reason for this was to let me import any TrueType font into POV in the following manner 1 Using CorelDraw generate the desired text and export to a DXF file All lines are converted to POLYLINES in the process 2 Run DXF2TRI on the DXF file resulting in a raw triangle file 3 Run RAW2POV on the RAW file You will wind up with an INC file with bounding surfaces which was a bonus when working with POV1 0 it s not that big of a deal with POV2 0 courtesy of RAW2POV DXF2TRI has the option of extruding the shapes while it was originally designed for fonts it will work on any shapes you can generate in Corel to a depth of 1 0 which can then be scaled as desired It will also generate a back surface if needed It does not support bevelling It should be usable with any vector drawing package that exports DXF files and converts all lines to POLYLINES DXF2TRI does not recognize any other entities I believe DXF2TRI as well as RAW2POV can be found at wuarchive wustl edu graphics graphics mirrors ftp informatik uni oldenburg de pub dkbtrace and in the util or uploads incoming directories The ZIP file contains the executable source code directions on use and a sample JPEG image The alternative is to generate a B W bitmapped image GIF TGA or IFF of the desired text and then use it as a height map on a surface The drawbacks are limits on the bitmap s resolution and the resultant non coherence of the extruded edges Tim Riley TRILEY its bldrdoc gov POV in IEEE CG A There is an article in IEEE Computer Graphics and Applications called Mike Miller s Many Hats v 14 n 1 Jan 1994 p 4 6 It discusses his work tools he uses and showcases a number of his images Eric Haines Syndesis for PC InterChange Plus from Syndesis currently converts between all those format and more except for pov It runs on the Amiga Contact Syndesis at 414 674 5200 I talked to Syndesis recently and they will also be coming out with PC version Maybe late this month or sometime next month They say that they will also have a Softimage module in the future as well Techs Avery tksavery netcom com Rayshade Animation Language I developed a simple language for producing animations in conjunction with rayshade three or four years ago It is very similiar to using script to generate lots of frames but it is I believe easier to coordinate events and it takes care of the linear interpolation It does not blur the motion the tool was developed before rayshade had this capability It is available by anonymous ftp in pub sass on acs cps msu edu Let me know if you are using it because I will begin work a major new release real soon now and I ll let you know when it is ready Ron Sass sass cps msu edu avalon chinalake navy mil 129 131 44 11 the 3D model archive its IP is now 129 131 1 225 Everything else is the same Francisco X DeJesus dejesus archimedes chinalake navy mil I ve written a raytracer available from wuarchive wustl edu graphics graphics ray rayce More than this I do not know EAH Han Wen Nienhuys hanwen stack urc tue nl RTrace and Ray Tracing Races I have added a BV hierarchy generator similar to Goldsmith Salmon to RTrace 8 3 2 new option c0 and did some tuning in the BV intersection code beta version 8 3 3 results deleted RTrace 8 3 3 seems faster in all scenes 83 2029972284n balls and 87 2029972284n tetra The GS like BV s in some cases are worst balls and tree but in the sphere test it is much faster I still haven t understood why this happens but there must be an explanation Antonio Costa acc asterix inescn pt RTrace Radiosity The lightR radiosity program from Bernard Kwok ae140 freenet carleton ca is now available to run in a PC with DOS DJGPP GO32 extender You can ftp a working version with some scenes and utils at asterix inescn pt 192 35 246 17 in directory pub LightR PC 386 The source code is in pub LightR PC 386 src I found the program very interesting and it helped me to learn a lot about Radiosity a rendering algorithm I have also adapted its output to the RTrace ray tracer so that nice images could be produced lightr scn2sff rtrace PAT VW SCN SFF PIC PPM I included minimal docs and specs but I intend to improve this area in the future Please feel free to contact me RTrace code for PC s is in pub RTrace PC 386 Antonio Costa acc asterix inescn pt VISION 3D version 1 7 by Eduard Schwan 71513 2161 compuserve com Yes it is here straight from New Zealand Vision3d CIS GO GraphDev LIB 6 RayTrace Sources Vis3d sea is a Macintosh 3 D CAD modeller which outputs POV Ray 2 0 syntax It is a Shareware polygon facet modeller i e no primitives just lots of triangles but it has lathe and extrusion capability and some interesting effects It can export to Super3D Radiance RayShade Renderman POV Ray 2 0 and DXF The archive contains both an FPU and non FPU version of the program I m only the messenger and the person who asked the author to support POV Ray If you have comments kudos or questions please drop the author a note Paul Bourke is not on CIS but he can be reached through the internet gateway using this CompuServe e mail address INTERNET pdbourke ccu1 auckland ac nz For the internet lopers out there with ftp access the Vision3D archive can also be retrieved from hobbes lbl gov in the pub mac directory along with a fractal terrain plant L System generator as well If enough people send him mail and a shareware fee he might add primitive support for POV Ray and other features too SPD 3 1 Enhanced for RenderMan RIB Output by Philipp Slusallek slusallek informatik uni erlangen de The last few days I have extended the SPD package Version 3 1 to support RenderMan RIB output Please note that the RIB output has not been verified against the Pixar RenderMan software but only with our own So there might still be bugs that our software does not yet check I hope you still maintain the SPD package it s really nice for comparing renderers and can include that stuff for the next release I hope to integrate this into the enhanced SPD package soon I thought I would announce it now write me if you re desperate for the code EAH Polyray Update Soon As of 1 27 94 Polyray v1 7 is now in beta test Expected release is one to two months I ve got a lot of doc cleanup the last full set of docs was for v1 5 New features include TrueType style glyphs with a converter NURBS displacement surfaces in either scan conversion or raytracing greatly improved antialiasing and bumpmapping There s been a massive internal overhaul of the code so I ve been spending lots of time squashing new bugs in addition to old ones that have been hanging around Alexander Enzmann 70323 2461 CompuServe COM VIVID 3 0 I m still working on the docs for 3 0 Due to my total love of writing docs this is an extremely slow process Please note that my email address has changed That s another reason for my lack of time to finish 3 0 Stephen Coy scoy microsoft com Imagine 2 0 Sites There are many objects textures and attributes for Imagine on Aminet try ftp luth se as that might be your closest site not sure which machine you re running it on but there might be some problems with using these files on the IBM version stuff on Aminet is for the Amiga Be aware that Imagine2 9 alias 3 0 uses a different format for attributes not sure about objects or textures I wish they used some kind of compression on the objects than previous versions and aren t compatible Steve link u washington edu On Line L system Fractal Fuzzy Logic CA Tutorial Using xmosaic and world wide web you can have access to an online tutorial on l system fractals fuzzy logic and cellular automata The url is http life anu edu au complex systems complex html The main entry point is http life anu edu au from the Australian National University Bioinformatics Laurent Moccozet moccozet cui unige ch The New Graphics BBS Call The NEW Graphics BBS at 908 469 0049 All lines 14400 Baud 24 hours a day every day Featuring o A graphics specific system for those of you interested in such things as 3D objects image processing animation MPEG JPEG GIF images graphics mailing lists file formats clip art and the latest in public domain graphics programs o Knowledge Media Graphics 1 CD ROM containing over 450 megs of graphics applications and information available for transfer to your system The 645 megabyte MultiMedia CD will be online shortly o Graphics specific mailing lists such as Imagine 3D Rayshade 3D Studio POV Ray and Lightwave 3D mailing lists aliased to easy to read forums which you can join and read Many more to come o Newsfeeds from USENET that include topics such as graphics by Bob Lindabury bobl bobsbox rent com The Graphics Emporium BBS This BBS is dedicated to the graphics professional and hobbyist to exchange information ideas and techniques for Computer Y Graphics It is not dedicated to any single system as the Administrator has resources for Amiga Macintosh IBM and other platforms as well Information exchange is the key and File sharing is as welcome as eMail So share your latest 3 D models and 2 D renderings and also get the latest files and techniques there are no ratios Just a sharing of creativity Located in Redondo Beach California 310 374 8805 Morph s Outpost on the Digital Frontier Emporium Admin0raphics Emporium morph uu holonet net back to contents 3D Artist Magazine Information by Tim Riley TRILEY its bldrdoc gov 3D Artist was originally a newsletter and occasionally appeared in electronic form on various BBSs and the net It is now a full fledged magazine and I have seen no electronic echo of it recently I subscribe to it and can recommend it as a source of info on various ray tracing and rendering programs both free shareware and commercial utilities and techniques I promised information on 3D Artist last week so here it is note I am merely a subscriber and have no other connections to the magazine 3D Artist is a magazine that specializes in desktop 3D graphics It doesn t appear to come out at a fixed schedule but as numbered issues It s full of articles on share freeware commercial packages how to reviews and ads In fact it s so full it s sometimes not immediately obvious which illustra tions photos are associated with which articles It would give a layout de signer or graphic artist a stroke and would be a good candidate for a make over in Publish magazine But information is of prime importance and it s full of good info and decent illustrations The newest issue is 12 which I received last week and it contains 34 pages with articles on Lparser review Siggraph 93 MacroModel first look Imagine Detailor review Photoshop 2 5 first look Hi color flic s packages review 3D Studio rel 3 first look Visual Link review Animation Commander review AccuRender Chrome Glass how to Lighting how to Playmation stereo pairs how to Moving the Topas camera how to MIDI online Imagine how to Miscellaneous tricks tips Various press releases notes calendar addresses phone numbers classified ads Subscription info Surface Mail First Class Air Mail US CA ME OTHER US OTHER CA ME W HEMI EUR OTHER 12 issues 29 41 46 44 51 44 55 68 81 6 issues 16 23 26 25 28 25 30 37 43 It s not cheap and it s tightly packed but I find it useful I think they will sell single issues to let you get an idea the cover price is US 3 50 The address is 3D Artist P O Box 4787 Santa Fe NM 87502 4787 USA Voice 505 982 3532 FAX 505 820 6929 back to contents Updated Graphics CD ROM from Knowledge Media by Paul A Benson pbenson ecst csuchico edu Graphics 1 CD ROM by Knowledge Media has been updated This disc is now available The first 100 to order will receive a 20 0iscount The price is 19 95 plus Shipping and handling Regular price 24 95 This CD ROM contains 426 Megabytes 16 000 files An extensive collection popular public domain shareware and freeware graphics programs and tools along with sample data files A resource for all those interested in graphics and multimedia A partial list of applications includes a full directory listing is more than 500 pages these programs Converters 21 Amiga 10 IBM 4 MAC Object Modeling Applications Ray Tracing Programs Fractal software 7 Amiga 5 IBM Drawing Programs 2 Amiga Paint Programs 2 Amiga 2 IBM 3 MAC Image Editors Image Manipulation Software Geometric Manipulation Applications Plotters Rendering Applications 1 IBM 2 Unix Image Viewers 28 Amiga 9 Atari 26 IBM 12 MAC 15 Unix Raster Toolkits Format descriptions 37 Compression Packages JPEG GIF TIFF etc Screen Capture 2 Amiga 3 MSDOS 7 Windows 3 1 Mapping Applications 2 Amiga 1 IBM Animation Players 8 Amiga 1 Windows 3 1 PHIGS Tool Kit Gem Graphic Functions Graphics Gems code EAH Some examples of media for use with these applications Images 4 BLM 2 GIF 20 JPEG 1 Landsat 14 NASA Objects 138 OFF and 8 NFF Movies 1 Amiga 1 MPEG Knowledge Media s Resource CD ROMs are MULTI PLATFORM compatible They have been recorded in the generic ISO 9660 standard file format Ask Knowledge Media about shipping handling whatnot Voice 1 800 78 CDROM Fax 1 916 872 7487 E mail pbenson ecst csuchico edu Compuserve 73167 1312 mail Knowledge Media 436 Nunneley Rd Suite B Paradise CA 95969 A complete catalog of Knowledge Media s cd roms may be ftp ed from ftp cdrom com cdrom know med catalog txt or send email request to pbenson ecst csuchico edu Note that Bob Lindabury s New Graphics BBS has this CD available online see elsewhere in this issue for his announcement EAH back to contents The Desert Isle List by Amanda Osborne alo northshore ecosoft com A lot more biased and arbitrary than the list below the Desert Isle List is the programs that I go back to time and again the ones that never leave my hard drive For object translation I use 3DS2POV quite a bit things have gotten better and better with this program over the last couple of years I wish it still supported 3D ascii files but that s a minor quibble Also a minor quibble is the desire to have RAW2POV support Rayshade output I ve been wanting to spend some serious time with Rayshade and already spend a lot of time fooling with object creation so it would be nice but As it is the program does the best job I ve seen of smoothing out those rough edges CTDS230 is another program that I ve been using for a long time I m still finding new uses for it Many programs support CDTS output but I ve also sketched things out on paper and come up with my own coordinate file I think just about any rounded shape can be made with this program There are just a couple more programs on this list Too much fun to ignore I go back to LISS151 whenever I m stuck for inspiration and have been pushing too hard An early version of Lissajou helped me create my first real trace and I still discover the occasional new pattern that I have to do something with Because it helped me so much I always recommend this to someone who is new to tracing Finally a fairly new suite of programs that I find myself never growing tired of LPARSER and LVIEWER I use Lviewer all the time It s fast and has never choked on an object file no matter how big or crappy the object might be It is also the only way I have to view 3DS files count me amongst the legions of wannabes too poor to take the plunge and buy 3D Studio I must say the l system language read by Lparser isn t the easiest chore I ve taken on learning but it s both sparse and extremely powerful Gravity tropism is supported in version 2 And though I still wish I understood it better than I do this program has provided me with hours of useful exploration I had better throw in a small caveat here Lparser is a computationally heavy program There is no way to tell it is still chewing on what you ve given it except by the changing recursive level and sometimes it takes a looong time for that level to change Once I took an early mutation l system file and attempted to output to DXF 3D faces Many hours later I discovered to my horror that I had a 17 meg DXF file and 0 bytes left on that drive I named it kudzo and tried to get any other program to acknowledge it but no dice It was the last time I ever set the recursive level to 14 let me tell you Anyway Eric asked me to give separating the wheat from the chaff a try and this is it I d like to add that many other programs are extremely valuable in their own right and still others are excellent for beginners ie folks who aren t hooked yet I d like to give a blanket thank you to all the talented and generous programmers who place their programs on line so that everyone can benefit from them Raytrace Utilities List for DOS and Windows by Amanda Osborne alo northshore ecosoft com An up to date alphabetical list of modeling and rendering software the author has run across Many should be available on oldenburg and mirror sites EAH 3 3DSPOV16 ZIP Reads 3d studio ascii files Writes out to Raw Povray 1 and Vivid 1992 Anger Bowermaster 3DSPOV18 ZIP Reads 3d studio mesh files Writes out to Raw Povray 1 2 Vivid and Polyray 1993 Anger Bowermaster 3D2POV18 ZIP Converts 3D2 files to Povray 1 2 Vivid or Raw output 1993 Anger A ACCEL ZIP Animation utility for DKB 2 12 1991 Trindle ANIMK05G ARJ Animation utility for Povray 1 and Vivid 1992 Taylor AWKANI ZIP AWK script to output Povray animation data 1992 Farmer B BACKMAP ZIP Qbasic program to create a graduated color map from two user defined colors The map file created is compatible with Fractint and Vivid 1993 Smith BOXER1 ZIP Object generator for Povray 1 makes things like bathroom tiles and such based upon user input 1993 Miller BRANCH1 ZIP Tree creator for Povray 1 1992 Weller C CHAIN11 ZIP Generates interlocking chain links for Povray 1 0 1992 Koehler CHEM2DKB ZIP Reads molecular models and writes DKB format 1991 Farmer CHEM2V ZIP A modified version of Chem2DKB this program reads molecular model files from the PD program Chemical and writes out a Vivid 1 0 datafile 1992 Cox CLAY02 ZIP Free form modeller several file formats are supported 1993 Hermida CM100 ZIP CircleMaster utility for working with quadric spheres and ellipsoids writes output to Povray 1 0 1992 Brown CMAP11 ZIP Interactive color map creator for Povray 1993 Lutz Kretzschmar COIL2 ZIP Creates coiled objects for Povray 1 0 1992 Kirby COIL2V ZIP Creates coiled objects for Vivid 2 1992 Kirby Cox CREND15 ZIP Interactive texture modifier for Povray 0 5 1 0 1992 Lutz Kretzschmar CTDS230 ZIP Connects a series of xyz dot coordinates Though this may not sound like much this is an extremely helpful utility Supports Povray Vivid and Polyray 1993 Brown D DIAMOND2 ZIP Generates diamond shapes for Povray 1 1993 Koehler van den Bos DNA09 ZIP Interesting modern sculpture dna strands are created from user input Outputs cleanly no tweaking necessary to Povray 2 x 1993 Bryerton DUST01 ZIP Simple particle generator with output to Vivid Polyray and Povray 1993 Mussetter DXF2POV ZIP DXF to Povray 1 conversion program 1992 Collins Wells Farmer Gibeson DXF2RAW2 ZIP DXF to Raw conversion program 1992 Coy Barber Daigle Shiffman DXF2V22 ZIP DXF to Vivid conversion program 1992 Coy Barber Daigle Shiffman DXF3DS ZIP DXF to 3DS conversion program 1991 Yost Autodesk F FONT2DAT ZIP Version 1 2 is a Qbasic program that takes a font file and writes an include file for Povray 1 0 1992 Koehler Clark FORM ZIP All sorts of shapes can be generated with this program Form files consist of both shapes and commands like twistx and bend and output may be Povray 1 2 or plg Interesting program complementary to LPARSER 1993 Rowbottom FOUNT04 ZIP Fountain particle generator with bounce The program creates a user defined number of files in Vivid Povray 1 2 or Polyray and has a good variety of fields to set Some tweaking involved 1993 Mussetter FRC2POV ZIP This program reads a mandelbrot parameter file from Fractint and creates a corresponding Povray 2 x mandel texture file 1994 Grossman FRGEN14 ZIP Fractal Landscape and other shapes too Generator Though the program supports Vivid and Povray 1 2 directly by selecting raw output you can smooth triangles out with RAW2POV to create nice hills and dales 1993 Anger FS11 ZIP Fonts to Shapes Windows program that creates Povray 1 0 files from True Type fonts Unregistered users don t have access to the entire alphabet 1993 Peterson 15 00 shareware FWHEEL1 ZIP Straightforward and unique animation utility for Vivid and Povray 2 x 1993 Brown 5 shareware G GEAR13 ZIP Generates gears for Povray 1 0 1992 Koehler GLOB10 ZIP Rounded object generator for Vivid 1993 Sherman GTR ZIP General Triangle Reader Strips away raytrace specific syntax writing raw triangular data 1992 Bowermaster H HYPE100 ZIP Utility for working with hyperboloids of one sheet writes output to Povray 1 0 1992 Brown L LAND ZIP Fractal landscape generator with output to RAW and Povray 1 0 1992 Stanely LISS151 ARJ Lissajou pattern generator with many CTDS Raw Povray 1 Vivid output formats supported 1992 Caba Farmer LPARSER2 ZIP L system creator and mutator This program is particularly strong in the creation of organic looking forms Many data files are included with the program which can be edited or mutated to interesting effect The language of l systems is not intuitive but the results can be truly stunning The l system file that is read into the program can be outputted to DXF both R12 and 3D faces Povray 2 x RAW and Renderstar VOL A couple of accessory files are included with the main program and are strong programs in their own right LVIEWER a favorite of mine is a wire frame viewer that reads 3DS RAW Fractint RAY ARE 24 POL and Lparser Renderstar VOL files Rotation zoom and pan the camera position which can be saved to a file This file can then be read into LV2POV 1993 Lapre LV2POVID Newer and more powerful than LV2POV this program reads an lviewer info file and generates data files in Povray 1 2 x and Vivid formats The program s main strength lies in landscape generation 1993 van der Mark M MESH01 ZIP This program modifies a flat triangular mesh in any of a variety of ways arc curl dome and so on and can output the resulting mesh to DXF RAW Povray 1 0 or Vivid 1992 Flores MORAY13 ZIP Povray 1 2 x object modeller and scene creator Extremely powerful program in part because of its wide support of Povray s primitive shapes 1993 Lutz Kretzschmar 59 shareware O OBJ2ASC2 ZIP Wavefront object to 3d studio ascii converter 1993 Knight P PDOTS03 ZIP Visual modeller of wormy shapes It can read its own DOT files as well as CTDS and Worm files It can also read spline path data from SP03 in which case it will write out a path file Other output formats are Vivid Polyray RAW and CTDS Very interesting 1992 Mason PLANT05 ZIP Fractal plant generator Outputs supported are Povray 1 2 Polyray and CTDS Connect the dots smoother 1993 Bryerton POLAR1 ZIP Pattern generator circles ovals and several others Output can be fed into CTDS among other uses 1991 Hammerton POVCAD3 ZIP Windows 3 1 program supporting input of DXF 3d faces and Raw files CAD modeller and scene generator for Povray 1 2 and Polyray Quite a few primitives are supported 1993 Hermida 15 00 shareware POVGEN11 ZIP A mouse driven surface of revolution generator with output to RAW and POV 1 0 1993 Hermida shareware PREPOV05 ZIP An equation and formula solver for Povray 1 0 1993 PUDDLES ZIP Creates batch files of raindrops using height fields The files created can be rendered in Povray 1 0 1992 Haveland PV3D100 ZIP Object modeller and scene creator for Povray and Vivid The last time I tried this out the documentation was still a bit strange but the program itself looked powerful if not overly easy to use 1993 Lecointe PVMDL1 ZIP Object generator for DKB and Povray 1 1992 Mikelson R RAW2PV18 ZIP Excellent utility that allows the user to adjust the level of smoothing to apply to raw data as it is translated to Povray 1 2 x Polyray or Vivid 2 It can also add a camera and light to the scene making things fairly easy for the novice user 1993 Anger RAWMRPH2 ZIP Morphs raw triangular data from one dataset into another Though it s not real smooth it s a cool idea and a lot of fun to play with 1993 Cox RAYPACK ZIP Hodgepodge of helpful Qbasic programs for use with Vivid Some neat stuff here like hexagonal paving and stellated dodecahedron creation 1993 Smith RAYSCENE ZIP Set of animation utilities not raytracer specific 1991 Jarik Hassi RAYL210 ZIP Helpful utility to convert uLathe an object creator program for windows files to RAW Povray 1 2 x or Vivid 2 format 1993 Koehler RTAG21 ZIP Ray Tracing Animation Generator not raytracer specific A powerful program with its own language which supports amongst other things spline path generation 1993 Sherrod 20 shareware S SCULPT2D ZIP Reads in Sculpt Animate 3D files and writes out to DKB 1990 Buck and Collins SHADE12 ZIP Generates lampshades for Povray 1 0 1992 Koehler SHELLGEN ZIP Shell generator for Povray 1 0 1991 Farmer SMOOTH31 ZIP Building upon the original Sandpaper code Smooth provides a means to calculate surface normals of raw triangular data In addition several small utilities Center and Scale are also provided Though nicely supported and up to date in version 3 0 at least there seems to be some syntax errors in files outputted to Povray 2 x The first version of this program also supported many other output formats something I miss 1993 Burton 10 shareware SNDPPR2 ZIP Smooths out raw triangular data when outputting to NFF Vivid DKB Povray 1 0 and Rayshade 1992 Schoenborn Coy Cox SP03 ZIP Spline paths for animations Many output formats Povray Vivid Polyray 3DV Wire 3D and acceleration and deceleration are supported as well 1992 Mason SPHRCL11 ZIP Spherecal makes interesting shapes out of spheres based upon several options Output to Vivid 2 or CTDS 1992 Pettyjohn SPINGEAR ZIP Animation batch file generator for DKB 1991 Farmer SPIRAL22 ZIP 3D coordinate generator with output to CTDS and Vivid 1992 Brown SPRING12 ZIP Generates a series of data files to create a spring animation using Povray 1 0 1992 Koehler STAR ZIP Starfield generator for Povray 1 1992 Weller STAR12 ZIP Generates 3D stars for Povray 1 1992 Koehler SUDS2 ZIP Random positioning of lots of spheres or other objects based on a variety of selections 1994 Farmer Wegner Schwan SWOOP01 ZIP Shape generator twisted sweeps and extrusions to RAW output which can be converted to your tracer of choice 1992 Otwell T TCE20 ZIP The color editor for Povray 1 1991 Farmer TCEV20 ZIP The color editor for Vivid 1991 Farmer TDDD2ASC ZIP TDDD Imagine to 3D studio ascii file converter 1993 Knight TEXMAKE2 ZIP Early version of a utility to assist in texture creation in Povray 2 x 1993 Sigler TGA2POV2 ZIP Converts targa files to Povray 1 0 objects 1992 Steeves TREEBAS ZIP Qbasic program to make trees from l systems 1993 Storm Audas TTG12 ZIP Truman s Torus Generator for Povray 1 0 1993 Brown TWISTER ZIP DKB utility to produce ribbon like figures 1990 Wells V VIVTOOLS ZIP A nice set of object generators for Vivid 1992 Martina VTEXT09 ZIP Letter generation tool for Vivid 1991 Coy VVFONT18 ZIP Borland CHR fonts to Vivid Povray or Polyray Bevelling and domed letters are supported 1992 Traylor 5 00 shareware W WORM05 ZIP Object creator for wormy shapes Reads Worm files and writes Worm CTDS and Vivid output 1992 Flores WRM2RAY ZIP Converts Worm files to Rayshade compatible output 1992 Kirby Z ZOOM11 ZIP Interpolates steps between two positions for Povray 1 0 1993 Brown One program that doesn t really fit the list but that should be considered is SCULPTURA by Michael Gibson At 99 00 it is really a commercial program but there is a demo available with save and rendering disabled Windows based this program seems very robust and supports several flavors of files for both input and output it can read in more sorts of DXF files than any other program I ve used for instance Output to Vivid and Povray 1 are directly supported as well but it s great strength lies in object creation and manipulation And it serves as an excellent way to get True Type fonts into your favorite tracing program I m sure I ve left some things off and made some factual blunders amongst what I did include Please let me know what the goofs are and I shall try to correct stuff and keep it up to date back to contents Brief Reviews of a Bunch of Useful PC Stuff by Tim Lister maxtal extro ucc su OZ AU I disagree with one or two of the reviews here povray 2 0 is lots faster for large scenes povcad is worthwhile etc But it s another view and he hits many of the high points EAH I ve just been putting together a bunch of raytracing stuff and I ve discovered povray povray 2 0 doesn t seem much faster than version 1 0 but has everything I want including Constructive Solid Geometry Fractal HeightFields mray13 moray 1 3 a decent modelling tool that makes v2 0 files best of all it s shareware pv3d another modeller this is crippleware and I don t have the money to invest in a complete version so I can t tell you how good this is povcad requires VBRUN100 DLL which I haven t installed yet so I don t know its quality But consider Basic Really Do you write Basic I know people who say great things about Visual Basic but who believes it dmorf Dave s Morphing package Seems good uses splines for the image segments produces TGA files dta18e Dave s Targa animator version 1 8e Makes movies in FLI format interpolates frames etc Requires some of the DMORF stuff so unpack it into your DMORF directory I also dumped a copy of AAPLAY EXE into the DMORF directory to play my FLIs piclab PICture LABoratory version 1 8 A command line program that handles TGAs and GIFs Very fast lots of features neopnt2a NEOPAINT version 2a Best paint program I could find that didn t cost money Good for touch ups of GIFs change palette etc etc pspro2 PAINT SHOP PRO II The only Windows package in this list so far Has good resizing capture facilities can batch change files by type path So what else is out there Well display image FLI editor I haven t figured out that GO32 EXE shit yet image lab II this is HUGE and SLOW it seems to have a Smalltalk interpreter in the package and my poor little 386 DX 33 maths copro 4 meg memory just can t cope Maybe when I get some money sigh pvquant a set of utilities in source code form only seems nice I ll report on this when I get round to it unless some nice person does first rmorf another morphing package produces FLIs on request However doesn t use splines so some transforms not easy to define I prefer DMORF to RMORF but both are usable I m also chasing movie makers like MPEGXING and so on Plenty of players around just not very many makers This area of R D seems very volatile will probably alter significantly in the near future Experts please keep it coming N B If you re looking for the stuff above use the ARCHIE substring search to find a site near you E G to find DMORF type archie sdmorf more back to contents Tree and Plant Image Generation by Phil Drinkwater P J Drinkwater1 lut ac uk and Jason Weber jason belvoir arl irisgt army mil I am a final year student who has been writing a program as part of my final year project to produce realistic images of trees I posted some questions on this newsgroup a few months ago and would like to thank everyone who helped me because I have now finished the program which runs on a PC The reason I am writing is that I have produced some trees and a plant and was wondering if anyone would be interested in viewing them and giving their opinions I have not seen the output from many other programs so I have not really got anything to compare them to I have rendered images of a palm tree a Christmas tree a few branches a willow a few leafy trees and a plant like a potted plant with dense foliage called a tree of heaven If anyone is interested in seeing them they are available for anon FTP at princeton edu in the directory pub trees drinkwater They are in JPEG format If you have problems reading getting them write to me and I ll mail them to you If you receive them send them to anyone you want to to get their comments too Before you ask the code is not available for release just yet I think it will probably be made public in the summer sometime Jason Weber replies I made a few small gif s of our trees and put them on our ftp so that anybody can take a look at em They re available via anonymous ftp at belvoir arl irisgt army mil in pub viewtree images I picked out a few interesting trees aspen gif Quaking Aspen austrian gif Austrian Pine cactus gif Cactus cotton gif Eastern Cottonwood elm gif Rock Elm palm gif Queen Palm poplar gif Defoliated Lombardy Poplar sassa gif Sassafras tamarack gif Tamarack tupelo gif Black Tupelo my favorite They re only 256x340 so they should be pretty easy to display They lost a little in the gif conversion I haven t been able able to FTP out for the last couple days so expect problems When you get a chance download em and tell me what you think For those of you with SGI s the runnable demo is at version 1 09 which fixes a memory bug If you couldn t run it before you may want to try again back to contents POV Ray 2 0 Released by Dave Buck dbuck alfred carleton ca The POV Ray team is proud to announce the release of POV Ray 2 0 This program is a freely distributable raytracer which runs on a large number of different platforms including IBM PC s Macintosh Amiga VAX many UNIX platforms and is portable to a large number of other systems The distribution files for POV Ray 2 0 are now available by anonymous FTP from alfred ccs carleton ca 134 117 1 1 in the directory pub pov ray POV Ray2 0 These files should be appearing very shortly on wuarchive wtl edu in the directory graphics graphics ray pov ray POV Ray2 0 and on ftp informatik uni oldenburg de 134 106 1 9 Please forward questions and comments to Chris Young at 76702 1655 compuserve com The remainder of this message contains a description of the changes in POV Ray 2 0 from the older 1 0 release Enjoy We did What s New in POV Ray 2 0 The following is not intended to be an all inclusive list of every new feature but should give experienced users a pretty good guide of what has been changed and what has been added Please refer to POVRAY DOC for details General Automatic bounding slabs for greatly enhanced rendering speed of most scenes Adding subtracting multiplying dividing of floats vectors Clock global variable for external animation support X Y and Z global vector constants Improved antialiasing routine with new commandline options Commandline options Version switch for backwards compatibility Starting ending column row switches for trace window Relative absolute values for trace window switches Antialiasing jitter scale value and toggle Number of antialiasing rays to shoot Internal clock setting for animations Objects Soft penumbral shadows from extended area lights Smoother Bezier patches New simplified torus syntax Heightfield water level now uses range 0 1 instead of 0 255 Heightfields can now be clipped and used in CSG operations Heightfields can be phong shaded with the smooth option New improved finite cylinders cones and discs with optional capping of cones and cylinders More versatile CSG unions have replaced the need for composites CSG texturing has been made much more flexible New merge removes internal boundaries between transparent unioned objects Textures Hexagon pigment texture Radial pigment texture Mandelbrot pigment texture Texture attributes grouped into 3 independently scalable groups pigment normal and finish TIR Total Internal Reflection for more realistic refraction Fractional Brownian Motion fbm turbulence controls Turbulence can now be used independently with any pigment or normal texture Optional vector style turbulence values Background coloring Color maps can now be declared Frequency phase keywords now available for use with color maps Filter keyword replaces alpha letting us reserve alpha for other uses in the future Less restrictive distribution policy See POVLEGAL DOC for details IBM PC Video VESA 1 2 spec implemented for preview graphics in the IBM DOS version Gives VESA support in most 8 15 24 bit modes Should support 1024 x 768 x 256 color palette 800 x 600 x 15 bit high color 640x4 480 x 24 bit true color Diamond 24X 15 and 24 bit mode support added Preview reduced to fit selected video screen size if necessary The POV Ray 2 0 bug which has been plaguing many UNIX systems especially Risc processors and causing them to crash or to gobble up memory has been fixed The problem was a compiler specific feature involving structure copying A corrected version of the offending module has been placed on alfred ccs carleton ca 134 117 1 1 as pub pov ray POV Ray2 0 objects c fix The tests I ve performed on this system look promising If this patch fails to fix your problems please let Chris Young know by EMail to 76702 1655 compuserve com POV Ray 2 1 now available POV Ray 2 1 has now been posted on CIS probably on the carleton internet site too It is mostly a bugfix release no new features but much stabler than 2 0 back to contents JPEG Texture Maps by Petri Nordlund petrin mits mdata fi If you need some good textures then check out these files ptindex lha gfx 3dobj 191K Texture maps index ptmisc lha gfx 3dobj 545K Texture maps miscellaneous ptorgani lha gfx 3dobj 213K Texture maps organic ptston1a lha gfx 3dobj 446K Texture maps stones 1a ptston1b lha gfx 3dobj 412K Texture maps stones 1b ptston2a lha gfx 3dobj 360K Texture maps stones 2a ptston2b lha gfx 3dobj 331K Texture maps stones 2b ptwood lha gfx 3dobj 218K Texture maps woods StonesWoods lha pix misc 466K 24 bit JPEG stone and wood textures These textures were created on Amiga so they have been archived with the LhA archiver Unix sources for LhA should be available at grind isca uiowa du unix arc progs lha 1 00 tar Z All textures are in JPEG format Stones and woods have been scanned from various sources and they contain some VERY good wood textures The others have been created with POV Ray 1 0 on Amiga These files should be in any Aminet site the directory is usually pub aminet pub amiga or pub amiga aminet In Wuarchive these files are in pub aminet gfx 3dobj and pub aminet pix misc directories Here are some Aminet sites Scandinavia ftp luth se 130 240 16 3 Germany ftp uni kl de 131 246 9 95 Germany ftp uni erlangen de 131 188 1 43 Germany ftp cs tu berlin de 130 149 17 7 Germany ftp uni paderborn de 131 234 2 32 USA wuarchive wustl edu 128 252 135 4 USA oes orst edu 128 193 124 2 UK src doc ic acuk 146 169 2 1 back to contents ArchiCAD Model Translator and other notes by Paul D Bourke pdbourke ccu1 aukuni ac nz I would appreciate it if the next issue could contain a mention to a translator proving very popular here that converts ArchiCAD models into Radiance ArchiCAD is a Architectural specific intelligent modelling package on both Mac and PC The translator does clever things with materials so that the first rendering in radiance looks damn good then it only gets better as one plays with Radiance lighting and materials It is on my site as well as Greg Ward s The path for mine is ccu1 aukuni ac nz mirrors architec Translators for Greg s it s hobbes lbl gov pub translators There wes a mention of BitSurface for 3D text not really appropriate I feel BitSurface is a rather crude utility we played with here in an attempt to create geometry of maori carvings native population of NZ It takes a grey gray in the US I think scale bitmap and generates a surface where the height is proportional to the grey level There was a query on 3D trees and their generation I have done some work on this although I have had to put it aside for a while at the moment There are however some Radiance trees on my FTP site generated with 3D L systems by myself and with a preliminary particle type approach being worked on by someone else here and still others contributed from a commercial tree generating package The models come with rendered examples back to contents New Radiance Version Available by Greg Ward greg hobbes lbl gov Radiance version 2 3 is now available for downloading by anonymous ftp from hobbes lbl gov 128 3 12 38 in Berkeley California and soon will be available from dasun2 epfl ch 128 178 62 2 in Lausanne Switzerland If you do not have access to ftp you may request the software on 60 Mbyte 1 4 inch tape cartridge For a limited time I will be providing free media I have a lot of tapes I want to unload so act fast with your request I have christened this version 2 3 because there were several 2 2 beta releases that got out sometimes without my knowledge or permission and I wanted to avoid confusion with these earlier unofficial versions This release has been a long time coming because as some of you know the Department of Energy has been deciding how to market Radiance I think they finally gave up with this idea which is why they are giving us back control over distribution Be aware that Radiance is copyrighted software and we ask that you do not redistribute it without our permission If someone wants it let them write to us or access one of the official ftp sites themselves We do encourage products based on Radiance and ask that anyone who is interested in a developer s distribution license contact us We will be setting up a license fee structure that should be quite reasonable probably a one time flat charge for each new LBL release Radiance 2 3 has a couple of major enhancements over 2 1 and many minor changes One major addition is a new executive program called rad that automatically runs oconv mkillum rview rpict and pfilt with sensible options to produce nice renderings Use of this program is documented in a new version of the Radiance tutorial ray doc tutorial 1 The other significant enhancement is the ability to render large and or complex images in parallel over the network and or on a multiprocessing platform The main program to look at for this is rpiece Be sure to poke around in the pub directory as well there are some interesting new documents in the pub doc subdirectory back to contents Previewer Program for Radiance by Greg Ward greg hobbes lbl gov Here is the announcement for a previewer program by Peter Apian Bennewitz of the Fraunhofer Institute in Freburg Germany It is most compatible with GL SGI s graphics library but can also work under X11 using the VOGL package as described below I have used this previewer myself and it works quite well For ftp ing convenience I have placed a copy of the software in pub programs on hobbes lbl gov 128 3 12 38 README extract rshow is an interactive previewer for the RADIANCE synthetic image system Conditions of use and copyrights notes are appended in this text rshow is available from ise fhg de 132 230 254 6 rshow reads the scene input files octrees in RADIANCE dialect and displays them on a Silicon Graphics Workstation or a UNIX workstation running X11 rshow s main use is to check the scene geometry and to select a viewpoint however interactive moving of instances and spline interpolation of a camera path are also supported Since rshow uses the original RADIANCE input subroutines it is believed to be compatible with RADIANCE s rpict and rview See FEATURES for details back to contents IRIT Solid Modeller Version 4 0 by Gershon Elber gershon cs Technion AC IL IRIT 4 0 is now available IRIT 4 0 was fully tested on the following platforms Previous version were tested on other platforms and it is expected that IRIT will compile on them with minor or no revisions at all SGI4D IRIX 4 0 1 SUN 4 SunOS Release 4 1 2 HP 730 HPUX 8 07 IBM PC Window NT 3 1 OS2 2 x Many thanks should go to all the beta testers of this version In particular I would like to thank Kriton Kyrimis who invested his time to not only test this program and improve the documentation but also to port it to the Amiga environment The distribution locations below have C sources as irit40s images as irit40i and executables as irit40e when appropriate You can or will be able to as soon as they will be installed from the uploading directories anonymous ftp IRIT 4 0 from the following locations ftp technion ac il 132 68 1 10 directory pub supported cs graphics as irit40s tar Z The is the new homeland for Irit contact person gershon cs technion ac il Gershon Elber ftp uu net 192 48 96 9 directory graphics irit files irit40s tar Z and irit40i tar gondwana ecr mu oz au 128 250 1 63 directory pub files irit40s tar Z and irit40i tar contact person bernie ecr mu oz au Bernie Kirby ftp os2 nmsu edu 128 250 1 63 os2 2 x graphics irit40 zip This has only the executables Sources should be ftp ed from one of the unix places above It is expected that Kriton Kyrimis kyrimis theseas ntua gr will upload the Amiga 68020 68881 executables to aminet Please contact him with Amiga specific questions MSDOS is no longer supported in IRIT 4 0 Join IRIT mailing list gershon cs technion ac il Mailing list irit mail cs technion ac il Bug reports irit bugs cs technion ac il some of the new features new filters from and to various formats many new commands support for UV texturing fixes etc back to contents Object Oriented Graphics GOOD 0 50 by Ekkehard Beier Ekkehard Beier Prakinf TU Ilmenau DE TU Ilmenau Germany Faculty of Computer Science Department of Computer Graphics We want to announce the 0 50 Release of the GOOD project GOOD is an object oriented framework for graphical applications running under X Windows with special support to SGI GL PHIGS etc GOOD is free available with all sources Everybody is invited to use modify and extend GOOD Its our aim to provide a public domain framework that should be helpful to other people GOOD consists of three essential parts The Tcl C Raytracer Shader YART YART was briefly described in RTNv6n3 The Interactive Object Manipulator IOM This is Tk based Application Builder for YART with support to Spaceball Mouse allowing real interactions and dialog boxes tree widget class browser for non direct interactions The Module Application Framework MAF This is a C classlib for dataflow driven applications including ipc data transfer Currently MAF is not available cos we are reimplementing the prototype Additional there is a YART extension available that implements a lot of stuff for scientific visualization especially field simulations streamlines color mapping etc back to contents GFX News by Eric Hsiao hsiaoe brtph84f bnr ca GFX News a new magazine with the emphasis on graphics and images GraFiX This debut e mag comes from the same creators as GIF News started back in November of 1988 Now in 1994 the magazine is reborn as GFX News bringing you computer news at the highest speed of the Super Information Highway What sets this magazine apart from the run of the mill ASCII text e mags is the fact that this mag is all graphics Each page is eye catching colorful high resolution graphics And GFX News is FUN to read The best part of course it is absolutely FREE to you You can join the GFX News mailing list by sending your request and E mail address to hsiaoe rpi edu Or FTP to the official GFX News FTP site 128 113 65 38 pub gfx news Get your copy today and you ll never want to read dull boring ASCII text mags again Unix X PC Macs Amigas other platform users are all welcome to read this magazine back to contents New Wavefront Listserv by George H Otto gho cac psu edu WAVEFR L is a forum for the discussion of techniques ideas problems and solutions for users of graphics software from Wavefront Technologies Santa Barbara California Our hope is that WAVEFR L will become an electronic users group for technical discussion and networking among users of software products from Wavefront including The Advanced Visualizer The Video Composer Dynamation Kinemation Visualizer Paint and whatever else emerges on the horizon of new product offerings from Wavefront WAVEFR L is not run by Wavefront Technologies We are an independent group of users who hope to pool collective experience for the benefit of all WAVEFR L will be as successful as it s subscribers are active We hope you will use this forum to pose real world questions and offer practical solutions for applying Wavefront software in any discipline To Subscribe to the WaveFront Listserv From VM tell listserv at psuvm subscribe wavefr l From VMS send listserv at psuvm subscribe wavefr l For Unix When using mail your request s must be placed in the BODY of the note NOT the headers To play it safe enclose your commands in JOB and EOJ delimiters This will avoid problems of mail systems that add some extra text before of after your message Send the note to the Listserv machine and not to the list From the Internet send to LISTSERV PSUVM CAC PSU EDU example JOB subscribe wavefr l EOJ back to contents Optimized POV 2 0 version by Peter K Campbell p campbell trl oz au A hackerish article but since I m making this issue user oriented I thought I would include it The POV developers have asked that executables of POV other than theirs not be distributed so that they don t have to debug multiple versions but of course that doesn t stop you from recompiling and using it yourself EAH as789 cleveland Freenet Edu Francisco J Diaz writes Does anyone has an optimized POV v2 0 I just got the file POVFAST ZIP and it was POV 1 0 fully optimized with WatCom C The problem is that I don t have such compiler By far the best one out there but also the most expensive and would like to know if anyone has taken the time to do so work Thanks Well the IBM version of POV 2 that the Ray group have released built with the Intel Code Builder is pretty well optimised already The best speed I ve been able to get for any tracer is when I recompile things with djgpp the port of GCC C C to the IBM by DJ Delores thanks DJ I recompiled POV 1 with djgpp and I sped it up by a factor of four eg one of the demo traces was taking 14 seconds on my 486 DX 2 66 MHz 20 Mb RAM machine highly recommended for tracing with the djgpp version and 48 seconds with the ICB normal version Others pretty much same improvement I won t go into details Now when POV 2 came out the ICB normal version managed the same trace in only 12 seconds a significant improvement I recompiled it with djgpp and it drops to 9 5 seconds 20better nothing to sneeze at but nowhere near as much an improvement as before Now this version of POV works fine with DOS but djgpp has this liking for VCPI memory whereas you get DPMI under Windows and OS 2 However Rainer Schnitker has developed a package called RSX that allows you to convert djgpp compiled programs so that they ll run under a DPMI server most programs only require you to change the stub on the executables by using exe2aout to get the executable without the stub and then bind Rainer s stub on the front of it With this package and Rainer s help thanks Rainer I have now got a running version of POV 2 that s 20 0 000000aster than the standard release and runs under DOS Windows and OS 2 There is however a catch We can t currently get the graphics to work in OS 2 maybe Windows as well have to check that Rainer thinks that although DOS Windows handle requests for graphics under DPMI ok OS 2 has a problem in that regard So if you run the program in an OS 2 DOS session with display requested then either OS 2 closes your session or you get heaps of memory errors dropped back on the command line Not brilliant but at least it doesn t crash your entire machine like messy dos windoze However if you just do a trace with eg verbose output then everything works fine Mind you I ve found that the VESA display modes don t work too well in OS 2 with the standard program although VGA is perfectly ok they have a bad habit of screwing up all your other screens while the trace is going on probably something to do with bank switching on the graphics card the Ray guys are having a look at this Now if people think they d like the 20peed increase and don t mind the lack of display capability in OS 2 then I can upload the djgpp compiled version to somewhere like carleton or informatik I use the normal one myself when I want to see how the pictures turning out and the djgpp version for traces of other people s data files and my final ones However I was hoping to wait until we could get a djgpp version which could do all the things the ICB version could only quicker Also Rainer is having a word with a few people about graphics and DPMI to see if he can get his package to handle it properly or at least tell me what to do to get the graphics working another reason I want it is for the djgpp compiled DISPLAY program which is the best graphics displayer converter for DOS I know of both stills and animation handled including 24 bit MPEG 1 files eg the ray traced Red s Nightmare mpeg Seeing as it s djgpp it s very fast but just won t work in OS 2 In case you re wondering I ve also compiled POV 2 with EMX will try gcc 2 on the weekend This has the advantage that you get one executable which will run in both a DOS and an OS 2 session However it s about 80lower than the standard ICB version and none of the standard graphics routines work There is a VGA library for EMX which I might have a play with to see if I can get the VGA display mode working for OS 2 DOS but I don t think it s of all that much use only if you want to run an actual OS 2 ray tracer The speed might be able to be improved by taking advantage of threads or something but I haven t done any coding in that area so I won t be doing anything about that for a while If you have any thoughts on the DPMI graphics routines under OS 2 or know a bit about using hi colour true colour graphics modes in DOS WIN OS 2 when your OS 2 desktop is only 256 colour and not having one of them with a screwed palette I d like to hear from you back to contents Errata for Adventures in Ray Tracing by Alfonso Hermida 1 26 94 published by QUE This errata file is also in wuarchive wustl edu graphics graphics books erratas Adventures In If you find additional errata or have any comments please contact me at CIS 72114 2060 also at the GraphDev forum or AFANH STDVAX GSFC NASA GOV Pi Squared BBS 301 725 9080 Maryland USA 14 4K bps 24hrs p 3 Last line of item 1 should read A must have for those of you who like to modify the sample files p 11 Figure 1 5 Delete the that appears to the right of the x axis letter x p 18 Figure 1 12 is the TOP view p 21 The Extrusion direction arrow is missing it should be pointing in the positive Z direction p 25 Figure 1 19 should read Examples of Boolean Operations Also the operations are top to bottom Difference Union Intersection p 30 The statement C POLY POLYRAY PRESS ENTER assumes that you have already executed the DOS command PROMPT P G p 31 The a parameter causes degradation or a blurring effect on the image p 34 The repeated header Miscellaneous should be deleted it separates the t n parameter from its description p 75 Figure 3 8 the Minor radius is really half of what s being shown remember it s a radius p 76 Figure 3 9 shows a smooth triangle as a curved triangle The truth is that it s still flat only the normals are not parallel anymore and they point as if the surface was curved but on the other hand I liked the idea of showing the triangle curved p 103 Figure 3 18 is messed up It should look like the background in Figure 4 4 p 123 Figure 4 6 replace Light Source with Incident Light Also Scattered Light should point to the transparent hemisphere p 124 Figure 4 7 delete both Light Source Mirror Surface and Rough Surface are pointing to the opposite surface It should be the top surface p 126 The label Mirror should be pointing to the top surface Slightly Rough Surface and Extremely Rough Surface are pointing to the opposite surface It should be the top surface p 141 There is an excellent utility called CMAPPER Change the word Introduction to Where Can I Find Raytracing Software Section p 175 Figure 5 5 has a white smear oops p 186 fmod should read fmod fexper fexper the second fexper was misplaced in the next line p 220 Figure 7 8 is correct but mirrored p 236 Figure 7 12 is correct but mirrored p 254 Figure 7 19 is correct but mirrored p 260 Figure 7 23 is correct but mirrored p 263 Figure 7 24 is correct but mirrored p 268 Figure 8 3 b and c were drawn messy Use your imagination p 269 Figure 8 4 the spheres should be eyes representing the observer p 270 Figure 8 6 the Viewpoint at locations arrow should be pointing to the P1 P2 P3 P9 curve p 271 Figure 8 7 a the puck only moves in the XZ plane The drawing is incorrect or not clear p 281 Creating the Animation File second sentence replace the word Introduction with Where Can I Find Raytracing Software Section p 283 Figure 8 10 has some errors Difficult to explain with words QUICK REFERENCE Functions That Return Vectors The functions dnoise P fexper reflect vexper1 vexper2 and brownian vexper are too close to other words they should be separate Inside the backcover The author of the ship in space image is Jerry THOMASTON not THOMPSON back to contents Eric Haines erich acm org Ray Tracing News Volume 7 Number 1 Ray Tracing News Volume 7 Number 1 Ray Tracing News Volume 7 Number 1 Ray Tracing News Volume 7 Number 1 Ray Tracing News Volume 7 Number 1 Ray Tracing News Volume 7 Number 1 Ray Tracing News Volume 7 Number 1 Ray Tracing News Volume 7 Number 1 Ray Tracing News Volume 7 Number 1 Ray Tracing News Volume 7 Number 1 http www acm org tog resources RTNews html rtnv7n1 html http www acm org tog resources RTNews html rtnv7n1 html http www acm org tog resources RTNews html rtnv7n1 html http www acm org tog resources RTNews html rtnv7n1 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv7n2.html%%==%%Ray Tracing News, Volume 7, Number 2%%==%%Ray Tracing News "Light Makes Right" February 2.01, 1994 Volume 7, Number 2 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%72659%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right February 2 01 1994 Volume 7 Number 2 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1994 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Ray Tracing Roundup A Note on SPD Platform Compiler Results SPARC II by David Hook OORT Object Oriented Ray Tracer by Nicholas Wilt and Eric Haines Partial Evaluation Applied to Ray Tracing by P H Andersen Comparison of Ray Traversal Methods by Erik Jansen Sphere Tessellation Gamma Correction by Olin Lathrop Computational Geometry On Line Bibliography by Bill Jones Summary of Advanced Rendering Papers from Eurographics 93 by Erik Jansen RAT Another Ray Tracer by Tom Wilson Fast Raytracing via SEADS by John Chapman and Wilfrid Lefer Parallel Ray Tracing Schemes by Rainer Menes Notes on Parallel Ray Tracing by Hsiu Lin and Sam Uselton Parallel Texturing by Jon Leech and Brian Corrie Mapping Texture on a Sphere by Ron Capelli Computational Geometry in C by Joseph O Rourke Programming for Graphics Files in C and C by John R Levine Point in Polygon the Quick Answer by Wm Randolph Franklin and Eric Haines Elib and NetNews Information by Eric Haines CFP 5th Eurographics Workshop on Rendering by Georgios Sakas CFP 5th EG workshop on Animation Simulation by Gerard Hegron Morphology Digest by Henk Heijmans Position of the Sun by Joe Cychosz Introduction In celebration of James Joyce s birthday or is it Bloomsday or both I forget we re having a special two for one sale This issue is dedicated to research issues and programmer resources It includes articles on a variety of rendering related topics research article summaries new books etc The other issue v7n1 is more for renderer users There was enough accumulated stuff that I decided to try splitting things along these lines Let me know if the split was worthwhile There are some worthwhile resources and articles in this issue Nicholas Wilt s ray tracer in C is now available on the net P H Andersen s progress report discusses an acceleration technology I had not heard of before Erik Jansen reports on some surprising results with acceleration techniques he s exploring Olin Lathrop takes a position Gamma correction is largely a crock which is both polemical and practical There are also extracts from the net on parallelism which I found interesting along with some article summaries new book listings CFP s and whatnot Some things worth watching for but haven t been released yet are Graphics Gems IV edited by Paul Heckbert Academic Press Sillion Puech s radiosity book from Morgan Kaufmann and Ian Ashdown s applied radiosity book Further on by SIGGRAPH I assume will be Glassner s digital image synthesis book from Morgan Kaufmann the first full length book dedicated to computer graphics related theory If you know of anything I ve missed let me know back to contents Ray Tracing Roundup Updated Ray Tracing and Radiosity Bibliographies The free ray tracing and radiosity bibliographies which I maintain have been updated with references from 1993 These are at princeton edu pub Graphics Papers RayBib 10 93 Z and RadBib 10 93 Z Eric Haines References to Blobby Models Metaballs etc The following is a bibliography on particle systems compiled by David Breen at Rensselaer myself and Bill Gates at UBC Blobby objects and metaballs are one type of particle systems This bibliography has been printed as part of the SIGGRAPH 92 course 16 notes Particle System Modeling Animation and Physically Based Techniques Dave Tonnesen davet dgp toronto edu I do not include the bibliography here because it is surprisingly long If you want it you can ask me for a copy EAH back to contents A Note on SPD Platform Compiler Results SPARC II by David Hook dgh ecr mu oz au With the tweaked benchmarks in RTNv6n3 we removed the backing polygon altogether from the scene we did this because we were interested in measuring the effect of having such a large object in the scene back to contents OORT Object Oriented Ray Tracer by Nicholas Wilt 75210 2455 compuserve com and Eric Haines I have also woven in my own comments about the book and code into this announcement Nick is nice enough to make the code available for free on the net as the disk does not come with the book and normally costs 33 more The code for Nick s book is now available at the following sites as oort10 zip and oort10 tar Z wuarchive wustl edu graphic graphics ray ftp funet fi pub graphics packages ray tracing oort gondwana ecr mu oz au 128 250 70 62 pub EAH Extracted from the README This distribution contains the source code that accompanies my book Object Oriented Ray Tracing in C If you are interested in ray tracing or if you want to understand OORT in more detail you can call John Wiley Sons at 1 800 CALLWILEY 1 800 225 5945 to order it Alternatively you can find it in a local bookstore or have them order it for you ISBN 0471 304 158 36 95 I proof read much of this book It s good for the serious novice programmer wanting to do a ray tracer the C code also seems nice but I m just a beginner here though it s a trade paperback it s well referenced for a switch It follows mainstream professional practices instead of amateur inventions The layout and illustrations are nothing to write home about but suffice The first two thirds of the book walks through the topics below the last third is a reference manual for the OORT class library and appendices for an intro to C GIF display scene examples file formats etc The code per page amount is around 65ode for the first two thirds of the book which is pretty high as these things go but is pretty reasonable for a book presenting C for novices Also the code is well commented so it s usually not just pages and pages of tokens EAH The book assumes some knowledge of 3D computer graphics It includes lots of references so readers can pursue their own research too The topics covered include the following Vectors and matrices for computer graphics Standard Hall shading model with ambient diffuse specular reflective and transparent components Rendering various primitives planes rings polygons spheres bounding boxes quadrics CSG and algebraic surfaces Ray tracing acceleration OORT implements Goldsmith and Salmon s automatic bounding volume hierarchy generation for speed It also includes a hand coded 80x87 assembler routine to intersect a ray with a bounding box Texture mapping Procedural and solid texturing is described OORT implements a bunch of inverse mappings sphere cone cylinder quadrilateral circle Distribution ray tracing for antialiasing soft shadows and imperfectly reflective and translucent objects Statistical optimization to make the distribution ray tracing go faster OORT is a class library for ray tracing As such it does not implement an input language or interactive user interface Currently images are described to the ray tracer using calls into the class library This is surprisingly painless unlike C code C is almost as intuitive as the input language of a ray tracer In addition C is much more powerful than any ray tracer input language it has loop constructs functions and support for abstract data types Finally C debugging tools are much more sophisticated than the debugging tools that are available for proprietary ray tracer input languages All these protestations are not to say that no interactive user interface for OORT is in the works I plan to develop an interactive user interface for OORT and may provide parsers for other ray tracers input languages But for now if you want to make pictures using OORT you have to develop in C If you want to make pretty pictures get POV Polyray Rayshade etc If you want to look at some nice C code for a vector matrix library etc check this code out Note that the code does use templates which some C compilers don t have yet Microsoft s included Also it s interesting to note that this code is easier to integrate into existing software packages since it is procedure driven unlike most free ray tracers out there which are input language driven Finally this book is worthwhile as an example of a serious C application Personally learning C by examining the trivial examples in most books is useful for understanding syntax but grokking the true power of OO is easier when examining a full blown ray tracer built in C There are times when a pure object orientation is not used in this code for simplicity e g bounding boxes are treated differently but otherwise it s pleasantly polymorphic EAH Nicholas Wilt writes There are two versions of OORT The June 1993 version was cut for the book The only people who can get their hands on the June build are those who buy the book disk set from Wiley The freeware distribution was cut in late 1993 November or December The differences between the book distribution and the freeware distribution are minimal 1 The book distribution contains a shareware GIF viewer but the freeware distribution does not I figure anyone who can get their hands on the freeware distribution has access to a GIF viewer of their own 2 The freeware distribution has a few fixes to make OORT compatible with Borland C 4 0 The number of lines of code affected can be counted on one hand but the source code won t compile as is for BC 4 0 The official current version of OORT is the freeware distribution again the differences are minimal Nicholas Wilt also writes about what he s up to now I ve been working on the C code lately though not on the rendering engine I want an object oriented framework for 3D rendering that decouples the rendering technique from the modelling and quantization and display That led me to develop an interactive modelling and display program for Microsoft Windows and Windows NT I got tired of writing C source code to render images You professionals won t be too excited but there are lots of ray tracing wienies here on CompuServe that might be Windows is a good environment for this stuff because it has dynamic linking built in If I do the renderer right it should be very configurable and extensible NT has symmetric multiprocessing and a multitude of networking models built in RPC named pipes sockets to name a few so doing a parallel ray tracer should be a snap I got tired of waiting for ray tracings to finish so I did a Z buffering polygonal renderer back to contents Partial Evaluation Applied to Ray Tracing by P H Andersen txix diku dk I have implemented a simple ray tracer in C and optimized it by partial evaluation to run twice as fast The unoptimized program is faster than Rayshade 4 0 6 measured on raw intersection speed I am currently working on optimizing Rayshade by partial evaluation Below is a short description of partial evaluation and the application to ray tracing Partial Evaluation Partial evaluation is a general and automatic program transformation technique that can specialize programs with respect some of their input data A partial evaluator is a program which when given a program and some of its input data the static data produces a specialized program Running the specialized program on the remaining input data the dynamic data yields the same results as running the original program on all of its input data A partial evaluator unrolls loops unfolds function calls precomputes expressions that only depend on static data and reduces expressions depending on dynamic data The benefit of partial evaluation is speed of execution the specialized program is often significantly faster than the general program Refer to 5 for a general introduction to partial evaluation For this project we use a partial evaluator for C called C Mix 1 2 3 Ray Tracing The usual implementation is by a general algorithm which given a scene and a ray performs computation to follow its path The main loop of the ray tracing algorithm could look like this for each pixel x y in the picture do ray color trace scene ray plot x y color Since trace calls itself recursively to model reflected and refracted light the algorithm is rather time consuming Partial Evaluation Applied to Ray Tracing In all calls to the function trace the scene is the same which makes partial evaluation highly relevant Thus we specify that scene is static and ray is dynamic Given the program and the static scene data the partial evaluator will produce a specialized program where the main loop will look like this for each pixel x y in the picture do ray color trace scene ray plot x y color The function trace scene is a version of trace which is specialized with respect to the scene In other words trace scene is a new function which is only good for tracing rays in this one scene but which is often faster than the general algorithm If the picture generated is big enough the time to specialize plus the time to run the specialized program will be less than the time to run the original program often true since we all know how time consuming ray tracing can be Further in situations where the specialized program is run more than one time the gain is much greater of course This is especially the case for animations where only the viewpoint changes and or only part of the scene changes Another example is interactive design where one wants to try out different surface data light sources or eye positions Related Work Mogensen specialized a very modular ray tracer written in a functional language 6 showing that the administrative overhead can be removed by partial evaluation Hanrahan has a surface compiler which accepts as input the equation of a surface and outputs the intersection code as a series of C statements 4 He reports speedup of 20 References 1 Andersen L O Partial Evaluation of C and Automatic Compiler Generation Extend Abstract Compiler Construction Paderborn Germany October 1992 Lecture Notes in Computer Science vol 641 2 Andersen L O Self Applicable C Program Specialization Proc of ACM Symposium on Partial Evaluation and Sematics Based Program Manipulation PEPM 92 1992 3 Andersen L O Binding Time Analysis and the Taming of C Pointers Proc of ACM Symposium on Partial Evaluation and Sematics Based Program Manipulation PEPM 93 1993 4 Hanrahan Pat Ray Tracing Algebraic Surfaces Computer Graphics Volume 17 Number 3 July 1983 5 Jones N D Gomard C K and Sestoft P Partial Evaluation and Automatic Program Generation Prentice Hall 1993 6 Mogensen Torben The application of Partial Evaluation to Ray Tracing Master Thesis University of Copenhagen Dept of Computer Science DIKU 1986 back to contents Comparison of Ray Traversal Methods by Erik Jansen fwj duticg twi tudelft nl In RT News Vol 5 nr 1 July 1992 we reported a comparison of the DDA grid traversal as implemented standard in RayShade with a recursive bintree BSP traversal implemented in RayShade by Wim de Leeuw Although the BSP method in all cases performs reasonable well without additional tweaking the grid method wins when some tweaking is allowed leaving the groundplane out of the grid etc I disagree with those authors that take the position that a method should be fully automatic without adjusting parameters by hand Of course in practice it would be handy to have a fully automatic method but personally I think that we have two different problems 1 which method is fastest with the best settings possible and 2 how can we automate the method to find the optimum setting of parameters algorithmically In addition I think that we should be liberal in allowing having a two level grid i e a main grid with in certain partitions or macro objects a subgrid So in my opinion a grid method could be hierarchical as well and still differ basically from the adaptive methods as bintree and octree With these assumptions the grid method is still the winner We have continued our experiments with the implementation of a DDA bintree traversal in RayShade This was done by another student Pim van der Wal The method uses the standard RayShade DDA traversal that traverses a two level 3D virtual grid that is mapped to the bintree subdivision with an hierarchical spatial index in the style of the EXCELL method of Tamminen the alternative of a hash table needs less memory but is slower From a first implementation we learned that the timings for the SPD models did not really differ from those with the BSP method so we may conclude that the recursive traversal is indeed an efficient traversal for the bintree and we did not persue the DDA bintree approach any further With respect to comparing the grid method with the bintree or octree methods we were interested to know whether the three methods would behave differently when the density of the model data was increased locally Intuitively we thought that this would benefit the adaptive methods and harm the grid method Therefore we made different linear approximations of the teapot model increasing the amount of polygons from 10 000 to 60 000 For the subdivision of the bintree a subdivision criterion of max 20 polygons per cell was used For the grid a resolution of nxnxn was chosen where n polygons 1 3 eg 22x22x22 for 10712 polygons polygons grid bsp dda bintree 10712 164 7 197 3 229 9 20592 206 0 216 6 250 7 30800 207 8 238 1 279 2 43056 232 8 258 8 322 4 53592 246 3 270 7 328 8 61256 267 0 291 9 345 7 If you plot these figures you see three parallel lines This is a pretty surprising result if you think about it increasing the number of polygons affects all schemes in the same fashion on the face of it Erik will be making more results and ideas available from time to time since this is work in progress EAH I wrote Erik in response One area I wish was explored more formally is characterizing the complexity of a model with regards to its rendering method One interesting scheme Cornell tried a decade ago in the Weghorst Hooper Greenberg TOG paper I think was to do things like zoom way out so that the model was a speck on the screen do a normal rendering and zoom way in so a tiny portion of one surface was rendered A graph of time spent vs field of view angle might be interesting in comparing schemes Varying the size of the background plane polygon and charting the effect on various schemes might also be illuminating You and I can guess what the results probably will be But you don t know until you try as you point out with your recent experiment It would also be interesting to me to try to characterize the models themselves e g graph the number of objects per cell for a given set of models and see if there are any correlations between these graphs and relative performance of schemes e g we suspect when there are a large number of grid cells with a large number of items the octree scheme performs better than DDA Anyway these are just some experiments that your research made me think about What would be useful is some more knowledge of statistical methods as I m not sure how you could characterize such graphs into a few variables for example and then see the correlation between these variables and performance times Such research could lead to some heuristics that would be quite useful when the graph looks like this use BSP else use DDA back to contents Sphere Tessellation Gamma Correction by Olin Lathrop olin cognivis uunet uu net These are comments by Olin on RTNv6n3 Olin is the president of Cognivision a visualization company and has been in rendering for more than a decade EAH Simple Sphere Tessellation The method as described make three subtriangle from one triangle by dividing from the centroid would end up with long and thin triangles near the edges of the original triangles Ideally you want a method that is completely symmetrical in recursion That doesn t really exist but you can get much better results by subdividing each triangle into four triangles by using the midpoints of the edges I tried this about ten years ago with quite reasonable results The problem is that the four newly created triangles aren t exactly the same size due to the sphere s curvature The center one is always larger than the other three This effect falls off rapidly as the original triangle gets smaller The effect is not that strong but is visually quite noticeable if you facet shade the sphere especially when starting with a tetrahedron the worst case Starting with an octahedron as Mike Castle suggested is already noticeably better You can apply the same technique to subdividing a quadrilateral into four smaller ones In this case start with a cube Gamma Correction Gamma correction is largely a crock because the fundamental assumption is wrong Yes there is a reasonably reliable relationship between voltage and phosphor emission power that the standard gamma formula models well enough for our purposes Unfortunately this is not at all what the relationship from pixel intensity value to visible brightness actually looks like Major reasons why not include the monitor offset black level control and the CRT s reflection of ambient light The amplifiers can also be quite non linear at low voltage levels All this amounts to black not really being black which throws a big wrench into the gamma formula Here is how I think of and deal with the problem The problem really comes down to mapping an image with a large dynamic range 256 1 to an output medium with considerably less Ektachrome slides can get to 150 1 glossy prints with careful illumination 80 1 matte prints maybe 40 1 newspapers 15 1 A well adjusted monitor in a dark room maybe 100 1 if everything is perfect Figure 40 1 if that much for more normal monitor situations Contrast this to real world scenes in a office which can easily reach 500 1 Clearly something needs to get squashed in the process displaying or making a hard copy of most images The quest is to squash while maintaining the highest perceived likeness to the true image Humans perceive intensities logarithmically not linearly Since we want to do image manipulations in perceptual linear space this means manipulating brightnesses in mathematical log space Humans also tend to tune out details in dark areas of a scene There was a lot of interesting research on this stuff done by Kodak back in the 1930s Between the black level problem the way our perception system works and a host of unpredictable environmental variables it seems pointless to try to come up with a formula that can then be corrected for Even if you could come close my points are 1 Such a formula couldn t be reasonably approximated by anything as simple as one gamma exponential 2 Even if the function was known you don t want to correct for the best linear mapping anyway You want the best logarithmic mapping So here s what I do My software can map the input black to white range to any other range and can independently apply a brightness factor The brightness factor is exponential in nature but doesn t effect full black or full white A value of 0 leaves everything alone Positive values increasingly slosh intensities smoothly to the white end while negative values slosh towards black This doesn t try to model what the hardware is actually doing but provides enough controls to make things look good I have used this technique to pre treat images for film recorders printers and other output media with great results back to contents Computational Geometry On Line Bibliography by Bill Jones jones skdad usask ca The computational geometry community maintains its own bibliography of publications in or closely related to that subject Every four months additions and corrections are solicited from users after which the database is updated and released anew As of September 1993 it contained 5356 bibtex entries It can be retrieved via anonymous ftp from cs usask ca in the directory pub geometry The file geombib tar Z therein is the bibliography proper along with supporting software and documentation geom ps Z is a Postscript formatting of the database and o cgc19 ps Z is an overview which was published during 1993 in SIGACT News and the International J Comput Geom Appl The file ftp hints provides more detailed retrieval information back to contents Summary of Advanced Rendering Papers from Eurographics 93 by Erik Jansen fwj duticg twi tudelft nl The exact references can be found at princeton edu in pub Graphics papers RTBib and RadBib EAH Takamura et al a skylight illumination model based on scattering due to air molecules and aerosols Comparison of two methods to calculate the sky illuminance received by a point a band source method and a parallelepiped a sort of hemi cube method Blasi et al light absorption and scattering described by a phase function a new approximation formula is given that is faster to compute and approximates closely the theoretical functions use of the scattering function for simulating volume density objects haze fog clouds in a two pass Monte Carlo ray tracing this paper received the best paper award Daldegan et al physical simulation of hair on basis of a dynamic model of hair and a collision detection technique comparable to the work of Anjyo et al Visualization with ray tracing in combination with shadow buffers Shirman et al techniques to be used in combination with dynamic viewpoint dependent tessellation of curved surfaces front or backfacing test light influence test and existence of silhouette test No direct link with ray tracing or global illumination Drettakis et al characteristics of illumination functions maxima minima critical points etc and application to sampling and interpolation Maurel et al exploiting coherence in ray tracing animation sequences by keeping track of temporal invariances Nishita et al form factor calculation for curved surface patches by surface subdivision and element projection shadow computation using Bezier clipping Bao et al form factor calculation for curved surface patches by approximating the surfaces with triangular elements Sbert Global form factor calculation by sending a large number of rays in random directions through a scene Discussion of estimators and error metrics Michelin et al new form factor calculation based on reducing the double integral to a simpler line integral parallel implementations of the method Cohen et al a top down recursive ray traversal method for a pyramid data structure using the midpoint line generation algorithm Application to terrain data visualization back to contents RAT Another Ray Tracer by Tom Wilson twilson sunny5 dab ge com My goal in making my ray tracer is very different from the others RAT a ray tracing package to benchmark acceleration schemes Although it is less primitive than its existence as my Ph D research work it is still primitive compared to existing packages It only does very basic effects no fuzzy shadows textures etc It does contain several accelerators though uniform subdivision a bad HTE BSP tree and octree with index grids and extent tracing my research The idea of the package is to be able to plug in accelerators very easily Someone was actually able to do this So the accelerator recursive bintree traversal is also available Bounding volumes are also selectable for further testing Features IBM PC version Amiga version Mac version source code can be compiled for it Images aren t displayed though need to write something or convert the image I have a Mac and given time there will be a Mac version Sphere Cylinder Cone Y Paraboloid Y I ve never tested it because it s not in SPD Efficiency scheme US HTE BSP Octree extent tracing rec bintree Advanced local shading no but it does the polygon patch shading SPD teapot User support e mail Other S W support some As you can see it doesn t measure up to the others But it s a research platform not a pretty picture generator The accelerators should be easy to plug into existing tracers if they are modularly written I m currently working on an extension to my own extent tracing accelerator and struggling with the conversion of Arvo Kirk s 5D ray classification method I also will try to see if Ohta s tracer can be converted if I can find it on the net again New object types are easily added to the code I d like to add new bounding volumes but that is way down the list of things to do Also NFF is the input format A very simple output format is used and a couple of conversion routines are provided to ppm and ras I am very elated that Wim de Leeuw was able to add recursive bintree traversal to the package He said it was pretty easy I m looking for other researchers to either take a stab at it or give me the code so I can try It is far harder for me to take someone else s code that is possibly not well structured and convert it to my package than it is for him to convert it to my documented package It still takes a little time but instructions are given they are improving too and the simplest of all examples brute force tracing is available as a guide Basically 6 routines are necessary 1 scan the command line parameters for the technique and init a few variables 2 select the BVs to be used for objects which usually just uses the defaults but the choice is there 3 build the technique s data structure something the person already has done 4 trace one ray through the structure also already done 5 trace one shadow ray through the structure often this is the same as 4 6 print diagnostics for the technique All other code is provided shading intersection etc Contact Tom Wilson if you are interested in this research tool back to contents Fast Raytracing via SEADS by John Chapman chapman cs sfu ca and Wilfrid Lefer lefer lifl lifl fr Greg Stull gregs irvine com writes IEEE Computer Graphics magazine contained an article back in the late 1980 s actually 1986 v 6 n 4 EAH which presented an approach to raytracing using a Spatially Enumerated Auxilliary Data Structure SEADS Other than requiring a large amount of memory this seems to be a very promising approach since the rendering time of an image is essentially unrelated to the scene complexity I am curious if anyone out there has any experience with this rendering method John Chapman replies That was Fujimoto s technique and yes it takes a lot of memory An obvious extension is to use hierarchies of such uniform spatial subdivision structures so that empty areas are not filled with huge numbers of tiny little cubes Wyvill did some work on this with one of his students a few years ago but I can t remember exactly where it was published at the moment try taking a look at Graphics Interface proceedings from around 90 or 91 Hope this helps The paper he means is in GI 89 by David Jevans and Brian Wyvill Adaptive Voxel Subdivision for Ray Tracing it s a paper that should get more notice as the technique seems quite reasonable nesting grids essentially EAH Wilfrid Lefer replies I wrote a ray tracing using the SEADS structure two years ago Implementing this acceleration technique didn t raise any problem You can find the C code of my software on the following ftp site ftp lifl fr dir pub users graphix lefer SEADS back to contents Parallel Ray Tracing Schemes by Rainer Menes menes statistik tu muenchen de This is a introduction to some of the basic problems of parallelizing a ray tracer EAH Dennis Gorrie writes I m trying to come up for a project that shows off distributed processing and my first interest was ray tracing I don t have much background in writing rendering code so I am not sure how it would be done in a distributed environment 1 render a picture 1 scanline at a time where each machine in the pool does a scanline 2 break the picture up into n portions for n machines and have each one work on their own portion Well I m really not sure what the best way to do this is For 1 this would ensure each machine does equal amounts of work however perhaps this method would be very good to use with an incremental integer algorithm for rendering Hmmm this is not a good method to do it You also will have to deal with the problem that the workload is not equally distributed over the scanlines An idea which is not bad is to interleave the scanlines on each processor like this 1 Processor gets scanline 0 n 2 n the next processor get 2 get 1 n 1 2 n 1 and so on This gives you a static way to distribute the work over several processors This method has two problems 1 It will only work for a small number of workers Otherwise the scanlines on the processor are so far from each other that they are not related and don t have the same amount of work and a 640x480 picture can only be split into 480 working packages 2 Antialiasing is hard to use Normally antialising uses the information of the lines calculated before on a single processor machine On a network of processors you don t have that information or you will need a lot of communication To do antialiasing for the worst case you have to calculate the scanline before you and the scanline which follows you on each processor This will raise your work amount by 3 times Method 2 might get around this problem and reduce network traffic however the problem arises that some areas of the picture are more complex than others so while some machines are already done their trace and sitting idle other machines are still grinding away Not bad if you use square regions like 8x8 or 16x16 pixels with dynamic workloading At startup every processor requests one block of pixels to work on When he is done he will send his result back to the loadbalancing process and get a new pixel block package to work on This gives you a good loadbalancing of the net and only introduces a small amount of overhead when using antialising For antialiasing of 16x16 blocks you have an overhead of about only 1 3 and not 3 times If you make the areas bigger this will make your overhead smaller but reduce the amount of packages To get a good distribution of work you will need 20 30 packages per processor It would be nice if I had a basic rendering function that I could pass a list of objects and a scanline and have it generate the scanline Then I could concentrate on the task of splitting up the job Perhaps another aspect is a shared data file which all the tracers access maybe this would speed up the algorithm I don t know All this is based on my implementation of POVRay 1 0 soon POVRay2 0 and Rayshade 4 06 onto a transputer workstation with up to 129 workers The architecture is able to work with up to 526 workers back to contents Notes on Parallel Ray Tracing by Hsiu Lin hlin wsuaix csc wsu edu and Sam Uselton uselton nas nasa gov From the massively parallel rendering mailing list There were many comments about these questions I chose Sam s as a good broad response and also show Lin s responses to that Subscribe to the mailing list by writing mp render request icase edu EAH Hsiu Lin writes 1 Are there still many groups or people interested or doing research on parallel raytracing Sam Uselton responds Ray tracing is embarrassingly parallel in fact I believe the first time I read the term in an article by Gordon Bell ray tracing was used as the example to explain the concept Embarrassingly parallel applications are excluded from the Gordon Bell Award Lin replies Yes it is a embarrassingly parallel problem But since pixel computations might vary significantly in all screen pixels it will result in poor results without careful scheduling In parallel computing literature you also can find lots of paper talking about how to schedule this kind embarrassed paralleling problem even though their problem is not ray tracing Check IEEE Transactions on Computer Dec 1987 guided self scheduling or a practical and robust method for scheduling parallel loops in Comm of ACM Aug 1992 Basically if each pixel or set of pixels is computed by a single process that is no single pixel receives contributions computed by several processes then there are no synchronization problems and no data dependency problems Yes no data dependency But as for synchronization it depends on the algorithm implemented For a simple example we can use master slave model to parallelize ray tracing Each slave requests a job from the master if it needs one If the system is small it works fine But if we talking about 200 or even 1024 slave nodes the story is different The large synchronization overhead occurring in the master node will degrade the performance Therefore simply porting a ray tracer to a parallel machine is not very interesting as a research project Research must involve some unobvious cleverness to exploit the parallel architecture I can not completely agree with this point How you can achieve a scalable and load balanced parallel raytracer if we talking about big problem For example millions of polygons are raytraced on a parallel machine 2 Is parallel raytracing too simple or trivial See above 3 Is parallel raytracing research dead Not entirely but it has been worked enough that good ideas are becoming harder to find 4 Many previous work used SPD to test parallel raytracing Is it fair Although an SPD database such as balls tree mountain etc can be complicated enough most objects appear uniformly in the scenes I doubt if it will make the tested scene itself easy to be load balanced And thus it is very easy to use many different schemes to get very good speedup Why don t we view these scenes in different ways It might result in more difficult scene to be load balanced SPD is a start but a wider variety of scenes would seem to me to provide more info But designing good test scenes requires much time and effort for little reward I don t mean SPD is not good Actually I enjoy using it very much I just mean we need to adjust the viewpoint to keep the objects appear in different locations of the screen i e more different pixel computation distributions on the screen to test the effectiveness of parallel ray tracing Otherwise it is very easy just like you think to parallelize raytracing a self balanced scene using different schemes this parallels some of my comments to Erik Jansen EAH 5 People said now most interesting problem in parallel raytracing is how to partition database and distribute database if database is too large to duplicate at each node Since we raytrace huge database it should need huge cpu time to finish When we compare this cpu time with remote data access time when database is distributed maybe the data access time is relative small I doubt if this issue will become the same as we only consider all nodes has all duplicated database If the database is replicated or if you are using a shared memory machine then you should get linear speed up as you add processors If you aren t you should instrument your system and find the bottleneck s Look at the papers in the Parallel Rendering Symposium and you will see that distributing too small a chunk of work is inefficient but that for reasonably sized tasks communication time can easily dominate compute time when the data must be distributed Distribution among workstations on an ethernet is fine to reduce runs that require days to runs that require hours but you can never get interactivity that way 6 Besides loadbalancing and data partition are there any other important issues I have one How to predict your good speedup will drop as the number of processors increase This issue is very architecture and implementation dependent If you are doing a good job of data partitioning and load balancing that WILL mostly minimize the loss of efficiency Yes I believe you are right But to design a good parallel raytracer we can not ignore the architecture issue particularly when we are talking parallel computing So how can you easily do a good job on both above issues Well How about parallel volume rendering using ray casting In my opinion volume rendering uses more regular data and regular computation than ray tracing Do you agree If so do you also think parallel volume rendering is much easier than parallel raytracing To Lin s comments Uselton responds I didn t mean to indicate that I thought that all issues around parallelizing ray tracing were solved What I want to emphasize is that if I m on a conference program committee and I see a paper whose total content is essentially I parallelised my ray tracer and got near linear speed up on machine x and maybe some words about whether it is SIMD or message passing tightly coupled or network connected machines etc I m not very interested in the paper If it includes something about how load balancing and or distribution and access of very large data bases then it has a better chance But what I m really interested in at this point is work that performs some detailed measurements and varies some parameters to get data on how performance varies in response to the parameters And it would be even better if there is some cogent analysis as to why this connection should be true As I argued in a paper given before a small conference about 8 or 10 years ago the question is NOT can ray tracing be parallelized but rather which of the myriad possible ways that will ALL work to some extent is the best and under what particular circumstances is this true I think much of the ray casting volume rendering work is directly applicable to ray tracing as well I think more research institutions are pursuing volume rendering because its applications make it more fundable Let me point again but more specifically to David Ellsworth s paper in the Parallel Rendering Symposium It is not about ray tracing but it is exactly the kind of analysis that could be done for ray tracing and many other parallel applications I hope this clarifies my position and restores my credentials as a ray tracing enthusiast parallel and otherwise back to contents Parallel Texturing by Jon Leech leech cs unc edu and Brian Corrie Brian Corrie cs anu edu au Jon Leech writes We re implementing procedural shading models ala RenderMan to run on the SIMD rasterizer shader arrays in Pixel Flow the next generation of graphics system being built here The SIMD processors are coupled to a heavily interleaved memory for fast image texturing with trilinear interpolation I d say one of the main problems is how to make efficient use of the SIMD processors by scheduling identical operations in different shaders being applied at disjoint pixels to execute at the same time This is important when using lots of shaders in the same image We have done the same thing for our parallel volumetric geometric renderer for the Fujitsu AP1000 That is we have implemented an extended RenderMan like shading language for procedural texturing The extension encompasses procedural shading of a volume data set To do this we have created a new class of shader called a data shader that determines the shading and attenuation applied at a sample point within the volume The shader is invoked at each sample point Our implementation of the shading language gives us procedural shading of surface primitives as well With respect to the parallel issues of our technique I can safely say that we have addressed approximately 00f them 8 The data shaders were implemented as research into volume rendering techniques not parallel rendering It just so happens that we have implemented the technique on our AP1000 as well Whether we go further with this research with respect to parallelism is unclear at this time If you are interested in more information on this work see our paper entitled Data Shaders in the Proceedings of Visualization 93 San Jose California October 1993 You can also check out our tech report Data Shader Language and Interface Specification Technical Report TR CS 93 02 Department of Computer Science Australian National University It is available for anonymous ftp from dcssoft anu edu au in the directory pub techreports tr cs 93 02 report ps Z And if you are really keen or just curious about the ANU ParVis Visualization Project you can access an ftp based www server with NCSA mosaic for example on the CAP research project including the ParVis Visualization Project at the URL file dcssoft anu edu au pub www dcs cap cap research html Info on the ParVis project can be found by following the ParVis Visualization Project link at the bottom of this document back to contents Mapping Texture on a Sphere by Ron Capelli capelli vnet IBM COM D J James writes I haven t had much success trying to wrap a texture around the sphere My first approach using atan2 produces huge distortions at multiples of 90 degrees longitude I tried using spherical map projection equations using asin and acos without any luck The best shot I had using an equation from a gl reference book produced a beautiful image on the front of the sphere but the rear kind of swirled into a black hole Can someone give me a clue as to how to wrap an image around a sphere You can t comb the hair on a billiard ball I may be mis remembering the above quote slightly and can t find the original source but it refers to the problem of oriented mappings on a sphere Anyway there was a paper presented at SIGGRAPH 93 that addresses the problem of minimizing texture mapping distortion Maillot Yahia and Verroust Interactive Texture Mapping ACM SIGGRAPH Computer Graphics Annual Conference Series Proceedings of SIGGRAPH 93 Anaheim CA Aug 1 6 1993 pp 27 34 The problem was treated as a global energy minimization problem where energy was related to elastic deformation of the texture map Other very good papers addressing the problem in different ways are Bennis Vezien and Iglesias Piecewise Surface Flattening for Non Distorted Texture Mapping ACM SIGGRAPH Computer Graphics Vol 25 No 4 July 1991 Proceedings of SIGGRAPH 91 Las Vegas NV July 28 Aug 2 1991 pp 237 246 Bier and Sloan Two part texture mapping IEEE CG A Vol 6 Sept 1986 pp 40 53 back to contents Computational Geometry in C by Joseph O Rourke orourke sophia smith edu This looks like an interesting book I ve ordered a copy and hope to review it in the future EAH author Joseph O Rourke title Computational Geometry in C publisher Cambridge University Press year 1993 note In stock on 28 January 1994 ISBN 0 521 44592 2 Pb 24 95 ISBN 0 521 44034 3 Hc 49 95 Cambridge University Press 40 West 20th Street New York NY 10011 4211 1 800 872 7423 note 346 xi pages 228 exercises 200 figures 219 references comments Chapter titles 1 Polygon triangulation 2 Polygon partitioning 3 Convex hulls in two dimensions 4 Convex hulls in three dimensions 5 Voronoi diagrams 6 Arrangements 7 Search and intersection 8 Motion planning 9 Additional topics annote Textbook back to contents Programming for Graphics Files in C and C by John R Levine johnl chico iecc com John Levine Programming for Graphics Files in C and C John Wiley ISBN 0 471 59856 9 with disk ISBN 0 471 59854 2 no disk 29 95 without disk 49 95 with disk The book discusses programs that read and write graphics files in a variety of formats The book is about 60C and C code much based on the well known PBMPLUS library the Leffler TIFF library and the Independent JPEG group s JPEG software The disk has the full source of all three the book is just the most interesting parts since otherwise it would have been about 2000 pages long There is also new code for C image memory management in limited memory environments like DOS and some new file management code to read formats not handled by PBM such as HP GL files and Windows BMP As far as I am concerned all of the code is freely redistributable After discussing general principles of graphics file wrangling the book exhibits and explains the code to read and write 13 formats It s available at bookstores or direct from Wiley at 1 800 879 4539 back to contents Point in Polygon the Quick Answer by Wm Randolph Franklin and Eric Haines Wm Randolph Franklin wrf ecse rpi edu posted a nine line algorithm for the classic question How do I detect if a point is inside a polygon I made a few minor speed hacks got rid of a little code and made it shoot a ray along X which I m used to but it s mostly his Since we ve beaten this one to death in these pages I thought I d give his nice short though a tad dense it s mostly just one big if statement answer 8 lines Here tis int pnpoly int npol float xp float yp float x float y int i j c 0 for i 0 j npol 1 i lt npol j i if yp i lt y y ltyp j yp j lt y y ltyp i x lt xp j xp i y yp i yp j yp i xp i c c return c Running it in my pt in poly testbed I found this routine to be about 20 slower than my optimized crossings test in the upcoming Graphics Gems IV back to contents Elib and NetNews Information by Eric Haines There is an interesting pair of resources I just found out about from Wired magazine By writing elib DB Stanford EDU and and sending the message help no subject to each you can find out about them too Elib lets you search a computer science reference database at Stanford for keywords It s not very extensive dating back to 1991 at best but the response is immediate and the price is right free For example it turned up this which I hadn t heard of Author Garland M J Title Portable parallel ray tracing algorithms Institute Carnegie Mellon University Department of Computer Science Report CMU CS 93 176 Date 1993 Keyword Realistic rendering Keyword Ray tracing Keyword Parallel ray tracing NetNews is like Elib but the server searches recent News on the net using keywords You can also set searches on keywords so that it will daily or at whatever frequency you want send you the first part of any messages that match I do recommend that you set the threshold to 60 as the default is 50 not 70 as it says in the documents At 50 and the keyword ray tracing I was getting matches on rebuilding engines how much LSD Jerry Garcia uses abortion discussions and all kinds of other random stuff amusing for a few days but it wears thin Anyway as an example here s one that NetNews found today that I would have never run across otherwise From pjg parint esl com Paul Gyugyi Newsgroups rec toys lego dpenney morgan ucs mun ca Dave Penney writes 2a If I was to design my own Lego set from Lego standard pieces where would I be able to post this for others FTP Pictures or would LEGO be willing to take it 2b How or which would be the easiest way to transcribe this down onto paper There are a variety of CAD tools for lego on the earthsea archive but nothing that doesn t require some work If you can sketch down your instructions and fax them to me I ll pass them along to other CAD developers to use as a test bed for adding new features to the programs In earthsea pub lego CAD you will find some Postscript tools some ray tracing tools and some parts libraries for drafting programs But I ve found isometric graph paper with 30 degree lines is easiest to use actually We ve been working on a standard input file format something that you can type in ASCII and feed into other programs Stefan and I are working on a front end to Rayshade a 3D raytracing program If you are interested in describing your models in our format or if you are willing to sit down with a ruler and add descriptions of some lego pieces to our parts library it would be appreciated back to contents CFP 5th Eurographics Workshop on Rendering by Georgios Sakas Darmstadt Germany 13 15 June 1994 Aims and Scope Following four successful workshops Rennes 1990 Barcelona 1991 Bristol 1992 Paris 1993 we announce the fifth workshop on rendering techniques In the recent years the workshop has been well established as a major international forum in exchanging experience and knowledge between people from universities research and industry interested in the different aspects of rendering techniques Main topics include but are not restricted to Radiosity Ray tracing Illumination models Colour texture Sampling filtering anti aliasing Parallel solutions for rendering Two special themes of this workshop are Illumination rendering of participating media volume objects clouds Rendering of architectural CAD models illumination simulation real time rendering walkthroughs handling of large datasets We encourage also papers describing on going research and providing new techniques perspectives and applications in the field Discussions and evaluation of current techniques and future trends greatly contribute to the attractivity of the workshop Thus the presentation of the papers to the plenum will be followed by a discussion introduced by an expert of the field Internationally renowned speakers from research and industry will also present invited papers Schedule 5 April 1994 Submission deadline 5 May 1994 Notification of acceptance for presentation 30 May 1994 Full paper deadline for the workshop proceedings 13 15 June 1994 Workshop For the full posting detailed information rendering databases and authors toolkit including latex styling formats contact haas igd fhg de gsakas igd fhg de or shirley cs indiana edu back to contents CFP 5th EG workshop on Animation Simulation by Gerard Hegron hegron irisa fr September 17 18 1994 Oslo Norway AIMS AND SCOPE The Eurographics workshop on Animation and Simulation has become an international forum of high quality for exchanging experience and knowledge between people representing the animation and simulation communities on the general themes of modeling animation motion control simulation and visualization of dynamic scenes SCHEDULE May 1 deadline for extended abstract June 1 notification of acceptance for the workshop July 15 full papers September 17 18 workshop Write Gerard or Olov Fahlander olov f isy liu se for the full posting back to contents Morphology Digest by Henk Heijmans henkh cwi nl Some time ago we announced the Morphology Digest an electronic newsletter for workers in the field of mathematical morphology stochastic geometry random set theory image algebra etc It provides fast and up to date information on 1 Conferences workshops courses 2 Books articles reports PhD theses 3 Algorithms software hardware 4 Available research positions 5 Bibliographical data relevant to anyone interested in mathematical morphology The digest appears every six weeks and has approximately 500 subscribers Subscribe email to morpho cwi nl with subscribe as subject and empty message body Unsubscribe email to morpho cwi nl with unsubscribe followed by email address as subject and empty message body Submissions email to morpho cwi nl with submit as subject Archive site anonymous ftp to ftp cwi nl 192 16 184 180 directory pub morphology digest This digest is not about morphing it is much more oriented to image processing object recognition texture classification etc It s a pretty serious and useful journal if this area interests you EAH back to contents Position of the Sun by Joe Cychosz 3ksnn64 ecn purdue edu I didn t try to analyze James Ashton s code in RTNv6n3 for sun position But I assume it s a quick hack It doesn t consider latitude for one thing I didn t check his time equations but there is nothing to correct for timezone Maybe he s working with GMT all the time and what is this floating point month stuff The lengths of the months varies from month to month The following code computes the direction to the sun give location on the earth lon lat and the time A correction angle gamma can be specified so the sweep of the sun can be aligned with the world coordinate system Thus the structure can be nicely modeled along the coordinate system Some years ago I did a short film of an energy efficient house build here at Purdue One of the key pieces of technology was the design of the overhangs over the windows which were designed to keep the sun out in the summer and let it in in the winter The film demonstrated the effects of the overhangs on the penetration of sun into the house at various times of the year Hopefully the code has sufficient documentation to enable one to use This code has only been tested in the northern hemisphere A quick note about the coordinate system y is up x is right z is out Joe Cychosz include ltmath h gt include GraphicsGems h define pi 3 14159265358979323846264338 define rad2deg 180 pi define deg2rad pi 180 trigd h Degree based trig functions define cosd t cos 0 01745329251994 t define sind t sin 0 01745329251994 t define tand t tan 0 01745329251994 t sunpos Compute the position of the sun Description Sunpos computes the position of the sun given the location longitude and latitude on the earth the day of the year and the time The origin i e 0 0 0 in world space is the specified location on the earth With an orientation angle of 0 east z west z south x north x On entry lon lat The longitude and latitude in degrees of the location of the origin on the earth i e West Lafayette Indiana 89 40 lontz The longitude for the time zone in degrees Each time zone is 15 degrees advancing to the west For daylight savings the longitude is advanced 1 timezone to the east i e 75 for EST 90 for CST 75 for CDT time The time of the day in hours i e 13 5 1 30 pm day The day of the year i e 172 for June 21st gamma Orientation angle defining south rotating the sweep of the sun i e 14 14 degrees east of south On return pos Direction cosines of a vector pointing toward the sun from the origin Returns True if the sun is visible Author Joe Cychosz Purdue University CADLAB Potter Engineering Center W Lafayette IN 47907 boolean sunpos lon lat lontz time day gamma pos double lon lat Longitude latitude double lontz Longitude for timezone double time Time of day int day Day of the year double gamma Orientation angle Vector3 pos Position vector of sun Angles are in degrees times are in hours double del Angle of declination double b Time angle double e Time double w Hour angle double we gs double phi double ws Sunrise sunset angle double sunrise Sunrise time double sunset Sunset time Compute solar declination 23 45 deg on June 21 del 23 45 sind 360 0 284 day 365 Compute the hour angle in degrees w 0 at solar noon gt 180 at midnight for am for pm 1 hour 15 degrees w 22 5 at 10 30 am solar b 360 0 day 81 364 e 9 87 sind 2 0 b 7 53 cosd b 1 5 sind b 60 w 180 0 lontz lon 15 0 time e phi acos sind lat sind del cosd lat cosd del cosd w we acos tand del tand lat rad2deg gs asin cosd del sind w sin phi if w gt we gs pi gs if w lt we gs pi gs Compute the position of the sun For gamma 0 the sun will rise at z and set at z pos gtx cos gs gamma deg2rad pos gty cos phi pos gtz sin gs gamma deg2rad Compute sunrise sunset angle ws rad2deg acos tand lat tand del Compute sunrise time and sunset time sunrise 180 0 ws lontz lon 15 0 e sunset 180 0 ws lontz lon 15 0 e printf sunpos sun position 0 000000 0 000000 0 000000 n pos gtx pos gty pos gtz printf sunpos sunrise time 0 000000 n sunrise printf sunpos sunset time 0 000000 n sunset return time gt sunrise time lt sunset back to contents Eric Haines erich acm org Ray Tracing News Volume 7 Number 2 Ray Tracing News Volume 7 Number 2 Ray Tracing News Volume 7 Number 2 Ray Tracing News Volume 7 Number 2 Ray Tracing News Volume 7 Number 2 Ray Tracing News Volume 7 Number 2 Ray Tracing News Volume 7 Number 2 Ray Tracing News Volume 7 Number 2 Ray Tracing News Volume 7 Number 2 Ray Tracing News Volume 7 Number 2 http www acm org tog resources RTNews html rtnv7n2 html http www acm org tog resources RTNews html rtnv7n2 html http www acm org tog resources RTNews html rtnv7n2 html http www acm org tog resources RTNews html rtnv7n2 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv7n3.html%%==%%Ray Tracing News, Volume 7, Number 3%%==%%Ray Tracing News "Light Makes Right" July 6, 1994 Volume 7, Number 3 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%73923%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right July 6 1994 Volume 7 Number 3 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1994 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Ray Tracing Roundtable at SIGGRAPH 94 by Eric Haines Books at SIGGRAPH 94 by Eric Haines Radiosity A Programmer s Perspective by Ian Ashdown Computational Geometry in C by Joseph O Rourke Simple Databases Available For Rendering Global Illumination by Peter Shirley Radiance Version 2 4 Available by Greg Ward Faster Ray Torus Intersection by Eric Haines RAT PACK Free Ray Tracing Research Software by Tom Wilson Light Beams Tricks by Chris Thornborrow On Line Ray Tracing Bibliography by Ian Grimstead Polynomials by Han Wen Nienhuys Shadow Caching Observation by Han Wen Nienhuys Small Comment on GGems III bsp c by Han Wen Nienhuys Fogsources by Han Wen Nienhuys The Rayce Ray Tracer by Han Wen Nienhuys Ray Tracing Roundup A Storage Trick for 3D Polygons by Eric Haines Illumination Related Abstracts from the Proceedings of Graphics Interface 93 Design and Aims of the YART Graphics Kernel by Ekkehard Ekki Beier Distribution Ray Tracing by Marc Levoy Ray Tracing Antialiasing and What To Do Instead Steven Demlow Yet Another Illumination Ph D by George Drettakis Introduction This issue is one of perhaps three to five I m planning to get out in July as I try to clean out the backlog before SIGGRAPH This issue is focussed on SIGGRAPH and other conferences theory and algorithms things like that The next issue will be more hobbyist oriented it may be out as soon as tomorrow I also hope to create a commercial product review issue nothing formal mostly ravings from the nets Anyway this issue brings me partially up to date to April 20th of the backlog So why continue editing and writing for the Ray Tracing News now that the Usenet group comp graphics raytracing exists Mostly for the reason anything gets editing content and form 900f the Usenet group traffic is where do I find and how do I make type questions which is just fine for a newsgroup but not something you want to save around I see the purpose of the Ray Tracing News as gathering information which is useful to researchers graphics artists and hobbyists resources theory and general algorithms vs ray tracer specific operations Also there is interesting traffic which concerns ray tracing and rendering in general of which I catch but a small whiff with my automated keywords searchers see RTNv7n2 in many other newsgroups By the way if you want to start a flame war strongly assert on alt games doom that Doom uses does not use ray casting to determine wall visibility I never did figure out if anyone had the right answer on that one I suspect given the massive influx of new Usenet users and whatnot that we ll see more and more edited vs moderated newsgroups material over time Newsgroups are starting to get overwhelming and I personally can t keep up I know that there are many who read the RT News but don t follow Usenet because of the low signal to noise ratio It s mostly a labor of love for me also I like to organize this stuff for my own use but once the infrastructure and standards exist for person to person electronic cash transfers via email expect an explosion of edited material for sale for pennies Ahhh nah I m just dreaming the InfoBahn is really meant for Gilligan s Island reruns on demand right SIGGRAPH stuff be sure to check out the Technical Sketches sessions which are new this year These presentations are short informal talks about work in progress For example Nicholas Wilt will discuss the advantages and pitfalls he found in working with C in creating his object oriented ray tracer see the review of his book in RTNv7n2 back to contents Ray Tracing Roundtable at SIGGRAPH 94 by Eric Haines You re invited If you re at SIGGRAPH this year come to the Ray Tracing Roundtable It s on Thursday at 5 15 pm actually we have the room from 5 to 7 so you can show up early at the Clarion Hotel next to the convention center acc to the map in Salon 14 a swell room name combining the Romantic imagery of a literary salon with a number What do we do there We schmooze until the papers reception starts at 7 pm Essentially it s a place to put names with faces and meet like minded people Sadly the swimsuit and pie eating contests are canceled this year Otherwise it ll be pretty much the same as the last N years where N 5 we go around the room and introduce ourselves then things break up and we talk So to summarize Time Thursday at 5 15 6 15 pm or so Place Clarion Hotel Salon 14 Since ray tracing research is essentially dead except for some of those parallel and volume rendering guys I expect a lot of discussion about whether Wired or Mondo 2000 is the most retina damaging Seriously now that ray tracing has become a mainstream computer graphics artist and hobbyist oriented activity I ll be interested to see who shows up and what people are doing nowadays Me I haven t traced my own rays in perhaps two years though am planning to soon and am more interested in texturing and GUI issues so show up if you re interested in 3D rendering and interaction in general back to contents Books at SIGGRAPH 94 by Eric Haines This SIGGRAPH promises to have a bunch of great books coming out Graphics Gems IV is already out of course and has some wonderful subtly useful bits of information I m particularly glad to see Ken Shoemake s articles about Arcball a great GUI technique of rotating objects or the view and about matrix decomposition sometimes valuable for animation and other things These topics were covered by him in Graphics Interface back in 1992 but the truth is that unless it s in SIGGRAPH it tends to get ignored Another book which has come out this year is Programming for Graphics Files in C and C by John Levine J Wiley 1994 It s interesting to compare with Graphics File Formats by Kay and Levine McGraw Hill 1992 You d think the newer volume would be better in all respects since the same author is involved in each I used both of these recently for writing a Targa output routine and they re fairly different The newer volume is code oriented with text mostly there as comments for the code while the older spent time explaining the file format more thoroughly For example color maps and the 2 0 Targa format are explained in the earlier book but not in the latter because no code is given to interpret these I am also unimpressed by the quality of the code given as proof the compute runlengths routine on page 212 spends a lot of time setting runlength col 0 and checking this on pages 209 210 which is not necessary since the runlengths accessed by writetga will always be non zero Francois Sillion and Claude Puech s book on radiosity Radiosity and Global Illumination from Morgan Kaufmann approx 250 pages ISBN 1 55860 277 1 49 95 will be out at SIGGRAPH I glanced through the early version at last year s SIGGRAPH and it should be of comparable quality to Cohen and Wallace s Radiosity and Realistic Image Synthesis Academic Press released at last year s SIGGRAPH Ian Ashdown s book on making radiosity practical Radiosity A Programmer s Perspective from John Wiley Sons should sell well It s the first book of its kind and should help put to rest those arguments about how radiosity is too complex or too slow See the separate article in this issue for a quick rundown by the author Another practical book this time for GUI programmers and users is The Inventor Mentor by Josie Wernecke from Addison Wesley It s for SGI s OpenInventor object oriented system for creating graphics applications From all reports OpenInventor is a nice development system and even if you re not using SGI s it s got some good methods for 3D manipulation etc though I wish they had used Arcball which is wonderful David Ebert is the editor and an author of the forthcoming book Texturing and Modeling A Procedural Approach from Academic Press The co authors are Ken Musgrave Darwyn Peachey Ken Perlin and Steve Worley Another good title for this book might have been A Bunch of Guys Playing with Noise much of its focus is on using the noise function in many different ways for making everything from smoke to mountains The focus is mostly on inorganic substances there is a little about say evolutionary procedural systems such as L systems Which is fine there s a lot of great in depth material here for people using procedural functions for texturing Particularly useful at least for me were Worley s and Peachey s sections on how to avoid various problems e g patterning aliasing how to make the noise function fast and how to expose parameters controlling designed textures to the naive user There is plenty of pseudo code from all of the authors who pass on their tips and tricks in a straightforward fashion This book will be used as part of their course at SIGGRAPH Another book which just came out is Photorealistic Rendering in Computer Graphics edited by Pere Brunet and Frederik Jansen Springer Verlag This is the proceedings of the Second Eurographics Workshop on Rendering This conference happened way back in 1991 but I m happy to see the proceedings made it to the light of day partly for personal reasons I admit I m happy to see my shaft culling paper not disappearing forever There are papers by Sillion Ward Shirley Kirk and Arvo and many others There are other lesser known authors who have done some interesting work For example Christophe Schlick s paper on An Adaptive Sampling Technique for Multidimensional Integration by Ray Tracing looks like a good way to go for doing Monte Carlo type rendering adaptively Brigitta Lange s article on The Simulation of Radiant Light Transfer with Stochastic Ray Tracing is an in depth treatment of implementing Kajiya s Rendering Equation techniques Anyway browse through it and convince someone else to buy it Springer Verlag books tend to be pricey If you re looking for a book on CG computational geometry that is consider Computational Geometry in C by Joseph O Rourke see the table of contents listing in this issue for more information which came out in January For example here at 3D Eye a co worker found it helpful in designing a robust polygon tessellator His comments are a good book full of tricks Don Hearn and Pauline Baker s Computer Graphics is now in its second edition 652 pages Prentice Hall 61 00 ISBN 013 161530 0 This edition is a major rewrite bringing the book up to date with the latest research It s also the first computer graphics textbook that gasp actually has color pictures integrated into the text instead of plates I ve paged through it and it looks like a reasonable beginner intermediate textbook on the subject and is definitely user friendly Fragments of code in Pascal are used throughout to explain algorithms so the book has a hands on practical feel to it The book that I think is the most important new work at SIGGRAPH 94 won t be there and won t be a book it ll be out come October it ll be two volumes it weighs in at 1400 pages and I would guess there will be a mock up or somesuch on display It s Andrew Glassner s Principles of Digital Image Synthesis from Morgan Kaufmann This book is focussed on the theory of computer graphics yes the field is indeed more than just hacks and tricks The science of perception of sampling and filtering of how materials interact with light and all sorts of other topics are covered It s certainly not light reading but it does our field a great service Glassner does all the wading into dusty tomes on everything from Monte Carlo theory to the Kubelka Munk pigment model to well you name it and pulls out and explains the parts that are relevant to computer graphics and also notes the parts that might be relevant but are currently unexplored There are many figures and graphs throughout The book does not discuss efficient rendering algorithms per se there are no implementation information for hidden surface renderers ray tracing quick filtering etc The reason is simple such algorithms are well covered by many other texts and what methods are popular changes over time The scientific theory specific to computer graphics is scattered over a wide number of disciplines the foundations of theory do not change much over time and to date there has been no unified presentation of this material Now there is and I think this book is a historic step in making computer graphics accepted as an discipline in its own right back to contents Radiosity A Programmer s Perspective by Ian Ashdown 72060 2420 CompuServe COM This should give you an idea of the sort of book this is EAH Title Radiosity A Programmer s Perspective Author Ian Ashdown Publisher John Wiley Sons Inc Publication Date Summer 94 in time for SIGGRAPH Part I Radiosity Models Light Chapter 1 Measuring Light Chapter 2 Radiosity Theory Part II Tools of the Trade Chapter 3 Building an Environment Chapter 4 A Viewing System Part III Radiosity and Realism Chapter 5 Form Factor Determination Chapter 6 Solving the Radiosity Equation Chapter 7 Meshing Strategies Chapter 8 Looking to the Future Appendix A Photometric and Radiometric Definitions Appendix B Eigenvector Radiosity Appendix C Memory Management Issues Appendix D Color Quantization Techniques Appendix E AutoCAD DXF File Format The 512 page book will include 7 500 lines of documented C source code for a fully functional and mostly platform independent radiosity renderer Approximately 1 200 lines of C and C are used to provide a user interface for Microsoft Windows in 16 bit and 32 bit versions Windows 3 1 and Win32 Windows NT I make it very clear in my book that the industry bible is Radiosity and Realistic Image Synthesis What I have attempted to provide is an inexpensive 40 radiosity testbed for personal desktop computers In it I have implemented a standalone 3 D viewing system with Gouraud shading color dithering gamma correction and so forth Chapters 3 and 4 a review of form factor determination methods and three implementations hemi cube cubic tetrahedron and ray casting a review of iterative techniques for solving the radiosity equation with an implementation of progressive refinement radiosity including the ambient lighting term and positive overshooting meshing techniques with an adaptive subdivision implementation and a review of other radiosity techniques Despite the title the underlying mathematics are complete and self contained back to contents Computational Geometry in C by Joseph O Rourke orourke cs smith edu 346 xi pages 228 exercises 200 figures 219 references Cambridge University Press ISBN 0 521 44592 2 Pb 24 95 ISBN 0 521 44034 3 Hc 49 95 Cambridge University Press 40 West 20th Street New York NY 10011 4211 1 800 872 7423 Chapter titles 1 Polygon triangulation 2 Polygon partitioning 3 Convex hulls in two dimensions 4 Convex hulls in three dimensions 5 Voronoi diagrams 6 Arrangements 7 Search and intersection 8 Motion planning 9 Additional topics back to contents Simple Databases Available For Rendering Global Illumination by Peter Shirley shirley cs indiana edu Hello fellow global illumination fans This is a note about some simple databases to test rendering that I have put together They are in the spirit of but not quite as neat as the ray tracing test scenes put together by Eric Haines They are greyscale and diffuse and mostly quadrilaterals so expect something designed for ease of use in arbitrary renderers Anyway if you use them and experience any problems please let me know by email Some sample databases for rendering calculations are available by anonymous ftp There are eleven scenes each with a sample image from a particular viewpoint Ten of the scenes have all quadrilaterals and one also has a sphere The scenes are achromatic Nine are all diffuse one has a specular surfaces and one has a glass object The scenes range in complexity from an empty room with six quadrilaterals to a 100 room scene with 41800 quadrilaterals More scenes may be supplied later If you want other types of scenes or need help converting our geom files to your own format contact Peter Shirley at shirley cs indiana edu The data is available via anonymous ftp at moose cs indiana edu 129 79 254 191 in pub RW5 This directory contains a README file and several subdirectories one of which has compressed tar files for the other directories There has been an addition of two sample density volumes 128 3 and 64 3 to the databases Georgios Sakas and I have prepared for the 5th Eurographics Workshop in Rendering to held in Darmstadt Germany on 13 15 June 1994 The deadline for paper submission is 5 April 1994 back to contents Radiance Version 2 4 Available by Greg Ward greg hobbes lbl gov Radiance version 2 4 is now available for downloading by anonymous ftp from hobbes lbl gov 128 3 12 38 in Berkeley California and soon will be available from nestor epfl ch 128 178 139 3 in Lausanne Switzerland If you do not have access to ftp you may request the software on 60 Mbyte 1 4 inch tape cartridge Relatively little has changed in the 6 months since our last release We have added a couple of new CAD translators one for Wavefront and one for an intermediate T mesh data format The main reason for creating this release is to take advantage of an opportunity to put the software on this year s Siggraph CD ROM If you have release 2 3 already and don t use it much you may want to wait until the CD ROM comes out to install 2 4 and read the new systems paper on Radiance at the same time In a related announcement we now have some Radiance HTML documents on hobbes for those of you using Mosaic or its equivalent The URL is html hobbes lbl gov www radiance radiance html back to contents Faster Ray Torus Intersection by Eric Haines Would like to know if anyone can offer tips algorithm for solving for intersection of a ray and a torus I have generated a 4th order polynomial from torus equation and ray parametric eqns Got a solution method for a cubic from Numerical Recipes in C and can use it in the method for 4th order eqns shown in CRC handbook Just wondered if there s an easier and or faster way This is exactly what I did Just wait until you run into those imprecision problems Anyway using the closed form approach you outline seems the way to go My only addition was to add a very bounding box test for the torus Using Van Wijk s method in an ACM TOG article and in his thesis for testing a ray against a surface of revolution you can derive a simple quadric test which gives a very close bounding volume essentially it bounds the torus with a rectangle around the cross section which is swept around imagine a squared off tire being the bounding box The advantage here is just that you don t have to do the whole 4th order shebang the 2nd order surface can be tested very efficiently using Van Wijk s method of classification then if you hit you need to do the whole test This method is lots better for tori with a large interior radius vs bounding boxes as the method properly says a lot of the rays passing through the ring are misses and so saves on testing I haven t done a formal analysis though back to contents RAT PACK Free Ray Tracing Research Software by Tom Wilson wilson forest dab ge com Very soon I will have the next release of RAT ready for release RAT is a RAy Tracing PACKage which is useful in research environments This means that if you re looking for a pretty picture generator you re not going to want this software However if you want to test accelerators or otherwise steal ray tracing code you might want the package The package has enormous improvements over the last release but it s still far from awesome if you take 3 and add 10 to it it is still much less than 100 8 I ve started working on a Mac version but there are two things preventing me from finishing it before the release 1 my Mac has no FPU and I have no desire to wait weeks for images to be generated and 2 making all the Mac like features pull down menus etc is going to take some time However the release will come with Think C projects to at least build the code If the user has an FPU then the code can be compiled with that option turned on Many readability usability improvements have been made I ve had one person add an accelerator to the package in the past and that should be even easier now I intend to add Kirk Arvo s scheme and Ohta s scheme in the near future but I ve been saying that for a while I will NOT be posting the package to c g or putting it at an ftp site You can request it via e mail When it is ready I will mail it out to my mailing list For more info like the README from the last release etc send e mail back to contents Light Beams Tricks by Chris Thornborrow ct epcc ed ac uk rowley crl ucsd edu writes I m interested in simulating light beam effects using POV Ray This would be something that looked like a search light or a starburst In general this isn t an easy problem to solve if you can see the beam from any angle and a full solution involves integrating over the light reflected by particles encountered by the ray through the beam Sometimes just a constant scaled by the distance traveled through the beam will work if you are at right angles to the trajectory of the beam As an undergrad I solved for spheres of light lamps in fog cones of light headlights and quadrilateral cross section cones beams from a window Depending on the quality you are looking for simply using a single flat polygon at 90 degrees to the viewer with appropriately chosen intensities of colour less at the spread out end and transparency will give a passable effect back to contents On Line Ray Tracing Bibliography by Ian Grimstead I J Grimstead cm cf ac uk This is to announce the availability on the Web of an On Line Ray Tracing Bibliography It is divided into appropriate sections and includes many abstracts from the papers it holds The references were taken from Tom Wilson s collection of articles whom I thank credit him for his hard work The site is now stable but updates will not commence until the pages have been fully tested The address of the site is http www cm cf ac uk Ray Tracing To view use the bibliography you require an html viewer such as Mosaic or Lynx If you re not sure what I m talking about ask your sys admin about Mosaic if they don t know then get them to acquire the software via archie This software enables you to view hyper text pages including pictures animation sounds distributed around the World Wide Web and to link into ftp gopher and news servers back to contents Polynomials by Han Wen Nienhuys hanwen stack urc tue nl Algebraic sufaces are nasty shapes They re kind of slow and they suffer from surface acne Rays P t D spawned off an algebraic always have an intersection at t 0 Due to numerical inaccuracies we often find t which are small but bigger than our current tolerance This produces phantom shadows digital zits and and more unwanted effects If we could prevent this from happening then 4th order algebraic shapes don t need accurate but slow root finders such as Sturm sequences So our problem is how to filter zeros of polynomials p t 0 if t 0 First we need to know what will the consequences be for a polynomial p t if it has an intersection at t 0 The anwer is simple it will look like p t a 1 t a 2 t 2 a n t n Because p t 0 is a raytracing equation we know that the intersection at t 0 is useless anyway so we might just as well discard it giving p 2 t a 1 a 2 t a n t n 1 as a result This will give the same results as p t 0 This kills two birds with one stone By throwing away the intersection at t 0 we eliminate noise and at the same time reduce the order of the equation The intersection will now also be cheaper Still there is a small caveat due to inaccuracies the polynomial is more likely to be p t a 0 a 1 t And p E 0 from a small E E 0 p E a 0 a 1 E O E 2 E 0 the expression O E 2 means smaller than some constant multiplied by E 2 if E tends to 0 In other words it can be neglected Then approximately E a 0 a 1 and a 0 a 1 holds The converse is also true ie if a 0 a 1 So we can strip a 0 and lessen the degree of p t if a 0 a 1 Caveat if the result of evaluating an algebraic P x y z with x y z P t D has a large error then this will fail the resulting polynomial could have a zero at some t t TOLERANCE Experimental results I implemented it in Rayce and it does work but not as good as I had wished I ve tried a zoomed in version of papercl r A remake of the Cook Carpenter Porter paperclip it contains three torii This filtering mechanism eliminated phantom shadows at the edges of the torii back to contents Shadow Caching Observation by Han Wen Nienhuys hanwen stack urc tue nl Shadow caching is a useful way for quickly determining whether an intersection will be in a shadow This is the idea one object that blocks light is enough to have a shadow at an intersection point So each time you find an object that blocks a ray store it and test this object the first thing at the next shadowray Because second level rays are different from first level rays the shadow rays spawned off their intersection point are different Therefore it seems a good idea to have a cache for each recursion level and each lightsource On the other hand a quick survey of the raytracers on my harddisk revealed that PoV and Rayshade cache only one object per lightsource MTV and Art have a cache for each level Nobody seems do make a distinction between reflected and refracted rays Let me explain if a recursion level 1 intersection could be from an eyeray that is refracted or an eyeray which has been reflected Since the reflected and refracted rays will have entirely different directions their respective intersection points and hence the blocking objects for a given lightsource will usually be different The solution instead of passing the recursion depth to the recursive function trace pass a tree which looks like struct Tree struct Tree reflect tree reflact tree int recursion object shadow cache shadow cache is an array with a pointer to the last blocking object for each lightsource shade Tree t if reflection set up reflection ray color trace t reflected I ve implemented this in Rayce and for scenes with both refraction and reflection it doubles the number of cache hits Interesting to me I implemented essentially the same thing for our commercial ray tracer assuming it would be a win for minimal extra memory but never tested it out to see whether the improvement was noticeable EAH back to contents Small Comment on GGems III bsp c by Han Wen Nienhuys hanwen stack urc tue nl I ve adapted Graphics Gems III s BSP code for use in Rayce and I have a small remark Although most of the code was inefficient because it had to be educational and understandable the authors forgot a simple optimization It will make the code even simpler Change if RayObjIntersect ray currentNode members obj distance PointAtDistance ray distance p if PointInNode currentNode p return TRUE to if RayObjIntersect ray currentNode members obj distance intersection in currentnode if distance min distance This saves 10 floating point operations and 2 function calls Kirk and Arvo limited the recursion depth of the tree by setting a hard coded limit at 49 It makes more sense to determine the depth of the bintree from the object database I ve tweaked the subdivide procedure to stop subdividing a node if subdivision has no effect This has two pros 1 The depth doesn t have an arbitrary limit 2 If all objects of a node overlap then the subdivision won t help if you d continue subdivision the tracing will take extra time back to contents Fogsources by Han Wen Nienhuys hanwen stack urc tue nl Yesterday I was riding my bicycle at night and I was thinking of how to raytrace my surroundings It was a bit foggy and the light of the streetlights was scattered in a beautiful glowing haze While riding I came up with a method to model these foggy lights This method should also be good for modelling the neon that some folks on PCGNet want to do with PoV So let I I d be the intensity at a certain point which has distance d from the lightsource What s happening in the fog The mist of water drops scatters the light If a drop is further away from a lightsource then it will receive less light from the lightsource Therefore I d should be a decreasing function The total amount of light that a ray will encounter on its way from its origin P to its intersection point P D e is e I distance lightsource P t D dt 0 This isn t really correct we re neglecting the fact that the light which is reflected from a drop in our direction will also be attenuated when traveling from the drop to our eyes For actual implementation we need to know distance explicitly Let s first derive that one Let denote a dotproduct L d 0 v P X P e D P t D P origin of ray D direction of ray X a point on the ray described by P t D L lightsource d 0 the closest the ray can get to L e endpoint of the ray the first intersection We have distance 2 P L t D P L t D On the other hand the distance would be easy to calculate if we knew d 0 shortest distance between the ray and the light By setting the derivative of the formula above to 0 we find t 0 P L D D D From this you can calculate d 0 and the distance is found by simply using Pythagoras distance 2 d t 2 d 0 2 t t 0 D 2 For simplicity let s assume D 1 then the above formula reduces to d t 2 d 0 t t 0 2 All we have to do now is choosing an intensity function I d I propose this one I d 1 d 2 because it will give a simple formula A physically more correct one would be I d exp cd d 2 for a given constant c The exp is there because intensity decreases exponentially with distance due to absorption The 2 is there because light falls of at 1 r 2 in a 3 dimensional perfectly transmitting medium However calculation would involve a not so nice integral which I didn t want to integrate and probably can t be found explicitly However if we set I 1 d 2 then we get e d t light t t0 2 d 0 2 0 This is an easy integral substitute k t t0 substitute x k d 0 and you the anwer you finally get is atan e t0 d 0 atan t0 d 0 d 0 I will probably implement this in my raytracer but I am not sure when he did see below EAH back to contents The Rayce Ray Tracer by Han Wen Nienhuys hanwen stack urc tue nl The above articles all went into Han Wen s ray tracer below Also note that Rayfmt sounds generally useful i e could be used with POV ray I think EAH Rayce 2 8 the newest version of my raytracer is available now RAYCE Rayce is a raytracer I ve written to find out how raytracing works It s written for purely educational purposes If you want to make neat pictures use PoV or Vivid instead Oh by the way educational means for my education but you could use it in a C G class too It wouldn t make a very good example though I am afraid Most of the design and implementation is my own our university library s copy of An intro to Ray Tracing hasn t been available for some time so I was on my own while programming Rayce Still Rayce has been expanded very much and I plan to incorporate a lot of weird and new stuff into it What features does Rayce have Rayce supports these primitives sphere quadric plane lightsource box torus algebraic superquadric polygon triangle disc It has these non primitives composite translational extrusion CSG Rayce has distribution raytracing for rendering penumbra motion blur gloss and translucency Rayce has multiple efficiency schemes well manual bounding hierarchies or recursive bintree traversal The sources are GPL ed and they re portably written ANSI C Debugging facilities A POV like input language Imagemaps What important features are still missing Solid texturing Bumpmaps Serious anti aliasing Support for these primitives Heightfield Bezierpatches Cones Blob Newities in version 2 8 bg c fogsource csg c limited CSG intersection autobounding gives a nice speed increase compared to PoV on some scenes luchter r added rayfmt raytrace scene formatter to distribution shade c directional distant light poly c polynomial real clean filter reduces phantom shadows bsp c bsp Wowie Rayce is FAST object c no shadow no reflect no refract no eye analog of PoV s no shadow grids c grid trees with jitter better pictures with distribution raytracing shade c lightsources can have speed shade c Microfacet models Reitz Trowbridge Reitz Blinn Phong Cook Beckmann Gauss RAYFMT Rayfmt is a simple Raytrace datafile formatter It only uses the and for indenting the code it s not a codewalker Rayfmt indents code in my favorite indentation I mainly use it to keep my datafiles clean and to make other people s scenes readable It s also great for beautifying computer generated scene files AVAILABILITY Rayce 2 8 Rayfmt 1 14 consists of rayce28m zip texi manual sources rayce28x zip Turbo C executable Can someone make a 32 bit DOS version of Rayce rayce28d zip documentation and some scenes rayce28l zip linux executable rayce28s zip C sources to Rayce rayfmt114 zip Rayfmt 1 14 raytrace scene formatter Rayce Rayfmt are available at BBS Bennekom BBS fido node 2 283 203 PCGNet 9 580 203 tel 31 8389 15331 freqqing times 07 30 to 01 00 local time in Holland Bennekom BBS supports V32bis and V42bis ftp wuarchive wustl edu graphics graphics ray rayce it might still be in pub MSDOS UPLOADS graphics back to contents Ray Tracing Roundup In case you ve been missing it there is a FAQ for comp graphics raytracing Either wait for it to get reposted FTP from ftp uwa edu au pub povray FAQ and probably elsewhere or contact Andy Wardley abw dsbc icl co uk the FAQ s author for more info There is a new FTP list for 3D graphics related sources models images papers etc in Nick Fotis FAQ which is at rtfm mit edu 18 70 0 209 in the directory pub usenet news answers You can also get this listing by using a mail server send a e mail message to mail server rtfm mit edu containing the keyword help without quotes in the message body The new list is much changed from my old one useless sites deleted new ones added and a fair bit of clean up and whatnot Eric Haines The Graphics Gems IV code is available on princeton edu in pub Graphics GraphicsGems GemsIV GGemsIV tar Z or ggemsiv zip Some minor errata and corrections have been made to this code i e it s improved from what s distributed with the book I ve put together a heightfield terrain rendering mailing list heightfield request monet seas gwu edu the idea for its creation came from the successful Terrain Rendering SIG at SIGGRAPH 93 Matt Pharr pharr CS YALE EDU A new version of the Computational Geometry biblio is ready for pickup via anonymous ftp from cs usask ca in file pub geometry geombib tar Z as usual Bill Jones jones skdad usask ca DEM as heightfield I ve put some code together which will take files in the DEM format that the PC landscape renderer VistaPro uses and convert them to rayshade style heightfield files I believe however that the VistaPro DEM format is different from the USGS DEM format In any case I can make what I have available to anyone who is interested Matthew Pharr pharr matthew CS YALE EDU Ian Ashdown taking over the Radiosity bibliography from me send him new references from now on Contact Ian Ashdown 72060 2420 CompuServe COM Eric Haines The previous issue of the RT News RTNv7n2 has been translated to PostScript anonymous FTP from princeton edu pub Graphics RTNews RTNv7n2 ps Z All credit goes to Ben Black who volunteered to do this conversion Fonts are used pleasantly throughout they certainly beat the usual constant width text If you find this conversion to be worthwhile let me know and we ll look at getting out further issues in plaintext and PostScript Ben also mentioned that RTF is also easy for him to churn out so mention if that is of interest With a little work figures and images could be added to future PostScript versions Eric Haines Errata on Errata RTNv7n1 had errata for Adventures in Ray Tracing by Alfonso Hermida Alfonso s listed email address was wrong it should be AFANH STDVAX GSFC NASA GOV back to contents A Storage Trick for 3D Polygons by Eric Haines I beat the point in polygon problem to near death in Graphics Gems IV One trick I realized laters is that you can save a noticeable amount of storage if you use the method of dropping the 3D coordinate which corresponds to the largest magnitude coordinate of the plane s normal for example say the normal is 2 6 3 then the Y coord is the absolute largest so drop the Y coordinates and use X and Z This means you truly can just store 2 coordinates per vertex since the third which you shouldn t need for a ray tracer anyway but might for some other reason is implicit given the plane equation In other words you find the major axis throw away its coordinate and store only the other two since that s all you need for the point in poly test anyway you also note for the polygon which coordinate was thrown away If for some reason you do need the third coordinate value you can always rederive it by plugging the other two coordinates into the polygon s plane equation and solving for it Some of you may be going Eric s getting senile at this point since it sounds obvious but I never thought of it before Blame it all on the CAD people I hang out with you never throw away data and rederive it in this way in CAD since you need that data to actually make something and don t want imprecision creeping in But if you re rendering it s fine to throw away what you don t need while rendering an image The other nice thing throwing away data gives you is that you can use a single 2D fully optimized subroutine for point in polygon testing vs having three routines one for when X is thrown away one for Y one for Z nice from a maintainability and a compactness standpoint back to contents Illumination Related Abstracts from the Proceedings of Graphics Interface 93 May 19 21 1993 Toronto Ont CA I m afraid I lost the name of the kind soul who typed all these in Tom Wilson perhaps I m not sure Yes these are for the 93 GI if anyone has 94 s available electronically let me know and I ll publish them EAH An Adaptive Discretization Method for Progressive Radiosity Lalonde lalonde cs ubc ca The solutions of the radiosity method are highly dependent on the discretization used All methods used to generate these discretizations have to date depended on the scene being formed of polygonal surfaces However these are often not the most efficient representations of the objects The meshing process usually only takes geometry into account making shadow edges awkward to deal with In addition there are a number of restrictions that the radiosity method requires of the model that most available modellers do not enforce The method presented here allows non polygonal objects to be used as input to a progressive radiosity method The environment is sampled by ray casting removing the need for a polygonal representation to be provided The method allows the generation of a discretization that is sensitive to lighting changes not only to geometric constraints One effect of this is that higher order discontinuities in surface lighting are detected and the discretization can be focused in these areas without user intervention Geometric Simplification for Indirect Illumination Calculations Rushmeier Patterson Veerasamy holly cam nist gov We present a new method for accelerating global illumination calculations in the generation of physically accurate images of geometrically complex environments In the new method the environment geometry is simplified by eliminating small isolated surfaces and replacing clusters of small surfaces with simple optically equivalent boxes A radiosity solution is then performed on the simplified geometry The radiosity solution is then used in a multi pass method to estimate the radiances responsible for indirect illumination We present a preliminary implementation of the new method and some initial images and timing results The initial results indicate that using simplified geometries for indirect illumination calculations produces images in times significantly less that previous multi pass methods without a reduction in image quality Computing Illumination from Area Light Sources by Approximate Contour Integration Vedel vedel dmi ens fr A new method using approximate contour integration to accurately compute direct illumination from diffuse area sources in presence of curved obstacles is presented All visibility tests are done using ray tracing so the method can be applied to a large class of objects Computation of illumination on a pixel by pixel basis is necessary to accurately capture sharp shadows However in soft penumbra zones many shadow rays are needed to quantize the penumbra finely enough and avoid banding artifacts Furthermore these zones usually cover lots of pixels We make use of the fact that silhouettes of objects in a scene are smooth for the most part to replace them by polygonal lines in source space The method allows the estimation of intensity gradients Penumbras with no aliasing are obtained with fewer rays than with usual adaptive sampling techniques Spatially Nonuniform Scaling Functions for High Contrast Images Chiu Herf Shirley Swamy Wang Zimmerman shirley cs indiana edu An algorithm is presented that scales the pixel intensities of a computer generated grey scale image so that they are displayable on a standard CRT This scaling is spatially nonuniform over the image in that different pixels with the same intensity in the original image may have different intensities in the resulting image The goal of this scaling transformation is to produce an image on the CRT that perceptually mimics the calculated image while staying within the physical limitations of the CRT Common Illumination between Real and Computer Generated Scenes Fournier Gunawan Romanzin fournier cs ubc ca The ability to merge a real video image RVI with a computer generated image CGI enhances the usefulness of both To go beyond cut and paste and chroma keying and merge the two images successfully one must solve the problems of common viewing parameters common visibility and common illumination The result can be dubbed Computer Augmented Reality CAR We present in this paper techniques for approximating the common global illumination for RVI s and CGI s assuming some elements of the scene geometry of the real world and common viewing parameters are known Since the real image is a projection of the exact solution for the global illumination in the real world done by nature we approximate the global illumination of the merged image by making the RVI part of the solution to the common global illumination computation The objects in the real scene are replaced by few boxes covering them the image intensity of the RVI is used as the initial surface radiosity of the visible part of the boxes the surface reflectance of the boxes is approximated by subtracting an estimate of the illuminant intensity based on the concept of ambient light finally global illumination using classic radiosity computation is used to render the surface of the CGIs with respect to their new environment and for calculating the amount of image intensity correction needed for surfaces of the real image An example animation testing these techniques has been produced Most of the geometric problems have been solved in a relatively ad hoc manner The viewing parameters were extracted by interactive matching of the synthetic scene ith the RVI s The visibility is determined byh the relative position of the blocks representing the real objects and the computer generated objects and a moving computer generated light has been inserted The results of the merging are encouraging and would be effective for many applications back to contents Design and Aims of the YART Graphics Kernel by Ekkehard Ekki Beier Ekkehard Beier Prakinf TU Ilmenau DE In this article the principal design of the graphics kernel YART shall be described YART is being developed at the Technical University of Ilmenau Germany and is part of the GOOD project Further components of this project are an interactive front end and a class library for distributed applications All this is free available with all source Everybody is invited to use modify and extend YART Any comments contributions and bug fixes would be greatly appreciated In contrast to most others systems like ray tracers or libraries like SGI s GL or PHIGS PLUS YART integrates different kinds of rendering at the same time These are currently Shading Wireframe used for realtime animations simulations Raytracing the slowest rendering mechanism but generating images with the best quality Radiosity a nice kind of rendering but only useful for static scenes if a scene is computed scene decomposition diffuse light distribution it can be seen from different viewpoints as fast as standard Shading Shading and Raytracing are always available Radiosity has to be installed at configuration time i e done by setting a compilation flag This coexistence has advantages because Shading can be used as a built in previewer For example a complete animation or simulation can be checked using the Shading mode for the camera After finding the optimal parameters for time dependencies camera control etc the camera may be switched into raytracing mode to generate a lot of image files on disc On the other hand the ray tracer interface of the primitives is used for implementing a pick operation in order to allow direct interactions while in the shading mode for the camera YART is an open system with one essential aim extensibility YART is built around some essential abstract terms similarly to PREMO an upcoming ISO standard A CAMERA takes PRIMITIVEs from a SCENE and puts them to a PIXMAP The kind of projection rendering etc and special features like supersampling and stereoviewing are hidden in the specific camera class Any new camera can be implemented using transparent subclassing Examples of concrete cameras are OneRayCamera for ray tracing test purposes and LookatCamera perspective view allowing shading raytracing radiosity in one and the same pixmap A StereoCamera has been implemented as a demo for the SGI GL port of YART An orthographic camera will be implemented in next release If you don t like the YART implementation of transparency or refraction computation just subclass your own camera class and overload the related methods A PRIMITIVE is a graphical output object that may own different rendering protocols Thus every primitive has more than one representation YART defines a set of base primitives Polymarker Polyline Polygon Polyhedron Quadmesh TriangleStrip Spline NURBS These objects are in principle directly supported by hardware based shading pipelines These universal primitives are dynamically editable and they can be empty or partially instantiated All other primitives so called higher levels text analytical OFF are built on top of these Thus these are automatically portable New high level primitives can be created by parameterization of the universal primitives e g analytically defined objects like a sphere may parameterize a quadmesh to get their Shading presentation However the inherited ray tracing interface of the quadmesh is overwritten using the analytical description of the sphere The Shading representation of a special ray tracing primitive can be much simpler than the ray tracing representation In the extreme this could be a bounding box only usable for interactions YART supports hierarchical objects all attributes and the modelling matrices will automatically inherited down to the children of an object Furthermore all rendering interfaces automatically manage children of objects However they can be overwritten if the complex object can be analytically defined to get a faster ray tracing The hierarchical objects automatically compute recursive hierarchical bounding boxes in world coordinates to optimize the ray tracing and pick operation Extensions can be made in subclasses to integrate time dependency physical parameters or whatever you want Here is an example of an user defined class in C class RT RobotArm public RT Primitive int left 1 means left arm 0 means right arm public RT RobotArm char name int l RT Primitive name left l RT Primitive p p new RT Sphere 0 0 5 father this p new RT Sphere 0 0 45 father this p translate RT Vector left 0 3 0 3 0 4 0 3 p new RT Sphere 0 0 4 father this p translate RT Vector left 0 4 0 4 0 75 0 7 usage class RT Robot public RT Primitive RT Primitive solid head arml armr shl shr public RT Robot char name RT Primitive name arml new RT RobotArm 0 1 father this arml translate RT Vector 1 1 1 0 armr new RT RobotArm 0 0 father this armr translate RT Vector 1 1 1 0 This is the only stuff to implement one or two methods for the interpreter interface all other things are inherited To avoid compile link cycles for each new class an interpretative class system basing on the additional interpretative language binding Tcl is provided The new user defined primitives are indistinguishable from the prefabricated ones With the implementation of YART extensions the number of classes of primitives will rise but the amount of platform dependent code will drop relatively In YART0 40 5 per cent of source code was platform dependent A further advantage of inheritance we found in the last few months The heavy changes kernel tuning attribute mechanisms did not or only minimally influenced the derived classes A well defined number of virtual methods of the Primitive class is provided to be used in user defined extensions For instance a method to recreate the geometry and display list as a result of attribute changes or a method that will be called from the framework around when the modelling matrix has changed In the scientific package this is used to recalculate the electric field if a source or sink has been moved using the interactive front end Further essential terms in short ATTRIBUTEs are properties of PRIMITIVES for instance Fillstyle and Resolution Application specific attributes can be added very easily Attributes even user defined can be assigned to or inquired from every object SCENEs are unordered lists of PRIMITIVES and are used as input for cameras An example for a subclassed special scene is the Radiosity scene PIXMAPs are abstract units for displaying rasterized images for example online display MPEG based storage pixmaps and can be coupled with IMAGES IMAGEs represent abstractly image files the access to an image is independent from the specific format such as Targa or SGI RGB INPUT DEVICES are objects too They re event controlled callback oriented extensible platform independent and can directly be coupled with output objects As output objects basic input objects can be nested into complex input objects Input devices can be driven stand alone or coupled to a camera in this case they can have scene independent camera specific visual feedback Furthermore there are LIGHTS TEXTURES MAPPINGS animation RECORDERS etc as interactive objects too A few more points Besides the C API a consistent interpretative API Tcl is provided for testing prototyping and programming Tcl is a simple to use language without types and has C like control structures for if then else while with an OSF Motif like widget set Tk Persistence is provided for all objects and realized by dumping Tcl code Built in documentation describes the behavior of all objects This is important for the reusability of YART extensions YART is platform dependent Currently supported are SGI GL PHIGS PLUS ISO C and pure X11 OpenGl and RS 6000 GL are in the works PEX in perspective Integration of 2D user interfaces Tk YART has still a lot of areas to be implemented for example polygon quadmesh ray tracer interface splines and NURBS CSG and sweep modeling a faster PEX based shader to have realtime interactions on LINUX the current one is very slooooooooow But our manpower is limited Thus everybody is heartily welcomed to join this project Contact and mailing list yart prakinf tu ilmenau de back to contents Distribution Ray Tracing by Marc Levoy levoy blueridge Stanford EDU my Usenet news filter client is based in Stanford see RTNv7n2 for details it s a nice resource and so picks up local Stanford newsgroups for classes etc This popped up one day and Marc gave me permission to reprint it I thought it was interesting to see a slice of one class assignment these are hints to them on how to implement a ray tracer It should really be edited to be fully understandable but I leave it to you to read between the lines EAH su class cs348b 47 Dear class A few clarifications and hints regarding distribution ray tracing 1 Many people have asked Chase or myself about comparing ray path trees in when distributing reflected or refracted rays To my knowledge there s no literature on this question After thinking about it for a while we concluded that there is no good way to do this If you distribute your rays over a variety of reflection refraction directions the ray or path trees associated with adjacent image plane samples will almost certainly differ triggering possibly unnecessary subdivisions We therefore suggest disabling comparison of ray path trees when you have enabled distribution ray tracing or disable comparison of ray path trees for those image plane sample regions containing any rays that strike any objects for which you have defined a distribution depending on how you implement this part of the assignment 2 Some people are confused about the relationship between distribution versus classical i e nondistribution ray tracing and ray tree versus path tracing The first and second pairs of techniques constitute orthogonal considerations when designing a ray tracer All four algorithms in this 2 x 2 matrix are plausible For example one can imagine a nondistribution ray tracer that does ray tree as opposed to path tracing in which case the branching factor at each surface is zero one or two one specular reflection ray and one specular refraction ray not including rays cast directly to light sources to render the diffuse component One can also imagine a distribution ray tracer that does path tracing at each surface you choose one direction from the distribution you are sampling and continue the path in that direction I require you in this assignment to support both distribution and nondistribution ray tracing but you need not support both ray tree and path tracing just pick one of the latter two 3 I have presented adaptive algorithms in which a subdivision decision is performed only at the image plane For distribution ray tracing using ray trees as opposed to paths a spray of rays is traced from each intersected surface Your sampling of this distribution can be regular or stochastic and can be nonadaptive or adaptive This makes a 2 x 2 matrix of algorithms as described in class a long time ago You can pick any one of these and the decision need not be related to what you do on the image plane For example if you choose an adaptive algorithm you would performing adaptive sampling of the near specular i e glossy reflection direction distribution at the intersected surface This adaptive sampling would be in addition to and totally independent of any adaptive sampling you perform at the image plane I don t require that you do any fancy sampling at intersected surfaces as I required for your sampling of the image plane in assignment 2 I just want you to be aware that theory supports doing such fancy things if you are so inclined 4 Remember that there is another choice you must make when distributing rays at intersected surfaces you must choose between distributing rays uniformly in the statistical sense the actual distribution can be regular or stochastic and weighting them unequally according to a gloss or translucence function or distributing rays nonuniformly according to the gloss function As stated in class the latter is a form of importance sampling I don t require any particular solution here just be prepared to explain what you ve done Hope this helps Your prof back to contents Ray Tracing Antialiasing and What To Do Instead Steven Demlow demlow cis ohio state edu Arijan Siska a computer graphics fan wrote I want to get some attention to the in my opinion a very serious issue antialiasing I would like to hear you opinion especially results of your own research in this area I played around with a variety of AA approaches in both my own ray tracer and the public domain not PD actually EAH POV ray tracer I tried various derivations and combinations of supersampling stochastic jittering adaptive methods and filtering For the animation project I was working on I ended up using 4x4 stochastically jittered grids on each pixel and a tent filter that extended into the cached of course grids of neighboring pixels I ve been working on using a hexagonal grid instead of a rectangular one this gets tricky when you try to overlap the arbitrarily sized filtering grids of adjacent pixels The hex grid supposedly provides close to an optimal ray distribution for AA purposes It sounds like you would do well to add filtering to your ray tracer it can help a lot The conclusion I came to after eight months of rendering on a bunch of HP7 0s was that ray tracing is not the way to go to generate a lot of high quality images I love ray tracing but there are reasons that it sees little use in production environments back to contents Yet Another Illumination Ph D his title not mine EAH by George Drettakis dret dgp toronto edu Hi everybody I just finished the final version of my PhD thesis It is available by anon ftp at dgp toronto edu pub dret PhD There are postscript files for single and double sided printers and tiff files for all the colour images It will soon also be available as CSRI Technical Report 293 ftp only at ftp csri toronto edu csri technical reports 293 I welcome all comments or suggestions at either dret dgp toronto edu or George Drettakis imag fr It can be quoted either as Ph D thesis Dept of Computer Science University of Toronto or as CSRI Technical Report no 293 University of Toronto Thanks George Drettakis Dynamic Graphics Project Computer Systems Research Institute Phone 1 416 978 5473 University of Toronto FAX 1 416 978 0458 Toronto Ontario CANADA M5S 1A4 e mail dret dgp toronto edu or dret dgp utoronto ca Here is the info Title Structured Sampling and Reconstruction of Illumination for Image Synthesis Degree Ph D University of Toronto Department of Computer Science Author George Drettakis Abstract An important goal of image synthesis is to achieve accurate efficient and consistent sampling and reconstruction of illumination varying over surfaces in an environment A new approach is introduced for the treatment of diffuse polyhedral environments lit by area light sources based on the identification of important properties of illumination structure The properties of unimodality and curvature of illumination in unoccluded environments are used to develop a high quality sampling algorithm which includes error bounds An efficient algorithm is presented to partition the scene polygons into a mesh of cells in which the visible part of the source has the same topology A fast incremental algorithm is presented to calculate the backprojection which is an abstract representation of this topology The behaviour of illumination in the penumbral regions is carefully studied and is shown to be monotonic and well behaved within most of the mesh cells An algorithm to reduce the mesh size and an algorithm which selects between linear and quadratic interpolants are presented The results show that the mesh size and the degrees of the interpolants can be reduced without significant degradation of image quality The preceding algorithms are combined into a complete structured sampling approach that allows accurate and efficient representation of illumination using interpolating polynomials for scenes with occlusion Images with accurate shadows can be produced from the structured representation using either ray casting or polygon rendering hardware Finally it is shown that our methodology generalises easily to the global illumination problem An iterative solution to a Galerkin finite element approach is proposed and it is shown how the structured algorithms provide a good initial approximation for the iteration enhance efficiency for numerical integration and allow adaptive mesh modification The structure driven global illumination algorithm thus promises significant improvement over previous higher order finite element solutions back to contents Eric Haines erich acm org Ray Tracing News Volume 7 Number 3 Ray Tracing News Volume 7 Number 3 Ray Tracing News Volume 7 Number 3 Ray Tracing News Volume 7 Number 3 Ray Tracing News Volume 7 Number 3 Ray Tracing News Volume 7 Number 3 Ray Tracing News Volume 7 Number 3 Ray Tracing News Volume 7 Number 3 Ray Tracing News Volume 7 Number 3 Ray Tracing News Volume 7 Number 3 http www acm org tog resources RTNews html rtnv7n3 html http www acm org tog resources RTNews html rtnv7n3 html http www acm org tog resources RTNews html rtnv7n3 html http www acm org tog resources RTNews html rtnv7n3 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv7n4.html%%==%%Ray Tracing News, Volume 7, Number 4%%==%%Ray Tracing News "Light Makes Right" July 14, 1994 Volume 7, Number 4 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%74418%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right July 14 1994 Volume 7 Number 4 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1994 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction and Announcement Call For Participation POV Ray Tracing CD ROM by Christopher Cason Tracers and Tracings 1 by Tom Hoover Review of Tracers and Tracings CD ROM by Eric Haines Ray Tracer Comparison by Amanda L Osborne Blob Sculptor by Alfonso Hermida Book Announcements and Modeler vs Scripting Language by Mitch Waite A Quick Writeup of Ray Tracing for the Macintosh CD from notes by Eduard Schwan Ray Tracing Roundup POV Help by Chris Cason Lenticular 3D by Keith Rule POV Official News Issue 1 POV Team A Quick Explanation of Radiosity Computation vs Output by Steve Hollasch A Grand Unified Modeller GUM by Lex van der Sluijs New at least to me Bulletin Boards collected by Eric Haines GemCAD Review by Greg Prior A Summary of the Reyes Algorithm by Steve Demlow Version 1 7 of Polyray Available by Alexander Enzmann Use of External Program Calling for Polyray by Alexander Enzmann POV Ray Legal Stipulations Correction by Dan Farmer 3D Graphics Book List by Brian Hook Introduction Before we get started an announcement A POV Team member Christopher Cason cjcason yarrow wt uwa edu au is setting up a new POV FTP site in the USA to take some of the load off the USA AU link The POV site at ftp uwa can sometimes handle over 1500 POV related downloads a day At this stage Chris has a site available but has no nameserver for the MX If there is a stable well connected site out there that satisfies INTERNIC requirements for nameserving for a USA based MX record and would like to volunteer please contact Chris Nameserving requires virtually no work or hard disk space Chris has tried a number of people on the FTP list so far with no luck so don t expect someone else to volunteer Note that Chris has got an FTP site in the US but needs a nameserver you re NOT mirroring his site and the task needs a minimal amount of time it sounds like an easy way to be a hero So if you have any say about your FTP site please do volunteer This is something of a hobbyist issue focussing on resources which are for either users of rendering packages or for beginning intermediate level graphics programmers In this issue we have another fine article by Amanda Osborne giving her impressions of the various public domain and shareware ray tracers out there There s also oh just read the issue and find out This like RTNv7n3 is a catch up issue some late breaking news is in here but mostly I m still caught in a backlog One bit of errata about RTNv7n3 Francois Sillion Claude Puech s book on Radiosity will be out in time for SIGGRAPH subscribers issues were incorrect To end the intro here s a tidbit that fits nowhere else from Keith Higgs dhiggs magnus acs ohio state edu I know a guy who runs PoV 1 0 on an old 386SX16 and just locks the keyboard after starting a finished quality image at 640 480 He s run images which took up to 21 WEEKS to render I keep telling him he s got to upgrade I believe this is a realtime record has anyone done better or should I say worse back to contents Call For Participation POV Ray Tracing CD ROM by Christopher Cason cjcason yarrow wt uwa edu au I m doing up a POV CD ROM which will be produced and distributed by Walnut Creek My intention is to have Pov 1 0 2 2 all official binaries DJGCC and GCC s for various platforms especially Unix to allow out of the box compiles and as many unofficial compiles as possible I will also include a good number of scenes textures 3D objects etc I want to include any interesting theses technical documents articles as well as anything remotely useful More of a get your hands dirty type of disk than one with lots of pretty pictures though I ll have a decent number of them too Please do send or upload to ftp uwa edu au any contributions I m particularly looking for utilities scene files and animations as long as they re done with POV As important please send in your suggestions Obviously I want to put on the CD what people want I m also looking for a stunning tracing for the poster that will be used to advertise the CD We may even issue a Mac version of the CD when I recently announced that the Mac files were up at ftp uwa the logs showed over 1000 downloads of files from the Mac directory in 24 hours and there s only about 7 files there There is a CD ROM about ray tracing already out see the next articles It is focussed on PC related software images and hobbyist material where Chris is more programmer designer oriented and more platform independent EAH back to contents Tracers and Tracings 1 by Tom Hoover thoover infi net Note that this CD ROM is online at the Tackle Box BBS which is described elsewhere in this issue EAH A CDROM OF RAYTRACING PROGRAMS AND IMAGES HAS BEEN RELEASED Tracers and Tracings 1 a collection of public domain and shareware programs for raytracing has been released by the Information Guild The disk contains over 850 images created with raytracers and over 180 computer generated animations in addition to over 400 programs for creating your own original raytraced images and animations The total data content of TRACERS AND TRACING 1 is 489 megabytes The ROM is organized in the style of a shareware collection with a simple program for extracting the data from the CDROM to your hard drive The disk is FULLY indexed with descriptions for each file in the collection The retail price is US 30 00 shipping Distributors and resellers are encouraged to contact The Information Guild for quantity discount pricing Orders are currently being taken on a cash or money order basis COD shipping is available for an extra fee Checks are acceptable for prepayment but require a 10 day shipping delay Shipping is 3 00 in the US 5 00 elsewhere The Information Guild 4962 Country Club Road Troutville Virginia 24175 Contact Tom Hoover Phone 703 992 1645 Email thoover infoguild com back to contents Review of Tracers and Tracings CD ROM by Eric Haines If you re interested in ray tracing get this disk It ll save you hours of searching and downloading you ll free up disk space since you ll know the various resources are immediately available and in general it s A Good Thing I ve navigated the directory tree a fair bit and this disk has a lot It s aimed for the PC and has executables for most of the major ray tracers on it including POV 2 2 PolyRay 1 7 Vivid Rayshade and Radiance about the only one missing is RTrace I believe Note that source for many of these ray tracers is not available on the disc in general this disk is aimed more at the user hobbyist than the programmer The larger directories are FLI animations 120 MB of the uncompressed movies i e immediately playable and a separate directory of 82 MB of the movies compressed still images 130 MB scene and data files 24 MB and utilities galore 37 MB There s also documentation image displayers and other related files There are also random bits like a directory of fractal generators VR tools VRend386 and suchlike and even DOOM v1 2 and similar games All in all a pretty amazing collection BTW if you explore the still images note that there is a set of catalog GIF files which contain all the images in 3x3 contact sheets There are a few minor flaws on the disc For example all the issues of the Ray Tracing News are here except for RTNv6n1 The FLI player aaplay exe has a bug in it at least on my system where it can display only the first five pages of the CD s directory of FLIs though there are ways around this a flaw in aaplay not the disc but still annoying In the images directory chksph2 gif is corrupt and I leave it as a puzzle to find the random image of Charles Barkley Speaking of images I was surprised to find no texture files As is common with CD ROMs there s a lot of stuff shoveled onto this disc Some of it is wonderful to have but there s also a fair bit of clutter awful images and FLIs many versions of the same software e g vpic has 8 versions on the disc and various poor quality tools I wish the authors who obviously spent a lot of time putting this package together had taken a few hours to put together a brief text file listing their top picks Also don t fool or be fooled quite a few of the images and movies needed no rays to be traced during their creation but rather were done with scanline methods This said I am glad to have all the clutter and non ray traced stuff around For one it definitely gets your critical juices flowing and may even teach you something about what makes a good image Also the space is there and might as well get used It s a great collection for the hobbyist and I recommend it I m extremely glad I have one and it s still vaguely miraculous that all this material fits on one CD p s my favorite FLI was Drop it2 and my favorite GIF was Frosty though I have to admit to burning out on looking through all the gifs plan on being sick of perfectly shiny surfaces especially spheres after an hour or two of viewing these things back to contents Ray Tracer Comparison by Amanda L Osborne alo northshore ecosoft com You may recall that Amanda wrote up the terrific list of POV ray utilities available out there for RTNv7n1 I asked her for a follow up article on what ray tracers she s tried liked etc Here s her response EAH I m afraid all I can come up with is a classic politician s answer there are good positive things about them all Since I began tracing with an early version of Povray I m probably more comfortable with that tracer s syntax than any other However I got BOB with Stephen Coy s book and except for pages and pages of code for its own sake I read everything and took lots of notes that I later applied to BOB I was really pleased with the quality of the images that came out of that particular exploration I had tried Vivid but reluctantly set it aside when I realized that I couldn t pay the registration any time soon I would describe BOB and Vivid as being closely related but not identical twins by the way But because of the wealth of primitives supported by Povray and the wonderful shapes include file I found BOB clumsy and intimidating to use by comparison It took several weeks of using just BOB for that feeling to evaporate When I was first reading about tracing and had definitely been bitten by the graphics bug I tried out MTV and QRT more for the historical value than anything else Questions had arisen about what had been necessary to produce traced images pre povray and vivid and I had to satisfy myself about them But I couldn t recommend either one to someone starting out especially with the wealth of utilities that can serve as crutches using a program like Povcad or Moray one no longer has to keep say the left hand rule in mind but rather can just fiddle until the view is correct which are available now I like Rayshade a lot but wish that things were a bit more cohesive I know most people seem to use it on other platforms as opposed to MSDOS but I still wish there was up to date documentation non postscript and that some part of that documentation was devoted to what the DOS executable can and cannot do I can t get the CPP stuff to work at all so any include is out of the question The same holds true for RTrace which I ve had terrible luck with I can t even give an opinion about it since I ve never gotten it to work on my machine wish I could Since RTrace is so faithfully updated and supported I d love to get it up to speed on my machine so I could try out the radiosity add on I ll try again sometime soon There are a couple of new raytracers from Europe Rayce and Probe that I also can t give any real opinion about except to say that both seem to be very much works in progress I have one commercial tracing program Imagine By far the most bang for the buck of all the commercial programs I looked at sure 3DStudio would be nice but so is putting food on the table I really like it a lot for a tracing program it is really really fast and I am talking about trace mode as opposed to scanline It is not however all that intuitive to use particularly to someone used to scripting a datafile There are also more unexplained lock ups than I would like to see although this is true for any program it s especially frustrating when it s something you ve paid for And I hate the way it deals with memory I have to fiddle around or shut off QEMM to get it to work Finally I love Polyray Like Imagine I still consider myself on a learning curve with it but it is such a stable and powerful tracing tool It offers more outputting options more shadowing options more texturing tools than anything I ve used to date I would describe it as a tough program to learn unless you re really into math but definitely worth the effort It has many great strengths but I would sum up the top two as math functions and animation Polyray is set up to aid the user in creating animations for the most part you can avoid lots of datafiles and batch files and place all the necessary data within one datafile I really didn t mean to go on like this I just got carried away a bit I think I ll create a little script and try to generate it in each of the programs and see how it goes kind of like your timing tests but with quality of the resultant image and ease of use being tested rather than speed Non scientific of course but maybe it would be helpful just to clarify things for myself if nothing else back to contents Blob Sculptor by Alfonso Hermida AFANH STDVAX GSFC NASA GOV This thing s a blast Marching Cubes rendering of blobbies on a PC EAH Blob Sculptor 1 0 is a blob modeler previewer It requires a 386 486 with a coprocessor VGA and a mouse The program is distributed as freeware The current versions for the modeler are version 1 0a for DOS and 1 0 for Windows Both versions support only spherical components but cones cylinders ellipsoids and tori are on the way The DOS version exports to POV Polyray Rayshade RAW DXF and CTDS The Windows version supports some additional file outputs besides NFF The DOS version has a bug in the DXF output routine it also dumps the Rayshade output To fix this simply load the DXF file into a text editor and delete any statements that appear after the line that reads EOF That will take care of it The team consists of Steve Anger Truman Brown Ron Praver and myself Future versions will include more component types and keyframing support I wrote a partial port to SGI s OpenGL and works fine If someone is interested in porting the code completely please contact me I wrote a series of 3 articles in 3D Artist magazine to introduce the reader to Blobs One of the readers of the 1st article developed an Animator Pro AutoDesk POCO language utility to animate 2D blobs Finally the source code for Blob Sculptor will appear in a book to be published by SAMS named PC Graphics Unleashed Each of the team members except Ron Praver wrote a chapter explaining a certain part of the program The book is around 1000 pages and there are lots of topics The book is similar in style to Tricks of the Graphics Gurus Lots of good code and info back to contents Book Announcements and Modeler vs Scripting Language by Mitch Waite 75146 3515 CompuServe COM Mitch asked why I recommended Adventures in Ray Tracing by Alfonso Hermida in RTNv7n1 as a good all around book on ray tracing for the hobbyist professional I replied Two words no modeler Rendering without modeling is fun to toy with but after a few shiny spheres pictures you can t do much more without a modeler or model generating programs EAH Oh wow I see Well not sure I agree I created some amazing book covers using the data language approach in fact I discovered that trying to build similar covers with a modeler was harder Walkthroughs and Flybys CD cover is a case in point it s a large 3D grid made of tubes that go to infinity Most modeling programs have major visibility problems with that However you ll be pleased to hear about a book we are about to publish called Ray Tracing Worlds with POV Ray It comes with MORAY and POV Ray 2 0 and shows how to do 3D modeling to build extensive 3D worlds It s by Alexander Enzmann creator of PolyRay Chris Young and Lutz the creator of MORAY Also we are about to bring out a 2 0 version of Ray Tracing Creations as well as a Mac version called Ray Tracing on the Mac by Eduard Schwan see next article EAH that comes with MacPOV 2 0 Ray Tracing Worlds is at the printer and due to arrive at our shipment center on July 14th and that means it will be on the store shelfs around the end of July Ray Tracing on the Mac is about to go to the printer so look for it to be on the shelfs in mid August The Mac title comes with a fantastic CD interface that contains the entire POV reference You can look up a keyword and they play a QuickTime movie to see its effect back to contents A Quick Writeup of Ray Tracing for the Macintosh CD from notes by Eduard Schwan esp CERF NET I edited down the info from email from Chris Cason The book should be out by mid July EAH Title Ray Tracing for the Macintosh CD Subtitle Explore the Magic of Ray Tracing on your Mac Author Eduard Schwan Publisher Waite Group Press 800 368 9369 ISBN 1 878739 72 7 The accompanying CD ROM contains over 250 megabytes of software utilities and example ray traced images and QuickTime movies Versions of POV Ray are provided for Macintoshes with and without a floating point unit and there is a native version for the Power Macintosh family of computers POV Ray will run under either System 6 or System 7 There are utilities for creating complex objects for creating and viewing QuickTime movies and for converting between many common types of graphics file formats There are ray traced images and movies contributed by many different artists with the original scene files provided for you to study It also holds an interactive multimedia reference chapter of the book and an on line information center that guides you through the contents of the CD ROM This book is organized into the following chapters Chapter 1 Introduction to Ray Tracing Chapter 2 Installing POV Ray on Your Macintosh Chapter 3 Jumping Right In Chapter 4 Advanced Scene Building Techniques Chapter 5 POV Ray Animation on the Macintosh Chapter 6 Exploring the CD ROM plus appendices back to contents Ray Tracing Roundup Animation FAQ The beginnings of a FAQ for comp graphics animation now exists Download it from rtfm mit edu in pub usenet by group comp graphics animation The author editor is Angus Y Montgomery rcsaym minyos xx rmit EDU AU Eric Haines WWW CG FTP list enough acronyms for you There is a Web version of the Computer Graphics FTP list the URL is http www actwin com grg grg is Graphics Resource Guide which right now consists of the CG FTP list will be expanded with other data as I receive collect it Jay Laird jaide looney actwin com RenderWare We have set up an anonymous FTP site with RenderWare information and demonstrations The site is ftp canon co uk Those of you who haven t seen it can download the windows Dungeon demo rwmaze pub renderware ms windows demo rwmaze zip all of these are pkzip archives and should be decompressed using pkunzip d Mike King Criterion mking criterion canon co uk Yes it s not ray tracing but this is the most amazing thing I ve seen all year Doom included It s slower than Doom but it moves along even on my dinosaur 386 25 no FPU and there are no tricks in limiting the view to a certain orientation true 3D rendering in real time NT users the demos won t work for you just Windows 3 1 There are also full screen DOS only versions of the demos haven t tried these under NT There are some odd little rendering artifacts but for speed this seemed to beat the pants off of OpenGL on Daytona from what little I ve seen EAH World Render 3D There is a software package for Windows called World Render 3D which converts from many to many different 3D scene formats It also has various scene setup and editing tools I have uploaded a demo to wuarchive wustl edu pub msdos uploads win graphics wr3ddemo zip Unfortunately the demo does not save files which is understandable as a crippling method but it s also the feature that s most interesting about the package From the description file World Render 3D supports the reading and writing of files in Sculpt 3D 4D DXF VideoScape 3D Workshop Script Imagine TART Lightwave 3D Studio DBW 2 0 NapCad 3D RAW NFF POV1 0 VIVID 2 0 Envisage Sculptura Wavefront and native World Render 3D formats Object primitives not directly supported by a target format are automatically decomposed into a triangle mesh representation Contact Ron Praver rpraver gate net Mazar Software 305 936 9290 for more information Eric Haines Bitmap Textures for 3D objects I d like to known if I can find bitmap textures for 3D objects FTP anonymously to ftp cdrom com and look in pub aminet wb I m pretty sure that this is the right directory Anyway there are 5 volumes of WallPaper for the WorkBench background I think it s about 65 70 files in all These are mostly IFF images which make great textures for ray tracing I use many of these for my objects in Real3DV2 Dean Pompilio dean cssmp corp mot com From comp binaries ibm pc posting number Volume 25 Issue 075 This is POV Ray ray tracer for IBM s It runs in 32 bit protected mode with the included dos extender I am fairly certain this is only compatible with 486 DX and DX2 s It s at least 2 times faster than the standard mode compilation of pov ray Enjoy FTP from ftp uml edu in cbip volume25 075 pov20z4y Ritchie Hunt unicorn acs bu edu There is a new version of the enhanced Standard Procedural Databases package due to the efforts of Eduard Schwan Philipp Slusallek and myself The SPD package which generates various standard test scenes for testing ray tracer efficiency now outputs RIB and DXF format files and there are now both DXF and NFF reader programs to convert from these formats to many others POV Rayshade etc etc The model generators themselves have not changed nor have the previewing capabilities FTP from princeton edu in pub Graphics SPD there are also PC and Mac versions there Eric Haines Lego Rayshade Images and Files I ve uploaded ray car gif to earthsea stanford edu in pub lego uploads It is a computer generated instruction sheet for building a small LEGO racecar mostly to demonstrate the new wheel and tire pieces in my LEGO modeling library for Rayshade The source to create the image is in pub lego cad click examples car plus you will need the file pub lego cad rayshade legolib ray and the Click compiler and Rayshade of course Image splicing and the shaded background were done with tools from the URT toolkit Paul Gyugyi pjg tesla esl com Walnut Creek CD ROMs These guys are masters at grabbing stuff off of the Internet and putting it on disks They ll be publishing Chris Cason s ray tracing disk The most current version of the Walnut Creek catalog is available via anonymous ftp from ftp cdrom com pub cdrom catalog by fingering info cdrom com or you can request it by sending email to the human at info cdrom com Palette Selection I am doing images that will may be incorporated into a computer game with a specific palette The results I get when I use piclab image alchemy etc just aren t good enough most of the time You aren t going to get acceptable results with Image Alchemy from my experience Piclab generally works quite well but it does have certain situations where it falls on its face Stephen Coy s CONVERT is my favorite in general Try using DTA to create a common colormap from all of the Targas Dan Farmer Dan Farmer TGA damar com Amiga Rayshade Port I ve uploaded my amiga port of rayshade 4 6pl2enh2 on aminet I believe it is much more complete than the previous port It can be found in gfx 3d RayShadeNew lha and is 1 1M big The archive contains source documentation example files and binaries compiled for a 68020 68881 or higher configuration Among the new features of this port are Utah RLE support Several RLE utilities CPP support Raypaint Numerous patches from the rayshade mailing list Improved memory allocation that permits rayshade to allocate up to twice the amount of memory than with the standard memory allocator L switch to invoke the SAS C preprocessor if you have it Slower than GNU cpp but can preprocess things like include huge file on which cpp runs out of memory on the Amiga Kriton Kyrimis kriton kyrimis theseas ntua gr Princeton EDU Bresenham and Convex Polygon Renderer Code soon I just sent an article to PCVR magazine that covers Bresenham s line drawer and more It includes working tested source code for a fixed point convex polygon renderer It will appear in a few months until then I can t post anything from the article because PCVR has first publication rights The source code from previous issues of PCVR is starting to show up on the net and it is available from their BBS There are some real gems in there does anyone know more about this i e where PCVR is located EAH Bob P bobp bga com back to contents POV Help by Chris Cason cjcason yarrow wt uwa edu au POV Help is about to be released and I need some people to beta test it POV Help is a hypertext help reader that runs under DOS and can pop up over your editor or run stand alone It provides an on line reference to both the official Docs and the POV specific FAQ This is convenient when coding new scenes especially if you are new to POV If you want a copy please email povray yarrow wt uwa edu au with the message SEND POVHELP in the body If you don t hear back it s probably because your address bounces our replies Please don t distribute copies yet and please DO let me know of any problems back to contents Lenticular 3D by Keith Rule keithr europa com A while back I asked for some help finding a lowcost service bureau for creating lenticular 3d images I got several interesting replies so I thought I would answer some of questions folks asked 1 What is lenticular 3d It is a process that allows 3d images to be made with a plastic prizmic face and several image behind This allows different images to be view by each eye giving a 3d effect without any special viewing device There are currently a couple of cameras on the market the allow lenticular images to be photographiced They are manufactured by ImageTech 404 416 8848 and are less than 100 Sorry if this is completely technically accurate I m not expert on this process 2 Why can t take photos off of the computer screen or use a ordinary service bureau to create lenticular images I want to use the ImageTech consumer lenticular process because it s very inexpensive at 1 per 4x5 image They require a 35mm negative in an unusual format 3 consecutive half frame images with very specific spacing This is an unusual request for most service bureaus I finally found a fellow who can create the appropriate negative from 3 2048x1536 Resolution TARGA files His charge is 75 and his turnaround time is suppose to be around a week If you are serious about creating a lenticular image from your renderings drop me a note and I will send you the name of this fellow please be serious about this this guy does this part time so doesn t need to be bothered by looky loos He will create the negative you need for ImageTech s lowcost process back to contents POV Official News Issue 1 POV Team povray uniwa uwa edu au I normally won t include these since you can retrieve them from the various archives since this is the first it seemed worthwhile EAH This is the first of a series of irregular bulletins about POV This is an official POV Team publication They will be issued only when there is sufficient news to report to make it worthwhile and will be posted to comp graphics and comp graphics raytracing from time to time Responses to this article should be placed in comp graphics raytracing to gain the attention of the POV Team A POV Team member usually checks this every couple of days Email to Team Members Recently a couple of incidents have occurred where users on the internet have emailed large files to POV team members on Compuserve POVDOC requests that this NOT be done without prior arrangement Compuserve charges on a per kilobyte basis for such mail and the most recent occurrence cost the POV Team member in question US 30 00 in charges What s worse most of the information sent a custom version of POV complete with all source scene files c was redundant PLEASE ask first before sending any large email to anyone on Compuserve New POV FTP Site The main official site for POV is alfred ccs carleton ca 134 117 1 1 uniwa uwa edu au now ftp uwa edu au in pub povray is the new official secondary distribution site for official POV Ray files It also carries a good selection of unofficial files but no unofficial compiles uniwa BTW is a hub so should give you pretty good response If you want to get POV but are unsure of what files you need grab POVINF DOC from one of the abovementioned sites A listing of some of the more relevant current contents of uniwa may be obtained by performing a finger on povray uniwa uwa edu au or by retrieving the file CONTENTS PLEASE READ from uniwa Some utilities of note MORAY 1 5 of course SUDS CTDS POVCAD TGA2GIF TTG DXF2POV and RAYLATHE just to mention a few The contents file gives a more specific description explaining what each one does The uniwa site is also currently mirrored once a week on Sundays at wuarchive wustl edu in graphics graphics ray pov official archive We can t guarantee how up to date this mirror is as we do not have control of the mirroring process but expect that it will be pretty good Image of the Month The image of the month for April is FROSTY by Dan Farmer a POV classic This image also featured in the book Ray Tracing Creations by The Waite Group it is available at the below site as IMAGE OF THE MONTH TGA JPG 800x600x16m Looks even better if you have a hicolour or truecolour card It is also available in the HALL OF FAME subdirectory as FROSTY GIF For those with Compuserve access a full range of high quality images done with POV Ray and other raytracers can be found in GRAPHDEV section 3 Hall of Fame Since the POV Team is based on Compuserve and not the internet GRAPHDEV is the best place to get up to date POV info though the uniwa and carleton sites will be maintained on a regular basis Official Files The most current POVDOC POVSCN POVIBM EXE and POVSRC files These are in the top level directory pub povray Only official files are found here Unofficial files are in subdirectories All official archives have the current version appended to them therefore POVDOC ZIP is POVDOC 2 2 ZIP Note that all files are actually stored as lower case the use of capitals is just for this newsletter Hall Of Fame The above FTP site has a HALL OF FAME subdirectory containing a selection of some of the best images around today Mike Miller and Truman Brown feature strongly You are encouraged to provide submissions for this library the only requirement being that the image is traced with POV Ray Truman Brown s WOILD series features strongly and I encourage people to check them out The source for some of these is available and I will put it up if there is enough requests and the author OK s it Images have more chance of remaining on the site permanently if they have a scene file accompanying them Incoming scenes should have a description in a TXT file or zipped up with the scene and can be placed in incoming scenes Retrieve CONTENTS PLEASE READ or finger povray uniwa uwa edu au for more detailed submission criteria Images Scenes Apart from the above there is an images and scenes image source sub directory for non Hall Of Fame type images Contributions most welcome BinHex files Several MAC users have had problems downloading the current MacBinary SEA archive format on the internet and have requested binhex ed files to be made available instead Official binhex ed archives have been produced and are up at uniwa now If anyone has problems with these files please let us know Help Reader An official POV Ray hypertext based help system has been produced and will be released once the current work on FAQ s both here and on Compuserve has been completed Designed to be portable the reader currently only runs under DOS but will probably be ported to UNIX as soon as time is available to do so The help database itself is portable and eventually will probably have back ends to create native i e Windows Mac help files as well back to contents A Quick Explanation of Radiosity Computation vs Output by Steve Hollasch hollasch kpc com Solving for radiosity is a separate pass from rendering the resulting scene Any system that can display realtime graphics with Gouraud shading can display a realtime session derived from a radiosity solver Thus you basically wait a bit for the radiosity solution of a scene and then you take the resulting geometry and view it in realtime As a bonus no shading equations have to be computed for the scene during display as the colors are attached to the vertices of the polygons output This often means radiosity output is faster than databases shaded on the fly EAH This is true for classic radiosity anyway since it s independent of view However some hybrid approaches which also incorporate specular reflection true reflection or refraction are view dependent and so require extra footwork to do the viewing In addition some systems allow for interactive adjustment of the lighting parameters e g light color or intensity which means that the radiosity solution has to be recalculated back to contents A Grand Unified Modeller GUM by Lex van der Sluijs Alexander vanderSluijs stud io tudelft nl After nearly a year of hard work I am very proud to present to the world GUM A Grand Unified Modeller to be A direct manipulation based 3D modeller that exports to POV Polyray and Rayce Some highlights CSG evaluation realtime pan zoom and camera operations select by pick window crossing hierarchy view grid snap very flexible fastdraw full skip box multiple viewport printing metafile export almost full shell of all raytracers also exports batchfile realtime bezier patch editing all transformations available in user view and multiple orthogonal views user definable boundary representations for objects with a surface text based texture editor for all tracers also reads available texture files imports RAW Platform Microsoft Windows 3 1 or 3 11 System requirements resolution 800x600 or higher 4Mb should do CoPro 486 highly recommended The demo is free but there is a limitation to the maximum number of objects that can be saved of 25 Special introductory price 50 Gum has been uploaded to Internet wuarchive wustl edu pub msdos uploads win graphics gum 0b8 alfred ccs carleton ca The upload has yet to be validated BBS CAD BBS Amsterdam 31 20 6861533 The author s address Alexander vanderSluijs stud io tudelft nl 2 281 500 4 in Fidonet or leave a message on the above BBS to Lex van der Sluijs This thing takes a little messing around to set up but seems pretty cool EAH back to contents New at least to me Bulletin Boards collected by Eric Haines The Tackle Box BBS 405 359 3301 100DEDICATED to Ray Tracing Over 2 GIG online with 40 file areas Now featuring the Tracers and Tracings CD ROM Now over 5 500 files File areas include Graphics Programs Ray Traced Images Hall of Fame Images POV Ray scene files POV Ray utilities POV Ray Modelers Graphics Converters Ray Traced Animations OBJ objects such as Viewpoint Engineering from avalon site Textures Fractal Programs Virtual Reality Graphics Source code and MUCH MORE Access is FREE with downloads on the very first call Subscriptions are available for only 20 for a whole year 70 min 2MEG per day The Tackle Box BBS is the largest Ray Tracing and Graphics BBS in the entire SouthWest providing support for the OKC PC User s group on Graphics and Ray Tracing Why not check it out 2400 14 4 baud 24 hours a day Neil Clark SysOp SIG Leader E Mail clark qns com Eminent Illusion BBS O RUN To The Eminent Illusion BBS for Windows 3 1 Dedicated to computer graphics thru advanced mathematics 513 866 8181 A NEW Ray Tracing Site We support POV and PolyRay A User Group is forming for local traceaholics and fractal fanatics If you are a traceaholic PLEASE upload IBM specific utility programs and POV or PI scene files No GIFs or TGAs please Still waiting on my big hard drive for those No hassle registration You call your registered Nuff said 90 min day On first call and 2 meg daily DL limit NO RATIOS No fees Got money want friendly users Currently servicing 138 members from around the country CICA Center for Innovative Computer Applications CD now on line current thru 12 93 We also carry lots of custom Ray Traced GIFS Anxiously awaiting your handshake at 2400 to v 32bis 14 4k 486DX 33 and U S Robotics The most exciting BBS software to come into existence is Excalibur It is a true Windows GUI written for Windows requiring Windows I am a site beta tester Use of the board requires a dedicated terminal program which will be automatically downloaded on your first call Now supporting Zmodem downloading of the terminal program Once you have seen the board you will wonder why it took so long The system offers graphics Previews view GIFs while downloading True multi tasking BBS Upload and Download simultaneously Read or write messages while D Ling and it s all point and click No menus to memorize No more waiting for downloads to finish before doing something else Sound support using wav files No sound card needed Screen updates faster than ANSI or RIP It s FANTASTIC Full 24 hour operation Sometimes down 9am 12am M F EDT maint 30 000 files available Always 700 meg on line 1 gig and second node coming in May FIDO and Usenet by September BTW If you run Windows under OS 2 you will be able to call For those of you into ray tracing There is a BBS in San Diego CA that has a lot of support programs for making images of this type I would give more info but I don t know much about the programs that are involved Here is the bbs 619 426 7760 Anyone know the name of this one EAH Shadowhawk shdwhawk netcom com back to contents GemCAD Review by Greg Prior something that popped up on rec crafts jewelry EAH Clive Washington pazcw unicorn ccc nottingham ac uk writes Do you mean there s a computer package to design facet cuts Could you mail me the supplier s address so I could get some details please I d need a Mac version GemCAD is a shareware program There is no version for the Mac however the custodian for this list Tom Greenwalt tomg mishima mn org has a copy of the DOS version available to download There are also some design files We would like to see this library build up if you care to make any contributions I almost always do my design first in GemCAD before cutting This allows me to cut the stone once on the computer before learning on the real thing It also makes for easy tangent ratio angle conversions and ray tracing to optimize for brilliance Or you can get it direct for 50 5 for international shipping from the author Robert W Strickland 6408 Earlyway Dr Austin TX 78749 512 892 1887 He has several add on modules available too Raytrace and a couple of print plot utilities back to contents A Summary of the Reyes Algorithm by Steve Demlow demlow cis ohio state edu I thought this summary would be useful for people who don t really know how RenderMan works it s a unique architecture EAH REYES refers to a system based on micropolygon rendering wherein all primitives are broken down into small polygons which are of size 1 4 pixel in image space and rendered using a scanline technique Texture mapping is then used to get all the nifty effects associated with high quality rendering There is no ray tracing involved since one of the stated goals of the REYES system was to render images quickly a full length feature in a year or roughly 3 minutes per image The 87 REYES paper refers to the Cook paper regarding motion blur and the other nifty stuff that Cook used ray tracing for but Cook also mentioned that the same ideas were applicable to scanline renderers back to contents Version 1 7 of Polyray Available by Alexander Enzmann 70323 2461 CompuServe COM Polyray is a rendering program for producing scenes of 3D shapes and surfaces Polyray supports raytracing polygon scan conversion wireframe preview and raw triangle output All the normal primitive objects are supported box sphere cone Many more advanced primitives are also supported height fields Bezier patches NURBS arbitrary functions of three variables parametric surfaces TrueType style glyph objects Texturing is provided using standard shading models for your favorite plastic look as well as textures based on runtime variables some folks call this sort of thing shaders The files associated with Polyray are distributed in several archives PLYEXE ZIP Executable requiring a 386 387 or 486DX PLY386 ZIP Executable that will run on any 386 or 486SX PLYDOC ZIP Documentation PLYDAT ZIP A whole bunch of sample images and animations ready to render PLYUTL ZIP A couple of useful utilities necessary to extract TrueType font information into a form Polyray can use You want all of them The following lists some of the more significant enhancements made to Polyray since version 1 6 o Parametric surfaces o Bump maps o Support for JPEG and GIF images in textures etc o Can now call an external program from within Polyray system o Significantly enhanced the function object o Added NURBS objects Sorry no trim curves yet o Added a glyph object to support TrueType style extruded surfaces o Support for simple particle systems o Many VESA display modes now supported o Way better antialiasing If you registered a previous version then you should be getting a floppy in the mail Please contact me if it doesn t get there back to contents Use of External Program Calling for Polyray by Alexander Enzmann 70323 2461 CompuServe COM I asked What s the external program calling used for in the new Polyray During the course of an animation you may want to invoke another program to create include files This can be accommodated by using something like the following lines in the data file system foo frame foo inc include foo inc Polyray calls the program using DOS with the current value of the frame counter passed to it The resulting output gets dumped into foo inc The next line tells Polyray to parse the contents of foo inc I ve used this in conjunction with a C program to make data and CTDS to process the data and generate the include file An excerpt is Call the program spiral2 with both the frame number and the total number of frames in the animation The output will be data ready to go for CTDS system spiral2 frame total frames spiral2 ctd Call CTDS to process the data created by the spiral program The object will have the shiny red texture system ctds i spiral2 ctd o spiral2 inc p tu shiny red Now read in the data created by CTDS include spiral2 inc The program spiral2 creates points and radii on a nice loopy shape The radii are modulated by a sine wave over the course of the animation The code is main int argc char argv double a 10 0 double b 5 0 double c 5 0 double x y z t r theta phase int frame num frame count steps 1024 0 frame num argc 1 atoi argv 1 0 frame count argc 2 atoi argv 2 60 phase 2 0 M PI double frame num double frame count for theta 0 0 theta Clearly since the program is invoked for every frame and DOS doesn t support concurrent processes pipes the external program either has to be able to create all the information given only frame number or it has to have its own persistent store of intermediate results back to contents POV Ray Legal Stipulations Correction by Dan Farmer 70703 1632 CompuServe COM In Peter Campbell s article on Optimized POV you trying to cover our butts I m sure claimed that the POV developers have asked that exe s other than theirs not be distributed Well that s no longer entirely true As of the 2 0 release the legal stipulations about distributing executables have been made a bit more tolerant We now allow them to be distributed but only under the conditions explained in the POVLEGAL DOC file In essence the stipulations state that the user must support the compilation must use a special header file that includes information about how to contact the originator and must contain the full distribution package BTW I agree with Peter that the DJGCC version is almost as fast as the Watcom version with fewer problems That s what I do all of my POV compiling with Watcom compiles have been subject to drastically overrated benchmarks in the past One reason for this is that certain chipsets OPTI 486 33 is one I think the other is called Symphony or something similar have a known problem with the ICB compiler that causes ICB programs to run at about 1 2 the speed that they run on other chipsets I personally had this problem with the OPTI set until I upgraded to a 50 MHz motherboard Upon checking with these Watcom worshippers I learned that they often had an OPTI chipset I d recommend that these folks get ahold of a DJGCC version back to contents 3D Graphics Book List by Brian Hook bwh beach cis ufl edu All is the opinion of the author and no one else A long article but I haven t had a full book summary of the classics here in years and there are also some mentioned which I ve never seen EAH In the course of attempting to write games simulators and virtual reality applications for the PC I ve run across an amazing lack of information on how to program 3D graphics The problem actually wasn t LACK of information it was lack of information that told where the information I needed WAS So in an attempt to help other budding 3D programmers get the necessary literature for programming here is a list of books that I ve found useful Some of these references were taken from the comp graphics FAQ but the reviews were done by myself I am personally interested in interactive real time 3d graphics so stuff on advanced rendering radiosity or raytracing is not of huge significance even so the reviews do cover books in these areas EAH I have not seen many of the Bibles of graphics Newmann and Sproull Burger and Gillies etc but I hear they are invaluable so they may be worth a peek I could special order them but I don t have 50 bucks lying around just to take a risk GRAPHICS BOOKS Advanced Animation and Rendering Techniques Alan Watt Mark Watt Addison Wesley 1993 ISBN 0 201 54412 1 Computer Graphics An Introduction to the Mathematics and Geometry Michael Mortenson Industrial Press 1989 ISBN 0831111828 Computer Graphics Principles and Practice 2nd Ed J D Foley A van Dam S K Feiner J F Hughes Addison Wesley 1990 ISBN 0 201 12110 7 Mathematical Elements for Computer Graphics 2nd Ed David F Rogers and J Alan Adams McGraw Hill 1990 ISBN 0 07 053530 2 3D Computer Graphics 2nd Ed Alan Watt Addison Wesley 1993 ISBN 3D Computer Animation John Vince Addison Wesley 1992 Flights of Fantasy Chris Lampton The Waite Group 1993 ISBN 1 878739 18 2 Graphics Gems Andrew Glassner ed Academic Press 1990 ISBN 0 12 286165 5 Graphics Gems II James Arvo ed Academic Press 1991 ISBN 0 12 64480 0 Graphics Gems III David Kirk ed Academic Press 1992 ISBN 0 12 409670 0 with IBM disk or 0 12 409671 9 with Mac disk Procedural Elements for Computer Graphics Osborne McGraw Hill 1985 0 07 053534 5 I personally have seen used own this book OTHER USEFUL BOOKS Programming graphics especially real time graphics involves a lot of optimization and efficiency considerations which means that to program graphics well you must be able to PROGRAM well Some other books on programming that I have either heard rave reviews about or even better I own and consider invaluable are listed here with a very short description Skip this part if you don t care but you owe it to yourself to at least give these books a look The Art of Programming vols 1 3 Donald Knuth Addison Wesley THE Holy Trinity of programming in general I don t own any of the three books mostly because I don t have 150 dollars handy The books however are considered classics and have some of the most exhaustive analyses of various algorithms in print The Mythical Man Month Brooks Addison Wesley A wonderful book on how to and how NOT to manage a large project Not of much use to a single programmer but for someone who must program as part of a team this book is a MUST have Very entertaining reading Dated but relevant nonetheless Introduction to Algorithms Cormen Leiserson and Rivest McGraw Hill A great book on algorithms and data structures more digestible than Knuth s Art of Computer Programming and more up to date but not quite as comprehensive sort of a Knuth Lite if you will I ve found it to be my primary reference on algorithms and data structures Algorithms in C C Robert Sedgewick Addison Wesley Considered a modern day classic there are actually three books Algorithms Algorithms in C and Algorithms in C They are the same book just in a different language I am familiar with the Algorithms in C book It is has some bugs in the code and the text can be a little terse but it is still a useful book More implementation oriented than Introduction to Algorithms sort of a Knuth Lite Lite Used to be my primary book on algorithms until Introduction to Algorithms kicked it out of first place Still a good book though and I refer to it a lot Programming Pearls and More Programming Pearls Bentley Great books kind of pricey though Litte anecdotes and stories about programming way back when but some of the lessons on optimization and invaluable for day to day programming tasks Really good books but just kind of expensive for their size they re more like pamphlets really If you have some extra dough buy these books but they aren t real necessary The C Programming Language 2nd Ed Kernighan and Ritchie Prentice Hall If you don t know C buy this book NOW Great C reference eminently readable Wonderful wonderful book If you do know C already then you probably already OWN this book If you are learning C and trying to do it with some lame SAMS Que MIS Press M T Wiley McGraw Hill cheezy trade paperback with a title like Using Borland C or C in 21 days or Learning C or Using C or Learning C by Example then you are doing yourself a disservice Get this book instead p s personally I like Harbison and Steele s C A Reference Manual Prentice Hall for reference EAH The C Primer 2nd Ed Stan Lippman Addison Wesley Everything that goes for The C Programming Language above applies here also I like this book a bit more than Stroustrup s The C Programming Language but to each his own Advanced C 2nd Ed Coplien Addison Wesley Great book on using C to solve real world problems Invaluable if you are trying to write a graphics package in C and need to balance ease of use readability correctness and efficiency Pretty bad indictment of the C language actually since it shows the ugly messes that you have to go through in order to make C act like a true OOP language like Eiffel Sather or Objective C Okay now onto the graphics stuff OVERVIEWS Most of these books assume that you have a fairly firm grasp of trigonometry matrix and vector math and possibly some other stuff Some of the books give a quick summary of the above and Flights of Fantasy sort of weasels out on the whole deal by letting you ignore the nitty gritty math stuff but be forewarned Flights of Fantasy is pretty weak material as far as advanced stuff goes and you probably won t learn a lot from it beyond the very basics The books are categorized as either being BEGINNER INTERMEDIATE or ADVANCED Simple test pretty crappy one but it works for now see how many of the following phrases you are VERY familiar with i e you know the literal definition of it plane equation dot product cross product normalized unit vector normal to a plane matrix inverse identity matrix similar triangles parametric equation linear interpolation column vs row major matrices right hand left hand coordinate system orthogonal matrix orthonormal matrix pure rotation matrix BEGINNER 0 5 INTERMEDIATE 6 10 ADVANCED 11 15 WARNING STAY AWAY FROM BOOKS WRITTEN BY LEE ADAMS Lee Adams books suck suck suck suck suck Bad Period I cannot stress to you how badly his books suck The code is horrible the text is horrible the performance of his code is horrible his algorithms are horrible EVERYTHING about his books is horrible TITLE Advanced Animation and Rendering Techniques AUTHOR Alan Watt and Mark Watt PUBLISHER Addison Wesley FOCUS Photo realistic images and animation LEVEL INTERMEDIATE ADVANCED This book is by far one of the best books in the field of 3D graphics I definitely agree EAH Most of it covers static rendering and ray tracing which means it is not very useful for real time graphics like 3D on a PC for example The authors don t feel you are in real 3d animation territory until you have a Z buffer working and an incremental shading algorithm preferably Phong with 24 bit true color Needless to say few PCs have ANY of the above real time capabilities Even so the stuff it covers is invaluable and very difficult to find elsewhere We are talking heavy rendering and ray tracing stuff volume rendering techniques shading languages quaternions and Euler angles radiosity inverse forward kinematics etc Excellent book but not very useful if you are looking to write only a game although the chapters on segmented object animation would be useful for robots tanks TITLE Computer Graphics Principles and Practice 2nd Edition AUTHOR Foley Van Dam Feiner and Hughes PUBLISHER Addison Wesley FOCUS EVERYTHING LEVEL ALL As Knuth s Art of Computer Programming is to algorithms this book is to computer graphics THE reference It covers just about every topic you need to know however because of its scope it is very generalized and so information on any one specific topic may be lacking Pascal like pseudo code is strewn liberally throughout the book which is a big help Everything you would expect in 3D graphics is covered including shading ray tracing radiosity texture mapping etc Once again it s very generalized and serves mostly as a good reference to other material and an overview of individual areas But at over 1000 pages it s a must have if you do graphics If you can afford only ONE book on graphics get this one TITLE Mathematical Elements for Computer Graphics 2nd Edition AUTHOR David F Rogers and J Alan Adams PUBLISHER McGraw Hill FOCUS Math of computer graphics LEVEL ALL Excellent book on curves patches and a lot of math Does not cover rendering at all no shading etc It does a lot of theory on transformations in general especially on the basics of matrices and how they apply Great stuff on projections too Lots of theory Don t expect too much on object databases or implementation efficiency this book is about math and theory not implementation Sucks as a reference on rendering algorithms but for modeling in general and math it s wonderful Also it has an insane amount of stuff on curves splines Bezier curves NURBS Coons patches surfaces and basically anything that has to do with math and graphics get this book One of the few McGraw Hill books I ve liked the other is An Introduction to Algorithms and Rogers other book Procedural Elements for Computer Graphics This book is great as a companion volume to PECG TITLE 3D Computer Graphics 2nd Edition AUTHOR Alan Watt PUBLISHER Addison Wesley FOCUS 3d Computer Graphics LEVEL INTERMEDIATE ADVANCED This is also one of those classic texts The new second edition covers a lot of ground Watt s style is highly readable and the code is in Pascal A complete rendering system or two is supplied in the appendices along with the data file for the Utah teapot If you do 3d graphics you MUST have this book Interesting note the author and I prefer the left handed coordinate system because it tends to be more intuitive than the right handed coordinate system which is preferred by mathematical types Watt stubbornly refuses to switch to the right hand coordinate systems which Foley and Van Dam et al and PHIGS PHIGS have done Chapters include 1 Three dimensional Geometry in Computer Graphics 2 Representation of Objects 3 Viewing systems 4 Reflection and Illumination Models 5 Rendering Algorithms 6 Parametric Representation and Practice 7 Shadows and Textures 8 Ray Tracing 9 Volume Rendering 10 Radiosity 11 Anti aliasing 12 Functionally Based Modeling Methods 13 Three dimensional Computer Animation 14 Colour Spaces and Monitor Considerations A Viewing Transformation from a Simple Four Parameter Viewing System B A Wireframe System C An Implementation of a Renderer D The Utah Teapot The book has a fairly decent mix of interactive and photorealistic stuff and it is an excellent supplement to the 3d graphics section of Foley and Van Dam Between the two you are pretty well set for 3d graphics TITLE 3D Computer Animation AUTHOR John Vince PUBLISHER Addison Wesley FOCUS 3d Computer Graphics LEVEL INTERMEDIATE ADVANCED Excellent book on 3D animation in general Don t get the wrong idea however because it s not about coding 3D animation libraries It s about the field of 3D computer animation It s got a lot of technical stuff and discusses a lot of the stuff in the field of 3D computer animation including packages available and the technology involved in the field A damned good book and if you do animations then it s a must have Some of the algorithms described in it are real nice and since it s recent it s got some good information on newer rendering algorithms that some other books don t have Highly recommended TITLE Flights of Fantasy AUTHOR Chris Lampton PUBLISHER The Waite Group Press FOCUS Writing a 3d flight sim for the PC LEVEL BEGINNER A lot of controversy has been caused by this book not because of its content but because of widely varying opinions as to its quality Personally I think that it is a great beginner s book however the rendering engine is incredibly primitive and inefficient It doesn t cover shading gradient fill sky lines etc The renderer iis incredibly crude if you are expecting something that will let you do a commercial game keep looking It dodges the math bullet fairly well which I don t like since if you REALLY want to know 3D graphics then you are going to need to know the math A nice thing about the book is that it covers some topics that are hard to find elsewhere such as joystick programming etc It doesn t cover advanced video modes 320x240 or 320x400 SVGA programming digitized sound shading etc A great beginner s book but you ll outgrow it soon enough TITLE Graphics Gems I IV EDITORS Glassner Arvo others PUBLISHER Addison Wesley FOCUS ALL LEVEL INTERMEDIATE ADVANCED Some people swear by these books I don t know They cover a lot of little tricks and tips for a lot of little things but personally I haven t found much use for them but I m looking only at the interactive 3D side of things Every now and then a friend tells me Wow this one little paragraph in Gems X gave me a huge insight into what I needed to do and now my program is MUCH faster So to be fair a lot of others have found these books to be invaluable They cover a bit too much ground for me so I m still kind of hesitant on recommending them to others since it s not readily apparent if they will be helpful to you Your mileage may vary TITLE Procedural Elements for Computer Graphics AUTHOR David F Rogers PUBLISHER Osborne McGraw Hill FOCUS ALL LEVEL INTERMEDIATE ADVANCED This is another book by the author of Mathematical Elements for Computer Graphics This book covers a lot of the stuff that MECG doesn t cover Rogers style is in my opinion incredibly dry but then again this is a reference book and not Gone With the Wind It covers most of the major algorithms out there and explains enough where you can get some reasonably decent working code from it As a basic reference it is EXCELLENT and HIGHLY recommended However if you own most of the other books Foley and Van Dam Watt s Watt Watt then this book isn t going to be a big eye opener no new algorithms are described so if you know all of the major ones then this book is going to be redundant HOWEVER if you haven t started building up your library yet then this book is a great start A wonderful computer graphics algorithm reference Rogers positions this book as the logical followup to MECG and I agree completely For example MECG covers a LOT of ground in areas such as coordinate transformations perspective etc whereas PECG doesn t cover ANY of the aforementioned subjects It stresses rendering algorithms typically at the polygon level such as hidden line surface removal shading etc If you don t know your transformations this book isn t going to teach you As a quick reference this book is great too Gee how do I implement a scan line Z buffer again back to contents Eric Haines erich acm org Ray Tracing News Volume 7 Number 4 Ray Tracing News Volume 7 Number 4 Ray Tracing News Volume 7 Number 4 Ray Tracing News Volume 7 Number 4 Ray Tracing News Volume 7 Number 4 Ray Tracing News Volume 7 Number 4 Ray Tracing News Volume 7 Number 4 Ray Tracing News Volume 7 Number 4 Ray Tracing News Volume 7 Number 4 Ray Tracing News Volume 7 Number 4 http www acm org tog resources RTNews html rtnv7n4 html http www acm org tog resources RTNews html rtnv7n4 html http www acm org tog resources RTNews html rtnv7n4 html http www acm org tog resources RTNews html rtnv7n4 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv7n5.html%%==%%Ray Tracing News, Volume 7, Number 5%%==%%Ray Tracing News "Light Makes Right" October 13, 1994 Volume 7, Number 5 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%105180%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right October 13 1994 Volume 7 Number 5 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1994 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction New People Ray Tracing Roundup Recent Ray Tracing Papers Rumor Mill AERO Animation Simulation System version 1 5 1 by Thomas Braeunl A Brief Review of an old AERO by Dave Negro Photon Tracing by Chris Thornborrow and Greg Ward Faster Than POV RAY 2 1 by Dieter Bayer Z Buffer Based Rendering Program by Raghu Karinthi Gossamer a Free Macintosh VR 3D Renderer by Jon Blossom Antialiasing Issues by Arijan Siska Microcosm by Abe Megahed of Cosmic Software Fisheye Lens Distortion by Greg Ward Optical Ray Tracers Correcting Normal Direction by Gavin Bell Graphics Gems IV Table of Contents by Paul Heckbert Beyond Graphics Gems by Paul Heckbert Radiosity vs Ray Tracing by Rico Tsang ACM SIGGRAPH Online Bibliography Updated by Frank Kappe How to be Notified of New POV Releases PoVSB Windows based Modeler v0 85 by Jeff Hauswirth Porting Rayshade PBM etc from Unix to DOS by Mike Castle REYES Patents William C Archibald Going from AutoCAD and 3DS into Ray Tracing by Sean Ross Computer Lego Modeling by Paul Gyugyi Rowe s Ray Tracing World BBS by Harry Rowe On Using BSP trees by Benton Jackson Books about Commercial Renderers by Don Lewis Jimbo and Yury German Introduction Another SIGGRAPH has come and gone and it was a pretty fun one Getting soaked time and again along with other allegedly intelligent people by the whales at the SeaWorld reception was definitely memorable In many ways this conference was better than previous years The proceedings and course notes were also provided on CD ROM some headaches on some machines but that s the norm Being able to move course to course was wonderful even with the headache of getting to and from Stouffer s which was no fault of the conference organizers The addition of the technical sketches sessions and parallel paper sessions were both plusses to me Note that there are a number of great resources on the various CD ROMs e g the latest release of Radiance since there was a paper on the system in the proceedings this year The most noticeable technology for me was Apple s QuickTime VR Nothing earth shattering but something which looks to be popular Essentially you can move from view to view of an environment You have a panoramic view of wherever you re located so you can turn your head zoom in on something and even look up and down a bit there s a nice illusion that you re interacting with the environment but without having more than a single panoramic view for a location The software does all the distortion correction on the fly The first product that is out using this technique is a tour of the Enterprise TNG on CD ROM and I suspect you ll see a lot of Apple s technique in upcoming CD ROM tours and adventure games e g rumor has it the Myst guys were looking at the technique So what s this have to do with ray tracing Well ray tracing is a natural for rendering panoramic views Ken Musgrave has a Gem on how to do this in Graphics Gems III Scanline images can be used and glued together and then warped but ray traced images give you the distortion you need for free and at the sampling rates you need where you need them This is yet another catch up issue where the bits and pieces left in the queue since April are gathered up and spewed out now If anything have the material molder in my files for a few months meant I ve culled a bit more than usual leaving a denser filling with a firm yet flakey crust Food imagery aside there are some worthwhile bits in this issue AERO a demo of Microcosm a new z buffer renderer and so on Next issue will have more juicy stuff and I really do hope to get it out before the Millenium arrives including an announcement of a non Pixar produced shareware RenderMan implementation back to contents New People Werner Purgathofer radiosity ray tracing visualization color Technical University of Vienna Institute of Computer Graphics Karlsplatz 13 186 2 A 1040 Wien Austria 43 1 58801 4548 alias purgathofer cg tuwien ac at I am a professor of computer graphics my main job consisting of teaching administration and research My group consists of about 12 people including a technician and a secretary We did a lot of ray tracing some years ago including distributed ray tracing see e g Eurographics 86 now we are concentrating on radiosity issues As forward ray tracing becomes more and more important here we are almost back where we started back to contents Ray Tracing Roundup Thought folks might be interested in the On Line Ray Tracing Bibliography available over the World Wide Web via URL http www cm cf ac uk Ray Tracing Even those without Web clients like Mosaic can check this out by telneting to one of these sites If you re near Telnet to Switzerland info cern ch or 128 141 201 74 Kansas USA ukanaix cc ukans edu login as www New Jersey USA www njit edu login as www Israel vms huji ac il or 128 139 4 3 login as www Slovakia sun uakom cs slow link use only from nearby Hungary fserv kfki hu slow link login as www Finland info funet fi or 128 214 6 100 Mark Maimone Mark Maimone A GP CS CMU EDU This is Ian Grimstead s doing and bibliography is a misnomer it s a great place to start looking for all sorts of ray tracing and rendering resources with links to just about everywhere Really I could just list this site each issue and not have to list most of the other resources that I do EAH The FAQ for comp graphics algorithms are available at http www cis ohio state hypertext faq usenet graphics algorithms faq faq html ftp rtfm mit edu pub usenet by group news answers graphics algorithms faq Also available at ftp wuarchive wustl edu graphics graphics mail lists comp graphics algorithms FYI all usenet FAQ s are available with Mosaic via http www cis ohio state hypertext faq usenet top html Jon Stone jdstone ingr com A computer graphics related FTP list maintained by Nick Fotis and myself EAH is kept at wuarchive wustl edu graphics graphics ray GraphicsFTP txt George Kyriazis kyriazis esd sgi com I ve been playing around with HTML and the World Wide Web lately and I have created hypertext versions of the three latest RTNews issues with more to come when I get the time and energy to do it RTNews is at http www lysator liu se 7500 users ture rtnews html I also have some general graphics stuff att graphics html and my own presentation at ture html Ture P aa lsson ture lysator liu se Texture Collections I m looking into different texture collections on CD ROMs Are there any that are absolutely awesome or others that should be avoided i e not worth the money Accents looks pretty nice in reviews etc and also Pixar s 99 offer for One Twenty Eight CD ROM texture collection looks good I just finished writing an article on this very topic for Digital Video Magazine It should be in the September issue and it covers about twenty or so packages for the Amiga Mac and PC most of them on CD ROM The Pixar set you mentioned is very good as are Autodesk s Texture Universe and Texture City Check the article out for more info on a bunch of packages Hope this is helpful Digital Video Magazine is at 603 924 0100 in Peterborough NH EAH Dave Thomas dthomas bbx basis com Moving Pixels Client looking at image of a sphere on a monitor Can we make it rounder Recent Uploads to ftp cica indiana edu File desktop gcad110 zip Date 940311 Desc GammaCAD v1 10 Full featured File programr 3dlib30a zip Date 940315 File programr 3dlib30b zip Date 940315 Desc C Pascal 3D graphic animation As a new feature the fractal FAQ has some links for use with the World Wide Web It can be accessed with a program such as xmosaic at http www cis ohio state edu hypertext faq usenet fractal faq faq html Ken Shirriff shirriff sprite berkeley edu New version of RTrace 8 4 0 There is a new version of the RTrace ray tracing package 8 4 0 at asterix inescn pt 192 35 246 17 in directory pub RTrace Check the README file Antonio Costa Comp Graphics CAD cgcad bart inescn pt New Game Programming FTP Place I have the great pleasure to officially announce the new pc game programming oriented ftp place teeri oulu fi It s currently an old sun3 has max 20 user limit is located in Finland Europe and has about 40M more or less game programming oriented material online lots more to come teeri oulu fi pub msdos programming uploads to teeri oulu fi incoming with a txt file please There are graphics libs sound libs hardware tech specs file format specs drawing utils music composing utils sample game source some carefully selected FAQs file format converters all 3 known Game Programmers Magazines is the official home dist site for Game Programmers Encyclopedia etc etc The PC Games Programmers Encyclopedia 1 0 PC GPE is in pub msdos programming gpe pcgpe10 zip Jouni Miettunen jon stekt oulu fi Another place to look for PC related graphics source code is ftp uwp edu pub msdos demos programming source EAH PCFormat UK RTPics on cover CD Just thought UK readers might like to know that this month PC Format magazine have launched a copy which comes with a CD rather than the usual disks On it are over 150 ray traced images most of which are pretty stunning and in at least 640x480 GIFs though so only 256 colours The ray traced trees generated with LParser are particularly gobsmacking Even Frosty is on there but compared to the rest I found it to be pretty average sorry Dan but I think some of your others are MUCH better IMHO it s well worth a look and Pc Format can be reached at format compulink cix co uk if you want to try persuade them to put more ray tracing stuff on the disc in future such as source files image data etc PS The Bowling GIF has incredible motion blur dunno what it was done on though William Turner wturner acorn co uk Geombib Reminder Otfried Schwarzkopf has set up an experimental server on the world wide web for the geometry biblio you can try it by pointing your browser e g mosaic for xwindows at http www cs ruu nl people otfried html geombib html The server can be used to do remote searches on the bibliography it has biblook under the hood When the entry has been annotated with the new URL field the server will recognize this and allow you to download the network object pointed to e g a Postscript copy of a techreport You can find some examples by looking for ftp in any field If you have comments or suggestions regarding the server please send them to otfried cs ruu nl If you wish to join the computational geometry bibliography mailing list send email with body of subscribe geombib to majordomo cs usask ca Beware that mail sent to geombib request cs usask ca gets a form letter from majordomo but not a subscription You can FTP the bib from cs usask ca pub geometry geombib tar Z EAH Bill Jones jones skdad usask ca Animation FTP Site toe cs berkeley edu in directory pub multimedia mpeg movies has some quite good mpeg streams including the morphing sequence from Michael Jackson s Black and white video Jim Marsden ee c456 vulture dcs kingston ac uk I have recently completed version 1 1 of RenderCAD PRO a modeling and ray tracing application for the Macintosh Its easy graphic user interface can be used to generate photo realistic single images and multi image animations A free demo requires Mac w FPU co pro of this 45 package is available Please send info requests to Paul Rybarczyk prybarc heartland bradley edu If you have direct Internet access you can learn about BRL CAD via ftp to ftp arl mil directory brl cad Mosaic WWW to the following URL http www brl mil software brlcad index html Lee A Butler butler ARL MIL The current version of the Stereogram FAQ is in the HTML file at http www cs waikato ac nz singlis sirds html or can be FTPed from katz anu edu au 150 203 7 91 pub stereograms which also has a lot of other SIRDS related information Stereograms are those things you see in the mall trade name Hollusion that you try to stare at and defocus and see the dinosaur or whatever in 3D I could never see the effect until I learned about the techniques listed in the FAQ Fun illusion and it turns out to be very easy to implement as a post process to a ray tracer I believe people have already done it for POV and Rayshade Also at the listed FTP site there is a ray tracer called raysis which is devoted to this task To do this stuff yourself you can try to decode the FAQ it s a tad cryptic when it comes to actually saying what to do for SIS buy the new book Create Stereograms on Your PC by Dan Richardson Waite Group Press or wait an issue I hope to write up the 20 30 lines of code I used to add it to my renderer for the heck of it EAH Raytech is a BBS specialising in ray tracing It is located in northern Scotland and their telephone number is 44 862 832020 Adam Fulcher afulcher cix compulink co uk Just about everything that always gets asked over and over again on rec games programmer is covered in the latest Dr Dobbs circle ellipse line texture mapping landscape generation and even ray tracing So before you ask get that episode 216 July 1994 ddj Ben sbc5a helga6 acc Virginia EDU RT Ray Tracer I have implemented a CSG Ray Tracer with lots of primitives textures bounding volumes in C but I ve no multi processing wire frame stuff My Ray Tracer is called RT and is available on ftp os2 nmsu edu os2 2 x graphics rt zip It comes with full portable C source and uses the GBM module for file I O found in same directory as gbmsrc zip I will refresh it with a version less sensitive to rounding errors sometime soon Andy Key ak hursley ibm com Equation for a Cow er Frog There are some datasets at http george lbl gov ITG html including a rasterization of a frog that was made by freezing slicing and scanning They planned to do an MRI scan but frogs don t scan well There s also MRI data for an orange a tomato a pumpkin and a rat Roger Critchlow rec arris com The WorldToolKit User s Group SIG WTK electronic archive is located at artemis arc nasa gov sig wtk This anonymous ftp site serves as the software and documents library for the SIG WTK It is intended to serve the needs of active WTK users and other parties interested in WorldToolKit The site is organized within the ftp sig wtk as follows incoming for anonymous contributions models 3D objects in various formats NFF DXF etc textures textures in various formats SGI Targa etc Note that the NFF format referred to is Sense8 s NFF format not mine EAH Terry Fong terry ptolemy arc nasa gov Wavefront site http wavefront wti com WWW only Kevin Bjorke bjorke pixar com The author of TextureSynth Joshua Jeffe has written a new texture generating application called TextureScape which uses postscript shapes as the basis of really cool resolution independent textures It can also be used to create animated textures for use in multimedia TextureSynth is published by Specular International call 1 800 433 SPEC for more info Peter E Lee lee cs umass edu 3D Studio utils uploaded to Avalon I have uploaded 3D Studio IPAS routines and utilities to avalon chinalake navy mil 129 131 1 225 pub utils 3ds Each file is accompanied by a txt file I didn t write haven t used don t know anything else about these utilities Just passing them on Pat Kane prkane nyx cs du edu Also at avalon chinalake navy mil in the pub misc directory are all sorts of interesting PC software including the fabled TrueSpace Caligari demo version doesn t save restore ts demo zip a Real3D demo which is supposed to be tough to use without the documentation and other interesting things Acoustic Simulation Renkus Heinz a speaker manufacturer from California distributes EASE Electro Acoustic Simulation for Engineers and EASE Jr Both run on MS Dos systems Ease also supports aurilization using a companion program called EARS and a DSP board Ease allows you to calculate reverb time impulse response frequency response of systems ray tracing and perform sound system design Ease Jr allows reverb time and sound system design calculations Both programs allow wireframe room models to be built in the program or importation of 3 D DXF files Jay Paul jaypaul1 aol com it had the magic words ray tracing in there so I included it EAH Blob Sculptor Update We have released Blob Sculptor for Windows 1 0 It has the same functionality as the DOS version Ron Praver ported the DOS version to Windoze look around on ftp povray org I think it s in there somewhere EAH Blob Sculptor ver 2 0 for DOS is almost ready to be released The new functionality includes better user interface camera can be interactively located support for multiple blobs i e components within a blob interact with each other but blobs don t interact with each other sphere cones and cylinder shaped components faster preview mode Version 2 0 has been beta tested for some time and already has produced some awesome images For example Edgar L Ibarra has produced various images including cartoon like characters dog candle holder a la Beauty and the Beast and a baby You can find these at CompuServe s GraphDev forum He renders the objects with Imagine 3 0 I ve been working on a spline blob component The component consists of 3 points which are created in 3D space A spline is used to interpolate them and a radius is defined to give the object a bent cylinder look The component also permits the modification of a tension parameter which gives the user more versatility without the need to use more points Uses for this you ask well if you want to create the fingers in a hand you don t need to use spheres or 2 or more cylinders to do the job just 1 spline blob will do the job Think of a spline blob as a generalized cylinder or playdough in the shape of a cylinder which can be bent Alfonso Hermida AFANH STDVAX GSFC NASA GOV Radiance Related SIGGRAPH Proceedings Distribution Other than a paper about the Radiance system in the SIGGRAPH 94 Proceedings the entire Radiance system is included on the Proceedings CD ROM It s in papers ward rad2r4 tz uncompress and read tar I assume Eric Haines Radiance vs POV I have found Radiance to be comparable in speed to POV Once the octree is generated the tracing times are even shorter than POV It has very efficient pruning and the tracing times go up less than linearly with the increase in the number of polygons in a scene And besides the results are MUCH better in terms of realistic looking lighting and better looking surfaces In my opinion Radiance is the best ray tracing package on any platform I use it on an Amiga The main problem with Radiance is lack of a good modeler and the many other support programs that are available for POV Alison Colman acolman magnus acs ohio state edu POV Related Andy Wardley abw dsbc icl co uk notes I ve just uploaded geodome1 zip to uniwa which is the utility for creating the geodome data models Non PC users will be glad to hear that it does include source Harry Rowe Harry Rowe wedowind meaddata com comments Like others I would just like to say GREAT scene The sky is one of the best I ve seen I scarfed the GIF and your utility from uniwa and placed it on my BBS Rowe s Ray Tracing World BBS 513 866 8181 It will be on my custom 600 meg Ray Tracing Graphics CD coming this fall The POV Utilities 2 0 for the Mac have hit the streets The package is now available on CompuServe Go GRAPHDEV Lib 8 POVUTL SIT It is also available via anonymous ftp on the internet from the Australian secondary official POV Ray site ftp uwa edu au and ftp povray org for N American users I assume under pub povray utilities As always feedback and bug reports are encouraged Also look for my shareware System 7 MooVer utility that converts a series of POV Ray animated PICT files into a QuickTime movie with a simple drag n drop It should also be showing up on uniwa and is on CIS GRAPHDEV Lib 6 MOOVER SIT Eduard Schwan 71513 2161 CompuServe COM New Povray Clipart Available I ve uploaded Povray V2 0 files to avalon chinalake navy mil They can be found at pub objects pov They were all converted from obj files found on avalon chinalake navy mil in pub objects obj Keith D Rule keithr tekig7 pen tek com many are the free Viewpoint models plus a few Star Trek thingies EAH POV Utility Information on the WWW I have just set up a WWW page for POV utilities containing information about a few popular ones and also allowing you to download them directly from the page For most people that should be faster than the various ftp sites as well as having the advantage that you actually get some info on what the utility is about The URL is http www ifi uio no mariusw pov utilities html Please give me feedback and point me to utilities you think should be on the pages Marius Ibenhardt Watz mariusw ifi uio no Some utilities of note MORAY 1 5 of course SUDS CTDS POVCAD TGA2GIF TTG DXF2POV and RAYLATHE just to mention a few from the POV newsletter Faces for POV Frosty There was a thread a while back about Dan Farmer s Frosty picture and how we wanted the POV file I think in fact most people wanted the face data and on someone s advice on this group I got hold of the face1 3ds face2 3ds and face3 3ds files from avalon chinalake navy mil and converted them into pov form with a utility also on that ftp server The utility for conversion is something like 3dspov18 zip source for conversion from 3DS is included EAH The results are good although they come out as 230 320k files that might fill up too much space and take a while to parse The face are more like masks than real faces but do the job so long as expressions aren t needed Mr Jonathan H S Peterson zctyjhp ucl ac uk Parallel POV Ray using PVM I have written such a thing somehow It works like this A server is started that takes all parameters and stuff The server divides the final picture in several stripes The server spawns some children that each calculate one stripe 10 pixels high For this each child starts povray with SL and EL and writes the result to a file This file is passed back to the server The server collects all files After all stripes have been calculated a list of calculated stripes is maintained so you can abort and restart the process all stripes are collected into a final picture The results are impressive texture1 pov demo is rendered in 1 2 minutes at 1280x1024 pixels Aaron Digulla sorry no address Rayshade Related Craig Kolb has moved to Stanford following his advisor Pat Hanrahan and so has pretty much bowed out of maintaining Rayshade In his place others are attempting to glue together all the additions and bug fixes over the years and get out a Rayshade 4 1 More news as it happens Other than this effort there has been an explosion of WWW stuff for Rayshade Scattered notes from Craig Kolb There s an experimental version of a rayshade homepage available on the Web http www cs princeton edu grad cek rayshade Thanks to Jelle van Zeijl and Stuart Warmink for providing documents images and encouragement to set this up As some of you might have noticed I ve reorganized and expanded the rayshade FTP archive a bit If you have anything that you d like to add new primitives textures whatever drop me a line Hundreds of surface definitions for Rayshade are available in ftp ftp princeton edu pub Graphics rayshade Contrib Libraries surfdefs rh Z Stephen Peter s excellent notes on using rayshade are now available via the rayshade homepage http www cs princeton edu grad cek rayshade and in source form on the rayshade FTP archive as Contrib Docs raynotes tar gz Craig Kolb cek Princeton EDU Z Buffer Range Map Extension To get this extension ftp vacation venari cs cmu edu 128 2 209 207 don t chdir and use binary mode and download zbuf tar You can get documentation updates a patch file and a new file in the same place file zbuf doc tar Mark Maimone Mark Maimone A GP CS CMU EDU The RayShade docs done by Jelle are up as URL http www msi umn edu miscdocs Rayshade index html Matt Hughes hughes msi umn edu The Rayshade users manual can now be reach at MIT via two URLs http web mit edu afs athena activity c cgs lib html rayshade index html and http www mit edu 8001 activities cgs rayshade index html Fred Director MIT Computer Graphics Society http www mit edu 8001 activities cgs mitcgs html For what it s worth I ve included a pointer to Rayshade in the Computer Vision Home Page http www cs cmu edu 8001 afs cs project cil ftp html vision html Mark Maimone Mark Maimone A GP CS CMU EDU I ve made a sample page of the standard Rayshade images and just a few more available to the Net There are several ways to get at them AFS filesystem cd afs cs cmu edu misc rayshade all mach omega doc Examples WWW with icons http www cs cmu edu 8001 afs cs misc rayshade all mach omega doc Examples rayimages html WWW without icons http www cs cmu edu 8001 afs cs misc rayshade all mach omega doc Examples rayimgtxt html anonymous FTP ftp ftp cs cmu edu login anonymous passwd email cd afs cs misc rayshade all mach omega doc Examples back to contents Recent Ray Tracing Papers This is a list of some recent research papers related to ray tracing from some of the lesser known conferences and journals EAH This paper is interesting in that it is the first independent testing of Arvo and Kirk s 5D space subdivision ray tracing scheme EAH G Simiakakis and A Day Five dimensional Adaptive Subdivision for Ray Tracing Computer Graphics Forum volume 13 number 2 Special Issue Rendering pp 133 140 June 1994 George Simiakis can be reached at gns sys uea ac uk Fifth Eurographics Workshop on Rendering 13 15 June 1994 Darmstadt Germany RAY TRACING Chair Erik Jansen fwj duticg twi tudelft nl Summaries courtesy of Erik Jansen Really this session is more for global illumination via rays There were many other global illumination papers here EAH Adaptive Splatting for Specular to Diffuse Light Transport Steve Collins For a two pass algorithm an adaptive light pass is used that deposits the power carried by rays as splats of energy flux on the surfaces using a Gaussian distribution kernel The kernel of the splat is adaptively scaled according to the ray wavefront convergence or divergence thus resolving sharp intensity gradients in regions of high wavefront convergence and smooth gradients in areas of divergence Rayvolution An Evolutionary Ray Tracing Algorithm Markus Beyer N Sander Brigitta Lange In order to increase the statistical efficiency of Monte Carlo integration of the rendering equation evolutionary algorithms are applied to optimize the sample distribution An initial population of rays evolves towards an optimal sample ray distribution by application of generic operators and selection mechanisms As a result we achieve an implicit stratification and a better convergence towards the actual value Bidirectional Estimators for Light Transport Eric Veach Leonidas Guibas Monte Carlo methods do not suffer from the artifacts and limitations that standard radisoity methods have to address but have another well known artifact noise A major source of noise is bright indirect light We can construct different light paths between the light sources and the eye either starting from the eye or from the light sources or starting from both meeting halfway The different paths leads to a partitioning of the rays Each partition gives us a different unbiased estimator Combining these estimators may lead to near optimal variance reduction A New Raytracing Architecture Robert E Bacon John A Gerth V Alan Norton James Kajiya withdrawn unfortunately mentioned because it sounded interesting EAH Computer Graphics International 94 Royal Melbourne Institute of Technology Melbourne Australia June 27 July 1 1994 Rendering and Display Kenjiro Takai Miura Ray Tracing Gregory type Patches W Lamotte K Elens F van Reeth and E Flerackers A Parallel Ray Tracing Algorithm Using Hierarchical Bounding Volumes Kerry Gigante kerry cgl citri edu au The Fourth Eurographics Workshop on Animation and Simulation was held in Barcelona Spain September 4 5 1993 This workshop had many papers with interesting titles but here s the one with those magic words raytracing Combining computer animation and video using bluebox raytracing M Zeiller Technical University of Vienna Austria Sabine Coquillart Sabine Coquillart inria fr Abstract from the Sharp Technical Journal 57 Nov 1993 The Sharp Technical Journal is a Japanese language publication which contains English abstracts for most of the articles Optimization of Illumination System for LC Projector Using Newly Developed Reverse Ray Tracing Method Takashi Shibatani Hiroshi Nakanishi Hiroshi Hamada A new illumination simulation technique using Reverse ray tracing method has been developed as a design tool for an illumination system of an LC projector with a microlens array In this method rays are traced from an illuminated plane to a light source in opposite direction compared to the conventional method This method have an advantage that the numbers of rays to be traced is much smaller than in the case of conventional method for required accuracy and it presents 2 dimensional angular distribution of the incident rays which affect the efficiency of the microlens array An illumination system for a single panel LC projector with microlens array with a newly developed correction lens and an aspherical mirror is optimized to improve brightness of a screen employing this simulation method Dr David K Kahaner kahaner cs titech ac jp Copies of previous reports written by Kahaner can be obtained using anonymous FTP from host cs arizona edu directory japan kahaner reports back to contents Rumor Mill A new feature this is simply snippets of tantalizing information from the net that I saw no follow up about If anyone has any details about these items let us all know EAH John T Chapman jtc1 cornell edu notes By the way there s a CD ROM rendering ray tracing tutorial offered through Tiger Software and others It supposedly has stuff on Ray Dream Designer along with other programs Has anyone seen this Is it for RDD 3 0 or earlier Is it worth the money There is apparently two versions a sampler at about 19 or so and the full version at about 90 or so Vareck Bostrom bostrov CSOS ORST EDU says Didn t they have a Intel Paragon doing 1 frame sec 1024x768 or so ray tracing at supercomputing 93 I didn t see it myself but my friends that did said it was impressive NURBS Rendering by Henrik Wann Jensen Jouko Vuoskoski jvuoskos suca01 cern ch wrote 1 What is the normal method to do ray tracing with B splines or NURBS 2 How can I do it fast with less accuracy I was thinking to ray trace with facets from the control polygon of the B spline Halving the knot intervals I could get more accuracy Is this right approach You are right The easiest way and also fastest often stated is to created a facet representation of the NURBS surface and halving the knot intervals is the way to do it I know there is some source code floating around try archie and search for nurbs I vaguely recall there being some spline surface intersection code around and about but does anyone have any hard info EAH back to contents AERO Animation Simulation System version 1 5 1 by Thomas Braeunl braunl hermes informatik uni stuttgart de AERO is an X window based tool for simulation and visualization of rigid body systems AERO contains a 3D scene editor for designing simple blocks world scenes Objects may be placed in space linked to each other and forces may be exerted onto them In animation mode the simulation of the scene entered is carried out in real time depending on scene complexity displaying 3D wire frames Also a flag can be set to generate scene description files for each time point as input files for a ray tracing program producing photorealistic output In both modes wire frame and ray tracing scenes the generation of stereo images is possible In the case of real time wire frames a red green representation of the scene is rendered which can be viewed with red green glasses For the ray tracing output a binocular pair of scene descriptions is generated for each time step AERO can be used for exploring the physical laws of mechanics and also for generating realistic computer animations AERO is available free of charge as public domain software Software and documentation can be copied via anonymous ftp over the Internet The address of our server is ftp informatik uni stuttgart de currently 129 69 211 2 The directory is pub AERO Note that AERO 1 5 1 now outputs POV Ray 2 2 format I believe AERO is mirrored on wuarchive though check version numbers with archie This system looked to be pretty cool you can simulate physically based phenomena There s also a paper about the system and the algorithms used Admittedly the primitive set is limited spheres and boxes but Olli Vinberg vinberg cc helsinki fi pointed out that you can run the simulation output the results and substitute the primitives with your own complex objects EAH back to contents A Brief Review of an old AERO by Dave Negro dln2 cornell edu My room mate is running Linux and I learned about AERO last school year and made him install it Haven t had any time to play with it this year though I can tell you some of the things that I remeber from last year 1 The simulations were great I found the emulation of real life was great and could be used to make some great animations 2 Editing was a little awkward but then again I wasn t able to fully get accustomed to it myself There was of course the standard primitives Sphere Cone box etc 3 Textures were lacking The selection and editing of textures left a lot to be desired 4 A separate pov file is created for each frame There is no way to make an include or anything for static objects Thus editing the files would be nearly impossible to do with each frame 5 Adding things to the scene but not with the tools in the AERO editor would again be extremely difficult 6 There were still some things that needed to be worked on like the open dialog and save Biggies in my opinion Well that is all I can remember for the moment But let me remind you that I have not touched the program in a year so I don t know if has changed at all and I wouldn t totally trust my memory either back to contents Photon Tracing by Chris Thornborrow ct opal epcc ed ac uk and Greg Ward greg pink lbl gov Chris Thornborrow writes OK onto the questions I am writing a raytracer which does the following a Ordinary raytracing b Distributed raytracing for lighting c Path tracing Kajiya d Photon tracing Now I need to be able to bias random vectors to do these efficiently but I am unsure how to do this First off then to generate a random direction vector from a point I generate a random vector in the unit cube and reject those that lie outside the unit sphere This has a 50rejection rate Can I do better without approximations I know about generating a 0 1 element and then a random angle The problem above appears compounded for a random vector within some solid angle of another vector Currently I generate a random vector as above and then reject ones out with the solid angle using a dot product This is awful Very small angles can be approximated by generating within a cone but larger say 20 solid degrees give obviously biased distributions this way Now my real problem Given an incident angle of a photon ray and the surface normal and the BRDF how can I generate a random reflection refraction angle that done many times would give the proper distribution defined by the BRDF In other words how can I bias the angle of perfect reflection in some pseudo random manner so that a great number of samples of those directions have the same distribution as the BRDF Obviously this is trivial for perfectly diffuse surfaces its the others I worry about I d like to do this without rejection testing is this even possible without rejection testing Greg Ward answers Let me start by saying that I m not the world s foremost expert on Monte Carlo sampling but I have written a ray tracer that does some of what you re asking I assume you have read some books on Monte Carlo sampling already such as Rubenstein s 1981 treatise Simulation and the Monte Carlo Method Wiley NY Professor Pete Shirley of Indiana University has also written a fair amount on Monte Carlo methods in ray tracing though all I have in front of me is something from his 1992 course notes on Global Illumination course 18 that year which I m not sure you can find easily I seem to remember that someone put a bunch of Monte Carlo examples in a Graphics Gems book It would have to be GG III since that s the only one I don t have The trick is to compute a cumulative probability function and invert it In many cases this can be done analytically In the case of the random direction vector it can even be solved by inspection You need only generate two random angles altitude and azimuth and convert it back to a Cartesian vector Rejection sampling is unnecessary Likewise for the vector in the solid angle of another vector you can limit your polar angle to the cone you have selected 20 degrees in your example Arbitrary BRDF s are another matter Rejection sampling is the most general method but there is a more efficient way to go As you probably know many BRDF s are highly peaked and using rejection sampling means you may have to test hundreds of ray directions before you get one that isn t rejected The more efficient approach is to generate a cumulative distribution table and invert it I haven t done this myself so excuse me if I m a little foggy on the details 1 Select a resolution limit for the polar and azimuthal angles in your ray direction calculation somewhere around 5 degrees should be good This is the only real limitation to this technique 2 Create a 3 dimensional table of real numbers The first dimension is the number of polar angles the second dimension is the number of azimuthal angles and the third dimension is the product of the two i e float cuml prob N M N M 3 For each reflected polar and azimuthal angle do the following 3a For each incident polar and azimuthal angle compute the BRDF times the cosine of the polar angle times the sine of the polar angle and add it to a running total Store this sum at the appropriate point in the table created in step 2 3b Once done your sum should equal the total reflectance which should be less than one but greater than 0 if you have a valid BRDF If it doesn t you might want to report an error but you can proceed with the calculation regardless 4 You have now filled a 6 5 Mbyte table and this completes the initialization phase Storing this sucker to disk wouldn t be a bad idea Now when you have to compute a ray direction you look up the appropriate table for this reflection angle and 5 Compute a uniformly distributed random number between 0 and 1 or 0 and the maximum value in this cumulative table depending on whether the distribution is properly normalized and if you are accounting for reflectance with a multiplier or with pure Monte Carlo 6 Perform a binary search to find the value in the table that is closest to your random number and determine the corresponding polar and azimuthal incident angles This is the inversion step in this algorithm 7 Jitter your sample uniformly within your 5 degree tolerance or whatever you picked in step 1 to get the final ray direction 8 Trace that ray Obviously the above algorithm could benefit from some refinement Firstly the precomputed table ends up being quite large The bigger your angle tolerance the smaller it will be but I can never see it being very compact You can store the whole thing to disk and just read in the section appropriate to the reflection angle in hand when the time comes and this will save on your memory costs at the expense of one or two disk accesses Also the binary search step 6 is fast but not free and it may pay to invert your table directly by computing azimuth and altitude angles corresponding to two random variables This would require a little more thought but I think it could solve both of these problems The only catch is that you still want some way of jittering the final result so as to avoid sampling a discrete set of directions and the distance between adjacent points in the table will vary with such a scheme Shouldn t be a problem though Has anyone implemented something along these lines who could help us out Pete back to contents Faster Than POV RAY 2 1 by Dieter Bayer dieter cip e technik uni erlangen de This bent my mind someone actually implemented my light buffer algorithm Astounding EAH A modified sped up and unofficial version of the Persistence of Vision Ray Tracer Version 2 2 Faster than POV Ray FTPOV Ray speeds up calculation of images by using some kind of direction cubes for primary rays the vista buffer and shadow rays the light buffer at the cost of additional preprocessing time and greater memory usage The bounding slab hierarchy used by POV Ray is projected onto the viewing plane and each point light source a priori Thus the number of ray slab tests is reduced Furthermore some modules have been modified to eliminate unnecessary calculations and automatic bounding has been improved The modified source code in the archive FTPV21S ZIP may only be distributed together with this text and the file POVLEGAL DOC that is part of the official POV Ray package To use the source code you ll need the original POV Ray 2 2 distribution WARNING If you use FTPOV Ray you ll do it at your own risk And don t forget that the POV Ray team isn t responsible for this version I have uploaded the source code and executables for MS DOS and OS 2 2 x to ftp informatik uni oldenburg de and wuarchive wustl edu pub graphics graphics ray pov pov dkb archive incoming back to contents Z Buffer Based Rendering Program by Raghu Karinthi raghu cerc wvu edu I tried this out and got some funky lighting problems perhaps fixed by now but it seemed essentially sound It s nice to see a z buffer for a switch lots harder to write than a basic ray tracer Hey it reads NFF files so I like it EAH We have developed a Z bufffer based rendering program in the West Virginia University The key features of this program are a Reads a variant of the standard Neutral File Format NFF as input b Outputs a 24 bit color TARGA file c Uses accurate fixpoint arithmetic in all its calculations d Works in X windows environment We have tested it on Sun Sparc machines This software is available via anonymous ftp The software includes two sample files including the teapot We would appreciate any feedback you can give us on this software We are quite impressed by the quality of the images produced Enjoy the use of this utility FTP from 157 182 44 36 pub sources ZRendv1 tar Z Below is a short description of the software Raghu Karinthi Department of Statistics and Computer Science Concurrent Engineering Research Center West Virginia University Morgantown WV 26506 6506 Voice 304 293 7226 Fax 304 293 7541 Email raghu cs wvu edu OR raghu cerc wvu edu Description Often times I have seen a question on the net for an accurate Z buffer rendering implementation producing 24 bit color output along with facilities for viewing the same We needed one ourselves as a benchmark for our work on parallel rendering This document describes a program that we developed for this purpose We have leveraged a number of public domain utilities and defacto standards in our development and hence this program does not have any fundamental algorithms it integrates existing ones effectively This describes briefly our implementation of the Z buffer rendering algorithm The rendering pipeline has the following steps 1 Reading the input file 2 Computing the light intensity at the vertices Later Gouraud shading is used for interpolating the light intensity 3 Computing the view transformation matrix 4 Applying the view transformation to all the vertices 5 Rasterization and writing to framebuffer 6 Writing framebuffer to a TARGA file Subsequently one can display the TARGA file by invoking a separate utility included with this package This rendering program leverages of several public domain utilities The matrix library is from the SPHIGS package from Brown University The view transformation matrix also is computed using the code from the SPHIGS package Rasterization is based on fixed point arithmetic Fixed point arithmetic library is from the directory accurate scan from Graphics Gems III contributed by Kurt Fleischer The rasterization code used in this program is a modification of some code from the same source We compute 24 bit color R G B at each pixel and write it to a TARGA file The functions to do write in TARGA file format are from the LUG library due to Raul Rivero The program sx11 to display a TARGA file is also from the same library We have extracted these two utilities from the LUG library and provided them in the subdirectories tga and sx11 Input File Format The file format we use is a modification of the Neutral File Format NFF described in the Standard Procedural Database SPD of Eric Haines The modified NFF is described in the file called NFF in this directory One can also look at the sample files In the NFF file format perspective projection is assumed back to contents Gossamer a Free Macintosh VR 3D Renderer by Jon Blossom jonbl microsoft com Gossamer 2 0 a real time 3D walkthrough engine for the Macintosh is now available for FREE Gossamer is a very fast general 3D polygon rendering engine This version radically improves speed over version 1 1 fixes a number of bugs and focuses on a more coherent user interface for experimenters Version 2 0 also supports object and world files based on the Rend386 PLG and WLD formats The Gossamer 2 0 package includes a number of sample worlds and objects ported directly from the PC to the Macintosh and there are others available on bulletin boards electronic services and ftp sites all over The package is available for anonymous ftp from ftp apple com in the pub VR graphics systems directory If you have a Macintosh and are interested in 3D graphics this will be well worth your time The system requires a 68020 or better processor Mac running system 7 or system 6 x with 32 bit color QuickDraw A color display is nice but not necessary If you like Gossamer 2 0 please let me know back to contents Antialiasing Issues by Arijan Siska arijan kette fer uni lj si I want to get some attention to the in my opinion a very serious issue antialiasing When a raytracer with a finite resolution obviously a resolution cannot be infinite renders an image jagged edges appear in picture or in case of an animation when difference between two consecutive frames is large when objects move fast animation tends to flicker These type of problems can be solved by two approaches supersampling is a very very expensive method since it involves much extra often unneeded calculation but generally it gives very good results image quality adaptive sampling implies that there exists some criterion function upon which you can decide whether you should subdivide further to gain a more precise answer or you should be satisfied with the approximation you already have Note that in general there is no way to make this decision function absolutely correct The best counterexample that I can think of is a thin wire fence in front of uniform background If you use textures with rapid changes it can happen that you subdivide to the maximum level 800f the pixels which is effectively supersampling but slower you need to evaluate criterion function all the time I don t see how some kind of preprocessing could help you with criterion function since all those reflections refractions are there Steven C Demlow demlow cis ohio state edu replies I played around with a variety of AA approaches in both my own ray tracer and the public domain POV ray tracer I tried various derivations and combinations of supersampling stochastic jittering adaptive methods and filtering For the animation project I was working on I ended up using 4x4 stochastically jittered grids on each pixel and a tent filter that extended into the cached of course grids of neighboring pixels I ve been working on using a hexagonal grid instead of a rectangular one this gets tricky when you try to overlap the arbitrarily sized filtering grids of adjacent pixels The hex grid supposedly provides close to an optimal ray distribution for AA purposes It sounds like you would do well to add filtering to your ray tracer it can help a lot The conclusion I came to after eight months of rendering on a bunch of HP7 0s was that ray tracing is not the way to go to generate a lot of high quality images I love ray tracing but there are reasons that it sees little use in production environments Andy Key ak hursley ibm com replies I implemented Whitted Adaptive Supersampling as my anti aliasing mechanism Really the test of seeing whether to subdivide is tiny compared to the cost of spawning a ray I support un anti aliased and whitted I was going to add unconditional supersampling to improve the case when I have fine detail textures but I am not sure it will buy me a noticeable difference if I do back to contents Microcosm by Abe Megahed of Cosmic Software cosmic world std com I include this here as there is a free demo and images available It s a nice system allowing a wide range of interactive techniques with ray tracing and last I heard they were adding support for native graphics packages e g Starbase on HP s multiple windows and picking they re up to version 1 4 or so by now This package was also the easiest system I ever dealt with for rendering on a network not that I ve dealt with a lot but I simply started up the daemons let the software know which computers to use HP workstations in my case and let the software suck up resources and render at great speeds Impressively painless EAH Microcosm Version 1 2 New Product Announcement Free Demonstration Version A new version of Microcosm is being released for many popular platforms including IBM PC MS DOS DEC Alpha DEC MIPS HP 9000 Series 700 Snake Sun Sparkstation IBM RS 6000 Microcosm offers the highest quality rendering features such as ray tracing texture mapping bump mapping and Phong shading as well as interactive animation capabilities A free demo version and over 100 example description files of animations simulations interactive environments objects and pictures is available via anonymous FTP What is Microcosm The Microcosm system is composed of a set of advanced 3D graphics routines which is controlled by a simple high level interpreted programming language called SMPL for Simulation Modeling Programming Language This gives even the novice programmer the power and flexibility to easily create graphics applications which could only previously be done with great difficulty and expense in low level languages such as C Since the language is interpreted you may change things and immediately re run your graphics program without waiting for the computer to re compile it It s fun and easy like programming an Apple II on steroids Most computer graphics intensive programs spend at least 950f their time in the rendering so using the interpreter to control the renderer doesn t slow the graphics down by more than 50ver a fully compiled program Features of Microcosm Microcosm incorporates a number of totally new and innovative rendering algorithms in a well integrated system Some interesting features are as follows Rendering Features Shading Language Surface Mapping Procedural Textures Real Time Soft Shadows Reflections and Transparency Refraction Interactive Coarse Ray Tracing Clean Line Silhouette Rendering Modes Shaded Rendering Modes Ray Tracing A Choice of Projections Hierarchy Stereo Rendering Modeling Features Procedural Modeling Fractals Variety of Primitives Extensibility Programming Features Easy to Read Syntax Procedural Block Structure Flexible Parameter Passing Built in Data Types Smart Arrays Nested Comments The demonstration version of Microcosm can be obtained by anonymous ftp at dpls dacc wisc edu pub graphics mcm mcm demo zip The demo version runs for 1 minute before quitting and also is unable to save files so it can be used only to preview simple renderings or animations A number of finished renderings are available in mcm images to illustrate the advanced rendering capabilities of Microcosm Also provided free are about 100 example description files to demonstrate the capabilities of Microcosm Please contact us for specific details about these or other platforms Any other information including price and or ordering information can be obtained as follows Cosmic Software Corp 1413 Mound St Madison Wisconsin 53711 cosmic world std com Tel 608 259 1776 FAX 608 233 4995 back to contents Fisheye Lens Distortion by Greg Ward greg pink lbl gov Almost all wide angle photographic lenses have a bit of this but in a rendering program it is easier to avoid In a perfect perspective image straight lines will always be straight no matter how wide the viewing angle becomes Viewing angles can never be equal or greater than 180 degrees however because the arc tangent blows up A full view angle close to the maximum will cause the center of the image to all but disappear and the view will be dominated by what surrounds the viewpoint Try it I guarantee you won t like it In order to get a view of 180 degrees or greater it is necessary to adopt some sort of perspective distortion Most commercial fisheye lenses use a distortion that causes distances from the center of the image to be proportional to the geometric angle from the central line of sight Another type of lens creates a view equivalent to taking a hemispherical image and projecting it onto a plane those such lenses are much harder to come by Another poster Benjohn Barnes mentioned that these effects are easier to achieve in a ray tracing program and he s probably right I didn t have too much trouble implementing these view types in Radiance and they come in quite handy I can even render a 360 degree fisheye view where the surround of the circular image is actually a single point Neat trick P S When it comes right down to it we all have eyes evolved from fishes back to contents Optical Ray Tracers A common question on sci optics is what ray tracers there are for lens design Here are some cullings EAH Mark Butterworth markb hpcss01 cup hp com address now invalid Instead of driving this subject in to the ground try the library at your university and see if they have Modern Optical Engineering by Warren J Smith he taught me Applied Optics and Optical Engineering by Kingslake volume 3 and volume 8 are good for this subject Warren Smith just published a new one 1992 that is a collection of lens designs I forget the title something like Optical Engineering a resource manual Published by McGraw Hill The lenses in this book are also available on a disk library for the Genesee ray tracing program Warren designed alot of the lenses used by Panavision just to mention one On the commercial side an excellent package is ORA s CODE V that s a Roman numeral 5 It s highly regarded and we ve been happy with it They ll let you have a free trial account on their dial up VAX Optical Research Associates is in Pasadena CA at 818 795 9101 J Sallay sallay scubed com In article ps7Mmch argil delphi com argil delphi com says Can anyone suggest a good commercial ray tracing program for general optical design We are planning on spending a reasonable amount like up to 1500 We have only experience with much more expensive packages I don t think you can beat Zemax in this price range See their ad in Photonics Spectra p 19 of the May 94 issue or Laser Focus World p 7 of May You can also send email to focusoft crl com They will send a free demo disk which is fully functional except that it won t save lenses They plan to post it to ftp servers as soon as they get a readme done Caution Focusoft is moving to Arizona and turning into Focus Software They hope to be operational by 1 June The new phone numbers are voice 602 749 5646 fax 602 749 0987 Ken got tired of the California government Steve Eckhardt skeckhardt mmm com If you have access to Mathematica Wolfram Research Inc there is a Notebook called LensLab available at MathSource wri com in directory pub Applications Engineering Other with the item 0204 343 It is a decent ray tracing program with an extensive set of functions for lenses mirrors prisms etc It is relatively slow unless you run Mathematica on a fast Workstation Quadra Pentium machine Rudolf Oldenbourg rudolfo mbl edu A good optical tracer is the new Mac version of Beam from Stellar Software PO Box 10183 Berkeley CA 94709 Fax 510 845 2139 I helped with the beta testing so I know it s good A David Beach d beach irl cri nz For a freeware optics ray tracer try irt52 zip in pub irt at herx1 colorado edu Use anonymous ftp to get this software It is written for MS DOS window and you need an unzip program to unzip it Djamshid Navabi djamshid lasa com I ve tried it can t get past the demo example without a GPF that causes Windows to quit to DOS the next time I try to run irt If I then try to run Windows it tells me something gruesome like invalid command processor or some such I m trying to compile a more responsible set of actions to send to the author but I wanted to mention it here to see if any one else has had the experience or if it may be my system Neal E Tornberg tornberg netcom com back to contents Correcting Normal Direction by Gavin Bell gavin krypton engr sgi com There are a lot of polygonal models out there with inconsistent surfaces The problem is this you re given some random set of polygons and you want to consistently orient them outwards so that your ray tracer or z buffer can use backface culling i e ignore visible backfaces and so speed performance Consistent orientation that is getting all the faces to be in clockwise orientation is fairly simple once you have the mesh of the object each shared edge must be traversed once in both directions So if two polygons share an edge and traverse it in the same direction then the order of vertices of one of the polygons is reversed Continue the process until all shared edges are traversed in both directions or until you get stuck e g a moebius strip doesn t work The next part is to know which side of the polygon set is the outside This can certainly be done manually but here s a method of doing it automatically EAH someone sorry the name was deleted in the posting writes The user picks a Seed polygon and I recursively grow a surface starting at that polygon a neighboring child polygon is considered to be flipped if the child traverses the two shared vertices in the same direction as the parent someone else sorry name deleted writes If you are not able to interactively pick such a seed polygon there is an automatic way but it takes time to write The idea is an extension of a point in polygon algorithm Basically to find if a point is within a polygon you can extend a ray from that point to infinity if the ray crosses an even number of edges of the polygon the point is outside where 0 is defined to be even If it crosses an odd number it is inside I think the concept here was to take a vertex and see which side was outside by ray tracing EAH A better method Consistently orient all of the polygons you need to know which edges are shared to do this and this isn t possible for some objects e g mobius strips Klein bottles etc Now choose the point P in the middle of the bounding box of the object For each triangle in the object compute a signed volume for the tetrahedron formed by the triangle and P Arrange your calculation so that the area will be positive if P is left hand side of the triangle and negative if P is on the right hand side of the triangle if your triangle is ABC then doing AB cross BC dot P will have this property Add up all of the volumes If the result is positive then the normals are oriented outside If the result is negative then the normals are oriented inside If the result is zero or very close to zero then the object is flat or has just as many concave parts as convex parts This will always work for completely enclosed objects and does the right thing for surfaces it chooses the orientation that marks the surface most convex It works for self intersecting objects Here s the code I use If you have Inventor 1 this is in the ivnorm code int i j int total v 0 SbVec3f average 0 0 0 0 0 0 for j 0 j degenerate continue for i 0 i nv i average verts f v i total v average float total v float result 0 0 for j 0 j degenerate continue for i 1 i nv 1 i SbVec3f v1 verts f v 0 average SbVec3f v2 verts f v i average SbVec3f v3 verts f v i 1 average float t v1 cross v2 dot v3 if f orientation Face CCW result t else if f orientation Face CW result t else assert 0 return result 0 back to contents Graphics Gems IV Table of Contents by Paul Heckbert ph cs cmu edu I trimmed out the author names for the sake of space Incidentally I ve found Gems IV to be subtly useful don t judge the articles just by their titles For example Detecting Intersection of a Rectangular Solid and a Convex Polyhedron by Ned Greene is actually about a method for determining if a bounding box is visible within a viewing frustum a very handy tool EAH Below is the table of contents for Graphics Gems IV This table also serves as an index to the code in the FTP collection Note that every article has text that appears in the book but not in the FTP archive and some articles contain no C or C code file or book chapter title and author directory chapter I POLYGONS AND POLYHEDRA centroid c I 1 Centroid of a Polygon convex test I 2 Testing the Convexity of a Polygon ptpoly weiler I 3 An Incremental Angle Point in Polygon Test ptpoly haines I 4 Point in Polygon Strategies delaunay I 5 Incremental Delaunay Triangulation vert norm I 6 Building Vertex Normals from an Unstructured Polygon List I 7 Detecting Intersection of a Rectangular Solid and a Convex Polyhedron collide c I 8 Fast Collision Detection of Moving Convex Polyhedra II GEOMETRY II 1 Distance to an Ellipsoid dist fast c II 2 Fast Linear Approximations of Euclidean Distance in Higher Dimensions outcode II 3 Direct Outcode Calculation for Faster Clip Testing sph poly c II 4 Computing the Area of a Spherical Polygon II 5 The Pleasures of Perp Dot Products II 6 Geometry for N Dimensional Graphics III TRANSFORMATIONS arcball III 1 Arcball Rotation Control III 2 Efficient Eigenvalues for Visualization inv fast c III 3 Fast Inversion of Length and Angle Preserving Matrices polar decomp III 4 Polar Matrix Decomposition euler angle III 5 Euler Angle Conversion III 6 Fiber Bundle Twist Reduction IV CURVES AND SURFACES data smooth IV 1 Smoothing and Interpolation with Finite Differences IV 2 Knot Insertion using Forward Differences IV 3 Converting a Rational Curve to a Standard Rational Bernstein Bezier Representation curve isect IV 4 Intersecting Parametric Cubic Curves by Midpoint Subdivision patch conv C IV 5 Converting Rectangular Patches into Bezier Triangles nurb polyg IV 6 Tessellation of NURB Surfaces IV 7 Equations of Cylinders and Cones implicit c IV 8 An Implicit Surface Polygonizer V RAY TRACING V 1 Computing the Intersection of a Line and a Cylinder ray cyl c V 2 Intersecting a Ray with a Cylinder vox traverse c V 3 Voxel Traversal along a 3D Line multi jitter V 4 Multi Jittered Sampling minray V 5 A Minimal Ray Tracer VI SHADING VI 1 A Fast Alternative to Phong s Specular Model VI 2 R E versus N H Specular Highlights VI 3 Fast Alternatives to Perlin s Bias and Gain Functions VI 4 Fence Shading VII FRAME BUFFER TECHNIQUES VII 1 XOR Drawing with Guaranteed Contrast VII 2 A Contrast Based Scalefactor for Luminance Display dyn range VII 3 High Dynamic Range Pixels VIII IMAGE PROCESSING emboss c VIII 1 Fast Embossing Effects on Raster Image Data coons warp c VIII 2 Bilinear Coons Patch Image Warping convolve c VIII 3 Fast Convolution with Packed Lookup Tables thin image c VIII 4 Efficient Binary Image Thinning using Neighborhood Maps clahe c VIII 5 Contrast Limited Adaptive Histogram Equalization mrsfoley im VIII 6 Ideal Tiles for Shading and Halftoning IX GRAPHIC DESIGN IX 1 Placing Text Labels on Maps and Diagrams graph layout IX 2 Dynamic Layout Algorithm to Display General Graphs X UTILITIES trilerp c X 1 Tri linear Interpolation interp fast c X 2 Faster Linear Interpolation vec mat X 3 C Vector and Matrix Algebra Routines GraphicsGems c X 4 C Header File and Vector Library V RAY TRACING back to contents Beyond Graphics Gems by Paul Heckbert ph cs cmu edu From the Preface of Gems IV which Paul posted to the net EAH In addition to the Graphics Gems series there are several other good sources for practical computer graphics techniques One of these is the column Jim Blinn s Corner that appears in the journal IEEE Computer Graphics and Applications Another is the book A Programmer s Geometry by Adrian Bowyer and John Woodwark Butterworth s London 1983 which is full of analytic geometry formulas A mix of analytic geometry and basic computer graphics formulas is contained in the book Computer Graphics Handbook Geometry and Mathematics by Michael E Mortensen Industrial Press New York 1990 Another excellent source is of course graphics textbooks back to contents Radiosity vs Ray Tracing by Rico Tsang csrico cs ust hk I made a few minor fixes but otherwise this was a nice cheat sheet summary of the functional vs algorithmic differences between meshed radiosity and classical ray tracing EAH Radiosity Ray Tracing work best to model work best to model 1 Area light sources 1 Point light sources 2 Diffuse reflections 2 Specular reflections 3 Color bleeding 3 Refraction effects 4 Soft shadows 4 Sharp shadows Limitations of Radiosity 1 All surfaces are assumed to be perfect diffuse reflectors 2 Specular reflections and transparent effects cannot efficiently modelled 3 Time storage consuming For n surface patches in a scene you need to calculate and store n 2 form factors If you use the progressive refinement radiosity method or hierarchical radiosity you can minimize the storage requirement for storing the form factors Advantages of Radiosity 1 The calculation of radiosities is view independent Once it does so a view of the environment can be generated with relatively little effort i e via gouraud interpolation for any camera position provides the capability of interactive walkthrough 2 With the progressive refinement method a geometrically correct view of the environment can be displayed almost immediately back to contents ACM SIGGRAPH Online Bibliography Updated by Frank Kappe fkappe iicm tu graz ac at This is to announce that the well known ACM SIGGRAPH Online Bibliography that holds some 16 000 references to computer grahics literature has been updated The ACM SIGGRAPH Online Bibliography Database was compiled by Stephen N Spencer spencer cgrg ohio state edu with help from various contributors The data set is available through the Hyper G server of the Graz University of Technology either by WWW protocol http www tu graz ac at CSIGGRAPHbib or by Gopher protocol gopher gopher tu graz ac at 11SIGGRAPHbib or using a Hyper G native client such as Harmony for UNIX X Windows which works best of course If you are interested in obtaining a copy of Harmony please look at ftp iicm tu graz ac at pub Hyper G Harmony for downloading instructions People without clients may also try telnet info tu graz ac at to access the Hyper G server of Graz University of Technology More information about the the ACM SIGGRAPH Online Bibliography Project can be reached from the URLs mentioned above The bibliography can be FTP ed from siggraph org publications bibliography EAH back to contents How to be Notified of New POV Releases The official POV distribution site is ftp uwa edu au This site has become quite active and holds many POV scene files and utilities as well as POV itself As an adjunct to this site a mailer has been set up which permits file requests to be made by email and which also manages a mailing list The site and the list itself is maintained by a member of the POV Team Chris Cason cjcason yarrow wt uwa edu au You can request that your name be placed on one or both of the POV mailing lists These are not normal mailing lists in that you cannot submit messages for them only the POV Team can The lists are as follows ANNOUNCE Used when new releases of POV are made This includes POV related items from the POV Team such as the soon to be released hypertext help system NEWS Used to send new issues of POV News and anything else relevant to POV such as new publications magazine articles etc Volume on both of these lists will be extremely low perhaps only one message per month if even that This is the easiest way for POV users to be informed of patches bug fixes new releases new features release dates for new versions and the actual release of new versions To join these lists mail a message to povmail uniwa uwa edu au The subject of the message is unimportant In the body of the message place the commands JOIN ANNOUNCE to join the announce mailing list JOIN NEWS to join the news mailing list or JOIN ALL to join both You should receive a reply indicating that your request was successful If you don t please try again For more information please mail the above address with a message containing the word HELP on the first line back to contents PoVSB Windows based Modeler v0 85 by Jeff Hauswirth jhauswir carbon denver colorado edu What s new Bezier Surfaces A help file PoVSB is now shareware at 30 Everything is functional except saving the Bezier objects Exporting Bezier objects to PoV is functional PoVSB is a Windows based modeler for the Persistence of Vision Raytracer The goal of PoVSB is to allow users of PoV to quickly and easily design scenes in the Windows environment with true camera preview of the scene so no guess work is involved I would like to collect a bunch of PoVSB example files to include with PoVSB and to also make them available via ftp so other people can use them If anyone is interested just e mail me your example files to include with PoVSB I have included two example files teacup and satellite Try rendering the satellite with and without the MB PoV option With the MB option it was 6 times faster if I remember right I would like to get some feedback from all the people with PoVSB which I think is up near 350 I want to know what new features you would like PoVSB has been tested on 386 SX 4M up to 486 66 16M The 386 SX had trouble with loading the teacup example file Other than that I have found no problems Features Four view of scene 3 ISO views 1 Camera view Objects supported Sphere Box Plane Cone Cylinder Torus Height Fields Bezier Surfaces CSG Union Merge Intersection Difference RAW Only flat triangle output available for now Interactive transformations of objects Lights Point Spot Multiple Layers Textures Customizable add your own textures How to get PoVSB ftp to vincent iastate edu Username anonymous jhaus Password YOUR USERNAME YOUR EMAIL HOST If you already have PoVSB you only need to get povsbXX zip Otherwise you need to get povsb zip back to contents Porting Rayshade PBM etc from Unix to DOS by Mike Castle mcastle mcs213k cs umr edu Amazingly enough Jasen M Mabus said Where can I find PBMtools a preprocessor implementor and CoProcessor emulator for 386 in DOS executable I ported pbmplus using djgpp a couple years back djgpp is a development environment by DJ Delorie that includes a homegrown dosextender called go32 gcc g compilers flex bison assorted binary utilities ar ld nm etc make and so on This environment is an eclectic mix of unixish and dosish calls but is a very workable environment My port of pbmplus can be found on any simtel archive in graphics pbmpl19d zip such as oak oakland edu in pub msdos graphics pbm djgpp can also be found in the djgpp dir pub msdos djgpp on oak You could scan cpp from the djgpp distribution and have a working preprocessor I included the then current emu387 387 emulator from the djgpp package in my pbmplus port however that was some time ago There are newer and better emulators that can be found in the djgpp archives Of course the emu387 and wmemu387 another emulator compatible with go32 but done by someone else will only work with go32 binaries The go32 included with my pbmplus port is out of date and you may want to get the most recent go32 exe from the djgpp packages you may also have to run a program called dpmifix on the pbmplus binaries to get things working correctly i m not sure as i don t use dos much anymore having switched to os 2 and so i m not quite up on djgpp and stuff and i don t even have my own copy of my pbmplus port anymore so btw i used the djgpp package to port rayshade quite some time ago but as there was already a 386 port done using a commercial dos extender never made it available The port was very straight forward and only required the normal flex lex bison yacc fixes such as rayshades misuse of the yyline action 8 3 file name fixups and binary mode stdin stdout It worked very well including support for RLE files i ported the URT as well cpp and so on back to contents REYES Patents William C Archibald billa entropys sps mot com Is REYES patented Pixar holds three at last count patents including US Patent Number 5 025 400 on Pseudo random point sampling techniques in computer graphics This includes claims that cover stochastic ray tracing as well as what you are probably referring to by REYES If so what part of the algorithm Clearly stochastic sampling techniques as they apply to computer graphics Is one allowed to implement the algorithm I believe that in the U S A one is allowed to implement the algorithm for the purposes of studying it and trade offs that may be involved One is not allowed to redistribute any implementations without permission as that is the very thing that patent law is set up to protect against and in a separate note by the same author In patent 5 025 400 the claims go on for 4 5 pages 9 columns of legalese and they seem to pretty much make claim to usage w respect to lens effects depth of field motion blur temporal jitter penumbra and other soft shadow effect and just about every variation of jittering reflected rays of objects for any reason you might imaging I ve not been able to really pin down good old fashioned anti aliasing anywhere in the claims though back to contents Going from AutoCAD and 3DS into Ray Tracing by Sean Ross rosss CSOS ORST EDU Well for starters saying one raytracer is better than the others is guaranteed to cause a flame fest of amazing proportions so I will just tell you about my experience so far and let you make your own determinations What I discovered from following this group for a while and reading the Mini FAQ is that there are quite a few different raytracers around with different capabilities I found Vivid a bit rough to get started with and therefore tried PoVray it s been great so far I find it easy to use because the language is fairly intuitive What has turned out to be easiest for me to create good raytracings with a fairly short learning curve is using the following method Use AutoCAD Release 12 with AME to create the initial objects AME allows very easy creation of complex 3d objects using addition subtraction intersection etc Export the finished objects into 3d Studio I m using ver 1 to set the camera and lighting Assign surfaces to all objects with standard names like surface1 etc If you don t have access to AutoCAD and or 3D Studio try using Moray it s shareware 50 and seems to be easy to use and well supported Use 3DS2POV program to convert the 3d studio file to a PoV file and include file Edit the resulting pov file and replace 3d studio s surfaces with the much better surfaces included with pov I ve also found it very simple to modify these surfaces to do almost anything Render sample files using a small size 160 x 100 and adjust any settings you don t like in the pov file Start the final rendering with high quality anti aliasing and a large size and plan on not using your system for a while if you re using a lowly 486DX266 w 8MB like me My finished quality renderings generally take about 8 hours to process for a 2048 x 2048 image and I consider these images to be fairly simple not too many complex objects If the above doesn t sound like too much work give PoVray a try it s given me very good results with a negligible learning curve I plan on trying out some of the others available especially Radiance because of its radiosity features but I haven t got around to it yet If anyone else has any suggestions on how I might improve upon the methods I described above I would be greatly interested By the way just one warning after I started creating these images I find myself dedicating a pretty good amount of time to it I think it s pretty addictive so be careful back to contents Computer Lego Modeling by Paul Gyugyi paul gyugyi win net Check out the files on earthsea stanford edu in the ftp pub lego cad click and ftp pub lego cad rayshade directories They include 1 A library of high detail shape definitions for Rayshade a 3D modelling ray tracing program legolib ray 2 A definition of a language LADEL for specifying brick types and positions 3 A compiler to convert LADEL files to rayshade input files that use the above library of brick definitions 4 A new extension to the compiler that generates a 3D wire frame image from a LADEL file You can fly around and rotate it It uses an Xwindows library that is similar to GL called VOGL and runs on UN X machines There is no documentation for most of this stuff but if you want to try it out email me any questions you have and I ll start creating a how to back to contents Rowe s Ray Tracing World BBS by Harry Rowe Harry Rowe wedowind meaddata com phone 513 866 8181 v 32bis Dayton OH I have a new ray tracing BBS No fees It does require user to have Windows 3 1 and special client software which can be downloaded on the first call It is Excalibur tm based and is a 100Windows GUI BBS I only carry DOS Windows tracers but also have tons of objects textures converters etc I have most of what Compuserve GRAPHDEV has in the way of RT utilities I primarily support Polyray v1 7 and Imagine 3 0 for DOS We also have expert 3DS users Harry has recently made a nice 500 line summary guide to the major POV utilities with 4 15 lines about each one I won t put it here but contact him for where it is or if all else fails contact me and I ll send you the old copy I have EAH back to contents On Using BSP trees by Benton Jackson benton fenriswolf com BSP trees are a nice technique for doing 3D and avoiding z buffering in games You partition a static environment with a binary tree hierarchy of cutting planes classifying everything in the node as in front of or behind the plane of some given polygon and splitting things cut by the plane Note that this is different than the BSP trees used in ray tracing where the planes are independent of the polygons and are essentially a more flexible octree like structure Worth understanding in general EAH Do I have to build a new BSP tree for all visible polygons at each frame redraw This is what I suspect but I can t help thinking that there is something more I could do to improve calculation times if I had separate BSP trees for each shape I m surprised that isn t in the FAQ That s the whole point of BSP trees Based on the current viewpoint if it is in front of the root face draw the back tree then the face then the front tree This works since that face is guaranteed to be in front of everything on one side of the tree and behind everything on the other side Which way you go depends on the viewpoint Cool huh Like this DrawBSP tree B if B return if in front of viewpoint B face DrawBSP B back DrawFace B face DrawBSP B front else DrawBSP B front DrawFace B face DrawBSP B back This doesn t completely depth sort the faces But you don t have to You just need to ensure that a face that obscures another faces is drawn in the correct order That s what this does If an object moves then the tree has to be rebuilt I think there is a way to merge BSP trees but I don t know how Anybody back to contents Books about Commercial Renderers by Don Lewis Jimbo and Yury German 3D Studio 3 0 Don Lewis djlewis ualr edu writes Try Inside 3D STUDIO Release 3 comes with a CDROM of sample DXF s and images and maps Listed as ISBN 1 56205 075 3 price 49 95 USA 65 95 CAN L46 99 Net U K inc of VAT About the CD Meshes Texture maps Bump maps Graphics file format conversion utility Special effects filters Utilities for image viewing printing and conversion windows and dos An updated Autodesk animation player Files for exercises in the book etc I like the book and a lot applies to 3DStudio 2 0 as well Jimbo Jimbo agdesign demon co uk writes Inside 3D Studio Author s Steven D Elliott Phillip L Miller Gregory G Pyros ISBN 1 56205 075 3 Publishers New Riders Publishing An excellent book including a CD unfortunately doesn t include the IPAS routines mentioned numerous times throughout 3D Studio Applied Author s Nancy Fulton ISBN 0 929870 24 7 Publishers Advanstar Communications Inc Imagine system Question My uncle has this and would like to know if there are any other references for IMAGINE that are a bit easier to understand for those less technologically literate Yury German yury bknight jpr com writes Yes there is a great book it s called Understanding Imagine Steve Worley is the author Now the book is Understanding Imagine 2 0 for the 2 0 version In a few months the book will be out for Understanding Imagine 3 0 The first book was done with the Amiga computer in mind The 3 0 book might be done for both computers If you want you can email Steve at worley cup portal com for information The books are great with alot of humor and all the things needed to make manuals easy and understandable back to contents Eric Haines erich acm org Ray Tracing News Volume 7 Number 5 Ray Tracing News Volume 7 Number 5 Ray Tracing News Volume 7 Number 5 Ray Tracing News Volume 7 Number 5 Ray Tracing News Volume 7 Number 5 Ray Tracing News Volume 7 Number 5 Ray Tracing News Volume 7 Number 5 Ray Tracing News Volume 7 Number 5 Ray Tracing News Volume 7 Number 5 Ray Tracing News Volume 7 Number 5 http www acm org tog resources RTNews html rtnv7n5 html http www acm org tog resources RTNews html rtnv7n5 html http www acm org tog resources RTNews html rtnv7n5 html http www acm org tog resources RTNews html rtnv7n5 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv8n1.html%%==%%Ray Tracing News, Volume 8, Number 1%%==%%Ray Tracing News "Light Makes Right" January 23, 1995 Volume 8, Number 1 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%103751%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right January 23 1995 Volume 8 Number 1 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1994 1995 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews wuarchive wustl edu graphics graphics RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction People Fetishes and Perversions by Doug Andersen Ray Tracing Roundup New Web Sites of Note by Eric Haines MGF Materials and Geometry Format by Greg Ward Blue Moon Rendering Tools RenderMan Implementation by Larry Gritz RenderMan Implementation Paper On Line by Philipp Slusallek TGA BBS CD ROM review by Eric Haines Review of Syndesis Avalon CDROM by Keith Rule SIRDS SIS stereograms Holusions whatever by Eric Haines Two Books on Stereograms by Eric Haines Siggraph Report The Exhibits by Techs Avery Scanline Rendering Previewer by Eric Haines due to Chris Cason Raysmith by Eduardo Bustillo Iceta Terminology Survey Results by Peter Shirley Radiosity Online A Bibliography by Ian Ashdown Jevans Temporal Coherence for Ray Tracing by Eric Haines Reviews of Encyclopedia of Graphics File Formats from Steve Lamont John Grieggs Tom Lane Brian Erwin and Andy Key SDSC Image Tools library by Matt Hughes LUG Library v1 0 by Raul Rivero Introduction Before I start a quick request if you re a commercial user of Radiance Greg Ward greg hobbes lbl gov the author would like to hear from you as soon as possible Radiance is developed under the Department of Energy s funding If you can give a testimonial that this package has helped you commercially you could help keep its funding intact You can also contact Greg via 510 486 4757 voice 510 486 4089 fax Well I was going to talk about the great research presented at SIGGRAPH this year but if you went then you already know if you didn t then you should consider getting the Proceedings For some reason I found more of the papers directly useful to me this year than in the past few years So instead I ll talk about something totally mundane and banal and yet totally amazing Saturday morning cartoons Specifically Reboot on ABC It s an entirely 3D computer graphics rendered cartoon The character animation is not fantastic there are no shadows and one can make a whole bunch of other quibbles but who cares This show makes it clear how far computer graphics has come that it s used for a weekly cartoon show It s fun to watch and figure out how effects were done and there are some nice animated textures and whatnot Some of the models are wonderfully elaborate I watch it and say to myself hours and hours of modeling The show even answered a question I ve had what does it look like if you move something through a static turbulence function That is you apply Perlin noise and get a rendering of a marble ball now what happens if the ball moves but the noise function does not move along with it I figured a swimming through marble effect would happen They use this effect it s a feature not a bug for an animated worm like thing that crawls around on the main bad guy Anyway how can you dislike a show where the old wise character is named Phong The other banal yet cool thing I ve noticed is Magic Carpet for the Intel PC There s a demo version at ftp uml edu and ftp uwp edu in msdos games demos magic zip Pretty amazing stuff you fly over textured 3D terrain and can bank and change altitude sorta like DOOM without the fixed head perspective Definitely worth checking out even if you don t like games The real game includes output for 3D glasses well I can see 3D with my regular glasses but you know what I mean and also random dot stereogram output in realtime Amusing As usual there s a big backlog of stuff I haven t put in this issue but I thought I d get this one out the door Still there should be more than enough to keep you busy The announcement of a RenderMan implementation from a non Pixar source and shareware at that is probably the most amazing thing in this issue and there are lots of other interesting sites and resources More when I find the time back to contents People Stefan Didak sdidak animagic knoware nl Doelstraat 147 3011 AJ Rotterdam The Netherlands 31 10 412 57 19 One line description 3D Studio Die Hard User some call it expert Additional information Title managing director Company Animagic Animagic Development Actually doing computer graphics animations and development i e having fun and getting paid along the way Using PC Platform 3D Studio proprietary tools SGI Platform Alias PowerAnimator proprietary tools Interests Almost anything that is related to three dimensional computer graphics animations raytracing commercial productions broadcast design high end digital video and commercial production software development graphics Special Interests Autodesk s 3D Studio and development of IPAS routines for 3D Studio So what about me I m both a programmer and computer animator that has been able to combine the best of both worlds It has been five years since I formed my own business called Animagic specialized in 3D computer graphics for broadcast design Alongside this development of software also played a major role Currently the development and production departments are separated due to the confusion created by our extensive list of services The development department is currently developing IPAS routines for 3D Studio and in house proprietary tools for both the PC and the Silicon Graphics platforms It has been five wonderful years and with the current state of progress the next five years will be even better in terms of new development I started with computer graphics back in late 1985 when the Commodore Amiga computers were first introduced This is where I got my first taste for computer graphics and animations with a package called Videoscape from Aegis designed by Allen Hastings currently the developer of Lightwave By today s standards this package would be a real old timer where 3D geometry had to be entered by hand coordinates and polygons in ASCII So back in those days creating a twenty second animation was about a month s work Today of course this can be done in just hours I ve been able to follow the evolution in the computer graphics industry from that point on and quickly started to do some experimental raytracing with the Amiga port of DBW Render That s where the fascination of raytracing got the best of me I ve used those good old Amigas for a few years and about four years ago switched to bigger and better platforms and software and never regretted it back to contents Fetishes and Perversions by Doug Andersen douga eskimo com My automatic keyword searcher a wonderful thing see RTNv7n2 the article on Elib turned this up on NetNews in alt sex EAH Hadley Woolf hadley woolf digitec co za wrote Hi All I am looking for a good RAY TRACING program Preferably WINDOWS for ease of use but otherwise DOS ok I hear there are good shareware freeware of this type of program available Please reply if convenient by phone voice 011 648 6629 or otherwise Please take this to alt personals fetish ray tracers And for the record this radiosity stuff is sick sick sick back to contents Ray Tracing Roundup VolPack fast high quality volume rendering library from Lacroute Levoy Here is the FTP site info graphics stanford edu 36 22 0 39 pub volpack volpack 1 0b2 tar Z current version of the VolPack volume rendering library Includes source example programs user s manual and man pages Data sets and a Tcl based application are also available Phil Lacroute lacroute weevil stanford edu Here is the WWW site info http www graphics stanford edu software volpack VolPack The paper related to this new much faster volume rendering technique is in SIGGRAPH 94 p 451 EAH Phil Lacroute lacroute weevil Stanford EDU The book Texturing and Modeling A Procedural Approach edited by David Ebert from Academic Press is now out see RTNv7n3 for a review The other co authors are Ken Musgrave Darwyn Peachey Ken Perlin and Steve Worley They have graciously provided the book s disk s code at the FTP site archive cs umbc edu texture Even if you have the disk you might want to download this code as all bugfixes and additions reside here L Systems Trees images and program For those of you out there that were interested in my tree pictures they are available on WWW now The URL is http hill lut ac uk TestStuff trees There are only the pictures there at the moment but I intend to write some stuff about L Systems etc so check it out in a while a few weeks A copy of the executable may be there soon as well I recently grabbed the executable though I haven t had a chance to unzip it yet His images are great EAH Phil Drinkwater P J Drinkwater1 student lut ac uk The Graphics Gems I IV code distribution has had a few minor bugfixes and additions Personally I ve diddled a bit with yes my favorite the point in polygon test and made a new routine which is a whopping 15 0 000000aster for triangles Hey it keeps me off the streets The distribution is available by FTP from princeton edu pub Graphics though this may move to Stanford soon since Craig Kolb is now there Computer Graphics Labs WWW Site I have finally joined the 1990s and set up a www home page It has several images and postscript copies of some of my papers It also has a listing of computer graphics labs please send me yours to include http www graphics cornell edu shirley Also ftp ray graphics cornell edu has stuff for those without Mosaic Several people have asked for copies of some of my hard to find papers so to exploit parallelism I have put them in an ftp site site ftp cs indiana edu 129 79 254 191 directory pub shirley Pete Shirley shirley graphics cornell edu BSP FAQ I have just finished installing a rough WWW document structure for the BSP Tree FAQ If you are interested in keeping track of my progress you can look here The FAQ is just getting underway and may take a while so don t expect a whole lot right now Thanks to everybody who has encouraged me or provided assistance http www graphics cornell edu bspfaq Bretton Wade bwade graphics cornell edu L system Educational Package Anne Burns aburns aurora liunet edu has written an L System set of tutorials which run on an Intel PC for teaching her college class She has made them available via FTP on cgcr gsu edu with login and password cgcr The file is pub IBM PC flora aburns zip I have looked at it briefly and it looks pretty interesting there are programs to grow various 2D L system plants while also teaching about the algorithms used and pointing to references for more information Also even old PC s look to be able to run this software Rayshade Related It looks like the time has come to throw in the towel I have a version 4 1 floating around waiting for me to get to some documentation hacking and general cleaning up But between dissertation research writing moving to the opposite coast and attempting to have something resembling a Life it looks unlikely that I ll be able to wrap things up before the end of the year As such it s probably best if I simply stopped work on the freely available version of rayshade for the time being and let whoever wants to release a rayshade based netshade or whatever go to it If I am not mistaken a group of interested people have already set up a mailing list David Nick to discuss such matters I ll let the TraceCore folks speak up for themselves on this I ll keep the mailing list going until the netshade future looks a bit more firm Thanks to everybody who has contributed to rayshade over the years and thanks for your patience during the last couple of years in particular Craig Kolb cek cs princeton edu though he s now at Stanford Since Craig bowed out there s been confusion on what the latest version is or should be Here s one of the latest This is an unofficial release of Rayshade called 4 0 6 3 was 4 1 because of the new features included I expect there will be problems and such and welcome patches and suggestions I have placed the file on ftp tbird cc iastate edu pub rayshade rayshade 4 0 6 3 tar gz so grab it and make comments There is a lot of cleaning up to do yet which I hope to do over the next few weeks between working and preparing for classes this semester Comments bug fixes suggestions flames and hard drives welcome Michael Graff explorer vorpal com Rayshade Flame Texture Enhancement Available This is an enhancement to rayshade version 4 0 so it can generate animated fire to further enhance the realism of scenes You can get the enhancement via anonymous FTP from iamsun unibe ch 130 92 64 10 Graphics flame tar gz and Graphics flame examples tar This work is based on the Article of Ken Perlin Ken Perlin An Image Synthesizer p 285 296 SIGGRAPH 85 Number 3 July 1985 and the book of A and M Watt A Watt and M Watt Advanced Animation and Rendering Techniques Addison Wesley 1992 where all the principles used here are described To explain my work in few words it can be said that the flame is generated by simulating and animating turbulence Feel free to contact me for questions and suggestions Reto Mani mani iam unibe ch Latest Amiga Rayshade I just uploaded rayshade 4 0 6 3 source 68020 68881 binaries several utilities on wuarchive It should be on an aminet site near you soon in gfx 3d rayshade 4 0 6 3 lha e g wuarchive wustl edu pub aminet Kriton Kyrimis theseas ntua gr Princeton EDU More Rayshade Web Sites http www graphics stanford edu cek rayshade The new official site bop up a level and see a picture of Craig http web mit edu afs athena activity c cgs lib html rayshade guide guide html Rayshade user s guide and reference manual by Craig Kolb http web mit edu afs athena activity c cgs lib rayshade surf archive of various material definitions and other rh files Magazine News Bridget Testa BrigittaT aol com has an article in the November 1994 issue of Computer Graphics World about the Internet and computer graphics There are some nice images made with POV pointers to net resources already dated and quotes from comp graphics luminaries like Steve Hollasch John Grieggs John Cristy Christy and some guy named Erich Haines Eric Check out the August 1994 issue of Computer Graphics the cover is an image done by one of my students He is an undergraduate and this was his first only graphics course The students write their ray tracers from scratch The cover shows a comparison of a simple scene rendered with 3D Studio POV Ray and Radiance there is also a short article about the cover EAH Scott Owen matgso ironduke CS Gsu EDU Georgia State University Tcl SIPP tsipp 3 1a available Tcl SIPP provides a 3D image specification and rendering toolkit for use with Tcl and Tk It is based on SIPP the SImple Polygon Processor a library for creating 3 dimensional scenes and rendering them using a scan line z buffer algorithm Tcl is an easy to use powerful interpretive programming language that is designed to be imbeddable in applications Tk is a X11 toolkit programmed in Tcl It is available from ftp neosoft com pub tcl distrib tsipp3 1a tar gz or harbor ecn purdue edu pub tcl extensions tsipp3 1a tar gz Mark Diekhans markd sugar NeoSoft COM You can subscribe to the Wavelet Digest mailing list of the Industrial Mathematics Initiative Department of Mathematics University of South Carolina by writing wavelet math scarolina edu More information archives and papers can be found by anonymous ftp to ftp math scarolina edu in the directories under pub wavelet and pub imi 93 and by connecting to our gopher server at gopher math scarolina edu Wim Sweldens Bjorn Jawerth Avalon News As you should know avalon chinalake navy mil is a 3D model archive which is like saying Mount Everest is a big hill Its name will change soon to avalon vislab navy mil though the old name will still work for awhile The bad news is that Kubota s mirroring site ftp kpc com is no longer mirroring avalon If you can offer your site as a mirror let Francisco DeJesus dejesus archimedes chinalake navy mil know The good news is that Avalon s resources continue to grow There are working demos of Caligari s TrueSpace 3D Modeling program look for file tsdemo zip and for Real3D files real3d zip unzip them onto disks and load from there a windows based graphics animation package Real3d does inverse kinematics spline based modelling collision detection particles etc The site is also fast becoming a hot spot for 3D Studio users with IPAS add ons and other goodies becoming available Another Optical Ray Tracer Jonathan Abourbih writes I am looking for a program for my Macintosh IIci that will do light ray tracing diagrams i e I want to be able to enter focal lengths diameters lens thicknesses distances between lenses etc and it should draw the path of a light ray through the lens system In the last 6 months or so a company called Stellar Software came out with a Mac version of their Beam Two and Three Four optical ray tracer programs People I know at NASA Ames who used the PC versions seemed happy with them The Two Three etc refer to two dim three dim etc optics placement and views Beam Two 89 Beam Three 289 Beam Four 889 as Bob Knowlden noted what four dim lighting could mean is anyone s guess EAH Stellar Software P O Box 10183 Berkeley CA 94709 510 845 8405 voice 510 845 2139 fax Amara Graps agraps netcom com see RTNv7n5 for other optical ray tracers EAH Ray Dream Designer Mailing List List owner of raydream l an Internet mailing list for discussion announcements of products from Ray Dream Inc For subscriptions send a message to listserv cornell edu with the following body text subscribe raydream l FIRSTNAME LASTNAME Your address will be picked up by the listserv software p s Ray Dream Designer 3 1 for PowerMac has shipped John T Chapman jtc1 cornell edu Doom like Techniques If you re interested in looking at DOOM like game engines check ftp funet fi pub msdos games programming 3dlab103 zip or garbo uwasa fi pc turbopas 3dlab103 zip Kimmo Fredriksson kfredrik cc Helsinki FI There is a cooperative InterNet effort headed by Chris Laurel to create a sorta Doom like 3d engine called wt what s that never capitalized The main ftp site for it is magoo uwsuper edu and the mailing list subscription is wtm request magoo uwsuper edu Mail to the group is wtm magoo uwsuper edu The current version available I think is wt 0 05 Lawson 103t english west cscwc pima edu Tiny Review of Ray Tracing Worlds with POV Ray v2 2 Waite Group book I have had it for a couple of weeks now From what I have seen so far it is a good book to use for a tutorial sort of thing for Moray and it does go into some detail with regard to editing povray source but I m not so sure that I would recommend it strictly as a reference guide for povray As a reference source for povray it comes nowhere near as complete as the povray manual Dan Kressin wrench jakesys sol net Latest version of XAERO is v1 5 1 see RTNv7n5 for info on this package Andreas Ziegler aziegler hermes informatik uni stuttgart de GFX News For issues of this electronic magazine mentioned in RTNv7n1 check out Mosaic WWW users http barchetta stu rpi edu FTP users barchetta stu rpi edu pub gfx news current If your name server has difficulty resolving our address the IP is 128 113 85 172 Also if the FTP server is badly lagged or not responding please let me know and I ll provide an alternate server to use I personally couldn t connect when I tried but who knows EAH Eric Hsiao hsiaoe rpi edu POV Related I ve had a couple people express interest in a compilation of POV I made on a RS6000 model 250 i think If anybody wants it ftp to ftp povray org The file povray rs6 and an accompanying text file are in the pub povray incoming misc directory No guarantees but I hope it helps Michael Sanchez msanche ux5 cso uiuc edu POV related WWW sites http www cm cf ac uk Ray Tracing excellent for all ray tracing EAH http www cm cf ac uk Ray Tracing RT Bibliography html http www uio no mwatz pov utilities html http tomservo st hmc edu files raytrace html this last one did not work for me EAH Albert Goodman agoodman deakin edu au My BBS is carrying all back issues of RTN because nobody does it in Belgium to my knowledge so if a european guy who can t use ftp ask you where he can get RTN issues feel free to give him my number Virtual Access BBS Belgium 32 69 45 51 77 David Delabassee delabass nic INbe net Major Announcement New POV FTP Site Despite the following ftp uwa edu au continues to be the official secondary POV Ray FTP site until further notice A new FTP site has been set up for POV Ray It is ftp povray org Yes our very own domain And instead of a 50mB disk allocation it currently has about 1 7 gigabytes of disk space available Currently it has more or less what was and still is up at uniwa but you can expect it to expand over time particularly when the POV CD ROM is published This machine is connected via a T1 to the Internet Currently it shares the same T1 as wcarchive cdrom com so in reality you ll be sharing the link with up to 140 other people at peak load times But the machine itself is more or less ours for the time being it is provided as a free community service by Walnut Creek CD ROM and has no other FTP sites hosted right now This will probably change sooner or later Please start using this site and do let me know of problems via email to ftp bugs povray org I ve only just finished configuring the FTPD and it s possible there may be a few glitches here and there BTW I d like to thank Walnut Creek for offering us this free no strings attached service Get their catalogue by fingering info cdrom com if you want more information Also many thanks go to Toivo Pedaste of the UWA for tolerating us for so long In reality this is the site for POV Ray related stuff the uwa site is no longer updated near as I can tell EAH Chris Cason cjcason yarrow wt uwa edu au Dear Radiance User This is another reminder that if you want to sign up for the unmoderated Radiance discussion list send mail requesting subscription to radiance request hobbes lbl gov Please do not send administrative requests to the discussion list itself radiance discuss hobbes lbl gov as they will be immediately forwarded to the whole discussion group which is a rather poor self introduction Also you can pick up the most recent as well as past digests by anonymous ftp from hobbes lbl gov 128 3 12 38 in the pub digest directory Greg Ward greg hobbes lbl gov back to contents New Web Sites of Note by Eric Haines I finally got access to the World Wide Web in a non stupid form and am now wasting time during compilation clicking on colored words A number of interesting computer graphics sites exist and here are some of my finds from watching Usenet traffic and just general searching I haven t been around long enough to be critical and judge what are the best sites rather this is a list which encompasses different facets of computer graphics Educational commercial hobbyist and BBS related sites and others are listed many of which are jump off points for other worthwhile pages http www cm cf ac uk Ray Tracing actually an old site but it bears repeating Points to all sorts of ray tracing related things A great place to start explorations Contact Ian The Grim Grimstead Ian Grimstead cm cf ac uk http mambo ucsc edu psl cg html A great site jump off spot for other computer graphics programs and sites http www graphics cornell edu A good place as any to jump off and see what s going on in research at various computer graphics programs around the world http www mcs com bcleach www illusions html Illusions a computer graphic animation related magazine covers 3D Studio Lightwave Alias Wavefront as well as SGI in general Contact Brian Leach bcleach popmail mcs com http www lightside com dani 3D Web a site about the computer graphics industry Includes resumes of computer graphics people interested in various sorts of work pointers to various production houses etc http www tgax com The Graphics Alternative BBS now has a Web homepage Under construction but has some nice bits to it Contact Adam Shiffman adams tgax com adams ccnet com http www sgi com Silicon Graphics Inc homepage pretty but annoying if you have a slow link so here are some direct addresses http www sgi com grafica GraficaObscura an eclectic collection of images hints and essays related to graphics Contact Paul Haeberli paul sgi com http www sgi com tech openGL openGL html OpenGL related http www algorithm com cwatkins algor html Chris Watkins company s homepage also includes a number of pointers to other pages worth checking out Give it a look http metallica prakinf tu ilmenau de GOOD html the GOOD raytracer and modeller and whatnot see RTNv7n1 and RTNv7n3 Contact Ekki Beier Ekkehard Beier Prakinf TU Ilmenau DE http www cs tu berlin de lulli xray xray html the XRay ray tracer a new one in pre pre release for MS DOS and Windows though the code s portable to others Contact Christian Schnell lulli cs tu berlin de http www eecs uic edu malic various MPEG animations including one on 3D morphing Contact Mihailo Alic alic evl eecs uic edu http archpropplan auckland ac nz For things related to the Radiance program http archpropplan auckland ac nz Graphics radiance radiance html Contact Paul Bourke pd bourke auckland ac nz http siggraph org library bibliography bibliography hmtl WWW version of SIGGRAPH on line bibliography Contact Stephen Spencer spencer cgrg ohio state edu http info acm org joyces homepage html Shawn Joyce s homepage a nice little jump off point for various commercial renderers and other stuff http www petech ac za kon yet another images site interesting in that it s based in South Africa Contact Kon Wilms kon stud petech ac za http www clbooks com Computer Literacy Books who sell Ray Tracing Creations second edition Ray Tracing Worlds among other things A nice little place to browse information on books out there back to contents MGF Materials and Geometry Format by Greg Ward greg hobbes lbl gov MGF was developed by myself with help from Rob Shakespeare Ian Ashdown and Holly Rushmeier It will probably end up being the standard for representing light fixture geometry as part of a new IES Illuminating Engineering Society standard for luminaire data but that s still down the road aways In the meantime I am trying to get people to play with the parser and scene object library to work out problems in the specification and the code and in hopes of simplifying and promoting data exchange between us research types Here is a reprint of a recent posting Announcing MGF Materials and Geometry Format Here we have yet another proposal for a standard graphics scene representation but with a few notable differences 1 The material descriptions are physically based and therefore usable for lighting simulation radiosity and ray tracing methods for global illumination 2 The package includes an ANSI C parser that makes writing a translator to any native format quick and painless It also includes a nice library of objects and scenes culled from the Radiance distribution 3 Use of the parser and library is free The language was designed by the author and some other lighting and computer graphics experts enthusiasts It includes what it needs to include plus a little bit It is by no means the ultimate scene description and future attempts to improve the format must be weighed against the benefits of keeping things simple Also enhancements to the standard will be made in such a way that they do not place new demands on the programmers who support it This will be accomplished by updating the parser along with the standard so each programmer need only support those entities s he knows how to translate The parser will translate the rest Some other basics about MGF o It is a compact human readable ASCII format o Its syntax permits it to be embedded in TCL I think o It is strictly boundary representation for now o It is mostly polyhedral but supports a few conics o Vertices may be named may have normals and may be shared o Colors and materials may also be named and put in libraries o It supports full spectral colors and arbitrary basis functions o It supports one sided and two sided surfaces o It supports rigid body transformations and instancing o Materials may reflect transmit and emit light To pick up the parser by anonymous ftp look in the www mgf directory of hobbes lbl gov 128 3 12 38 or from WWW access the URL ftp hobbes lbl gov www mgf HOME html By the way we d welcome links to other WWW sites as we re isolated at the moment Comments are welcome Greg Ward Lighting Research Group Lawrence Berkeley Laboratory Berkeley California GJWard Lbl Gov back to contents Blue Moon Rendering Tools RenderMan Implementation by Larry Gritz gritz seas gwu edu I am happy to announce the availability of the Blue Moon Rendering Tools BMRT a collection of rendering programs which adhere to the RenderMan R interface standard RenderMan is a registered trademark of Pixar The toolkit consists of a full implementation of the RenderMan standard which supports ray tracing radiosity area light sources texture and environment mapping programmable shading in the RenderMan Shading Language motion blur automatic ray cast shadows and other advanced features The toolkit also contains quick RIB previewers using GL or X11 to allow pencil tests of scenes and animations The BMRT is being distributed as shareware Feel free to grab a copy for evaluation If you like it and continue to use it a donation is requested In exchange this makes you a registered user which means that you will be informed of bugs and updates get some support etc It s all outlined in the License file that comes with the distribution The toolkit is distributed as binaries for the following platforms SGI running IRIX 4 05 or later HP 9000 8xx 7xx running HP UX Sun SPARC NeXTSTEP HP Motorola and Intel Other platforms may be supported if requested Source code is not distributed so please don t even bother asking for it The toolkit comes with full documentation several example scenes which illustrate the various nonstandard features and several example shaders The BMRT is available via anonymous FTP FTP to ftp gwu edu login as anonymous use your email address as the password cd pub graphics BMRT get the appropriate file for your architecture For more details feel free to contact me Larry adds later I ve recently had a period of unexpected productivity and have managed to fix all of the known limitations to the Shading Language compiler for my BMRT package A number of other bug fixes and enhancements have been added recently Updated binaries for SGI and HP are in the FTP site and this excerpted from another note he posted The rendering methods of the two programs Pixar s vs BMRT are very different REYES vs ray tracing radiosity Given this fact I d consider it very good any time BMRT was within an order of magnitude of prman Some people have written to me with timings for particular scenes and they seem to be saying that BMRT is about 1 4 the speed of prman I think that s pretty good but I m not sure it proves much of anything Nobody s given me timing data on real scenes whatever that means I tend not to even try comparing the two programs in terms of speed because I mostly think of them as having very different uses due to their different rendering techniques and capabilities You can let prman run all day and you still won t get a radiosity solution On the other hand you can t get true displacements with BMRT or any ray tracer Errata on using Darwyn Peachey s textures from Modeling and Texturing A Procedural Approach Ebert et al with the Blue Moon Rendering Tools Unfortunately when the FTP site was set up for the book the examples from chapter 8 Ken Musgrave s chapter weren t included We ve since put together all the working shaders described in this chapter and also sample RIB scene description files which demonstrate their use and put them in the FTP area The chapter 8 examples are specifically in the file musgrave renderman tar Z The other subdirectories contain examples from the other chapters FTP from archive cs umbc edu texture A couple minor incompatibilities made an earlier version of rendrib choke on some of these shaders It s since been fixed so if you have trouble with any of the shaders that I say work just get the newest copy of the BMRT All of the shaders from chapter 2 work fine except for the following brickant sl has a problem due to use of the Du and Dv functions In BMRT these functions can only take s or t as parameters Peachey uses them as follows lines 34 35 swidth abs Du ss du abs Dv ss dv twidth abs Du tt du abs Dv tt dv The following change which is perfectly equivalent makes them work properly with both prman and BMRT swidth abs Du s du abs Dv s dv BMWIDTH twidth abs Du t du abs Dv t dv BMHEIGHT bluemarb sl Peachey uses a function definition which unfortunately is broken in BMRT To make it BMRT compatible change this line in Peachey s code Ct marble color marble to the following Ct color spline clamp 2 marble 75 0 1 PALE BLUE PALE BLUE MEDIUM BLUE MEDIUM BLUE MEDIUM BLUE PALE BLUE PALE BLUE DARK BLUE DARK BLUE DARKER BLUE DARKER BLUE PALE BLUE DARKER BLUE This is simply folding the function definition into the main routine Also don t forget to delete the function definition itself perturb sl works but note that rendrib takes TIFF files directly as texture maps not the tx files that prman takes back to contents RenderMan Implementation Paper On Line by Philipp Slusallek slusallek informatik uni erlangen de We have an implementation of the RenderMan interface which currently runs on top of our own Renderer called VISION It supports ray tracing various radiosity algorithms hierarchical galerkin wavelet and some other rendering stuff I just presented a paper describing the implementation at EUROGRAPHICS in Oslo last week The paper is available by ftp from faui90 informatik uni erlangen de TechReports TR 93 9 ps gz or http www9 informatik uni erlangen de back to contents TGA BBS CD ROM review by Eric Haines I just couldn t resist making a title with all those acronyms TGA is The Graphics Alternative a computer graphics related bulletin board run by Adam Shiffman He has made a compendium of the best files from his bulletin board This CD ROM has been out for more than half a year I m embarrassed to say what with the corporate takeover the disgruntled postmen and the other plights that have befallen the Ray Tracing News Corporate Headquarters well actually I ve just plain been backlogged and busy with work and my family I haven t been able to review it So here s an overview of the directory structure and contents 3ds 40 megs total 3D Studio files 3ds 3dsmesh 22 megs of 3DS mesh files 3ds ipas1 and ipas2 1 meg about 20 25 IPAS filters total 3ds maps 14 megs of texture GIFs same as on the first Syndesis CD ROM from what I can tell 3ds util 1 meg of utilities for 3DS anim utl 3 megs total various animation utilities such as DTA MPEG makers etc anime 103 megs total not Japanimation rather animations about 120 FLC FLI animations and other stuff audio 4 megs total various sound editing programs demos 11 megs total sundry graphics demos like Unreal and Doom djgpp 4 megs the GNU C compiler v1 11 dos view 4 megs various dos viewers and image processors fractal 11 megs various fractal programs including Fractinit Lparser and Mandy f prot 1 meg popular anti virus program gfxlib 4 megs graphics libraries with source including SVGAKIT and TGE The Graphics Engine gfxsrc 6 megs graphics source code including Graphics Gems I III rend386 vr386 and other stuff imag utl 4 megs various DOS image utilities images 204 megs all sorts of stuff mostly in GIF format images astrogif 18 megs 191 images various NASA images images fracgif 7 megs 48 images 2D 3D fractal images images handgif 5 megs 49 images hand painted images images raygif 61 megs 384 images ray traced images 8 bit mapped images rayjpg 5 megs 43 images ray traced JPEG lossy 24 bit images raytga 69 megs 88 images ray traced TGA 24 bit images textures 11 megs 73 images GIF TGA and TIF textures some tile the TIF s are from Paul Bourke s collection images tga 23 megs not Targa files but rather works by Adam Schiffman who made this CD ROM some nice stuff misc 1 meg of various such as arj and zip unpackers Visual Basic DLL Also very useful is a file description list which briefly describes many of the utilities and whatnot os2 view 1 meg of OS 2 image viewers paint 7 megs of various paint and image processing programs ray 15 megs of ray tracers including OORT Polyray POV Rayshade Vivid and the Truespace demos and WorldRender3D demo ray utl 7 megs of ray tracing utilities mostly for POV Polyray Vivid and fairly selective i e not just every utility ever made Modelers include Moray POVCAD WinBlobs PV3D rtnews 2 megs of utter drivel For some reason RTNv6n1 is missing win view 8 megs of Windows viewers and whatnot As you can see while the focus is ray tracing with about 250 of the 450 megs of stuff directly related to this topic there are also some other things of interest such as 3D Studio related resources fractal generators other images paint programs graphics libraries the GNU C compiler audio utilities etc etc A nice feature for users is that most of the files are uncompressed and can be executed directly from the CD The image libraries are fairly nice and unlike the Tracers and Tracings CD ROM reviewed in RTNv7n4 there appears to be more editorial work done on the collections Many of the images are of some interest either visually or for educational purposes e g focus gif shows depth of field effects although there s an interest also educational bug the reflections are in focus and 6gear1 gif shows the SPD gears database rendered with 6 different ray tracers the bug in Rayshade has been fixed Some of the images in the ray traced image directories are not ray traced but rather produced by 3D Studio but I m no purist One annoying thing with the image libraries is that there are no catalog files as on Tracers and Tracings The creator says in the readme file that he decided against this because the user could create catalogs but this excuse is a bit weak In terms of portability time spent and hard disk space having the catalogs on the CD ROM is a lot better than making and storing these on a particular machine Given that there are 200 megs of unused CD ROM disk space storage would not have been a problem The addition of 3D Studio related resources is worthwhile and of course the textures are usable elsewhere and the meshes are convertible to other formats using 3DS2POV and other utilities The meshes and textures for the 3DS section do have catalog images on the disk which is extremely helpful Editing has also been done on the various program collections there are no cases of 8 versions of the same software clutter However in checking for some of the better image utilities I didn t find Image Alchemy which Tracers and Tracings did have image converter or the LView windows image viewer so either a little too much editing occurred or these worthwhile programs were unknown to the creator All in all this is a nice collection of software and images for hobbyists and others who are interested in modeling and image generation and beats the daylights out of downloading all this stuff from the net I use a fairly reasonable Internet connection but it s a heck of a lot easier to grab stuff from CD ROMs than deal with unavailable or dropped connections and the amounts of thumb twiddling time spent downloading let alone finding material on the net Also if I find some worthwhile software on a CD ROM I can always try to find the latest version on the net and use that All in all I consider CD ROM file collections to be a great boon to users of the Internet saving much time and energy and bandwidth for us all This CD ROM is a welcome addition Ordering info straight from his advertisement 39 95 3 00 shipping and handling California Residents will be charged applicable sales tax 6 00 S H for International orders The price includes the TGA CD ROM with 450MB of quality graphics related material AND a FREE 30 day subscription to TGA For more details call TGA and download TGACDROM ZIP this archive gives detailed information on all the material contained on the disc The TGA CD ROM may be ordered online with a VISA or Mastercard by calling the BBS and typing CREDIT from the main menu The CD purchase also includes a 30 day complimentary subscription to TGA Node 1 510 524 2780 USR Dual 2400 14 4k New Users Node 2 510 PRI VATE Hayes Optima 288 2400 28 8k Subscribers Node 3 510 PRI VATE USR Dual V FC 2400 28 8k Subscribers Or you may send a bank draft No Personal Checks Please or money order to the following address TGA 190 El Cerrito Plaza 107 El Cerrito CA 94530 Internet e mail adams tgax com World Wide Web http www tgax com back to contents Review of Syndesis Avalon CDROM by Keith Rule keithr tekig7 pen tek com The Syndesis Avalon CDROM is a snapshot of the avalon chinalake navy mil ftp site as of July 15 1994 Avalon is a repository of many hundreds of freely available 3d models in a variety of formats I was looking around on avalon chinalake navy mil the other day and noticed an ad for SYNDESIS AVALON CDROM I called up Syndesis 414 674 5200 and ordered it on monday 8 22 for 49 95 shipping and received it on Wednesday 8 24 It arrived with a CDROM and a booklet The booklet contains a Copyright page which basically says that they Syndesis doesn t claim ownership of the files on the CDROM just the Copyright to the contents of the CDROM Permission must be obtained from them to make it available on a BBS multiuser network or network I m not a lawyer obviously but I had a bit of trouble understanding the distinctions they are trying to make here Perhaps someone else would share some insight here In addition to the Copyright notice there is an introduction and a section on installation The introduction thanks Francisco DeJesus which I heartly agree with The Installation section talks about the fact that the disk is an ISO 9660 CDROM which can be read on any computer The rest of the document is just a listing of the files on the CDROM The list serves two purposes 1 it lets you see what s on the disk with motoring through the directories and 2 it shows the mapping between the long file names used on the avalon site I assume avalon is a UNIX machine and shorter MSDOS names After looking through this I popped the CDROM into my MSDOS machine brought up the MS Windows file manager and started looking through it The first place I looked was under the format specs directory The listing in the manual showed a dozen or so files but the MS Windows file manager showed an empty directory I started randomly looking around Most directories matched the listing but many important ones were empty including utils converters I sent E mail to Syndesis They said I had a driver problem with my PC and that it would work on another PC I tried my PC at work it had the same problem I sent that info to syndesis They said oops they have a mastering error and will have to re master the disk This will take about 3 weeks and they will send a free update to anyone who requests one Aside from that problem the disk seems to be a direct copy of the avalon chinalake navy mil site The only problems I see are that 1 I need several tools on my PC that I m not sure where to find to make this disk useful These tools are a An MSDOS equivalent of UNIX uncompress b An MSDOS equivalent of UNIX Tar c An MSDOS equivalent of gunzip d PKUNZIP which I already have 2 I ll probably have to get a larger harddisk for all the cool stuff I ll be moving off the CDROM I would have preferred that syndesis had uncompressed all the files and then made their master disk One of the advantages of CDROMS is that I don t have to have all that stuff on may HD Unfortunately I need to pull the models I m interested off the CDROM to be able to use them Too bad All in all I like the CDROM I m looking forward to the update and will be looking for MSDOS equivalents of the UNIX tools I need to access a large number of the files on this disk For ordering info contact John Foust Syndesis Corporation 76004 1763 CompuServe COM I had hoped to review Syndesis second volume of models but won t for now Check out RTNv6n3 for a review of the first John is putting together a third volume of models on a CD ROM right now if you want to get a free one you can get one by having him accept your model for inclusion on the CD Write him for details EAH back to contents SIRDS SIS stereograms Holusions whatever by Eric Haines Everyone s doing it You ve seen them in card stores you ve seen them in malls you ve seen them in um card stores in malls Those repeating pattern posters books postcards tea cozies and antimacassars which when you focus your eyes just so cause a hidden image to pop out and look three dimensional Personally people have waved black and white random dot versions of these in my face for years without me getting it I finally got it this summer and can now defocus my eyes and stare off into the middle distance in the blink of yes an eye What worked for me was looking into my computer screen at one and looking at a reflection in the screen to get my eyes to defocus there are at least five other methods of doing it and I leave it to you to find them in the FAQ next paragraph or in books My other piece of advice don t try to cross your eyes as this is not usually the way to do it as it makes the images reverse themselves in depth So anyway I thought I d try to add this capability to my renderer After puzzling through the SIRDS FAQ which can be FTPed from katz anu edu au 150 203 7 91 pub stereograms and the FAQ is maintained by Stuart Inglis singlis cs waikato ac nz and trying out a few wrong ways I came up with a very short addition to my renderer which made some reasonable SIS Single Image Stereograms I was going to explain it here in depth but it turns out there are now a few books that deal with the topic so who am I to ruin capitalism Actually I ll give you the five minute description In creating these images you take a repeating texture pattern and vary it slightly The pattern repeats horizontally every couple of inches or less i e the repeat pattern must be less than the width between your eyes so you can defocus and get a separate repetition of the pattern for each eye and should probably be less than 1 1 2 Say you just repeat the texture pattern again and again horizontally without variation You defocus and the left eye sees a pattern and the right eye sees the same pattern but is actually looking at the repetition of that pattern one to the right Still with me if not think of a picture say Babe Ruth on a baseball card and a copy of the Babe right next to it defocussing makes the left eye look at the left image the right eye at the right You all should know about stereo pairs where one image is shown to the left eye and the other to the right and your brain puts them together and gets a 3D effect This idea of having separate similar images go to each eye is key to SIS Now since the pattern is repeated a number of times once defocussed your left eye and right eye can move over the entire image and continue to be in sync You will perceive the entire image to be at a distance farther from where it really is as the angle formed by left eye perceived thing right eye is a lot smaller than if you just looked at the image normally Your brain knows that when this angle is small you re supposed to be looking at something far away Now if you vary this left eye perceived thing right eye angle over an image your brain will interpret these variations as changes in depth and you ll see a 3D effect I ve read a fair bit of gobbledy gook about how to vary the depth about dealing with factors like the left eye seeing parts of 3D objects that the right eye doesn t and vice versa but forget all that Just think that given the basic repeating pattern being seen by each eye if the right eye then has to look a little bit to the left of this base pattern at some feature compared to what the left eye is seeing then the brain will interpret this feature as being closer since the angle has become larger You now know the essential secret believe it or not The basic algorithm starts with a texture pattern that the left eye is going to see and will be repeated The hidden object which is to appear is used to vary this pattern Say the hidden image is a square floating above a plane When the background of this hidden image is visible the repeat pattern is not shifted when the square is seen the repeat pattern is then shifted to the left The closer the object is the more left shift there is Actually in practice these algorithms look at the distance from pixel to pixel and you can start from the right or from the middle of the image but this horizontal shifting is the basic mechanism If you look at the image without defocussing you ll notice that the pattern repetition is relatively rapid on the square that is closer this makes your eyes form a larger angle with the perceived object and so you think it is closer So we ve started with a pattern on the left call this pattern 1 and made a copy of this pattern just to the right call this pattern 2 shifting the data in pattern 1 to the left as required by the hidden image to form 2 Now we move the process over to pattern 2 and use this as the starting point for the next repetition where we form pattern 3 by shifting pattern 2 as needed Pattern 3 is used to form pattern 4 etc until the image is done Algorithmically it s even simpler than this One great feature of these algorithms is that each scan line is entirely independent of the others That is you can generate a scan line without any knowledge or effect on the other scan lines so the entire depth image does not have to be saved Using the left to right algorithm above you don t even need to keep the whole scan line of z depths around since you re shifting as you go along This is what makes the algorithm easy for ray tracers you re simply using the ray tracer to get depths as you go and shifting the pattern as you go Note that you don t really need a ray tracer though hey I had to mention ray tracing right a zbuffer renderer works just fine for the hidden images and even just stored images used as depth maps work fine too Notice that a single depth map is used for generating the image so there s nothing special about the image generation process The good news is that once you have a half decent renderer it s pretty easy to add this algorithm to it My first attempt was about 30 new lines of code to access and shift the texture pattern using the z depth The bad news is that once you do the easy algorithm you notice problems There s echoing where pattern repetitions and elements get intertwined in a way that false 3D features appear There s also a limit to the number of levels of depth in the basic algorithm making the 3D object look like it was terraced for farming by miniature Southeast Asian farmers You might try interpolating colors in the texture to get rid of this artifact I did and then it just looks blurry on the right side of the image Me I finally wrote some additional code that maintains the exact links between repetitions and uses these precise numbers to interpolate between samples for output which reduces blurring though I still get some echoing Anyway even with this additional code we re talking of a total of around 100 new lines including whitespace and comments I hope this article has given you a flavor of how these images work and are generated If you re seriously interested look at the reviews that follow of two books which discuss in depth how to generate these images Playing with these algorithms and seeing the sorts of goofs you can make has given me a greater appreciation of well constructed commercial images made using this technique It s also interesting to figure out what went wrong with the bad ones out there All in all a cute technique but watch it if you defocus too much your eyes will get stuck and you ll see everything in 3D back to contents Two Books on Stereograms by Eric Haines Recently two books have come out about stereograms Create Stereograms on Your PC by Dan Richardson Waite Group Press 192 pages 8 color plates 26 95 ISBN 1 878739 75 1 and Hidden Images Making Random Dot Stereograms by Bob Hankinson and Alfonso Hermida QUE Corp 242 pages 16 color plates 24 99 ISBN 1 56529 994 9 Each book comes with a disk in the back containing software for the PC Richardson s book collects some of the better stereogram generating tools together and describes how to use them and how they work He spends a little bit of time describing stereogram history and algorithms then discusses many of the different ways the autostereogram effect can be used He covers normal text stereograms random text stereograms random dot stereograms image mapped stereograms and icon based stereograms Most of these the exception being normal text stereograms which are usually made by hand anyway have one or more free or shareware programs presented along with them For random text stereogram generation the SIRTSER program written by the author is provided on the disk and does the job The next program presented RDSdraw is a lot more fun It s an interactive program which is tailored towards making depth images for generating random dot stereograms SIRDS It s a fun program in which you can put various objects boxes pyramids ellipses etc and text on the screen and turn the image into a SIRDS Another SIRDS program MindImages is also presented I personally have a tough time getting MindImages images to work for me on my 15 screen because they have a wider repetition distance than RDSdraw but they are nice when they do work There is also a cute program called Shimmer which ameliorates echoing and helps some people lock on to the 3D image quicker It s cute and the effect reminds me of the book Snow Crash which is a great trashy cyberpunk or cyberpunk parody it s hard to tell the difference novel My favorite program is RDSGEN by Fred Feucht from a program originally by Alexander Enzmann for two reasons One is that it generates image stereograms just like you see in malls and the other is that source code is actually provided a boon for explorers who would like to get their hands dirty with a little code The code provided in the book has evidently been cleaned up a bit from earlier versions out there If you have internet access you can find some of these programs at katz anu edu au 150 203 7 91 pub stereograms though I didn t notice RDSGEN there The book then goes on to discuss other ways of creating depth maps The wonderful fractal program Fracint is described in this context and the book s diskette provides some parameter and map files useful for making SIRDS Fractint itself is not included due to space limitations but is easy to find on the net at oak oakland edu pub msdos graphics frain182 zip Using the POV Ray ray tracer with fog to generate depth maps is also discussed and some sample scenes are provided To end there s a short chapter on icon based stereograms and how to generate these with POV Ray Hankinson Hermida s book focusses on random dot stereograms The principles involved in generating and viewing stereograms are made easily understandable Many variations and pitfalls involved in the process are covered Along with the book is the Windows program POPOUT LITE and some sample depth maps and random dot stereograms Installation was a snap and the program is easy to use for generating SIRDS Creating depth maps is not so easy the program relies on the Windows Paintbrush program to generate these Using Paintbrush finesses having to present and distribute let alone write new software and this program is understood by many users already However it is not tailored for creating depth maps and so makes for a lot of work for the user to do anything non trivial I find RDSdraw much better for the task as it is made to create simple 3D object depth maps as part of the program Since I ve begun a comparison of this book to Richardson s which includes RDSdraw let s continue The software offering of Richardson s is richer It includes programs for a wide variety of generation techniques and also includes a little source code Hankinson includes essentially one program the nice thing about it is that it s a Windows program which uses the standard BMP format However after a short while you reach its limits You have to have an artist s abilities and patience to generate depth images using Paintbrush For example Hankinson would have you draw each depth slice of a tilted cylinder separately by hand since Paintbrush doesn t know anything about 3D objects This time would be better spent generating depth maps with appropriate tools Hankinson does briefly discuss other methods of generating these e g via POLYRAY However POPOUT LITE has only 16 levels for depth information as does RDSdraw so images generated with it all have serious terracing artifacts where it looks like the object is made out of layers of corrugated cardboard glued together Hankinson does discuss image stereograms like those seen in malls and puts a few in the set of plates and in the text However there is no software to generate these images unlike Richardson s book Throughout the book there are references to POPOUT PRO which does generate these images and uses 256 depth levels but it is made available only by paying another 17 50 discounted from 35 for the program There is also a confusion between GP POPOUT and POPOUT PRO which I have not figured out they seem to be the same thing or maybe different things it s hard to tell from the text Perhaps my review copy did not come with the discount coupon described in the book which might have cleared up some of the mystery Whatever the case it is misleading to put a sunflower pattern image stereogram on the cover with a hidden teapot and say Create Your Own Incredible 3 D Stereograms with Software Included when in fact you cannot generate image stereograms or the teapot depth map with the software provided This is a poor way of treating readers and it mars an otherwise fine book Hankinson is good at fully presenting the algorithms involved He is thorough about discussing the various problems which are encountered and ways to fix these About two thirds of the book purely is about the algorithms the rest about describing how to run software In summary both books have their strengths Richardson s gives a quick once over of the algorithms then gets you using the programs in order to learn more Hankinson s spends time giving a coherent full presentation of the algorithms involved then allows some play time to try out SIRDS Both are well written and nicely presented Neither book gives a formal presentation on stereogram theory nor should they for this you ll need to hit the scientific literature check the FAQ Richardson s software offering is excellent but the reader should be comfortable with DOS and some basic image manipulation software most readers of this newsletter qualify Hankinson s software is simple to use and has on line help but doesn t actually do all that much Hankinson explains things thoroughly enough that you could implement the algorithms after reading his book Richardson points at net resources and provides code this is both a good and bad thing it allows you to get going quickly but without as deep an understanding of the techniques available and the problems you ll encounter If you want to read about random dot stereograms in a methodical fashion and don t care so much about playing or would rather surf the Internet for software get Hankinson s book If you would rather play as you go and learn about a wider variety of stereograms get Richardson s back to contents Siggraph Report The Exhibits by Techs Avery tksavery netcom com I asked Techs for any updates for this report he posted right after SIGGRAPH and he graciously added a few new details EAH THE EXHIBIT FLOOR Instead of reporting on the ultra high end stuff I am reporting on low end stuff that s pretty impressive Well maybe a little high end Rendermorphics from Reality Lab 408 486 6956 Email info render com At the Rendermorphics booth they were showing an API which was explained to me as a software only render engine which is being licensed to 3D software makers This product was rendering like a hardware renderer In the booth they had the Matrox 3D engine PC and a Cirrus Logic render engine In a very fair test it matched the Matrox and beat the Cirrus though both were indeed respectable The boards also featured Open GL support while Rendermorphics said that they plan to support this also Other vendors at SIGGRAPH included Ithaca Software s new HOOPS on the PC and Criterion s RenderWare EAH January update Rendermorphics is now directly supported by 3D Labs GLINT chip a 3D rendering engine on a chip being widely adapted by the PC Mac Windows NT board manufacturing community It will be even faster as a result when used with hardware acceleration Cirrus Logic 510 226 6218 The primary advantage to the Rendermorphics API is that they are making it cross platform compatible on the PC Mac Power PC Windows NT and SGI especially the INDY Expect to start seeing this incorporated into Lower Cost 3D software in the next few months The test that I saw was rendering at speeds comparable to my Indigo 2 Extreme It featured Phong Gouraud textured reflected and I believe faceted shading and permitted real time movement of a lit object They were demoing with a 200 polygon or so torus and a 16 000 poly skeleton Animation Master had some very cool demos on their reel this year One was a human head so real looking people thought it was actually video More sophisticated users thought it was Cyberscanned But it was done at home by this guy Rod Altshul I think was his name in LA with photos he took of himself Another piece on their reel was done by a teacher at UCLA extension Very morphy and a good clear story It should have been in the Electronic Theater The product had very cool inverse kinematics and the ability to take character actions and add them to a list of character actions in a Direction module All versions were under 1K January update A new version of AM is due out within the next 6 8 weeks which features an integrated interface and lots of new features Their number is 206 750 0042 and Email is Animmaster aol com Real 3D takes the programmability award for a PC based 3D product You can write macros for everything It also has very impressive dynamics inverse kinematics though cruder than Animation Master and a lot of high end features you normally find on high end programs Character animation looks challenging and I d like to see how fast it renders complex objects I think also around 1K Truespace from Caligari was similarly impressive with animatable lattices and some impressive modeling capabilities Very fast rendering Reported earlier in this news group by someone else Newtek announced PC Power PC SGI and Windows NT versions of their popular Lightwave program January update Due out this month I hear for 995 Most Needed unusual product award goes to Digital Image Design for a product called THE MONKEY This is a Claymation style armature set up to pose characters in 3D programs like Softimage though I ve been told several PC software companies were interested in supporting it It allows you to pose characters as a whole without having to do the select a joint move a joint with the mouse method of character animation It seems more useful and flexible than most of the motion capture I saw Cost around 10K 212 222 5236 Synthetic Images had the Reality Blaster a VR card s for PCs 2500 to about 5K 407 282 7740 I didn t see a demo but the guy gave me the literature on the airplane back to LA Strangely the company appears to be located in Orlando 3D Xpres is a poor mans digitizer 199 at the show where you put a handyman s right angle in front of the object to be digitized take pictures from at least two angles and click on the features similar in the two photos they have to be scanned first The right angle is used to reference the x z plane for the object 818 707 6000 One of the better finds Supports DXF and I hear OBJ At Animo they had a dialogue system that supposedly could take spoken dialogue and automatically pick mouth shapes from a list based on phonemes The product also featured resolution independence impressive inbetweening an exposure sheet and other character specific features Also a compositor ink and paint and Bill and Sue Kroyer as demonstrators This is a 2D animation product PC based 818 762 6466 Email admin cam ani usa com Linker System demoed their 2D package for the MAC and PPC Very capable with too many features to list I didn t see any Audio support Their demo artist seemed to be their main programmer a big mistake I saw an artist from Film Roman the largest non Disney animation producer in this country The Simpsons The Critic Garfield Cro Mighty Max and more She wanted to talk art and animation and he wanted to talk tech She didn t understand a word he said and shouldn t have had to Especially for a MAC program Tel 714 552 1904 January update I have since heard this same story repeated by a very well known animation director in Hollywood who actually bought the product and doesn t understand how to use it and the company still doesn t know how to talk his language It sits idle and mute in his Quadra mutely mocking him and his staff Another 2D animation Product was Pixiscan This runs on PCs and SGI Telephone 33 1 49 85 17 18 FRANCE Looks impressive but I didn t get a real good look I would like to point out that Softimage demoed the most esoteric dynamics products to date Seems they re digging deeper and deeper into obscure physics and mathematics textbooks I don t know what you d use these things for but it s pretty interesting to watch Softimage still doesn t support a text interface Wavefront has the best inverse kinematics to date for polygonal programs Their Smart Skin solves a lot of problems encountered in Softimage back to contents Scanline Rendering Previewer by Eric Haines due to Chris Cason Chris Cason asks How much faster is scanline rendering compared to raytracing I am considering whether or not a scanline rendering previewer able to read POV scenes might not be a good idea if it were really fast My guess is no better yet just a sec OK POV 2 0beta rendered tetra 4096 polygons in 56 seconds Subtracting out the time to read the database call it 52 seconds My general software z buffer renderer not including database read did it in 2 seconds and I m working to make it faster Chris also asked about whether doing a scanline previewer for POV Ray would be worthwhile I replied I d love to see a reasonable scanline renderer The main problem is turning everything into polygons Also that s where the cost comes in a sphere is just a sphere to POV but is 2000 polygons to a scanline renderer or less depending on what quality your talking here You could get by with maybe 200 polygons per sphere Also as far as CSG forget it trying to get the polygonal version of a CSG model people form companies around doing this problem Though there have been rumors on the net of people doing this in upcoming shareware Anyway if you can polygonalize the beastie or even if it was just a simple guess there are at least two resources for doing scanline images One is SIPP which is pretty good no front end scripting language but then you don t need one for POV integration it includes texture mapping and shadowing There s also VRend which is more X windows based but the code itself cobbled together from various sources does indeed seem to render stuff SIPP s home it s also elsewhere tell me if you have problems isy liu se 130 236 1 3 pub sipp sipp 3 0 tar Z SIPP scan line z buffer and Phong shading renderer Jonas Yngvesson jonas y isy liu se There are some demo programs included give it a try Info on ZRend is in RTNv7n5 Anyway it d be great to have a POV scanline previewer even with limitations since most people work using polygons and simple quadrics and quartics it ll make 900f the people out there happy You could probably cobble one together in a few days adding a front end to SIPP that is simply the POV script language Do it Fame Fortune well fame at least The above was a pretty old exchange of messages but hey I can always hope that someone will actually make a reasonable z buffer renderer integrated with a shareware modeller or as a standalone program It shouldn t be that hard Eric back to contents Raysmith by Eduardo Bustillo Iceta epabuice bi ehu es I m a recently graduated mechanical engineering student from Spain As part of my end of studies project I have developed a radiosity program with the following main characteristics Monte Carlo integration to compute diffuse illumination This permits to have refracted shadows specular and diffuse reflections blurry reflections translucency texture mapping and any geometry of light sources Adaptive subdivision Objects with big radiosity gradients inside are dynamically subdivided during the radiosity process Ray tracing A postprocess of ray tracing is used to calculate the image The main characteristics of the algorithm used are Depth of field Stochastic anti aliasing Optional 3D glasses stereo view Acceleration techniques Three different user selectable techniques are incorporated Binary Object Partitioning Adaptive voxel subdivision with optimal coordinate system selection Z Buffer for first ray acceleration Geometry input It reads 3D Studio v2 geometry files so the only geometric entity supported is the triangle Completely written in ANSI C This way it may be compiled in any system Actually my work was done in a PC but I ve tried and succeeded in compiling it with no modifications on a DEC OSF 1 and a HP UX server If anyone wants a copy of my program it s free please feel free to contact me This program is also available now at avalon chinalake navy mil via FTP in pub utils raygcc10 arj so check there first EAH Eduardo Bustillo Iceta epabuice s835cc bi ehu es Particular de Basterra 1 48990 Getxo VIZCAYA SPAIN There s been some interest in this package from the 3D Studio crowd since it reads 3D Studio v2 files unfortunately the package doesn t seem to ignore packets of information which it doesn t understand with luck the author will fix this in the future Anyway the demo images are interesting a Sillion like image and computed rapidly at that EAH I asked about benchmarking and Eduardo replied I have done some quick benchmarking tonight The only 3DS to ray tracer file exchanger that I have is the one I wrote last year for POV I used two example scenes Scene 1 Three spheres mirror glass and diffuse with one light About 800 polygons Resolution 320x240 POV 2 2 RAYSMITH default configuration 736 s 337 s Scene 2 Based upon F Sillion s example in Foley Van Dam plate III 27 with some added features Raysmith showed interobject reflections even through reflective or transmitting objects while POV didn t it s a ray tracer On the other hand Raysmith can t handle sharp shadows needed in some cases About 6200 polygons Resolution 320x240 POV 2 2 RAYSMITH default configuration 340 s 129 s I don t have a file exchanger for RAD386 or Rayshade but in the version that I have access to both of them use a similar accelerating structure uniform voxel subdivision Raysmith has user selectable accelerating parameters it uses adaptive voxel subdivision such as grid resolution maximum grid depth or minimum number of objects per voxel I think that with these options it should be theoretically faster or at least as fast back to contents Terminology Survey Results by Peter Shirley shirley graphics cornell edu Pete surveyed various global illumination researchers for their opinions Enclosed are the results of my survey on which if any of the following terms were preferred to describe making computed images that relate to how things look in the real world I don t want to say realistic I make no explicit suggestions of what this survey is useful for but I hope everyone will remember how much easier it is to write a paper now that we all have the same term for radiance Many people thought rendering was the same as scan conversion or rasterizing Others thought that rendering and image synthesis are synonymous It is clear that there is not agreement on what rendering means It is also clear that some think that the realistic is implicit in image synthesis One thing is for sure there is no global agreement TERM VOTES rendering 3 realistic rendering 6 photorealistic rendering 3 image synthesis 4 realistic image synthesis 16 photorealistic image synthesis 9 other term 2 no pref 2 45 rendering 12 image synthesis 29 7 realistic 22 photorealistic 12 There were three other term votes that also expressed a preference among the six offerings so I counted them as one of the first six categories The other terms listed were physically based image synthesis photosimulation virtual image idealistic image synthesis pseudorealistic image synthesis back to contents Radiosity Online A Bibliography by Ian Ashdown 72060 2420 compuserve com Ian has taken over upkeep of the Radiosity Bibliography from me He s done a great job expanding and updating it EAH Those of you with an interest in radiative transfer theory also known as radiosity may want to download the new release of pub doc RadBib94 Z via anonymous ftp from hobbes lbl gov It s an online bibliography that lists over 500 references to papers theses books and technical reports concerning radiosity radiative transfer theory and related topics Many of the references concern computer graphics which is where most of the action is these days in radiative transfer theory research However it also includes references to most of the important papers on radiative transfer theory from the illumination and thermal engineering literature If you do not have ftp capabilities send me an e mail message with a request for a free photocopy or an ASCII text file on a 3 5 MS DOS diskette please specify which Sorry but at 121 KB 88 pages the file is too big to send as an e mail message P S thanks to Greg Ward of Lawrence Berkeley Laboratory for providing space on his ftp server for this resource P P S if anyone finds any omissions in the bibliography please let me know so that I can add them to the next release back to contents Jevans Temporal Coherence for Ray Tracing by Eric Haines From a Rayshade user Also my animation images are VERY similar from image to image It would be nice to save the intermediate calculations from say image n 1 and apply that knowledge to image n This might consist of saving all the ray results from the previous image and looking for what hasn t moved in the next frame of the animation or it could be as simple as auto detecting that given the motion of objects certain areas do not require recalculation I would gladly trade RAM for execution speed any day any day any day An interesting paper on this topic is A David Jevans T Object Space Temporal Coherence for Ray Tracing J Proceedings of Graphics Interface 92 I Canadian Information Processing Society C Toronto Ontario D May 1992 870154C4 176 183 K temporal coherence efficiency space subdivision His method should be easy to do with Rayshade essentially you record each ray shot in each voxel the ray hits When something moves in a voxel or to another voxel only those rays in those voxels which have had changes movement entry exit etc of objects need to be recomputed for the next image Jevans claims an almost 4x speedup Only works for a static camera of course i e the camera doesn t move Memory intensive of course lots of rays get stored but Jevans has a method of keeping this reasonable he needs only 64 bytes per voxel He stores a resolution independent grid of 16x16 bits essentially dividing the image into 16x16 blocks Each eye ray and its children then has a particular bit which gets set for it as you propagate the ray it marks this bit in each voxel hit by it and its children For the next frame you move objects and note which voxels are touched or together all the dirty voxel bitmasks and you get a list of which of the 16x16 blocks need to get recomputed Simple stuff the messy part for Rayshade is keeping the frame by frame coherence info around in a nice fashion back to contents Reviews of Encyclopedia of Graphics File Formats from Steve Lamont John Grieggs Tom Lane Brian Erwin and Andy Key Steve Lamont spl szechuan ucsd edu writes You might want to look at Encyclopedia of Graphics File Formats by James D Murray and William van Ryper published by O Reilly and Associates July 1994 928 pages softcover with CD ROM ISBN 1 56592 058 9 59 95 Email orders ora com There s a CDROM readable by Mac PC and Unix systems with a bunch of utilities most of which you can find with some amount of effort on the net if you know where to look While I can quibble with the claim on the back cover that it is the only file format book you ll ever need it is quite complete It attempts to cover a lot more ground that Kay and Levine and does most of it fairly well though there is a lot missing too For instance for legal reasons many of the proprietary formats such as Kodak Photo CD are covered with not much more than a pointer to the owner of the format The book is organized into three parts an Overview describing the basics of graphics file formats their care and feeding as well as other bits and pieces of useful tutorial information The second part covers the formats themselves The final part is a description of the CDROM and pointers to getting additional software There are a few glitches in the index For instance if you look up PICT format you find only a single reference to a brief mention of the format in the introduction but if you look up Macintosh PICT you find a reference to both the introduction and an article in the main body of the text Unfortunately the article doesn t really tell you much about PICT format either but just points you at the Apple technical note There is software on the CDROM which I haven t tried that apparently does read and handle PICT though In my copy there is also an error in binding which may not be in every copy The list of figures is inserted in the middle of the table of contents entries for section two In summary Encyclopedia of Graphics File Formats is an useful if sometimes necessarily incomplete resource Disclaimer I was sent a free review copy of the book by O Reilly and Associates so I may have a small bias However I have no connection with the publisher other than as a small contributor to their financial success due to twenty one of their other publications gracing my bookshelves that I ve personally bought over the years Another short review From John Grieggs comp graphics FAQ Good introduction to graphics file format issues for both vector and raster formats plus specific descriptions of nearly 100 file formats CD ROM includes sample images original format spec documents where available and C code snippets Also a lot of free and shareware image conversion manipulation software for Unix DOS Windows and Mac Much of this is available on the net and indeed the book tells you where but having it all pulled together is very useful Tom Lane tgl sss pgh pa us says My only complaint is that there are too many typos in the printed text Check the original spec document whenever you find something unclear or dubious Brian Erwin writes We have received several requests for a complete listing of all of the format specification documents on the CD ROM accompanying our new book The Encyclopedia of Graphics File Formats by James D Murray and William vanRyper The CD ROM contains specs from such vendors as Adobe Aldus Apple IBM Microsoft and Silicon Graphics along with test images and code examples for many of the formats Also on the CD ROM is a set of free or public domain software and shareware for MS DOS Windows OS 2 UNIX and Macintosh platforms that will let readers convert view and manipulate graphics files and images To access this listing http ora com gnn bus ora catalog Graphical file format FTP site As author of GBM which I believe is the source code include on the CD with the book I m not sure what he means the code on the disk is by the authors and does not appear to resemble this code EAH I would like to point out that the latest version of GBM source is usually available on one of ftp cdrom com pub os2 32bit graphics gbmsrc zip ftp os2 nmsu edu pub os2 32bit graphics gbmsrc zip There are also many ray tracing and other rendering related things for OS 2 here too EAH I particularly mention this because the latest GBM has fixes and a faster GIF TIFF LZW save algorithm Andy Key ak hursley ibm com back to contents SDSC Image Tools library by Matt Hughes hughes msi umn edu A good way of getting direct write to a number of formats is to link the whole thing to the SDSC Image Tools library available at ftp sdsc edu pub sdsc graphics imtools As i recall you just organize you images into their type of internal array and then just make one call to write out the file based on the type you want I see they have stuff for the following machines apple mac cray ymp dec alpha dec mips dec vax hp 700 ibm rs6000 next next sgi 4d sun 3 sun sparc I also understand they will be providing source in the near future Image types supported bmp cur eps gif hdf ico icon iff mpnt pbm pcx pgm pic pict pix ppm pnm ps ras rgb rla rle synu tga tiff viff x xbm xwd back to contents LUG Library v1 0 by Raul Rivero rivero pinon ccu uniovi es What do you get i file format translators compuserve s gif zsoft s pcx truevision s targa sgi s rgb aldus microsoft s tiff alias pix wavefront s rla urt s rle pbm pgm ppm rgb raw rayshade s heightfield jpeg ii image editing functions resampling blur sharpening cut paste median filter histogram equalization and so on iii image viewers for Silicon Graphics and IBM RISC 6000 GL Library for HP9000 series Starbase Library for any kind of X11 platforms Xlib Library for PC386 486 GRX Library for Linux VGA and VGAGL libraries and it s a LIBRARY not a program You will be the person who write the programs If your machine is a PC with MSDOS you ll need the DJGCC compiler or an equivalent The original site distributor of this package is telva ccu uniovi es 156 35 31 31 uniovi mathdept src liblug 1 0 tar gz Please send me a E mail so I can track all the users of LUG and send you news bugs etc LUG is free what a wonderful word but it s distributed under the GNU LIBRARY GENERAL PUBLIC LICENSE back to contents Eric Haines erich acm org Ray Tracing News Volume 8 Number 1 Ray Tracing News Volume 8 Number 1 Ray Tracing News Volume 8 Number 1 Ray Tracing News Volume 8 Number 1 Ray Tracing News Volume 8 Number 1 Ray Tracing News Volume 8 Number 1 Ray Tracing News Volume 8 Number 1 Ray Tracing News Volume 8 Number 1 Ray Tracing News Volume 8 Number 1 Ray Tracing News Volume 8 Number 1 http www acm org tog resources RTNews html rtnv8n1 html http www acm org tog resources RTNews html rtnv8n1 html http www acm org tog resources RTNews html rtnv8n1 html http www acm org tog resources RTNews html rtnv8n1 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv8n2.html%%==%%Ray Tracing News, Volume 8, Number 2%%==%%Ray Tracing News "Light Makes Right" May 16, 1995 Volume 8, Number 2 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%98312%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right May 16 1995 Volume 8 Number 2 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1995 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp graphics stanford edu pub Graphics RTNews ftp wuarchive wustl edu graphics graphics ray RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Ray Tracing Roundup Scanline vs Ray Tracing by Loren Carpenter and Sam Richards Pyramid Clipping by Erik Reinhard and Erik Jansen Copyrighting Raytraced Images by J Edward Bell Benton Holzwarth and Keith Octrees and Whatnot by Steve Worley and Eric Haines Learning Radiance by Kevin Matthews Radiance vs Pov by Cloister Bell Overlapping Refractors by Steve Worley and Eric Haines Raytracing Particle Systems by Jos Stam Answers References on Cone Tracing by Brent Baker Dumb Radiosity Question by Steve Worley and Eric Haines Good Book on 3d Animation by Scott McCaskill Animation Books by Dave DeBry Fast Algorithms for 3D Graphics by Glaeser Any Good by Brian Hook Order of Rendering and Fast Texturing by Bruno Levy Dan Piponi and Bernie Roehl FREE E Mag on VR Computer Graphics et al Issue 2 by David Lewis Color Quantization Bibliography by Ian Ashdown Introduction Today I got my latest ray tracer to work so it s time to celebrate by whipping out an issue Life s been a tad hectic as we ve joined the real world and are trying to get a product out the door One of the interesting things that came up in creating this product was that naming it was a nightmare It seems that the rate for new trademarks for computer software vs new trademarks for everything else in the world has a ratio of like 100 to 1 So finding an unused real word is pretty tough Modelit Sorry taken Ditto with a few others We did a name search on Perspectives and the coast was clear In between the time the name search ended and our claim papers were filed about 5 days Borland had snapped up the name Anyway we went with Trispectives commercial alert which will run on Win95 and Windows NT please buy a lot of them when they come out and help keep my kids fed and clothed What s it do Well check out ftp ftp eye com TriSpectives for some info eventually we re still setting up So my advice is to come up with incredibly short stupid programs this one computes prime numbers using the Sieve of Erastothenes this one does towers of Hanoi this one converts all text to lowercase and trademark each one with whatever unclaimed cool words are left Sell a few to relatives Sit back and wait for someone to want to use one and cash in I expect a 10 cut The other thing I ve been doing is converting the back issues of the Ray Tracing News to HTML for the Web Old wine in new bottles but there is some value in doing so it s nice to link related articles together and I like being able to directly connect from the issues to ftp sites mentioned though for the older issues many of those ftp sites no longer exist Raise your hand if you remember cs uoregon edu These issues are available on ftp ftp graphics stanford edu pub Graphics RTNews html index html Yes ftp not http though if you point your browser there it will look like http Do I understand No I leave it in Craig Kolb s hands who kindly made a home for the files and set things up My one comment is that if you dear reader ever undertake anything similar i e converting huge hunks of text to HTML learn Perl It s a wonderful text processing language and much much more works on everything is free etc etc I could sing its praises for hours on end instead let me say it s simply the best thing I ve learned about in the past year Anyway my perl program to do the conversion is about 500 lines and automatically adds headers and links where it thinks it should and it s right about 80 of the time this language takes much of the drudgery and mind numbing editing out of conversion Get it at ftp ftp cis ufl edu pub perl O Reilly Associates has some good books on perl they re at http www ora com and check out the programming section This issue covers some non RT Ray Tracing RT s Rendering Techniques I m half tempted to rename this ezine the Rendering Techniques Newsletter name suggested by Steve Worley but nah I ll keep the old name for now back to contents Ray Tracing Roundup If you d like to join the Animator s Mailing List mail to animate request dsd es com Dave DeBry debry cs utah edu Various Good Books Another WONDERFUL text that just come out this year from the Waite group is 3d Modelling lab It is AN EXCELLENT VERY VERY EASY read that will JUMP START you into the 3D world w rendering raytracing 3D modelling etc is deemed 3d Modelling Lab The book for 40 COMES WITH IMAGINE 2 0 this is a VERY VERY powerful 3d Modelling program I recommend it HIGHLY TO ANY graphics nut It is the best 40 I have EVER spent on a book Tricks of the Graphics Gurus The HOW TO ANIMATE book CD can get ya the goods on lots of 3D oriented procedures to use w your new found talents from 3D Modelling LAB GET IT Trust me Stuff like all these ratraced mirror balls and the like are EASY AS PIE w this book IMAGINE I just can t state enough Buy it You ll be thanking me Honest Rich Gortatowsky jdg raster Kodak COM FreeForm3D Modeler FreeForm 3D Bspline modeler brings truly affordable super fast Bspline modeling to your current 3D program rivaling that of high end workstations FreeForm can output to Lightwave Aladdin4D Real3D2 Imagine and Caligari POV and Rayshade are currently being added as well as Renderman object output in spline format FreeForm has real time object and point editing in all views and a real time 3D space through the camera perspective view In addition to the standard 3D tools FreeForm has tension adjustment to Bsplines giving NURB like control something that other Bspline modelers don t deformations rail extrusion morph extrusion cross sectional skinning automatic Bones creation real time Bones manipulation and on line help FreeForm even gives Real3D2 users a faster easier to use Bspline environment and up to a 20 times faster grayscale preview curve rendering FreeForm 1 7 is 70 requires at least a 68020 with a FPU and 1 2 megs of Ram Usable demo of V1 7 on Aminet ftp 128 252 135 4 in gfx 3D on the Lightwave ftp tomahawk welch jhu edu pub LW utils and on Compuserve Cash check or money order to Fori Owurowa 1873 75 Cropsey Ave Brooklyn NY 11214 718 996 1842 12 noon to 7pm Eastern enigma dorsai dorsai org Knowledge Media Ray Tracing CD ROM a commercial Knowledge Media Inc has been selling a CD ROM with POV and other ray tracing applications plus thousands of other files for two years now This CD ROM is updated every year and lists for 25 The disc is titled GRAPHICS 1 Resource and it is full 650 Megabytes It contains more 3000 files many of them zipped collections The actual file count exceeds 12 000 The disc contains the full POV set as well as DKB RAYSHADE RADIANCE RENAISSANCE RAYSLIDE etc It also contains image processing image converters fractal geometric mapping phigs and image editoring applications Where source code is available it is included The CD is an ISO9660 CD and can be used on most platforms Where available code for every platform supported by the application has been included The disc also contains hundreds of objects scenes and images The most recent version of this CD ROM is being released this month October 94 The title has been changed to better reflect the contents The new title is GRAPHICS Image Processing Ray Tracing The pricing is still 25 00 It not only contains the latest versions of these packages it also has an easy to use Windows 3 1 visual file browser entitled CLEAR VUE CLEAR VUE permits multiple layers of folders subdirectories and instant execution of the Windows 3 1 applications simply by clicking on them Text can be read images viewed or sounds played in the same fashion It makes Windows 3 1 as easy to use as the Amiga or Macintosh All this for only 25 00 Knowledge Media may be contacted at 1 800 78 CD ROM 1 800 782 3766 or 1 916 872 7487 voice 1 916 872 3826 FAX email pbenson ecst csuchico edu back to contents Scanline vs Ray Tracing by Loren Carpenter loren pixar com and Sam Richards samr panix com Loren Carpenter loren pixar com wrote That said look around you Pick some direction and point your imaginary camera over there Now how many pixels in that frame NEED a raytracer Who cares if the doorknob reflects your face Is it part of the story Or does the door just need a knob so it will look like a door Why raytrace 99 of an image that doesn t need it Sam Richards samr panix com replies I would just like to stick up my hand in favor of the poor old Ray Tracer At Blue Sky we have a pretty good ray tracer When I first got to Blue Sky I was dubious as to how much I actually would need it I have been pleasantly surprised how much we use it It is partly to do with the fact that we went through a phase of doing shaver commercials which require diffuse reflections as well as normal reflections But where it is really useful is having the ability of saying what would this scene look like if it were in the real world We can do radiosity too Sometimes having gotten a single frame that looks very real we then figure out how to cheat it using similar techniques to what a renderman user might do Often the render times are low enough that we don t need to do that and simply render it as final While I agree that for a large part of the environment you don t need a ray tracer there are quite a lot of object types that do have diffuse reflections I followed your advice and picked some direction in the room I am sitting at In practically every direction I looked at I could see nice soft shadows The problem with shadow maps is that you have to define the radius of the shadow however in the room I am in I can see the shadows getting blurier according to the distance all over the room The overhead light has a diffuse reflection in the glossy ceiling Diffuse reflections are everywhere the floor and numerous metal surfaces around the room And that s not even talking about the ambient light in the room All the things I saw in my room can be achieved with varying degrees of success with renderman and probably many other commercial and public domain scan line renderers However it does require operator intervention The nice thing about ray tracers is that you don t have to think about it You just give the lights a radius and the shadows that they cast are soft and correct We definitely pay a rendering cost for this But as machines get quicker the more the computer should do automatically However currently there is a downside which is that it is definitely slow there have been some jobs that I would dearly loved to have RenderMan however there are other jobs where if all I had was renderman I would have had many nightmares over trying to figure out how to render the scene In my ideal world I would have both a scan line and ray tracing renderman so that I at least could switch on the ray tracing when I really needed it for particular objects This would at least give me the speed of the scan line renderers and the power of the ray tracers when I need it back to contents Pyramid Clipping by Erik Reinhard erik duticg twi tudelft nl and Erik Jansen fwj duticg twi tudelft nl The paper concerning this work will be presented at the Sixth Eurographics Rendering Workshop in Dublin EAH Within a student project by Maurice van der Zwaan an implementation has been made of a directional ray traversal method that encloses a bundle of rays with a pyramid that is intersected with a bintree prior to tracing the rays This pyramid clipping algorithm is similar to Ned Greene s algorithm in Graphics Gems IV which intersects general polyhedrons with boxes We have compared the pyramid bintree algorithm with the recursive ray bintree and the standard ray grid intersection algorithm Testing was done on a Silicon Graphics Onyx workstation with 256 MB memory allowing rather large models to be rendered The balls and teapot models were taken from Eric Haines standard procedural database The grid method is from the standard Rayshade distribution and the bintree methods were implemented by us Rendering times in seconds for primary rays only are as follows Balls model Number of objects ray grid ray bintree pyramid bintree 11 21 40 28 16 25 50 92 23 06 33 25 27 86 821 24 68 37 95 30 24 7382 27 10 40 76 32 72 66431 31 71 42 98 37 30 597872 42 21 46 39 49 80 Teapot model Number of objects ray grid ray bintree pyramid bintree 23313 28 00 34 81 28 83 54433 30 82 36 52 31 60 98553 33 62 37 54 33 54 155673 36 10 39 12 35 98 225793 39 19 39 71 38 55 308511 40 78 40 85 40 44 403364 43 99 42 40 43 25 Despite the sheer size of the models the three algorithms are remarkably similar Pyramid clipping does not give additional advantages over the other two if used for speed purposes only However in parallel implementations it may be a superior method as the number of objects referenced per bundle of rays is lower than that for single ray techniques It may therefore be viewed as a technique to improve data coherence for efficient caching back to contents Copyrighting Raytraced Images by J Edward Bell beljl ucunix san uc edu Benton Holzwarth bentonh roscoe cse tek com and Keith dhiggs magnus acs ohio state edu How do you copyright a raytraced image J Edward Bell comments Well copyright is really quite simple In the case of a photograph when you take it it is copyrighted It s not registered which is a bit more involved but that only adds certain rights such as the right to receive damages for unauthorized usage All you have to do is afix to each copy the statement 1994 c Name assuming of course that the image was created in 1994 and that you put your name in for Name That s all there is to it Now in the case of a synthesized image I would think that you would have to do two things to truly protect it you would not only have to copyright the generated image but I would think you would have to copyright the model file that generated it For in strictly legal terms each run of the model file through a ray tracer again I would think would generate a different and copyrightable image Copyrighting the model file is the same as the image just put 1994 c Name in the file So in summary since 1976 the gist of copyright is you create it it s copyrighted As long as you label it as such anyone using it without your permission is guilty of infringement and can be tried and found guilty of a felony For you to sue for damages you have to register it Details of that can be obtained from the Trademark and Copyright Office It s a fairly simple process but it s not free Benton Holzwarth Benton Holzwarth tek com followed up I had an opportunity to chat with one of the company patent lawyers who pretty much confirmed all this If you produce something you hold copyright to it whether you add the copyright mark message or not If it lacks the copyright mark message an infringer can claim to be an innocent infringer By adding the mark message you deny them this defense He suggested the C in a circle I believe a C in parenthesis is sufficient for textual materials with your name year and the words All rights reserved which evidently has some international implications Registration is only really necessary if you begin legal proceeding against an infringer It may be desirable to register some items but only after they ve shown some degree of permanence Keith dhiggs magnus acs ohio state edu comments on So in summary since 1976 the gist of copyright is you create it it s copyrighted As long as you label it as such anyone using it without your permission is guilty of infringement and can be tried and found guilty of a felony For you to sue for damages you have to register it Details of that can be obtained from the Trademark and Copyright Office It s a fairly simple process but it s not free True but not 100 accurate You CAN sue for damages but the amount you can receive is limited I think to 25 000 There are different forms to register different types of material so it s good to write for information before registering for the first time Registration costs 12 but if you ve got something you ll be distributing it can be worth the time and trouble BTW Here s the address for more information and registration Copyright Office Library of Congress Washington D C 20559 and Keith added this Here s the actual section from a little publication called Circular 1 from the Library of Congress Copyright Office Circular 1 is their document describing Copyright Basics NOTICE OF COPYRIGHT For works first published on and after March 1 1989 use of the copyright notice is optional though highly recommended Before March 1 1989 the use of the notice was mandatory on all published works and any work first published before that date must bear a notice or risk loss of copyright protection Use of the notices is recommended because it informs the public tat the work is protected by copyright identifies the copyright owner and shows the year of first publication Furthermore in the event that a work is infringed if the work carries a proper notice the court will not allow a defendant to claim innocent infringement that is that he or she did not realize that the work was protected A successful innocent infringement claim may result in a reduction in damages that the copyright owner would otherwise receive the use of the copyright notice is the responsibility of the copyright owner and does not require advance permission from or registration with the Copyright Office Form of Notice for Visually Perceptible Copies The notice for visually perceptible copies should contain all of the following three elements 1 The symbol c the letter C in a circle or the word Copyright or the abbreviation Copr and 2 The year of first publication of the work In the case of compilations or derivative works incorporating previously published material the date of first publication of the compilation or derivative work is sufficient The year date may be omitted where a pictorial graphic or sculptural work with accompanying textual matter if any is reproduced in or on greeting cards postcards stationery jewelry dolls toys or any useful article and 3 The name of the owner of copyright in the work or an abbreviation by which the name can be recognized or a generally known alternative designation of the owner Example c 1991 John Doe back to contents Octrees and Whatnot by Steve Worley spworley netcom com and Eric Haines Steve wrote about how his SO and he were writing a ray tracer for her class assignment The octree we decided to use in particular was pretty successful We decided to add a bounding box to the objects in each octree node and this seemed to be a quite good speedup Note that this change really makes the octree almost more like a hierarchical bounding volume as opposed to a space partition especially after we allowed each node to hold objects as well as children nodes Anyway I know you re a big fan of hierarchical bounding volumes Any suggestions on good algorithms for making good partitioning I can see how an octree like partitioning algorithm could be a good starting point for one especially when you start making the octree s three dividing planes free to slide to even out the objects in the nodes This is a lot like color quantization algorithms eh But there s got to be some better references to building hierarchical BV s and I can t remember any papers that talk about specifics I DO remember you talking about a neat rendering optimization though when you trace a ray starting with the last hit object then moving up and out to the root instead of the other way around Ah well Sometimes going back to the basics really sparks things up again I m in the middle of designing a new hybrid rendering method mostly octree sorted Zbuffering for primary and ray tracing for secondary rays It isn t that exciting for small scenes but start adding lots of polygons and the thing cooks rethinking my octree for by girlfriend s tracer has got me rethinking my space subdivision for my new real renderer Better to research now before I start writing code Steve writes again later discussing his octree idea Consider an octree for ray tracing acceleration straight from Glassner It s just a space partitioning It uses object density to help control the depth of a local node split but other than that it s pretty object ignorant Now as a first level enhancement each node of the octree isn t completely filled from side to side with objects of course It will have objects in just a part of it Now construct an axis aligned bounding volume for the node so you know a tighter bound for where the objects are inside the node When you re traversing the tree you can intercept the ray with this node bounding volume and decide whether to enter the node or not The pure octree algorithm never shrinks the nodes so nodes are definitely opened even when the ray passes far away from the objects With the extra layer of bounding boxes you get trivial rejection a bit faster Another enhancement is when you have a large object say one that intersects 4 or 5 nodes of the 8 possible In this case copying the object well a pointer to it into each subnode becomes wasteful since the object will come up for intersection multiple times this is not that a big deal with a mailbox ID to prevent multiple testing but that s still overhead So sometimes it s nice to keep an object in an octree node and NOT distribute the object to children nodes Now if you do both these optimizations you get a nice little speedup from the pure octree 100 to 70 for Tetra 100 to 90 for the fractal mountain Not revolutionary just a nice little boost But if you notice the octree space partition has been awfully corrupted from what it was You have objects in middle nodes and effectively have oddly sized bounding volumes It s getting closer to an object bounding hierarchy not a space partition and he discusses his octree z buffer Ah my hybrid Still in the designing in my head stage but I think it has a lot of promise You see as perfect and wondrous as Ray Tracing is it sadly has a problem It s slow For primary rays especially in polygon scenes Z buffering or scanline wins often by a factor of 2 or more Me I d say by 200 or more EAH Now a standard Z buffer sorts its objects from front to back before rendering so there is surprisingly little overlap The pixels that need to be multiply shaded are trivial like just a few percent So no octree sorting is unnecessary and overkill in this respect What I am thinking of is the biggest disadvantage of z buffering You still need to scan convert each primitive If a certain poly is hidden it s pretty fast but it still needs to be tested Now ray tracing at its very very simplest does just the same thing it tests every polygon for every ray This of course is insane so we ve designed everything from bounding volume hierarchies to NuGrid to make as few tests as possible by rejecting collections of objects at once This same idea can be used for scan conversion If you have a scene which is a little cabin in a forest it is silly to scan convert the 10 000 polygons in a tree that can t be seen since it s behind the cabin So my idea inspired by the paper from last year s SIGGRAPH I shouldn t even say it s my idea Ned Greene s work I assume is to scan convert invisibly an octree node If any part of the octree node is visible you need to open the node up and scan convert the children This suddenly makes the complexity of scan conversion MUCH less dependent on the number of primitives Instead of being proportional to the number of polygons it s more like it s proportional to the number of VISIBLE polygons Now the neat part is that we can use the same IDENTICAL octree and trace rays for shadows and secondary reflections It s free ready to go Anyway that s the whole idea and it should in practice help complex scenes a lot but not make any big changes for small ones say with a mere couple thousand polygons Part of my reply Now as a first level enhancement each node of the octree isn t completely filled from side to side with objects of course It will Yes that s a good one and I m trying to recall if I ve heard it before Not offhand I think it s one of those ideas that gets mentioned and not tested Snyder Barr in Siggraph 87 talk about clipping triangles directly to the cell instead of just using the bounding box in order to hit fewer cells but that s not the same thing Maybe in one of those GI octree optimizing papers I know Glassner also talked about some octree tricks in his Spacetime Ray Tracing for Animation paper in IEEE CG A March 1988 More to the point Subramanian studied octree variants for a long time coming up with K D tree methods where the octree walls do slide Unfortunately it s only a tech report never made it to a journal Also interesting is J David MacDonald s Heuristics for Ray Tracing Using Space Subdivision in GI 89 which also does k d tree explorations It s an interesting question that isn t clear in my mind say that one corner of an bintree cell is occupied Is it better to just put a BV box around it as you do and which seems better to me or to do what Subramanian and MacDonald contemplate finding the optimal dividing plane for the cell i e a dividing plane which tries to get equal numbers of primitives in each of the two sub cells while also minimizing the total number of primitive pointers i e given 40 objects a 25 25 split is probably better than an 35 5 split even though the latter has no primitives in both cells Hmmm maybe the answer is both slide the walls when the cell has a lot of primitives and don t bother subdividing above some criteria For example a 38 38 split would be pretty useless and use bounding volumes as you have when you get to the point where further subdivision is useless It s interesting to think of mixing the methods For example at the 38 38 split the bintree is useless so maybe you go to grids or BV s or whatever Arvo s old idea of mixing schemes RTNews1 and wouldn t that be a fun coding task My gut feeling nowadays is that Jevans nested grids show a lot of potential essentially you get the power of octrees i e non uniformly filled space doesn t kill the scheme along with grid traversal speed Hmmm it s so hard to know and I guess the savings are not going to be more than 2x overall so probably pointless to worry about Which reminds me of another BV paper Subramanian Fussell in GI 91 talks about criteria for various methods Automatic Termination Criteria for Ray Tracing Hierarchies I should read this one again I just skimmed it before This same idea can be used for scan conversion If you have a scene which is a little cabin in a forest it is silly to scan convert the 10 000 polygons in a tree that can t be seen since it s behind the cabin Having an octree or BV hierarchy definitely comes in handy for z buffering I know that some packages out there already do things like check for full clipping of the bounding boxes and so toss out a lot of data as time goes by The nasty part of having to check each box against the z buffer is the obvious you gotta check each box against the z buffer There are some tricks there at least use the closest z value for the box for all z comparisons to save on all that interpolation use the 2D screen bounds for the box also sloppy but then you avoid all the edge table set up etc I suspect there might also be some way to quickly categorize octree nodes and their primitives For example the closest node to the eye obviously does not need box testing except for the quick clip test If this node has something in it then all neighboring nodes behind it could need the box z buffer test and so on by assuming that a node does not need the box z buffer test until there s evidence that something was in front of it might result in some savings Anyway fun to contemplate I ll be interested to see what you come up with back to contents Learning Radiance by Kevin Matthews matthews aaa uoregon edu One way to smooth out the Radiance learning curve is to build models with DesignWorkshop a commercial Macintosh based 3D modeler with a really nice live 3D interface DesignWorkshop has a direct export function for Radiance that not only provides a geometry file with sophisticated sky function all set up etc but also automatically creates a couple of shell scripts sufficient to completely automate your initial rendering of a view of a model Of course if you become a Radiance fiend you ll want to do more than the DW translation builds in but even them it is a major time saver and dumb error preventer back to contents Radiance vs Pov by Cloister Bell cloister hhhh org Jonathan Williams williamj cs uni edu wrote My question is I do basically artistic renderings and am not incredibly hung up on reality What benefits if any does Radiance have over Pov I m looking at things such as easier syntax not likely Easier syntax is certainly not one of Radiance s benefits Writing Radiance files until you get the hang of it is truly tortuous It s really not that bad once you do get the hang of it but the learning curve is very steep I would say that the biggest benefit to the artist is that Radiance s scene description language while being difficult supports generic shape primitives and texture primitives This allows you to create anything well within the limits of your machine s memory etc you can think of POV by contrast does limit you to the fixed and not entirely general shape primitives that it has although heightfields somewhat make up for this albeit in a less than elegant way and even more so to the textures that it has A secondary or at least less important to me benefit is Radiance s more accurate lighting If you have the CPU to burn and the patience you can get much better lighting in your scenes than with POV POV s strong points are that it does have a heck of a lot of different shape and texture primitives and that its input language is much simpler POV is truly a great renderer for the beginning and intermediate computer artist But it lacks some of the more advanced features that Radiance has and in the end that s why I switched jhh hebron connected com Joel Hayes Hunter writes about POV vs Radiance more built in shapes Well yes and no POV has more primitives but Radiance handles shapes generically If you like lots of primitives then that s a plus for POV and a minus for Radiance but that is also a limitation since you re limited to what you can do with those primitives Notice the incredibly prevalent use of heightfields in POV to get around limitations of primitives On the other hand if you don t mind a little math in order to specify interesting shapes generically then Radiance wins hands down even though it only has 9 or so object primitives It has the primitives you are most likely to want and anything else can be made with varying degrees of effort by parametrizing the surface you want to construct and specifying functions of those parameters which yield points on the surface Clearly Greg Ward the author of Radiance had this tradeoff in mind when he wrote Radiance I d be willing to bet that he was faced with the choice between implementing dozens and dozens of procedures for handling all sorts of primitives and doing the job once generically and so he chose the latter This tradeoff is a win for shapes that do not easily decompose into geometric primitives but a lose for ones that do Some examples are in order taken from a scene I m working on currently 1 Consider a 90 degree section of a tube In POV this is a trivial CSG object something like intersection difference cylinder the outer cylinder center of one end center of other end 0 5 radius cylinder the inner removed cylinder 0 4 box the 90 degree section of interest texture pigment Blue In Radiance this object is difficult to produce Consider that it has six faces only 2 of which are rectangular Each face has to be described separately the rectangular end pieces polygon blue end1 0 0 12 4 0 0 5 0 0 5 0 1 4 0 1 polygon blue end2 0 0 12 0 5 0 0 4 0 0 4 1 0 5 1 the curved corners of the towelbar gensurf blue right outer corner 5 cos 3 t PI 5 5 sin 3 t PI 5 s 1 10 s gensurf blue right inner corner 4 cos 3 t PI 5 4 sin 3 t PI 5 s 1 10 s gensurf blue right bottom 4 1 s cos 3 t PI 5 4 1 s sin 3 t PI 5 0 1 10 s same as previous but translated up gensurf blue right top 4 1 s cos 3 t PI 5 4 1 s sin 3 t PI 5 0 1 10 s xform t 0 0 2 Clearly POV wins hands down on this shape But that s because this shape has such a simple decomposition in terms of regular primitives actually I do Radiance a small disservice with this example since Radiance does have some CSG facilities which this example doesn t make use of 2 Consider a curved shampoo bottle modelled after the old style Head and Shoulders bottle before they recently changed their shape This bottle can be described in English as the shape you get when you do the following Place a 1 25 x 0 625 oval on the ground Start lifting the oval As you do change its dimensions so that its length follows a sinusoid starting at 1 25 peaking soon at 2 0 then narrowing down to 0 5 at the top while the width follows a similar sinusoid starting at 0 625 peaking at 0 8 and ending at 0 5 By this point the oval is a circle of radius 1 and is 8 units above the ground The shape swept out by this oval is the bottle In Radiance this bottle is described as the above described shape gensurf blue body 1 25 75 sin PI 5 PI t 4 cos 2 PI s 625 125 sin PI 5 PI t 4 sin 2 PI s 8 t 20 20 s the bottom of the bottle which i could leave out since no one will ever see it gensurf blue bottom s 1 7803 cos 2 PI t s 0 7134 sin 2 PI t 0 1 20 an end cap which people will see blue ring endcap 0 0 8 0 0 8 0 0 1 0 0 5 In POV well I ll be kind and not describe how this could be made in POV The only answer is heightfields which a are tedious to make and b take up lots of space Clearly Radiance kicks butt over POV on this example That s because this shape doesn t have a simple breakdown in terms of geometric primitives on which one can do CSG but it does have a simple description in terms of parametric surfaces So depending on what sort of objects are in your scene you may decide to go with POV because they re simple and POV makes it easy or you may decide to go with Radiance because they re not and because you like the feeling of mental machismo you get for being able to handle the necessary math to make gensurf the generic surface constructor do what you want different lighting and texture models etc Radiance does win hands down for lighting simulation That s what it was written for and it s hard to compete with something that is the right tool for the job With textures you are again faced with the choice of having a system with several primitive textures that you can combine however you like POV and a system that gives you many very good material properties and allows you to define your own textures mathematically in whatever way you can dream up There are textures that Radiance can do that POV simply can t because POV s texture primitives can t be combined to handle it For example don t worry this isn t as nasty as the previous how about a linoleum tile floor with alternating tiles like you often see in bathrooms where the tiles form groups like this You get the idea The problem is how do you get the lines to be one color texture and the open spaces to be another In POV the answer is you use an image map This is fine except that it leaves the scene s author with the task of creating an actual image file to map in for which s he may not have the tools readily available and that image maps take up a lot of memory although probably not for a small example like this and tweaking them later may not be simple In Radiance you can describe this floor mathematically which is pretty easy in this case since it s a repeating pattern a tile floor pattern foreground is yellow background is grey foreground 1 1 0 background 8 8 8 xq mod Px 16 8 yq mod Py 16 8 x mod mod Px 16 8 y mod mod Py 16 8 htile x y if abs y 4 25 if abs y 4 3 75 0 1 0 vtile x y if abs x 4 25 if abs x 4 3 75 0 1 0 floor color linterp if xq if yq htile x y vtile x y if yq vtile x y htile x y foreground background Granted this is horribly unreadable and is rather tricky to actually write What it boils down to is a bunch of conditions about the ray floor intersection point Px Py such that some of the points are eventually assigned to be the foreground color and some the background color I won t explain the details of how those expressions produce the above pattern but they do Also note that I ve simplified this example down to one color channel in an actual Radiance function file you can specify wholly different functions for the red green and blue channels of the texture you re defining The salient feature of this example is that Radiance has facilities even if they re hard to use for creating any texture you like so long as you can describe it mathematically in some form or another And if you can t you can always fall back on an image map as in POV POV on the other hand offers you a pile of built in textures but to create a fundamentally different texture you have to actually add some C code to POV Many users are not programmers or may happen to be on a DOS system where you don t actually get a compiler with the system which makes this solution impractical And even if they can program a new texture it will be a long time before it can get incorporated into the official POV distribution and thus be available to people without compilers Of course POV has lots of neat ways to combine textures and do some pretty eye popping stuff but we all know how much of a speed hit layered textures are This is in my opinion why we see such an overuse of marble and wood textures in POV marble and wood are reasonably interesting to look at and anything else is either boring not worth implementing in C or too slow to do with layered textures I m not really concerned about speed as I m running on a unix box at school but if it s going to take days to render simple images a ball on a checkered field I d like to know I ve actually been pretty impressed with Radiance s speed It compares quite well to POV I would say that it is on the whole faster than POV although as scene complexity increases in different ways that comparison can go right out the window For example POV gets really slow when you have layered textures and hoards of objects Radiance does fine with lots of objects because of the way it stores the scene internally but also slows down with complex textures Radiance suffers more imho than POV when adding light sources especially if there are any reflectives surfaces in the scene This is due to the mathematical properties of the radiosity algorithm Also Radiance has a lot of command line options that allow you to cause the rendering to take much much longer in order to further improve the accuracy of the simulation Life is full of tradeoffs In the balance I d say that for the day to day work of previewing a scene that is under development Radiance is faster Radiance wins in simple scenes by using an adaptive sampling algorithm that can treat large flat areas very quickly while spending more time on the interesting parts of the image When you crank up the options and go for the photo quality lighting with soft shadows reflections and the whole works be prepared to leave your machine alone for a few days The same is true of POV of course Also I believe its primitives and textures are quite limited only a few of each See above In addition Radiance has a lot more primitive material types than POV does POV treats everything more or less as if it were made out of stuff that has properties you can set about it That s fine most of the time but isn t very realistic different material types do actually interact with light differently in a physical sense Radiance gives you different material types to handle those differences Radiance takes the approach to materials that POV takes to shapes lots of primitives But apparently nothing in the whole universe models actual light as accurately as this program does so if that s what you want go for it Well it s a big universe so I d hesitate to say that But I would venture to say that Radiance is the best free package that you ll find for doing lighting simulation It s still missing some features that I d like to see like reflection from curved surfaces i e caustics and focussing of light through transparent curved surfaces Of course I know how hard those things are to implement so I m not seriously criticising any renderers out there for not doing them back to contents Overlapping Refractors by Steve Worley spworley netcom com and Eric Haines I ve done it I ve finally implemented a full ray tracer and it s finally complete I do Whitted and Torrance Cook shading distributed BDRF reflection and refraction algorithmic textures image mapping adaptive antialiasing displacement mapping Phong shading light penumbras depth of field volume rendering for stuff like patchy fog really a hypertexture hook and probably half a dozen other things Anyway it works great and I m very pleased with it Now for my dumb question The only real hitch I ever had with the program was trying to figure out how to do refraction PROPERLY I mean simple refraction transmission nothing fancy Figuring out the refraction ray at a hitpoint is a snap of course my problem was figuring out the index of refraction ratio In my tracer every object is assigned an index of refraction I assume air is 1 0 Now I have a hit point and it s transparent so I fire a refraction ray Suddenly my coding comes to a stop I need to know TWO indexes of refraction one for the material the ray is coming from and one for the object I have just hit ARGH This was annoying It took HOURS to get working You see you can t just store the index of refraction of the material you re traveling in then use it with your hit surface refraction index This works great for inital refractions but not for secondary ones like entering and leaving a sphere your second ray says I m travelling through an index of refraction 1 5 and I just hit a surface with index 1 5 I ll go straight through with no refraction Whups It gets bad You really need to TOGGLE between indexes of refraction say from 1 0 to 1 5 on the first hit with a material and 1 5 back to 1 0 on the second hit But even that s not true What if you have an extra layer like a glass tumbler filled with water then you go from 1 0 to 1 5 1 5 to 1 33 1 33 to 1 5 1 5 to 1 0 Geez This was a much harder problem than I had ever expected it would be I ended up implementing a stack of refraction indexes If I hit a new material I d refract using the index on the top of the stack and the index of the new material If the hit was the same material I had LAST put onto the stack I popped the stack and used the top two indexed for the ratio Finally this worked Of course it breaks for non solid geometries like a raw polygon hanging in the air but that s just a bad input specification While my stack works it s awfully messy especially since I need to be careful when recursing with REFLECTION rays I sort of need to lock the stack at a certain level so that a refraction after a reflection doesn t inadvertently pop a layer that s needed in the parent shading call So my dumb question to you is How The Heck Is Refraction Really Done It s interesting that throughout the entire design and implementation of my pretty complete ray tracer this was the only thing that really made me think geez how are you supposed to do this There s got to be a standard method for keeping track of indexes of refraction I get the feeling any solution will be stack based but there s go to be a better way than my hack especially when I want to deal with reflection nodes Surprisingly this problem doesn t really seem to be discussed in Intro to Ray Tracing I had never really thought about it before until the actual second I started typing in refraction code Whups So tell me all knowing Master Tracer what s the True Method Of Refraction Eric s reply The ray tracer sounds pretty great Displacement mapping I assume you mean bump mapping and not RenderMan displacement mapping where the surface really does get deformed Are light penumbras via stochastic ray tracing or is something more clever going on this is a problem I think about every now and again I hate having to shoot 16 shadow rays per intersection per light just to find all 16 hit the light or all 16 missed this is like 90 of what happens with these things so I m looking for simplifications Now for my dumb question The only real hitch I ever had with the program was trying to figure out how to do refraction PROPERLY I If we assume a well behaved scene then just keep track of whether you re hitting the front face or back face If front then you re entering a refractor if back you re exiting Unfortunately you can get overlapping refractors which strictly should not be possible like say a glass marble in a glass of water No one in their right minds models the extra sphere where the water ends and the marble starts i e they just plunk the marble in the water and hope the software figures it out In this case yep a stack is necessary If you have something really stupid like two overlapping spheres with different indices of refraction then all bets are off and hey what the heck material is that place where the two spheres overlap This reminds me how did you get around the epsilon problem RTNews2 i e when you launch a ray from a surface how do you avoid hitting the surface itself I like identifying each ray as entering or exiting when testing the ray against the object it originated upon For example you start two rays from a glass torus A torus can have multiple intersections so it s a good test case A reflection ray is considered entering that is it s not traveling through an object but rather is going through space and could enter an object When it s tested against the torus the only intersection found is at say 0 0000121 i e the original torus itself due to precision error Normally this would be a valid intersection if no corrective technique is performed or perhaps you rely on some epsilon value which doesn t always work depending on your data if the epsilon is too low black dots appear on the surface too high and you start to miss valid intersections where objects touch and holes appear Since we know that the ray is entering so the only valid intersections are those in which the ray is entering the surface if it s exiting then the intersection can be ignored When we take the normal at the torus intersection point we find that it points in the same direction as our ray so this intersection at 0 0000121 is an exiting intersection and so can be safely ignored There s nothing deep here just the realization that if the reflection ray and the exterior surface s normal point the same direction then the intersection can be ignored similar to backface culling Conversely say a refraction ray an entering ray hits at 0 0000327 and 0 22432 The first intersection is an exiting intersection so we can ignore it and the next one is used because we find it s an entering ray Things get easier for spheres entering reflection rays which originate on a sphere can never hit the sphere Polygons are trivial of course a ray originating on a polygon can never hit the polygon Note that there s no use of any epsilon in this method objects are simply handled correctly by looking at the nature of the object or the intersection itself compared to the surface normal back to contents Raytracing Particle Systems by Jos Stam stam dgp toronto edu dyoung superdec uni uiuc edu David Young writes I d like to have some input on how others have handled particle systems ray tracing I have a few ideas for fiery little particles as opposed to smoke or water vapor particles I have used particle systems to model various gaseous phenomena The motion of the particles is achieved through the superposition of wind fields I use smooth wind fields directional point vortex to model the average motion sketch of the motion and a turbulent wind field to model the small scale motions The particles are ray traced by blurring them in space and time density highest at center of the blob The rendering is efficient as the transparency along a ray is a function of the ray to the center of the blob only By using a hierarchical tree of bounding spheres the fuzzy particles can be rendered from front to back efficiently A cheap trick to model fire is to assign a point light source to each particle Yikes even assuming no shadow computations EAH This is pretty expensive though and not PC physically correct References Reeves Particle Systems A Technique for Modelling a Class of Fuzzy Objects SIGGRAPH 83 359 376 Sims Particle Animation and Rendering Using Data Parallel Computation SIGGRAPH 90 405 413 Stam and Fiume Turbulent Wind Fields for Gaseous Phenomena SIGGRAPH 93 369 376 Also Wyvill s group at the U of Calgary has a method of raytracing fuzzy particles Don t know if it is published And there are many other papers I have left out E mail me for more details back to contents Answers References on Cone Tracing by Brent Baker brent COR EPA GOV Frank Belme writes I was wondering if anyone could give me references on ray tracing with cones I have read the paper from the SIGGRAPH 84 proceedings by J Amanatides sp Any other references would be greatly appreciated PS I don t mean how to ray trace a cone I mean ray tracing using a cone instead of a ray There is a brief explanation of cone tracing in the text Advanced Animation and Rendering Techniques Theory and Practice by Alan and Mark Watt pp 260 262 They reference the Amantatides paper you mention and also R L Cook et al Distributed Ray Tracing Computer Graphics 18 3 pp 137 44 Proc SIGGRAPH 84 The Watt Watt book also discusses Beam Tracing which is similar to cone tracing but motivated by efficiency concerns rather than image quality Some references Heckbert and Hanrahan Beam Tracing Polygonal Objects Proc SIGGRAPH 84 pp 119 27 Shinya et al Principles and Applications of Pencil Tracing Proc SIGGRAPH 87 pp 45 54 Speer et al A Theoretical and Empirical Analysis of Coherent Ray Tracing Computer Generated Images pp 11 25 Proc of Graphics Interface 85 At first look cone tracing is a cool idea I don t know if anyone has found a good solution its problems back to contents Dumb Radiosity Question by Steve Worley spworley netcom com and Eric Haines Actually an insightful radiosity question but that was the title of the original note EAH My latest topic is radiosity and I ve been reading paper after paper on it I have a dumb confusion which doesn t seem to be explicitly stated in any of the papers I though you might help me Obviously the radiosity solution computes the lack of first order light flux on directly shadowed surfaces patches which have no direct line of sight to a prime light source and this greatly affects their own respective emmitivity Second third and nth order effects from multiple diffuse bounces get added until you say OK good enough Now you have the radiosity solution When rendering you now know the diffuse emmitivity from each patch This includes the fact that shadows those first order ones have much less emmitivity that is your shadow computation has already been done and so this is not necessary to compute when rendering Yes Yes EAH In fact this is one of the primary uses of radiosity those primary shadows since they are formed from patch to patch form factors and not point to point ray sampling are soft fuzzy edged shadows Huzzah huzzah Of course the resolution of this fuzzy shadow area depends on your meshing Ok Here s my dumb question Using radiosity to make soft shadows works but unless you re doing a walk through or something isn t it horribly inaccurate and inefficient Standard distributed ray tracing for fuzzy shadows can operate on a pixel by pixel basis and give much more accurate results It s not based on a mesh it s on demand at whatever accuracy you need The goal of radiosity must not be those simple first order shadows but for the color bleeding and multiple order diffuse lighting effects If you just wanted fuzzy primary shadows you d just use distributed ray sampling which is faster and much more accurate you could use this ray testing just for shadows if you like using a z buffer for geometry or whatever if you wished With this in mind I keep thinking either I ve missed a point in practical radiosity implementation or that there s a MUCH better way to handle this problem The way I would do this would be to solve the radiosity equations but keep track of first order emmitivity and 2nd order and higher emmitivity separately The total emmitivity used in the computation of the radiosity solution is just the sum of these two The first order emmitivity would be ONLY from the flux received from the original lights whatever is a true bright light source The radiosity solution would continue like normal progressively refining multiple order interreflections using total emmitivity until that reaches a solution good enough for your tastes At RENDER time though you d take and only apply the emmitivity due to NON first order effects The first order effects would be recomputed on a sample by sample basis by distributed ray tracing to each light Since this primary light contribution is done using ray casting at need its error will be very low and there will be no mesh artifacts The radiosity information for the multiple order effects can be added for the ambient light contribution this is much more subtle and although it has meshing artifacts it provides that global indirect lighting solution that ray sampling can t easily do My question is whether I m just being dumb and this is the way that everyone does it already After looking at a couple radiosity papers which talk about meshing artifact reduction every example seems to be from a primary shadow edge this annoys me since we know how to compute these first order fuzzy shadows pretty easily and radiosity s real strength is for multiple order effects and color bleeding So tell me how is it really done in practice Eric s reply In fact this is one of the primary uses of radiosity those primary shadows since they are formed from patch to patch form factors and not point to point ray sampling are soft fuzzy edged shadows Huzzah huzzah Of course the resolution of this fuzzy shadow area depends on your meshing And which is something that s fairly bogus about radiosity the shadows are always soft even when they should be sharp and in fact sharp very expensive as you note since you have to go to a high mesh factor along the shadow edges or otherwise compute them a la Campbell or others Ok Here s my dumb question Using radiosity to make soft shadows works but unless you re doing a walk through or something isn t it horribly inaccurate and inefficient I agree as an aside professional illustrators tend to think 3D graphics is mostly a waste of time if no animation is performed and they re mostly right it s easier for them to just paint what they want in a still than to model something in which you are going to make just a single image The goal of radiosity must not be be those simple first order shadows but for the color bleeding and multiple order diffuse lighting effects If you just wanted fuzzy primary shadows you d just use distributed ray sampling which is faster and much more accurate you could use this ray testing just for shadows if you like using a z buffer for geometry or whatever if you wished Indeed this is just the sort of thing we do in our rendering package you can easily blend ray tracing and radiosity One way we do it is to still use the radiosity solution for primary shadows then the ray tracing becomes a matter of intersecting a surface and finding the shadow information in the corresponding mesh This saves a lot of rendering time no shadow testing If you think the mesh stinks though you can then though we haven t made this a released feature make the ray tracer just do normal shadow testing or fuzzy shadowing Makes for cool pictures nice curved surfaces with reflections and soft shadows and nice ambient Though to be honest I don t think meshed radiosity does a great job with interreflection computations Light falls on the floor from overhead lights How do you correctly split up the floor so that light on it correctly bounces around Some areas are in shadow and some light areas are right next to receiving polygons e g the walls and cause some problems All the problems are solvable but the number of different important situations is real nasty The advantage radiosity has is that most people don t know care about the exact correctness of the interreflections as long as they are there This is an interesting issue What if an architect uses radiosity and shows a client a rendering of his potential building the building gets built but never looks like the rendering in terms of lighting Credit to Dan Ambrosi now at SGI for this question Artist s renditions of a building never look like the real thing either but no one expects them to Using scientific lighting computation models could be an interesting legal headache someday Also getting back to the too soft shadows this is a bonus Photographers usually have to work hard to soften or get rid of shadows in commercial display photos for example With radiosity there is rarely any doubt that it s a shadow you re looking at unlike standard ray tracing where sharp shadow lines often subtract from the overall understanding of the image BTW did you read my net paper about some of the interesting problems in radiosity It s at ftp princeton edu pub Graphics Papers Ronchamp tar Z My question is whether I m just being dumb and this is the way that everyone does it already After looking at a couple radiosity papers which talk about meshing artifact reduction every example seems to be from a primary shadow edge this annoys me since we know how to compute these first order fuzzy shadows pretty easily and radiosity s real strength is for multiple order effects and color bleeding I agree it s just sort of lazy to do primary shadows with radiosity but laziness is one of the goals of computer graphics Do as little as you can get away with I m serious The right way for any of this is a million rays per pixel and monte carlo till you drop talk to Pete Shirley While we wait the 50 years it ll take to get computers this fast we re biding our time coming out with algorithms for the interim Sort of like what people did with hidden surface until Z buffer hardware appeared Anyway I do have to admit that with Ronchamp it was great to have a solution which took a day to compute 5000 shots of emmisivity but then could be viewed almost interactively and could be rendered nicely very quickly 15 minutes a frame with 10 of those being for computing the beams o light I added in using Monte Carlo Computing diffuse shadows would have probably added 30 minutes or so at least a frame given the 64K polygon database and 6 or so primary light sources instead of 2 months of frame computation it would have been 6 and I would have lost my mind baby sitting our flakey Apollo DN 10000 machine I m so happy we finally tossed this sucker Anyway I ve rambled on long enough just my view take it all with a grano of salo Steve replies You have cleared up some of this confusion Indeed the precomputed shadows will dramatically decrease rendering time for anims I guess I think more about the theory versus the practice I was thinking about accuracy mostly under the theory that if you re going to do radiosity you re obviously CONCERNED with accuracy I guess this goes especially for something like Radiance which really tries to be a simulator of real lighting calculations This saves a lot of rendering time no shadow testing If you think the mesh stinks though you can then though we haven t made this a released feature make the ray tracer just do normal shadow testing or fuzzy shadowing Ah now this relates to what I was thinking about Replacing the primary shadows in the radiosity with a more accurate direct computation How do you do this Do you split the emmisivity contributions in the original matrix into primary and n th order effects In terms of accuracy this seems like the best possible strategy The biggest problem with radiosity is high frequency details which need tight meshing at the intensity boundaries And sharp details are really only seen at the primary shadow boundaries not the nth order interdiffuse reflections I can see how tempting it is to use the radiosity for direct shadows they ARE after all precomputed and ready to use I agree that the best way to render is to use WHATEVER method that gives you the best results for the least effort What I am thinking about though is that perhaps using ray traced first order shadows and radiosity for the leftover multiple order effects might let you get away with a horribly coarse radiosity solution little or no adaptive meshing more error in the matrix solution etc Why put a lot of effort into a refined radiosity solution if the nth order effects are relatively robust to errors Again I keep thinking about all the papers that try different ways of increasing the radiosity accuracy by adaptive meshes more accurate form factors etc and most of these show pictures with before and after radiosity images What strikes me with these images is that the visible error is blatant in the primary shadows mostly from coarse meshing and pretty much undetectable for the higher order shadings I reply Ah now this relates two what I was thinking about Replacing the primary shadows in the radiosity with a more accurate direct computation How do you do this Do you split the emmisivity contributions in the original matrix into primary and n th order effects Yes I had that in the system for awhile though our latest architecture does not use this We finally didn t bother with distributed ray traced shadows because they took too long there were issues about sampling area lights with ray tracing etc Instead we went with a scheme where we recorded how much each vertex was in shadow with respect to the first 16 primary lights in the scene with 16 levels i e 4 bits of accuracy This allowed us to at least get the specular highlights more or less correct when ray tracing or even just doing scanline rendering highlights were a lot more important than perfect fuzzy shadows and lots cheaper to compute too In fact this shadow bit technique is a part of some of HP s hardware boxes for this purpose giving us realtime radiosity with specular highlights without the shadow bits you d get specular highlights on surfaces in shadow which was disturbingly wrong Another interesting technique Do radiosity then shoot rays from the eye to the visible mesh vertices in the image just like you re ray tracing Blend in the highlight reflection transmission colors you compute into the mesh point s RGB radiosity contribution Now you display the polygons like you normally do with meshed radiosity voila soft reflections and transmission because you interpolate between samples Obviously the ray traced contributions are view dependent so you compute these and add them into the vertices on the fly i e when you output a polygon Since you re ray tracing you can t do this massively quickly but there are a lot less vertices visible normally than there are pixels in an image so it s pretty quick good for previewing at least and it sometimes looks better than the perfect reflections offered by classical ray tracing Yes you get various artifacts soft reflections when they should be hard and meshing artifacts galore just like primary light meshed radiosity but many of these could be attacked in the same way as meshed radiosity check continuity of mesh point samples and add new samples to the mesh if needed I like this one a lot you do get a lot of the punch of radiosity and ray tracing and soft reflections to boot without extremely serious sampling The Microcosm system turns out to have implemented this algorithm sans subdivision and meshing of objects See RTNv7n5 What I am thinking about though is that perhaps using ray traced first order shadows and radiosity for the leftover multiple order effects might let you get away with a horribly coarse radiosity solution little or no adaptive meshing more error in the matrix solution etc Why put a lot of effort into a refined radiosity solution if the nth order effects are relatively robust to errors Yes I think I touched on this last message People really don t care about utter accuracy for the second order things they just want some light on the matter har har and slowly varying light is a lot more interesting than dull ambient add in light Which is why a lot of the artifacts from radiosity techniques meshed or Radiance like usually don t matter You just have to make sure you don t get real serious artifacts and you could do this by filtering out the high frequencies and or high amplitude nth order effects in other words if you smooth out the various continuity changes so that the second order lighting contributions do not dramatically change over a surface then you normally won t get any weird second order lighting artifacts This philosophy comes from that great computer graphics guru Chee Ting but it is one way to make pretty vs realistic pictures Of course you also won t get the right answer but It s interesting to look around my own house for ugly lighting situations the sun hits the corner of a mirror and that reflected light places a distorted rectangle on the wall In a photo of the wall do I really want to see this sharp blob of light Probably not if I m just showing someone how nice my living room looks Maybe not even if I m doing an analysis of general room lighting The interesting thing is that there are often weird blobs of light around On my desk I can see four funky bright lines of light from where the four fluorescents overhead penetrate a narrow crack between two shelves If this lighting pattern was in a computer graphics image we d all speculate as to what caused this bug Another quick story in the new computer graphics lab at Cornell there s a hallway where the light comes on down the corridor You can see regular fluctuations on the walls of the lighting it s where the drywalls come together and there s a discontinuity at each seam My comment about this hallway is look at the meshing artifacts in this image Which is indeed what they would look to us graphics geeks like if you perfectly rendered it onto a computer screen So it s an interesting question whether realism is always what you really want We should of course continue to research photorealism but there s also a definite need for photoidealism to coin a word where you want the nicest looking image given a set of inputs not the most realistic Of course nice is very subjective but adding soft shadows getting rid of confusing reflections which would be more expensive for ray tracing and stray blobs of light like the mirror blob and similar stuff is interesting to contemplate Anyway that s my zany idea for the day Steve replies Hey an add on to your super fast vertex tracer idea This might be kinda cool not just for previews but for a full tracing acceleration scheme When you fire secondary rays you can look at the secondary hits that the current polygon s vertices found and test those first You ll likely get a hit so you ll cull any more distant intersections Same with shadows It s really a type of last hit cache but it s indexed in object space not image space I dunno how much this could help but it d be awfully cheap On another topic Eric that s a really sweet trick you have for adding in soft reflections and transmissions Sure you re geared up to do intensity interpolation for every hit anyway so the extra overhead of tracing a few thousand vertices is nothing compared to tracing every pixel Very ad hoc since as you say everything will be soft and not perfect but it d give you a very very fast and fairly good idea of the reflection and transmission effects You could even divorce this from the radiosity and use it in any tracer and use it for shadows as well Again you d get artifacts but speedwise it d rock and roll I reply Exactly Just determine vertex visibility trace rays to them shade them and output the polygons to a scanline renderer The thing is though that meshing the suckers with respect to some screen space resolution is really worthwhile to look half decent so you still may want to do object space meshing vs taking every 64th 8x8 pixel and ray tracing it I ll leave it to you to figure out the problems with this idea bad because suddenly you lose the edges of the objects from the eye s point of view if you simply interpolate every 64th pixel For an example of why you want to mesh imagine a large polygon being rendered With no sample points in the interior the shading depends entirely on what is computed at the corners and that s it A spotlight shining on the middle of the polygon but not the corners will cast no light at all when doing Gouraud shading So you still want to do something like initial radiosity meshing to capture the shading Essentially this is a poor man s RenderMan RenderBoy instead of meshing an object down to the subpixel level you mesh it to some fairly reasonable resolution e g each poly covers say 100 pixels or less and shade it from there It might be fast enough for interactive viewing if you had hardware Z buffering and Gouraud shading Wow that d be really interesting to see Like you noticed you really need just a few thousand rays for an image a three magnitude speed increase in ray tracing time though the meshing s a pain unless you just do it once up front and call it a day back to contents Good Book on 3d Animation by Scott McCaskill jmccaski CS Trinity Edu CIDAAL Electronics cidaal perth DIALix oz au wrote Does anybody know of a good book on 3D graphics algorithms I need something pretty detailed that covers solids shading lightings and all that jazz Any help or recommendations are welcome Thanks in advance I have looked at a lot of graphics books over the last several years and my current favorite is 3d Computer Animation by John Vince Although not as thorough as the book by Foley et al I believe that one is Computer Graphics Principles and Practice it gives some of the most easily understandable explanations I ve seen It covers everything you mentioned and more It s published by Addison Wesley and you should definitely take a look at it If it turns out that it s not detailed enough for you then the book by Foley et al is what you need it s considered by many to be the bible of computer graphics and for good reason back to contents Animation Books by Dave DeBry debry cs utah edu from the Animators Mailing List see the Ray Tracing Roundup EAH mvidal netcom com spilled a Coke on the keyboard producing this I just subscribed to this list and want to learn about traditional and computer animation Are there any books that readers of this list can recommend Here s some of the books listed on this list in the past concerning that question TECHNICAL Preston Blair Animation Walter Foster Publishing Preston Blair How To Animate Film Cartoons Walter Foster Publishing John Canemaker Storytelling In Animation The Art Of The Animated Image American Film Institute John Cawley Jim Korkis How To Create Animation Pioneer Press Shamus Culhane Animation From Script To Screen St Martin s Press Betty Edwards Drawing On The Right Side Of The Brain Jeremy P Tarcher Inc Milt Gray Cartoon Animation Introduction To A Career Lion s Den Bob Heath Animation In 12 Hard Lessons Thomas W Hoffer Animation A Reference Guide Greenwood Press John Lasseter Principles Of Tradition Animation Applied To 3D Computer Animation SIGGRAPH 87 Computer Graphics Vol 21 No 4 Kimon Nicolaides The Natural Way To Draw Houghton Mifflin Kit Laybourne The Animation Book Crown Publishers Roy P Madsen Animated Film Concepts Methods Uses Interland Publishing Inc Frank Thomas Ollie Johnston Disney Animation The Illusion of Life Abbeville Harold Whitaker John Halas Timing For Animation Focal Press Tony White The Animator s Workbook Watson Guptill Publications S S Wilson Puppets And People Tantivy Press Education Of A Computer Animator SIGGRAPH 91 Course 4 HISTORICAL Joe Adamson Tex Avery King Of Cartoons Da Capo Paperback Patrick Brion Tex Avery Schuler Christopher Finch The Art Of Walt Disney From Mickey Mouse To The Magic Kingdoms Abrams Chuck Jones Check Amuck The Life And Times Of An Animated Cartoonist Avon Books Leonard Maltin Of Mice And Magic A History Of American Animated Cartoons Plume New American Library back to contents Fast Algorithms for 3D Graphics by Glaeser Any Good by Brian Hook bwh kato prl ufl edu Generally a good book nothing spectacular Worth having if you re a computer graphics professional probably not worth having if you are just building up your library Some of those fast algorithms aren t exactly the epitome of blazing Not many very advanced topics not many true tricks and optimizations like some of Graphics Gems but a lot of fairly solid material The code is in C however it s formatted poorly italics for code Who thought of THAT one back to contents Order of Rendering and Fast Texturing by Bruno Levy Dan Piponi dpdp19801 ggr co uk and Bernie Roehl broehl UWaterloo ca There was a discussion of how to render quickly using various techniques It s not ray tracing so you purists out there should avert your eyes Anyway I thought it was interesting and the texturing idea has been bouncing around the net ever since EAH Bruno Levy says flat shading 0 interpolation pixel quite fast Gouraud shading colormap mode 1 interpolation pixel Gouraud shading RGB mode 3 interpolations pixel texture mapping 2 interpolations pixel Phong shading 3 interpolations a square root pixel Dan Piponi responds That s a pretty good way of expressing the answer but can I refine this model a bit From my experience it is memory accesses rather than interpolations that form the bottleneck talking to various people this seems to be true on many architectures An interpolation typically takes one machine instruction using two registers 1 clock cycle on a 486 A memory access on the other hand can take a few clock cycles especially if you have a fast processor I suggest flat shading 1 access pixel gouraud shading 1 access pixel assuming all of the colour dimensions fit into registers otherwise add up to 3 accesses pixel colour dimension texture mapping by horizontal scanline 2 accesses pixel free direction texture mapping 3 accesses pixel phong shading 1 access pixel if you have enough registers but now the mathematics becomes the bottleneck depending on your algorithm z buffering 1 access pixel not drawn 3 accesses pixel drawn All of these can be improved if you can read write more than 1 pixel per memory write for example using a VESA local bus on a PC you can write 4 pixels in one write instruction and I m working on getting the free direction texture mapping down to 2 5 accesses pixel The truth is probably an interpolation between the two tables above Bernie Roehl says Perspective corrected texture mapping involves at least one divide per pixel Dan Piponi replies No it doesn t I ve got some code working that I described a little while ago in this newsgroup although lots of other people had already figured the method out Look up free direction texture mapping in the games player encyclopaedia for example Dan s earlier note Suppose we wish to texture map a triangle in 3 space onto the screen using the map pi x y z x z y z Let L be the line segment that is the intersection of this triangle with the plane z k Then pi restricted to L is an affine map If we then rule the triangle with lines parallel to L we can use an affine map to render each line to the screen Instead of using horizontal scan lines say we have to use non horizontal lines Any interest Is it novel Bernie Roehl later notes The PC GPE found on x2ftp oulu fi has an article on Free Direction Texture Mapping that is a more detailed description of the algorithm you describe It s a good idea back to contents FREE E Mag on VR Computer Graphics et al Issue 2 by David Lewis callewis netcom com The HOTT Hot Off The Tree Internet based e magazine is a FREE monthly 10 year update on the latest in VR telepresence intelligent user interfaces AI intelligent agent oriented software interactive multimedia game development wireless communications PCS mobile portable handheld computing devices neural fuzzy genetic systems nanotechnology bio microsensors molecular electronics voice I O handwriting recognition HDTV I TV ATM frame relay FDDI visual programming object oriented databases client server application development fractals wavelets quadtree data structures for image signal processing ULSI circuits megacells optical computing erasable optical disks PC telephony PC TV animats micro telerobotics and other bleeding edge technologies For a FREE subscription send a request TODAY to listserv ucsd edu The Subject line is ignored leave it blank or type in whatever you d like In the body of the message input SUBSCRIBE HOTT LIST Do NOT include first or last names following SUBSCRIBE HOTT LIST this is a quirk of the UCSD listserv software You will receive subscription confirmation from the UCSD host site Disclaimer Please note that although the mailing list is currently maintained at UCSD there are no official ties between HOTT and the University of California back to contents Color Quantization Bibliography by Ian Ashdown Ledalite mindlink bc ca In message 35jhi0 ae7 alf uib no Jan De Bruyckere wrote I m a student in computer science and I m making a description about converting images with 24 bit colours to images with only 8 bits colours I need different algorithms source or sites where I can find the source titles of books and other useful information With apologies in advance for the following commercial blurb I m posting a bibliography on the topic from my forthcoming book Radiosity A Programmer s Perspective John Wiley Sons October 1994 The diskette accompanying the book includes a complete C implementation of the Gervautz Purgathofer octree color quantization algorithm It also includes a detailed look at radiosity theory and complete C implementations of 3 fully functional radiosity based renderers for the MS Windows Win16 and Win32 environments but that s another story End of commercial Here s the offering Color Quantization Bibliography 1 Arvo J ed 1991 Graphics Gems II San Diego CA Academic Press 2 Ashdown I 1994 Radiosity A Programmer s Perspective New York NY John Wiley Sons 3 Balasubramaian R and J Allebach 1991 A New Approach to Palette Selection for Color Images Journal of Imaging Technology pp 284 290 December 4 Betz M 1993 VGA Palette Mapping Using BSP Trees Dr Dobb s Journal 18 7 28 36 94 July 5 Bouman C and M Orchard 1989 Color Image Display with a Limited Palette Size Visual Communications and Image Processing 89 Bellingham WA Society of Photo optical Instrumentation Engineers pp 522 533 6 Bragg D 1992 A Simple Color Reduction Filter in Kirk 1992 pp 20 22 429 431 7 Braudaway G 1987 A Procedure for Optimum Choice of a Small Number of Colors from a Large Color Palette for Color Imaging Proceedings of Electronic Imaging 87 San Francisco CA 8 Dekker A 1994 Kohonen Neural Networks for Optimal Colour Quantization to appear in Network Computation in Neural Systems Bristol England Institute of Physics Publishing Techno House 9 Gentile R J Allebach and E Walowit 1990 Quantization of Color Images Based on Uniform Color Spaces Journal of Imaging Technology 16 1 11 21 February 10 Gentile R J Allebach and E Walowit 1990 Quantization and Multilevel Halftoning of Color Images for Near Original Image Quality Journal of the Optical Society of America 7 6 1019 1026 June 11 Gervautz M and W Purgathofer 1988 A Simple Method for Color Quantization Octree Quantization in Magenat Thalmann and Thalmann 1988 pp 219 231 12 Gervautz M and W Purgathofer 1990 A Simple Method for Color Quantization Octree Quantization in Glassner 1990 pp 287 293 13 Glassner A S ed 1990 Graphics Gems San Diego CA Academic Press 14 Gotsman C 1994 Dynamic Color Quantization of Video Sequences to appear in Proceedings of Computer Graphics International 94 Melbourne Australia 15 Heckbert P S 1982 Color Image Quantization for Frame Buffer Display ACM Computer Graphics 16 3 297 307 ACM SIGGRAPH 82 Proc 16 Iverson V S and E A Riskin 1993 A Fast Method for Combining Palettes of Color Quantized Images Proceedings of the IEEE International Conference on Acoustics Speech and Signal Processing 93 Vol 5 pp 317 320 17 Joy G and Z Xiang 1993 Center Cut for Color Image Quantization The Visual Computer 10 1 62 66 18 Kirk D ed 1992 Graphics Gems III San Diego CA Academic Press 19 Kruger A 1994 Median Cut Color Quantization Dr Dobb s Journal 19 10 46 54 91 92 20 Kurz B J 1983 Optimal Color Quantization for Color Displays IEEE Computer Vision and Pattern Recognition Proceedings Silver Spring MD IEEE Computer Science Press 21 Lehar A F and R J Stevens 1984 High Speed Manipulation of the Color Chromaticity of Digital Images IEEE Computer Graphics and Applications 4 2 34 39 February 22 Levine J 1994 Programming for Graphics Files in C and C New York John Wiley Sons 23 Lindley C 1992 Practical Ray Tracing in C New York John Wiley Sons 24 Luse M 1994 Bitmapped Graphics Programming in C Reading MA Addison Welsey 25 Magnenat Thalmann N and D Thalmann eds 1988 New Trends in Computer Graphics New York Springer Verlag 26 Orchard M T and C A Bouman 1991 Color Quantization of Images IEEE Transactions on Signal Processing 39 12 2677 2690 December 27 Pomerantz D 1990 A Few Good Colors Computer Language 7 8 32 41 August 28 Schore M 1991 Octree Method of Color Matching The C Users Journal 9 8 43 52 August 29 Thomas S W and R G Bogart 1991 Color Dithering in Arvo 1991 pp 72 77 509 513 30 Wan S S Wong and P Prusinkiewicz 1968 An Algorithm for Multidimensional Data Clustering ACM Transactions on Mathematical Software 14 2 153 162 31 Wan S J P Prusinkiewicz and S K M Wong 1990 Variance Based Color Image Quantization for Frame Buffer Display Color Research and Application 15 1 52 58 32 Wu X and I Witten 1985 A Fast k Means Type Clustering Algorithm Research Report 85 197 10 Department of Computer Science University of Calgary Alberta 33 Wu X 1991 Efficient Statistical Computations for Optimal Color Quantization in Arvo 1991 pp 126 133 34 Xiang Z and G Joy 1994 Color Image Quantization by Agglomerative Clustering IEEE Computer Graphics and Applications 14 3 44 48 May There are undoubtably other papers on the topic since color quantization has many applications in computer graphics If you know of any others please let me know I think however that the above will prove useful to anyone interested in color quantization issues Happy reading back to contents Eric Haines erich acm org Ray Tracing News Volume 8 Number 2 Ray Tracing News Volume 8 Number 2 Ray Tracing News Volume 8 Number 2 Ray Tracing News Volume 8 Number 2 Ray Tracing News Volume 8 Number 2 Ray Tracing News Volume 8 Number 2 Ray Tracing News Volume 8 Number 2 Ray Tracing News Volume 8 Number 2 Ray Tracing News Volume 8 Number 2 Ray Tracing News Volume 8 Number 2 http www acm org tog resources RTNews html rtnv8n2 html http www acm org tog resources RTNews html rtnv8n2 html http www acm org tog resources RTNews html rtnv8n2 html http www acm org tog resources RTNews html rtnv8n2 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv8n3.html%%==%%Ray Tracing News, Volume 8, Number 3%%==%%Ray Tracing News "Light Makes Right" August 2, 1995 Volume 8, Number 3 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%62633%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right August 2 1995 Volume 8 Number 3 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1995 all rights reserved by the individual authors Archive locations anonymous FTP at princeton edu pub Graphics RTNews wuarchive wustl edu graphics graphics ray RTNews and many others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Contest Name that Area Ratio Ray Tracing Roundup On Line Computer Science Bibliography Collection by Alf Christian Achilles Comments on RTNv8n1 by Alexander Enzmann Dore Now Free and Dore Mailing List by Len Wanger Fooling Around by Eric Haines Beware of VIDEA by W Purgathofer E Groeller M Feda Still More on Optical Ray Tracing by Dan Reiley Raytracing and 3D Studio by Michael Adams and Brian Hoffman Testing SIPP versus Raytracers under DOS by Alexander Enzmann Introduction First off the Ray Tracing Roundtable will meet yet again at SIGGRAPH Thursday 5 15 pm the room opens at 5 to 6 45 Westin Bonaventure the HQ hotel in the San Fernando room The timing and place are such that you can catch it while moseying from the convention center where things wrap up around 5 pm to the papers panels reception at 7 pm about 2 blocks walk from the Westin The Roundtable is where anyone interested in ray tracing to gather and connect names with faces There are usually around 50 people who show up we go around the room and say names and what we re up to nowadays then break up and schmooze The gathering started as a way for researchers to talk about ideas It has evolved into a general gathering for anyone interested in 3D rendering to meet like minded souls OK so I ve been trying to ignore the net and whatnot and get some Real Work tm done but people keep coming out with some amazing things Not too many new free ray tracers of note but Chris Cason s POV ray tracing CD is finally out The Graphics Gems V code is available online beating the book s publication by a few months There s now a free OpenGL implementation for Unix boxes and MS Windows and the Dore object oriented library has been made available for free see RTNews2 SGI provides a free parser for reading and traversing VRML and there are three or more free beta viewers out there right now Glassner s magnum opus so far Digital Image Synthesis is finally out briefly reviewed back in RTNv7n3 In other news ACM Transactions on Graphics has a new Editor in Chief Andrew Glassner He and I have been working on WWW pages for ACM TOG and the basics are finally ready check out http www acm org pubs tog I consider the most significant page the Reviewing Guidelines as here Andrew gives a sense of where he wants to see TOG go and it s significantly different than the current public perception please read it if you do research and even if you don t There are other pages of interest such as the Editors page where you can put names to faces for a number of graphics researchers there are also links to what they are researching I spent a fair amount of time on the Resources links which point to software and other data of particular interest to researchers I tried to limit my choices to significant tools and sites and pointers to other links of interest I have also tried to avoid duplication of previous efforts such as material already in computer graphics related FAQs There is definitely a 3D and ray tracing bias to some of these pages I look to you all to point out other resources you consider significant and worth adding I am also helping cobble up some WWW pages for my company You might want to check out http www eye com sometime I plan on having my own homepage someday with pointers to where to access the most recent version of materials I have on the net papers SPD package RT News archives etc in the meantime check out Freebies Buy a few thousand dollars worth of products when you visit please Best WWW graphics site I ve seen this year http ftp std com homepages stevec NTA intro html Quote for the issue Digital technology is the universal solvent of intellectual property rights Copyright 1995 Tom Parmenter Tom writes The universal solvent quote I picked up from a speech by an Apple fellow in 1988 It conformed to a long held conviction of mine so I polished it and adopted it that is appropriated it Putting it next to a probably bogus copyright claim is my twist and I continue the tradition by ripping it out of his e mag Desperado back to contents Contest Name that Area Ratio So you know how to find if a circle and hyperbola intersect you know how to compute the area of a polygon and you know how to find the convex hull of a set of points Now s your chance to win a free CD ROM for learning all that stuff Take a crack at this problem given the set of all arbitrary triangles i e 3 random dots anywhere on a 2D plane and a 2D bounding box around each what is the average ratio of the area covered by the triangle vs the box The answer is actually a useful thing to know if you re trying to design an optimal point in polygon test and you know the point is inside the bounding box I ll be interested in your answer and how you got to it The prize for the best decided in some arbitrary fashion correct answer a copy of Chris Cason s POV ray tracing CD ROM see the Roundup or a copy of one of Syndesis CD ROMs kindly donated by John Foust see RTNv6n2 RTNv6n3 and RTNv8n1 I d also be interested in the answer to the same question for four arbitrary points on a plane and the average area of the polygon vs the box area For maximal bonus points redeemable for plastic spiders at video arcades around the country what s this ratio for four arbitrary points which form a polygon which doesn t overlap i e doesn t make an hourglass shape Finally what about the set of all convex four pointed polygons I haven t a clue what the answers are to these four point questions but would be interested to know them Answers backed by theory are best but having your PC churn out the answer by doing a bazillion iterations and averaging the results is OK too aka Monte Carlo back to contents Ray Tracing Roundup Chris Cason s POV Ray CD ROM is out called Raytrace The Official POV Ray CDROM from Walnut Creek Check http www cdrom com titles pov html for information For all of those who feel that mining the net for material and selling it for Filthy Lucre is Wrong I have some bad news the CD s contents is available for free via ftp www povray org pub povray Have fun downloading 500 Megs I hope to review this CD in a future issue or better yet would like to get a review from someone else perhaps you holographic hand pointing at you here The code distribution for Graphics Gems V ed Alan Paeth Academic Press 1995 is available on line at ftp ftp princeton edu pub Graphics GraphicsGems GemsV and ftp ftp graphics stanford edu pub Graphics GraphicsGems GemsV As usual if you find any errata let me know as I m the archivist for the on line Gems code The book is not out yet it ll be at SIGGRAPH 95 Also this is the last in the Graphics Gems series there are ideas floating around of other possible books but I know of nothing definite Avalon Moved Viewpoint Datalabs has taken over the management of the Avalon site which contains many free 3D models and related software They appear to be cleaning up the structure and adding a nice WWW layer Check it out at http www datalabs com avalon html http www seas gwu edu seas eecs Research Graphics ProcTexCourse is the web page for my class If you like procedural textures or even if you don t check this out Also it has an all important link to the history of textures WWW pages which all computer graphicists should study carefully EAH Ken Musgrave musgrave seas gwu edu For an undergrad class I m teaching I wrote up some notes on ray polygon and ray quadric intersection testing They can be found at the URL http www cs cmu edu afs cs project anim ph 463 95 pub www notes toc html on the World Wide Web in both Postscript and Latex forms This five page document focuses primarily on intersection of rays with convex polygons I ve described a method there that is easier to implement though probably slightly slower than the standard approach of projecting to 2 D The other notes in this collection are 1 Raster Images 2 Point Processing of Images 3 Image Filtering 4 Warping and Morphing 5 Aliasing 6 Antialiasing and Related Issues 7 Discrete Fourier Transforms and the Fast Fourier Transform FFT Algorithm 8 Image Compression 9 Glossary of Signal Processing Terms 10 Visibility and Ray Casting 11 Ray Polygon and Ray Quadric Intersection Testing 12 Painter s Z Buffer Algorithms and Polygon Rendering 13 Spatial Subdivision 14 Light and Color 15 Reflection and Transmission 16 Recursive Ray Tracing 17 Texture Mapping 18 Global Illumination and Radiosity 19 Review of Rendering Notes 10 discusses the generation of rays through a given pixel given only the screen coordinates of the pixel and the 4x4 world space to screen space transformation matrix but no camera parameters something I don t recall seeing published elsewhere Paul Heckbert ph cs cmu edu Global illumination researchers should find this site of interest http safran imag fr Membres Francois Sillion globillum html Francois Sillion Francois Sillion imag fr I added a partial postscript version of my master s thesis to my home page an excellent primer on various aspects of texture mapping Other papers and software are here too EAH If you go to my home page http www cs cmu edu 8001 afs cs user ph www heckbert html you ll find that in my papers list I ve just now put in links to the UC Berkeley versions and also at the end of my papers list I ve got a link to the top level UC Berkeley tech reports collection If you want to poke around a bit try the list of individuals link at the bottom of my home page for pointers to a few other interesting people and places Paul Heckbert ph cs cmu edu In response to the question does anyone know where I can get a mesh of a person This is more data than you probably wanted but I thought I would mention that the complete data for the male Visible Human as seen at Vol Vis 94 is now available this includes CAT MRI and cryosections at 1 millimeter intervals The URL http www nlm nih gov extramural research dir visible human html has a complete description of the data and how to get it You need to fill out forms about what you are going to do with the data for example whether you are going to develop a commercial product I don t think you have to pay anything unless you want them to send you data on tape They also have a few sample images Holly E Rushmeier holly cam nist gov 3D Graphics Programming in Windows by Philip Taylor Jr Addison Wesley 1994 comes with disk isbn 0 201 60882 0 877 pages 49 95 US An interesting book if you re interested in writing 3D related programs for MS Windows this is a good place to start He describes how to make a 3D modeler a vector rendering library a ray tracer and many other design elements The bias is towards pure Windows code I prefer Visual C but this is a minor part of the presentation the elements presented are generally applicable to any Windows environment program and to a lesser extent interactive graphics programming in general Contact Phil Taylor philt kaleida com for more info A demonstration version of the HELIOS Radiosity Renderer for MS Windows 3 1 is now available from ftp avalon1 viewpoint com avalon misc helios2a zip This program is an authorized version of the HELIOS radiosity renderer presented in the book Ashdown I Radiosity A Programmer s Perspective New York NY John Wiley Sons Inc Further details are provided in the accompanying ASCII text file ftp avalon1 viewpoint com avalon misc helios2a txt Have fun Ian Ashdown Ledalite mindlink bc ca For those of you interested in rendering participating media you might want to check out http www sandia gov html frame NSFFinal with graphics 1 html which is The Use of High Performance Computing to Solve Participating Media Radiative Heat Transfer Problems Results of an NSF Workshop Holly Rushmeier holly cam nist gov I think taxonomies are a useful guide for people who want to use an existing method for their application I m prejudiced but I think a useful taxonomy has been developed in the NIST Guide to Available Mathematical software http gams nist gov It helps people sift through all the various software repositories and find code that will solve their problem Holly Rushmeier holly cam nist gov VRML This is the newest hot scene description language for describing 3D models for transmission on the WWW There s been a lot of hype but hey it s a lot more interesting than client server models or all that other computer goop out there SGI has provided a free C parser qvlib to read VRML and traverse the database There are a number of free VRML browsers out there some are commercial betas others are just free I personally rely on two WWW pages for info on VRML An excellent nexus for pointers to just about every VRML resource is http www sdsc edu vrml The FAQ is maintained by Jan Hardenbergh jch nell oki com http www oki com vrml VRML FAQ html There is also a mailing list actually a few which generate much much mail see the FAQ for details My fave VRML model is on the http hyperreal com mpesce samhain wrl site go to The space is HERE It s by Mark Pesce one of the driving forces behind VRML he s at http hyperreal com mpesce if you want the bigger picture It s cruiseable on a Windows machine and it s a great model to show to your grandmother to confirm that all those things she read about the net in Time are true 3D File Converter A pretty dang good 3D file converter by Keith Rule for MS Windows can be had from http skexix europa com keithr It started out as a program to convert into POV Ray format files Keith also write a good POV Ray zine but now does conversion for quite a few formats including subsets of DXF 3DS OBJ NFF raw and now VRML MESA Mesa is an OpenGL like read essentially OpenGL but missing a very small bit of functionality and getting closer by the day package by Brian Paul brianp ssec wisc edu which is free provides source code and runs on Unix boxes and now MS Windows the Mac and the Amiga Of course it does not take advantage of any native graphics accelerators so you won t want to use it on your Reality Engine but for the rest of us it s a cheap alternative For example one university uses it on a number of their educational machines saving them licensing costs The site http www ssec wisc edu brianp Mesa html From what I have seen on the mailing list its rendering speed compares favorably with other commercial software only implementations and in some cases has features that the commercial products do not e g double buffering To subscribe to the Mesa mailing list send the following message to the address listserv iqm unicamp br subs mesa set mesa mail ack For example subs mesa Brian Paul set mesa mail ack If you need the advantages of a name brand Evans and Sutherland is releasing a version of their OpenGL library on Linux for something like 79 Write wstout es com for information The version was evidently made with time donated by E S employees or if you re more of a GL fan there s this which I don t know anything about EAH I have been writing a GL library on the side for the last few years It is now available for beta testing from http www nas nasa gov and go to Software and hit libglto Be aware that this library is currently under some restrictions It belongs to the United States government and hence is not in the public domain It is only available to sites in the US and the recipients must agree to certain restrictions This is all explained on the WWW page This library currently implements approximately 269 GL commands and drives any generic X display It has been tested on SGIs Suns IBMs HPs and PCs All these machines were running some flavor of UNIX and one serious caveat The zbuffer is not a true zbuffer I merely sort the polygons It would be a trivial matter to add real zbuffering but there would be a performance penalty David C Yip dyip nas nasa gov business card http www nas nasa gov dyip The Tessellation Times is an excellent free weekly e zine by Columbine Inc the people who make 3D Artist magazine see RTNv7n1 You can view it from http www 3dartist com tess tessmain htm or http www lightside com dani an excellent site in general or send a message to tess 3dartist com stating simply subscribe The Daily Spectrum Morph s Outpost Interactive Media News is a daily e zine of multimedia news There are usually a few articles each week of interest to people involved commercial computer graphics Get it at http www mecklerweb com 80 netday morph daily htm http www macromedia com Industry hot industry news html http www lightside com 3dsite cgi publications daily spectrum index html Another WWW site of interest http aloha com sharky CG links Imagine related stuff many other pointers now a dead link 7 28 97 You can now reach my BBS The Graphics Alternative via Telnet at telnet tgax com Adam Shiffman adams ccnet com To all who ve visited the Rendering Plant BBS and found the connection poor I ve added a new line So far the new line seems to be pretty excellent Drop me a line if you have any trouble with the bbs The new number is 816 525 8362 It s a 14 4 modem The old line is 816 525 5614 It s a 28 8 Jim has a large collection of 3D Studio meshes and other material much of it not available elsewhere on the net EAH Jim Lammers trinity tyrell net My entire BBS is available as well as a couple of CD s worth of stuff Only 2 users allowed to FTP at a time Sorry I just don t have the bandwidth to allow tons of users to FTP all at the same time FTP to ftp graphics rent com or WWW to http graphics rent com Bob Lindabury bobl graphics rent com Mail me if you want a comprehensive list of 3D books and references with reviews See RTNv7n4 for an early version of this list It s become quite extensive and now covers many more books the text file is 1300 lines long Check it out EAH Brian Hook bwh netcom2 netcom com WWW pages for SIRDS are at http h2 ph man ac uk gareth sirds html Peter Chang peterc a3 ph man ac uk Geomview Interactive View For 3 D Geometric Objects The Geometry Center announces the availability of release 1 5 of Geomview Geomview is an interactive viewer for 3 D geometric objects It allows users to view and manipulate these objects via the mouse the keyboard and through an interpreted command language This release includes versions for SGI using GL graphics NeXTStep requires NeXTStep version 3 0 or higher and generic Xlib graphics Precompiled binaries are available for SGI NeXT m68k intel hppa Sun4 HP Linux IBM RS 6000 and DEC Alpha platforms The source code is also available These distributions are all in ftp ftp geom umn edu pub software geomview For more details and for a list of changes since previous releases of Geomview see the README file in that same directory Geomview is part of an effort at the Geometry Center to provide interactive 3D graphics which is well suited for mathematics visualization In addition Geomview is extensible and can serve as a general purpose tool Its functionality can be extended in an almost unlimited fashion by external modules or programs For more information go to URL http www geom umn edu software download geomview html I lost the author of this notice EAH 3D Studio Related To become a member of the 3D Studio mailing list you must send a mail message to the address majordomo autodesk com In the body of the message enter subscribe 3dstudio I have found some sites of interest 3D studio http homepage eznet net frac 3ds html http www halcyon com asllc 3dstudio html ftp ftp mcs com mcsnet users bcleach 3dstudio ftp www pp orst edu ftp ftp csn net Schreiber Schreiber Instruments IPAS Other http delphi beckman uiuc edu 80 softimage http wavefront wti com Jonni Berckhan via marcus almqvist p5 panacea ct se In what site ftp could I find example meshes for 3D Studio Try anonymous ftp at 129 131 1 225 There is 3D geometry there in various formats including DXF It s the UCLA Visualization Center Colin de Vries colinv microsoft com Hmm if you haven t noticed yet I have a 3D Studio page at http ksc au ac th 8000 3ds html wups stale link left in in case it reappears EAH Mostly things I snarfed off here or off other places on the net if you have a web page with 3ds related stuff on it let me know and I can put a link in FRiC frac ksc au ac th I d just like to let you know that there is a user mailing list for trueSpace mail truespace request cs uregina ca help to get information about subscribing Net sites for TrueSpace related materials include ftp ftp netnet net pub mirrors truespace http www netnet net users truespace Shane Davison daviso cs uregina ca Some of our students have been using Lightscape here at UCLA There has been some nice stuff done with this software you can see for yourself point your web browser to http www gsaup ucla edu and I did a test mpeg movie of a student Lightscape animation at my site http www vizlab ucla edu Lance Barker lance VIZLAB UCLA EDU LIBTIFF mailing list Libtiff is an excellent TIFF read write library with full source and no copyleft restrictions or suchlike EAH To join the mailing list do mail tiff request sgi com subscribe Sam Leffler sam cthulhu engr sgi com I just found a mailing list where people exchange ideas about Photoshop photshop bgu edu You have to send your e mail to listproc2 bgu edu Body text should be subscribe photshop first name last name Francois Pilon FRANCOIS mksinfo qc ca Photoshop related anonymous ftp sites ftp ftp netcom com pub HSC Kais Power Tips Kai s Power Tips Tricks ftp export acs cmu edu pub PSarch Kai s Power Tips Tricks misc shareware plug ins demos etc ftp uxa ecn bgu edu pub archive photshop and ftp uxa ecn bgu edu Photoshop Files Misc shareware plug ins demos etc ftp ftp adobe com pub hsc Adobe files info I ve set up a temporary FTP server for VFD ZIP ftp www bi umist ac uk graphics vfd vfd zip This will create FLI AVI MPEG from many types of images Simon Oliver Simon Oliver umist ac uk Fli as screen saver for Windows 3 1 Is there a way to use flics as screensaver for windows preferably a shareware program or something Niklas Mellegard niklas ida his se writes I got a tip from someone I seem to have deleted that mail but thanx anyway to download a file called vuesav22 zip but it turned out only to show bmp jpg gif BUT by coincidence I came across a file called mrphss zip Morphics Screen Saver which did just the job I believe I found it on ftp luth se pub msdos win3 desktop or something like that I had however some trouble getting it to start it s a long story but I finally succeed If anyone have trouble just send my a mail and I ll tell you about it John Rankin jrankin titan ds boeing com writes Check on CI for a shareware pkg called SSFLIC ZIP from a Dutch Co called NT Systems Written by Bert Steenbeeke We went thru the search for a clean pkg last Autumn and saw most of the half baked offerings before finding the above It s so much more elegant and easy to install It uses AAplay DLL and two other small files 182k in all a mere drop in Wdoze terms and the best feature is it s idiot proof instl a real necessity for the OS If you can t find it drop a note Bert wants 35 00 to register For those with ATI graphics cards ATI drivers can be had via FTP from ftp atitech ca also ATI has a website http www atitech ca Joe Feldman joef IslandNet com back to contents On Line Computer Science Bibliography Collection by Alf Christian Achilles achilles ira uka de This is such an excellent resource it deserves its own article You can search many different bibliographies including various computer graphics bibliographies from here It s now mirrored by many locations around the world check the site for more info EAH I maintain a computer science bibliography collection at http www ira uka de ftp ira bibliography index html that consists of about 600 mirrored bibliographies that have been converted to a standardized BibTeX layout It contains about 330 000 references to conference papers journal articles and technical reports in various areas of computer science The bibliography collection is mirrored all over the world and at two WWW sites alone the number of daily accesses exceeds 2000 The references contained in the bibliographies are also searchable at three sites with four different search interfaces back to contents Comments on RTNv8n1 by Alexander Enzmann Alexander Enzmann star9gate mitre org On displacement mapping and ray tracing Larry Gritz stated On the other hand you can t get true displacements with BMRT or any ray tracer I m not sure I completely agree here Polyray does displacements of surfaces by splitting them into triangles and then moving vertices These triangles can be rendered with raytracing zbuffer rendering or ASCII output of triangle vertices Is this true displacement Perhaps not but if you instruct Polyray to dice the prims up fine enough you really can t see the difference The cost is the storage and preprocessing of a big bag of triangles Even bucket oriented renderer like Photorealistic RenderMan has to dice its prims into polygons and will have occasions where many are active at once it just doesn t have to have them for the entire world to account for off screen reflections etc The other comment I have is on your discussion on scanline rendering Also as far as CSG forget it trying to get the polygonal version of a CSG model I agree with what I think you were saying however there is a solution that doesn t require a complete b rep description of your CSG model The approach I took in Polyray to rendering CSG during scanline rendering is to do the CSG in image space As each pixel is generated you use the interpolated world or object coordinates as a parameter to the normal CSG inside outside routines The result is pretty good and can usually be made as good as you want by subdividing prims more finely The two major drawbacks you are doing CSG evaluations on parts of a prim that will never appear on the screen and you don t have a nice polygonal model that can be exported to something else Eric Haines replied Interesting so what happens exactly when I say subtract a sphere from the corner of a cube I render the cube and indeed the points in the sphere disappear I then render what the inside of the sphere and test its points for inclusion within the cube right Hmmm so you basically have to make sure you do the CSG inside outside test but making sure you don t use the object itself being rendered to affect the inside outside determination right Good one I like it Probably not the fastest thing on two wheels but it beats some of the various multi buffer schemes I ve seen for both memory and simplicity In what I call multi buffer you render all the CSG objects in a model and then sort out the details at each pixel by checking the set of valid spans for that pixel and finding the closest point cuts down on in out tests there are none but a nasty thing to program and manage memory Alexander replies You just render the sphere Since I m not doing backface culling I only need one routine to turn the sphere into polys The only time I look at the normal is for shading I know perfectly well that culling speeds things up however I d rather know about both sides of an object That way if you chop a hole in a primitive clipping rather than CSG difference you see the back wall rather than having a total hole but making sure you don t use the object itself being rendered to affect the inside outside Turns out that s pretty easy Each object has a pointer to the CSG tree it is sitting in As you render an object you do inside outside by walking up the tree Since you know which branch you came from you can avoid doing comparisons against yourself Probably not the fastest thing on two wheels Nope but then I was more concerned with making it work than making it go as fast as possible I ve got a renderer that can produce consistent images using either raytracing or scanline rendering for a huge variety of primitives I ll leave the superfast polygon rendering to the commercial folks I don t even have tables for doing sin cos always found more interesting things to work on back to contents Dore Now Free and Dore Mailing List by Len Wanger wanger intsim com Recently Kubota Graphics Corporation contributed the Dore 3D graphics library to the public domain I have started a new mailing list for Dore related issues The list is called dore and has been installed on UCSD s automated listserver The purpose of the list is to be a focal point for Dore community and to be a forum for Dore related questions bug reports patches extensions etc To subscribe send a mail message to listserv sdsc edu With the command line ADD dore For those who are unfamiliar with Dore the package is commercial quality having been a commercial product for several years and has support for traditional polygonal rendering as well as ray tracing and radiosity Current archive sites with dore 6 0 are sites ftp wuarchive wustl edu graphics graphics packages dore ftp ftp netcom com pub do dore ftp sunsite unc edu ftp ftp cdrom com files pdore 6 0 tar Z pdore note txt Abstract of Package submitted to sunsite Title Dore API Dynamic Object Rendering Environment Version 6 0 Description Dore is a powerful 3D graphics subroutine library It provides a comprehensive set of tools for creating graphics applications It is also easy to use portable and extendable This version has interfaces drivers to X11 PEX IrisGL OpenGL Postscript and more It has been ported onto most unix systems including Linux and FreeBSD It has also been ported to Windows NT 3 5 Author s The key authors and contributors from a long list of illustrious but evanescent computer companies are listed below Companies Dana Computer Ardent Computer Stardent Computer Kubota Pacific Computer Inc Kubota Graphics Corporation Key Authors Contributors Michael Kaplan Mark Patrick Bruce Borden Kevin Weiler Dan McLachlan Helga Thorvaldsdottir Carolyn Houle Lori Whippler Maintained by Maintained at sunsite unc edu ftp cdrom com Platforms SunOS OSF 1 Irix Linux FreeBSD Windows NT Copying Policy Public Domain Keywords Dore 2D 3D Graphics API 3D Graphics subroutine library back to contents Fooling Around by Eric Haines Nico Tenoutasse wrote asking what sort of things are worth exploring in the field of ray tracing Part of my reply follows Nothing brilliant here but I do feel strongly that more goofing off could pay back with interesting imagery optical illusions etc In the rendering animation front there s a lot to explore with non real rendering serious stuff like make the image look like it was hand drawn and shaded automatically and silly stuff like what does it look like if I put a totally wacky shading model in place Or what can be done when you ray trace and barely hit an object make it partially transparent there or change its color or maybe you make it black there and everything then looks like a cartoon or Who knows We need more people to goof off with shading models and intersection methods and so on mostly a waste of time but there are probably some interesting methods so far undiscovered that can be done by varying our assumptions back to contents Beware of VIDEA by W Purgathofer wpu stellaris cg tuwien ac at E Groeller M Feda I won t reprint the whole text here the short version is that the authors submitted the following abstracts to a conference I m reprinting the first two abstracts here because they re pretty amusing two additional generally silly abstracts are in the original Check http www cg tuwien ac at wp videa html for the whole story EAH The submitted abstracts We decided to write more than one crazy abstract to make sure that an acceptance cannot be interpreted as accident and so we tried different types of weird papers proposals The first of four abstracts we produced was simply a completely irrelevant topic namely how to create footprints on the walls of public rooms It includes several statements that every reviewer must recognize as joke The complete text is given in abstract 1 Extended abstract 1 The Footprint Function for the Realistic Texturing of Public Room Walls Abstract Today s radiosity methods are able to produce nearly perfect light distributions for interior rooms Unrealistic appearance now mainly is due to missing texturing of the walls One important feature of public room walls are footprints in the lower areas This paper presents a set of simple functions to easily generate a class of footprint textures for such applications Different randomization techniques ensure the realistic appearance of the results This technique is of increasing importance for the visualization of architectural objects in the future Keywords realism rendering textures footprints Introduction Today s radiosity methods are able to produce nearly perfect light distributions of interior rooms Unrealistic appearance now mainly is due to missing texturing of the walls One important feature of public room walls are footprints in the lower areas The Footprint Function The basic footprint function is a combination of trivial i e easy to implement parametric functions The footprint is divided into a ball and a heel which can have independent sole textures The sizes are chosen such that a simulation of shoe sizes 35 to 42 for women profiles and 39 to 46 for men profiles is performed Randomization Techniques Distribution techniques will be presented that ensure that the lower part of the wall contains significantly more footprints than the higher parts Especially no footprints must occur above a certain threshold height due to physiological limitations of the human being Additionally random functions will take care that most footprints remain incomplete and vary in color and shape Results Preliminary investigations are encouraging As we have not implemented the new method yet there are no concrete results yet The final paper might include images Conclusion A footprint function for the realistic imaging of walls is presented Details of all functions are given to ensure an easy implementation for the reader References to be included in the final paper end extended abstract 1 The second abstract describes a correct method which makes no sense at all that is how to render interior rooms without light Obviously the resulting image will be completely black This was written as in abstract 2 Extended abstract 2 Efficient Radiosity for Daylight Simulation in Closed Environments Introduction Radiosity is a useful tool for architects and lighting engineers to simulate illumination in the interior of buildings Unfortunately the computation time for radiosity is very high However radiosity algorithms can take advantage of special scene properties of specific classes of environments Exploiting the additional information about the scene structure of a particular class can decrease the computation time significantly The aim of this paper is to speed up the radiosity computation for the class of closed environments without artificial light sources Two Restrictions on the Scene Structure The first restriction on the scene is that it is closed The reason for this restriction is the fact that radiosity is based upon the energy conservation principle that means that at any time the amount of emitted energy equals the amount of absorbed energy plus the amount of energy leaving the scene In closed scenes no energy leaves the scene thus simplifying the radiosity computation However this restriction does not impose problems because radiosity is mostly used for interior scenes The second restriction is that only daylight can be considered Radiosity algorithms solve a set of equations where the radiosities of patches are the unknowns and the emissions are the constant terms In conventional radiosity all patches are allowed to emit light i e to be an artificial light source If we assume that no patch has emission we only have to consider daylight This allows the use of very efficient solution methods known in numerical mathematics for the set of equations The second restriction does not limit the range of applications too much as well because in most cases architects are interested in visualizing their design with daylight conditions Mathematical Foundation of the New Method Details will be described in the final paper Benefits The new method reduces the computation time of both the radiosity evaluation and of image generation Images can be generated at interactive rates even for very complex scenes making the method suitable for walk throughs and VR applications Since numerical techniques are mainly replaced by analytical formulas no aliasing effects appear Conclusion and Future Work The development of radiosity algorithms for special classes of scenes is a promising field of future research Such algorithms are significantly faster and possibly more accurate than non specialized algorithms end extended abstract 2 These first two productions have at least a little bit the structure of a scientific paper abstract What we also wanted to try was if VIDEA would accept its own text as abstract So we copied the complete introduction from the Call for Papers and gave this abstract the title of the conference Minor changes were only made like changing the word conference to paper The result is given in abstract 3 see site http www cg tuwien ac at wp videa html for abstract Last but not least we decided to produce an abstract without any content just complete nonsense So we took a dictionary of information processing words and selected randomly some 40 phrases from there and joined them together to a fantastically technical sounding text The given reference is of course the utilized dictionary We had much fun with abstract 4 see site http www cg tuwien ac at wp videa html for abstract Results All abstracts were sent to the conference in November 1994 and on January 14th 1995 we received the results All four abstract have been reviewed and provisionally accepted More follows also in case you ve seen only this posting which got passed around far and wide I received about 7 copies from different people there is a response from the conference organizers and a reply by W Purgathofer et al EAH back to contents Still More on Optical Ray Tracing by Dan Reiley primo moontarz nuance com I am looking for a shareware program to do some ray tracing of a polychromatic laser beam passing through an optical system consisting of a few lenses of different geometries Any help would be greatly appreciated Based on the shareware and low budget raytracing software I have seen you are better off using the y nu raytracing chart Both the programs and the y nu take a few hours to learn Both have output that is at least a little bit cryptic the first time it is seen Howver if you use the y nu you will learn something universal with the program you will learn something particular to that program The y nu raytracing chart can be set up easily in a spreadsheet like Excel It is essentially an adaptation of the matrix method for paraxial raytracing with simple equations for what happens to a ray s height between optical surfaces and what happens to its slope at optical surfaces By tracing two rays usually the chief ray and the marginal ray the system can be well characterized I learned the y nu raytracing chart from Modern Optical Engineering by Donald O Shea which has a clear and self contained chapter on it back to contents Raytracing and 3D Studio by Michael Adams msadams netcom com and Brian Hoffman bhoffman mail valverde edu 3D Studio needs a raytracer Now I have heard the arguments that raytracers are too slow and I agree they are for most animations For stills however they can make good sense You simply cannot get the realistic reflections that a raytracer produces with 3D Studio s reflection mapping That is not to say that 3D Studio s rendering engine is bad In fact it is excellent I ran some tests over the weekend with POVRAY 2 2 ftp alfred ccs carleton ca in the pub raytrace POV RAY directory There is a utility to convert 3D Studio 3DS files to POV files from ftp avalon1 viewpoint com avalon utils converters 3dspov18 zip It is not perfect It will not convert textures and I ran into some bugs with certain models It did work well enough to convince me that a raytracer can enhance certain scenes considerably Here is what I found 1 Raytracing at the highest quality setting is about 7 times slower than 3D Studio s metal shading with shadows and reflections turned on 2 Raytracing improves scenes with many highly reflecting surfaces 3 Raytracing can add a lot of detail to a scene through its calculations of reflections and refractions with no additional work by the model builder 4 The 3D Studio renderer output looked as good as the raytracer output with scenes with few reflective surfaces or by virtue of geometry had single level reflections That to me says a lot about the high quality of 3D Studio s rendering engine 5 Some scenes had surprising results with the raytracer because we are not use to seeing them such as multilevel reflections of shadows Yes it is more realistic and therefore you have to be a little more realistic with reflectivity settings for materials I also did a non scientific test with a friend by asking her which images she liked better the 3D Studio rendered images or the POV raytraced images I took identical models and rendered them with both systems She knows nothing about computer graphics Invariably the raytraced images were preferred Her comments were there is more to them Presumably this means she saw more reflection nuances in the raytraced images In conclusion the speed of the raytracer is slow but not so slow that I would not use it for final output of stills We all have time when our computers are sitting idly doing nothing POVRAY also lets you interrupt rendering part way and resume it later Brian Hoffman bhoffman mail valverde edu comments The argument that raytracing is too slow to use for animation is not always correct It s important to remember that raytracing is not an all or nothing proposition First the only things in a scene that are candidates for raytracing are reflective objects objects with refractive transparency and shadows These elements may take up only a small portion of a given scene Secondly you may not need to raytrace every reflective object every transparent object or every shadow in a scene That s why I like the approach Lightwave uses First you have separate global toggles for enabling disabling raytracing for reflection refraction and shadows In addition there are also local per surface and per light controls If you select a reflection map for a reflective surface then that surface s reflections will not be raytraced If you do not select a reflection map the reflections will be raytraced Similarly refraction for a surface with transparency will only be raytraced if an index of refraction other than 1 0 is assigned to it The shadow types for spotlights can be set to be raytraced shadow mapped or none These features allow you to mix raytraced methods with mapping methods in the same scene You can have a glass ball with mapped reflection raytraced refraction and raytraced shadows Another glass object might have traced reflection non refractive transparency and shadow mapped shadows And so on With selective application of raytracing to limited parts of a scene it is sometimes possible to get an increase in realism without paying a huge penalty in rendering time Of course it is possible to really explode your rendering times Example A close view of a glass sphere with raytraced refraction and raytraced reflections for the exterior AND interior surfaces Inner surface raytraced reflections combined with raytraced refraction causes rendering times to go through the roof I ve learned to raytrace only exterior surface reflections in these situations back to contents Testing SIPP versus Raytracers under DOS by Alexander Enzmann Alexander Enzmann star9gate mitre org This describes a somewhat informal testing of the SIPP rendering library versus a beta version of the Polyray v1 8 DOS based renderer The image used for the purposes of this test was the level 2 sphereflake from Eric Haines SPD library If you are really interested in benchmarks of various raytracers Eric Haines has published them in Ray Tracing News on various occasions This is simply an evaluation of how a scanline renderer compares to a renderer that implements both zbuffer rendering and raytracing Polyray is in the middle of the pack as far as speed of Share Freeware raytracers goes I ve got numbers if anyone cares In order to have the images at least somewhat resemble each other a custom shader was written for the SIPP file that does a simple horizon based color change If the Z component of the reflection of the view direction about the normal was above 0 then the sky color was used else the ground color This gives a first order approximation to reflections The actual code for the shader is given below along with the corresponding one used for Polyray when performing zbuffer renderering I can make available an image that shows the result of each of the six runs shown below if people want it Without shadows SIPP 3 1 Polyray v1 8 Polyray v1 8 ZBuffer raytrace 29 0 62 1 61 0 With shadows SIPP 3 1 Polyray v1 8 Polyray v1 8 Polyray v1 8 ZBuffer Zbuffer ray Raytracing only Shadowmaps traced shadows 52 9 159 3 118 2 128 2 For this particular test case my conclusions are SIPP is faster but really hogs memory Raytracing isn t all that slow compared to scanline rendering A 4x difference between SIPP without shadows and Polyray with recursive raytracing is pretty reasonable Polyray s zbuffer renderer is wasting a lot of time shading pixels more than once Polyray is also wasting quite a bit of time generating shadow maps writing them to disc then reading them back in With a little effort scanline rendering can give good results However with even less effort a raytracer gives much better results Other notes Sphereflake is kinda nasty to a polygon renderer due to the large number of polygons required for a smooth looking sphere Tetra or Gears might have been a better choice Any takers SIPP consistently clipped the ground polygon one pixel short of the right and bottom edges of the image leaving two lines with the color of the background 256x256 shadow maps look pretty crummy By upping them to 512x512 and running in a DOS box under Windows to get Virtual memory remember I m using a 4Mb machine they were improved but still had noticable artifacts This had a severe impact on runtime with all the swapping going on The sizes for each sphere in SIPP were 30 for the big ball 15 for the next level and 6 for the smallest balls SIPP appears to use a standard lat long tessellation of the spheres The size in these cases refers to the number of subdivisions around the equator It s a parameter to SIPP when you create a sphere The change in of sides was necessary so I wouldn t run out of memory from too many polygons It also is a hack at adaptive subdivision based on screen size Both the SIPP library and Polyray v1 8 were compiled with the Watcom 10 0 C compiler for D0S 32 bit protected mode The machine used was a 486DX 33 with 4Mb of RAM SIPP images were renderered at 257x257 and rescaled to 256x256 This is the standard filter corner mode of antialiasing specified in the SPD benchmarks An external program was used to rescale the SIPP image since it has only supersampling Shadowmaps were generated at 256x256 also due to memory limitations Lights were turned into spot lights in order to support the generation of shadowmaps Since Polyray uses square lights when a depth map is used a spot light function was defined to make them match the ones used in SIPP back to contents Eric Haines erich acm org Ray Tracing News Volume 8 Number 3 Ray Tracing News Volume 8 Number 3 Ray Tracing News Volume 8 Number 3 Ray Tracing News Volume 8 Number 3 Ray Tracing News Volume 8 Number 3 Ray Tracing News Volume 8 Number 3 Ray Tracing News Volume 8 Number 3 Ray Tracing News Volume 8 Number 3 Ray Tracing News Volume 8 Number 3 Ray Tracing News Volume 8 Number 3 http www acm org tog resources RTNews html rtnv8n3 html http www acm org tog resources RTNews html rtnv8n3 html http www acm org tog resources RTNews html rtnv8n3 html http www acm org tog resources RTNews html rtnv8n3 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv9n1.html%%==%%Ray Tracing News, Volume 9, Number 1%%==%%Ray Tracing News "Light Makes Right" January 18, 1996 Volume 9, Number 1 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%83036%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right January 18 1996 Volume 9 Number 1 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1995 1996 all rights reserved by the individual authors Archive locations anonymous FTP at ftp ftp povray org pub povray Ray Tracing News ftp princeton edu pub Graphics RTNews ftp wuarchive wustl edu graphics graphics ray RTNews and others HTML at http www povray org rtn index html among others You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Results of the Name that Area Ratio Contest by Eric Haines and Arijan Siska Another Contest Sphere in Box ratio by Eric Haines Ray Tracing Roundup A Freeware modeller supporting VRML by Stephen Chenney 3D Point Hashing by Steve Worley 5D vs BSP and ABVH by Nguyen Duc Cuong aka JuHu Interacting with Ray Traces by Bert Peers Hierarchical Techniques for Glossy Global Illumination by Per Christensen Global Illumination SIGGRAPH meeting by Greg Ward Total Internal Reflection by Eric Haines Greg Ward and Chris Larson Pretemporal Imaging Systems by Ken Musgrave and Eric Haines PNG Status by Tim Wegner and Tom Lane Cinematography References by Dan Wexler Getting Rid of the Divide by Frank Compagner and Bob Pendleton Introduction One or two things have happened since the last issue back in August We released a product called TriSpectives which is a fun modeling rendering animation package for Windows 95 and NT Since I am now involved in a public commercial enterprise prior to this we were mostly doing behind the scenes work for HP I will generally avoid discussing in the RT News such products as FalseSpace 3D Atelier LightSwell RayReverie and AutoPUNK hmmm that calls for a contest if you are one of the first three to identify these five commercial products I just paraphrased you win a 30 day trial version of TriSpectives Oh and I will also avoid mentioning in the RT News TriSpectives that s T R I just kidding But since this is my last chance check out http www eye com for TriSpectives info etc the freebies page is my favorite area Also we re hiring people see the Company Info page for the latest listings I am glad to have an excuse to no longer track in the RT News all the various commercial packages as that is a full time job and then some Instead the RT News will focus more on research issues on free or extremely cheap software and on other resources both on line and off If you are interested in the commercial scene check out the Tessellation Times http www 3dartist com tess tessmain htm which is associated with 3D Artist magazine It is an excellent bi weekly source of information on commercial rendering trends and amazingly enough is free jgt I am one of around ten editors of the new journal of graphics tools from A K Peters Alice Peters helped produce the first volume of Graphics Gems Ronen Barzel ronen pixar com of Pixar is the Editor in Chief and Andrew Glassner is the founding editor Think Graphics Gems and Numerical Recipes and you have a sense of what sort of articles we are after useful results tutorials guidelines for choosing algorithms and so on The journal is peer reviewed academics take note and now has a web site courtesy of the ACM at http www acm org jgt The only fun computer toy I have bought recently is the Snappy Video Snapshot on the web at http www play com pages snaphead html What a cute thing for about 200 or less it is a phaser sized box with a 9 volt battery which plugs into your parallel port and hooks up to a video camera VCR or TV Bring up the software and you can capture video shots on your computer at three different resolutions and up to 24 bits of color It is fast to install and use though catching exactly the right shot from a video can take a few tries Also it comes with Gryphon Morph a nice image morphing package and Fauve Matisse lite a reasonable natural paint program It is pretty easy to take pictures of friends pull them in then morph one into the other Why am I talking about it here Because it is also a pretty good way to scan in materials and photos for use as textures When you use a perfectly still video image you can up the scanning quality within Snappy s software and multiple frames are blended and filtered to give pretty sharp images It beats a flatbed scanner for cost speed faster than a scanner and no waiting to get film developed and amount of desktop real estate it takes back to contents Results of the Name that Area Ratio Contest by Eric Haines and Arijan Siska arijan kette fer uni lj si So the problem posed was given the set of all arbitrary triangles i e 3 random dots anywhere on a 2D plane and a 2D bounding box around each what is the average ratio of the area covered by the triangle vs the box The trivial answer is 1 2 because I did not properly state that the 2D bounding box is axis aligned sorry about that So what is the answer for axis aligned bounding boxes This problem turned out to be a lot trickier than I first thought When I asked it I figured out the answer for any given triangle where all three points of the triangle touch the bounding box The gist is that you do not have to worry about the infinite plane for this case as the ratio between the triangle and bounding box is all that matters So the bounding box can be thought of as size 1x1 and one corner of the triangle is always at one of the bounding box corners and the other two points on the triangle can freely move along the two edges opposite this corner this triangle point can be anywhere along this edge V 1 X With the distances X and Y as shown the area of the triangle is A 1 X 2 Y 2 1 X 1 Y 2 1 X Y 2 Doing a double integral of X and Y each over 0 1 gives the answer 3 8ths Unfortunately it s a bit harder than that what if just two of the triangle s points touch the bounding box i e are at opposite corners of the bounding box and the third point is somewhere inside the box Call these two point triangles This ratio is not so hard to compute it turns out to be 1 6th see solution But what is the ratio between these two point triangles and the previous three points on the bounding box types Personally I struggled with this one and did not feel comfortable with my answer as it did not closely agree with the empirical answer my C program found The person who won this contest is Arijan Siska who came up with a good proof showing that the ratio between two point and three point types as 1 2 He made the same oversight that I did forgetting the two point types but when informed of this quickly derived the rest and sent in a convincing answer which follows Jack Ritter jritter netcom com gets an honorable mention for getting the empirical answer first 0 3055 by performing monte carlo testing Joe Demers joed graphics usc edu had a solution that was very close the first to get 3 8th and 1 6th as the sub answers and almost but not quite coming up with a way to blend the two like I said nor did I No one took up the challenge of determining the average area of an arbitrary non intersecting quadrilateral and its bounding box nor do I envy anyone the task The rest of the solution follows in Arijan s words for two point triangles you end up with a triangle with one side going from 0 0 to 1 1 and the third point being anywhere within the unit square if the third point touches the unit square the triangle has already been processed by the case with all points on the b box area of this 2point on b box triangle is 1 1 pt 1 2 1 x y 2 x y 1 y x 2 1 x y 2 average pt 1 6 pt y 0 0 x now the portion of 2point and 3point on b box triangles out of all triangles If we think of a triangle as a two point line with third point added to it we can state the condition for triangle to touch b box in only two points is to have the third point inserted between first two points in x and y dimension or inserted beyond first two points see the picture A point x3 has to be in the regions A B C or D x1 B C x2 D Let s take a one dimensional example 1 We use finite region 0 1 in which we generate random points This region can be later expanded to infinity without affecting the results probabilities 2 Generate 2 random points 0 x1 x2 1 probability of a third point x3 being placed between these two points is equal to the average distance between x1 and x2 That distance probability is Integrate x y x 0 1 y 0 x 2 1 3 this is Mathematica notation 3 In two dimensions the probability of the third point being in the regions A B C D A B C or D is 1 3 2 1 3 2 1 3 2 1 3 This gives us ratio 2 p on b box triangles 3 p on b box tri 1 3 2 3 total area can be stated as 2 3 3 8 1 3 1 6 11 36 0 3055555555555555555 Hope this time I m right I ve done a random test myself and the result for 33 619 968 triangles gives an average area ratio of 0 305586785790013 So my analytical solution should be a correct one P S Check out my homepage if you have some spare time http luz fer uni lj si users arijan eng html there are lots of ray traced images a ray tracer and more EAH Arijan later noted My simulation is currently at 238 157 824 trigs with average ratio 0 305573593013203 but I doubt the precision due to random number generator properties and precision back to contents Another Contest Sphere in Box ratio by Eric Haines I have another problem again a useful result for ray tracing what is the average cross sectional area of the projection of a sphere vs a bounding box around the sphere In other words given a sphere in a bounding box what is the chance that an arbitrary ray originating outside the bounding box hitting the box will also hit the sphere hint actually this question can be restated to get rid of the sphere though this does not make it any easier to compute I think this is pretty easy but right now I have not sat down and figured it out myself The prize for the best correct answer a copy of Syndesis Avalon CD ROM see RTNv8n1 kindly donated by John Foust of Syndesis http www webmaster com 80 syndesis back to contents Ray Tracing Roundup A new version of Lparser an organic form grower using L systems is available at http www xs4all nl ljlapre This is a fun page to visit even if you do not want the software don t miss excellent non L systems work such as The Designer s Dream The new version of Lparser now has VRML output among other additions so you can put weird squid meets yam creatures in your VRML worlds or some very realistic looking creatures in fact FREE access to The official POV Ray CDROM Well I ve finally done something I ve been meaning to do for some time but had little time in which to do it and that is to HTML ise the Official POV Ray CDROM and place it onto the Web As of now The Official POV Ray CDROM is available for free browsing and downloading at http www povray org pov cdrom If you ve been wondering what s really on the CD but never had a chance to find out now s your chance I ve trimmed the announcement down to just this but check it out it s a fully HTML ized version of the directory structure of the CD with much material that cannot be found anywhere else on the Net EAH Chris Cason Chris Cason oaks com au Font3D is a utility program for the generation of 3 dimensional text objects Once created these objects can be included in a scene description file for later modelling or rendering Several different output formats are supported including o Persistence of Vision 2 x o Vivid 2 0 o AutoCad DXF o RenderMan RIB o RAW Triangles It uses TrueType fonts for input Find it at ftp ftp povray org pub povray utilities font3d11 zip This package includes C source code which is cool EAH PVMPOV allows distribution of POV Ray 2 2 across a heterogeneous network of computers While not ideal and not even with all the features I d like it to have it does a pretty good job with long traces and is relatively useful in any type of computing environment http www mddsp enel ucalgary ca People adilger povray pvmpov html Andreas Dilger adilger enel ucalgary ca Nathan Loofbourrow has an interesting collection of links to papers available on the Web including some on rendering and radiosity http www cis ohio state edu loofbour papers html from Stephen Spencer spencer siggraph org Here s the short address for my home page http www cs cmu edu ph Have you seen Deja News Go to my web page and follow misc links at the top then follow Deja News near bottom of page and you can search for haines heckbert natas nasta kinski for example It is basically a searchable index of recent USENET articles Very cool for info junkies Also check out some of the other links on my misc page like the computational geometry bibliography or the computational geometry software directory Paul Heckbert ph hostess graphics cs cmu edu Other searchers are also now adding netnews search capabilities For example try Alta Vista at http www altavista digital com which searches the web and netnews EAH An extensive survey of triangulation algorithms is given by Paul S Heckbert and Michael Garland Fast Polygonal Approximation of Terrains and Height Fields Carnegie Mellon University tech report CMU CS 95 181 August 1995 http www cs cmu edu afs cs user garland public scape Yishay timc netvision net il Cornell Sampler A few of the great images from Cornell http www graphics cornell edu sampler I am updating my list of graphics pages at http www graphics cornell edu shirley graphics html If you know of any I should add please let me know Also if you have online Monte Carlo code or papers please let me know and I will add you to http www graphics cornell edu shirley mc html Pete Shirley shirley graphics cornell edu The VRML Sourcebook rocks the house It covers all of that evil nitty gritty I purposely left out of my own book But now I have a text I can recommend in good conscience to people who need something more technical Mark Pesce mpesce netcom com For more info check http www wiley com compbooks k26 html Every VRML programmer should own this one period EAH Que Publishing a division of Macmillan Computer Publishing is proud to announce Special Edition Using VRML by Stephen Matsuba and Bernie Roehl The book provides 800 pages of detailed information about VRML including tutorials on creating VRML worlds tips and tricks optimization techniques and useful insights into the design of the language Also included is comprehensive coverage of the various tools that are available for creating VRML worlds as well as the available browsers Since the VRML specification is constantly evolving several chapters are devoted to examining the future of the language For world builders over half a dozen worlds are detailed in the book along with accompanying commentary by their creators For programmers there s a chapter on writing VRML translators and scene generators Also included with the book is a CD ROM with dozens of useful utilities sample worlds browsers 3D Modelers toolkits and other VRML resources Special Edition Using VRML should be available on store shelves by the middle of February Benjamin Milstead I wanted to advertise the URL of a page I am developing with surveys and links to research on parallel volume rendering http www cse ucsc edu craig pdr html Please feel free to submit URL s and or comments I m also the maintainer of the FAQ for the mp render community This FAQ is reachable from the above site or available by anonymous ftp ftp ftp cse ucsc edu pub mp render mp render faq Craig Wittenbrink craig cse ucsc edu There s a big RenderMan site out there I think in California Ah here it is http pete cs caltech edu RMR rmTop htmld rmTop html Stephen Spencer spencer emily cgrg ohio state edu Quaternion Tutorial Ken Offer koffer io com wrote Can anyone mention a good text for those wishing to comprehend the intricate details of quaternions How intricate do you want to get Sir Hamilton who invented the beasts wrote some books I don t recommend them for the beginner and there is nothing about computer graphics in them That is only to be expected since matrices were invented by Cayley after quaternions and computers only came in the next century You could try my brief tutorial at ftp ftp cis upenn edu pub graphics shoemake If you can find a copy of the Siggraph 85 Proceedings tough I know my paper there may help There are also a number of articles in the various Graphics Gems books Quaternions are simple to program and use but deep comprehension still beckons me 10 years after my first paper on them Ken Shoemake shoemake bambi cis upenn edu Now available for free at http www ledalite com 200 photometric data files for fluorescent light fixtures Documentation and ANSI C source code for an IESNA LM 63 photometric data file parser public domain Demonstration radiosity renderer for MS Windows 3 1 and Windows 95 Radiosity bibliography Color quantization bibliography and more Ian Ashdown iashdown ledalite com Per Christensen Eric Stollnitz David Salesin and I have been doing some research on extending clustering to glossy global illumination Last month we submitted a paper Clustering for Glossy Global Illumination summarizing our research to ACM TOG The paper is available online via anonymous ftp from ftp espresso cs washington edu pub danix clustering An earlier version of this paper was submitted to Siggraph 95 and was rejected Fortunately the comments of the anonymous reviewers challenged us to substantially improve both the paper and the implementation The highlights of the results section are a comparison with RADIANCE on a glossy sphereflake model and nice global illumination solutions for an architectural environment with 8000 initial surfaces most of which are glossy If you happen to read the paper and have any comments please e mail them to me Dani Lischinski danix cs washington edu BMRT Update BMRT is a RenderMan compliant ray tracer radiosity renderer See RTNv8n1 BMRT is still going strong In fact I just updated the FTP site ftp ftp gwu edu pub graphics BMRT with a new revision that has some enhancements and bug fixes I ve had a WWW site for a while too http www seas gwu edu student gritz bmrt html One new feature is that I use the Mesa library freeware OpenGL clone so all the non SGI ports now support the polygon previewer and other features that were previously only enabled on my SGI version The software is quite widely used including by a lot of well known studios who mostly use PRMan but occasionally use BMRT for particular effects that are easier with ray tracing It was used recently for some effects on the show Star Trek Voyager and also was used to render the new video logo for the Utah Jazz NBA team which apparently is shown whenever their games are broadcast Larry Gritz lg pixar com Rayshade on Linux Direct URL http www carsinfo com eric rayshade linux tar gz Indirect http www carsinfo com eric Eric Bardes eric carsinfo com Netshade I m a little uncertain about releasing this to the world at this point but there have been many recent questions about it and about Rayshade in general so I thought I should just do it This was a project I started some time ago when I had a different job and free time Now I have little free time so I cannot easily continue serious work on it So here it is Perhaps the net can make it cleaner and I can be a patch applying droid If any changes are made to the source PLEASE mail them to me as well Netshade 0 0 3 really beta can be found on ftp packrat flame org pub netshade Comments suggestions and flames to me I ll apply the usual mail filter and ignore the latter Michael Graff explorer iastate edu For a free blobby modeler with source code visit http beebalm cit cornell edu Info People pbenton Alex Benton s homepage Source is available soon in a zip file and it s pretty fun to use you move the spheres around and watch the implicit surface form on the fly turn on Blobby Surface under View It is more of an educational demo right now but since the code is available it could be hacked to export to DXF etc Eric Haines Free Models Well my web page has moved one more time to http www loop com hhc Hopely connection will be much better In case you have never been to my web page the following is a summary of what it has 1 Free 3D Models in 3ds format Victorinox Swiss Army Knife Deoxyriboneucleic acid 2 Free Star Wars related Models in 3ds format 16 Models of Rebel Alliance Weapons 16 Models of Empire Weapons 7 Other Models 3 Thumbnails of my Architectural Works 4 thumbnails of my Industrial and Miscellaneous Models 5 Gallery of raytraced images of my models and animation Do enjoy my free models All models on my site are created by me A nice little site the knife is great EAH Harry H Chang hhc loop com Crisis in Perspective Inc announced JOEY 4 0 an integrated programmers tool kit for Windows 95 and NT that promises to enable developers to create 3D applications without any prior 3D graphics knowledge or experience It sells for 250 it s available for evaluation at http www teleport com cip If you use Visual C and MFC you should give JOEY a look I saw it at SIGGRAPH and it looked pretty cool a nice way to get some 3D controls in place quickly There is a book from Springer Verlag http www springer ny com or http www springer de by Roy Hall and Danielle Forsyth about JOEY with some of the system s code and development tools included on a floppy Interactive 3 D Graphics in Windows Approx 390 pp 3 1 2 disk Softcover ISBN 0 387 94573 3 I plan to have a short review of this book and software here soon EAH For a tutorial on constraint based modeling see http www cs purdue edu homes cmh electrobook intro html It is from Purdue and my modeling friends tell me it is quite good Eric Haines The Proceedings of the Rendering Workshops 5 and 6 are available now 5th Rendering Workshop 1994 Photorealistic Rendering Techniques ed Sakas Shirley Mueller ISBN 3 540 58475 7 6th Rendering Workshop 1995 Rendering Techniques 95 ed Hanrahan Purgathofer ISBN 3 211 82733 1 order from Springer Verlag http www springer de or http www springer ny com Werner Purgathofer wp stellaris cg tuwien ac at Radiosity system I d like to announce the initial release of the radiosity code developed in our research group Our group is at http www cs kuleuven ac be cwis research graphics graphics E shtml Features It does both shooting progressive refinement radiosity and gathering Hierarchical refinement if you like for both shooting or gathering Importance driven if you like for both shooting or gathering Formfactor computation by numerical integration The ray casting for visibility determination is accelerated by using hierarchical bounding boxes shadow caching and shaftculling handles both triangles and convex quadrilaterals T vertex elimination and many other rendering options reads Greg Ward s MGF scene description files see http radsite lbl gov mgf HOME html a more or less nice user interface and interactive view manipulation It requires Motif Silicon Graphics Iris GL or a clone or PEX an ANSI C compiler gcc 2 7 0 was used to develop it and GNU make or another make which offers the include feature unless you change the Makefiles a bit to compile it You can obtain this code for free on URL http www cs kuleuven ac be philippe rad html Philippe Bekaert Philippe Bekaert cs kuleuven ac be Form Factor of a Cow This is a radiosity joke what s the form factor of a cow and the fact that someone actually computed it once made it truly strange What adds to it is to find out that the simplification for a cow is well read on EAH I did look up the cow paper once and it is for real The motivation was designing heating systems for the care of livestock Here is a summary Uses mechanical integrator to measure factors from various wall elements to a cow and presents some results for size of equivalent sphere that gives same factor as cow It is found that the sphere origin should be place at one fourth of the withers to pin bone length back of the withers at a height above the floor of two thirds the height of the withers and the equivalent sphere radius should be 1 8 2 08 or 1 78 times the heart girth for exchange with the floor and ceiling sidewalls or front and back walls respectively Also discusses exchange between cows and entire bounding walls floor and ceiling and between parallel cows I don t think I kept a copy of the paper so please don t ask me for it As I recall the authors were from California and the paper was initially read at an agricultural meeting held at Cornell Pastorally Holly E Rushmeier holly cam nist gov Ian Ashdown notes A R L Perry A E P Speck T Geometric Factors for Thermal Radiation Exchange between Cows and their Surroundings R Technical Report 59 323 I Journal of the American Society of Agricultural Engineering D 1959 K form factors Z a seminal paper in computing cow form factors My favorite image manipulation program on Unix is still ImageMagick at http www wizards dupont com cristy ImageMagick html It s no PhotoShop but it is free and with source and you can run batch jobs It and the old but good Utah Raster Toolkit are two of the many reasons our systems administrator can take my Unix workstation away only by prying it from my cold dead fingers On PC s the shareware Paint Shop Pro and LView Pro are both reasonable image manipulation programs though both have their gaps I prefer PSP but LView Pro allows you to make GIFs transparent good for HTML hacking Search for the latest versions of these and just about any other shareware and freeware for PC s at the Virtual Software Library http vsl cnet com The coolest graphics java applet for me is Paul Haeberli s impressionist paint program See http reality sgi com grafica It is based on Paul s paint by numbers work presented at SIGGRAPH 90 His 3D interactive java applet here is also impressively fast Eric Haines Other sites of interest http www essi fr diard photon4d html Photon 4D a Unix based ray tracer z buffer renderer and Motif interface The author is looking for beta testers at this point http www cyberstation fr dolivier povlab html POVLAB modeler page a modeler for POV Ray http www lightside com 3dsite 3D Site s new address a great clearinghouse for all things computer graphical http graphics rent com A graphics user related site lots of pointers and graphics package mailing list addresses and material http www PrimeNet com 80 grieggs cg faq html computer graphics FAQ http www research microsoft com research graphics glassner Andrew Glassner s home page interesting graphics research http www sdsc edu SDSC Partners vrml software textures html sources of free textures on the Web http www exit109 com jimh a nice little gallery the glass sphere experiments are different and interesting http www2 cinenet net GWEB professional computer animators site http intranet on ca sshah booklist html Graphics list of graphics books and ISBNs pointers to some publishers now on line http www dcs ed ac uk home mxr objects html another free 3D model site http rushmore JPL NASA GOV ndr tiff Unofficial TIFF homepage Eric Haines If you are interested in having your computer look at you check out http www cs cmu edu cil vision html a home page pointing at many computer vision related resources back to contents A Freeware modeller supporting VRML by Stephen Chenney schenney cs berkeley edu I m the author of the free scene design program Sced The next release of Sced will come shortly and it will include the capability to export VRML For those who ve never heard of Sced probably most of you Runs on almost any UNIX platform with X11R5 or better Constraint based modelling interface Support for CSG objects Exports to POVray rayshade radiance renderman and now VRML There s lot s to say but I won t say it Find out more at http http cs berkeley edu schenney sced sced html There is also a patched version of Sced called Sceda at http www cyberus ca denism sceda sceda html which adds keyframing abilities EAH back to contents 3D Point Hashing by Steve Worley spworley best com I asked Steve if he had any good hashing function for 3D points in space In other words is there some good function that takes a 3D point and gives back a hash value in some range and has a good spread of hashing numbers For example this can be useful for finding and deleting duplicate vertices or for getting a repeatable seed value for a 3D procedural texture function or fractal terrain generator Making a function which does not lead to patterning or clumping is not obvious for example the function int x y z modulus range would be a bad function all points within 0 I ve been working on fast but thorough hashing OK the major problem with FP numbers is that are 17 000000000 and 17 000000001 the same number If no in other words ANY difference makes them distinct you run into problems if any operations have been applied to them Copying usually does not corrupt them A strategy for FP I expect would deal with the 4 or 8 bytes that make up the value converting to some integer exponent or whatever is horribly slow So basically you have a 3 sets of 4 bytes and you want to mash all twelve bytes into a unique hash Lots of ways to do this some fast some very good Probably the fastest version would be something like float position 3 unsigned char byte byte unsigned char position lets us address the floats as 12 bytes unsigned long hash hash 3 byte 0 5 byte 1 7 byte 2 11 byte 3 prime byte n This is very fast However it can suffer from aliasing especially when the input float values have zero bytes in their binary representation The high quality way is to use an S box to mash the bits around thoroughly This is THE theme of cryptography An S box is just a way of taking one byte and outputting another with a random usually truth table In practice an 8x8 S box 8 bits in 8 bits out can be made really easily by the pseudocode for i 0 to 255 sbox i i next i for i 0 to 255 j random 0 255 swap sbox i with sbox j next i Then the very high quality hash of a byte x is sbox x All an S box is is bit swizzling It is mapping sets of bits to new sets of bits However it does it completely nonlinearly which is what you want To combine this with many bytes you can do a lot of things For your purposes it s probably enough to do hash 3 sbox byte 0 5 sbox byte 1 123 7 sbox byte 2 47 prime sbox byte xor some random fixed number The mults probably are not even horribly necessary Actually in both cases you may want to use larger primes like 101 247 etc not 3 5 7 Ken Perlin uses the algorithm hash sbox X sbox Y sbox Z 256 256 256 This is a compromise since it has excellent behavior locally as the LSB changes but it causes repeated areas i e hash x y z hash x i 256 y j 256 z k 256 It is more efficient than a longer hash since it needs only three sbox lookups This hash is good for generating noise samples on an integer lattice but is terrible for finding matching vertices e g 1 0 1 5 and 1 99 as inputs all give the same hash number out There are lots and lots and lots of variations But the sbox method is extremely good as a basic tool to use If you are looking for cryptographically secure hashing you can chain rules like hashing each byte into a new byte with a new sbox then shifting the full 12 bytes right 4 bits and hashing again In crypto they often do 10 rounds of this kind of iteration I should mention that my main hashing has been for stuff like fractal noise values at gridpoints It is surprisingly easy to get bad aliasing on a uniform grid Aliasing you can actually SEE as repeated patches This is why I was researching all this s box stuff Luckily s boxes only take 256 bytes of ram and a little precompute Trick 3 make a 512 byte array of your sbox appended to itself so sbox 256 sbox 0 sbox 257 sbox 1 Then you can do hash sbox byte 0 sbox byte 1 sbox byte 2 the 512 byte array is just so that you do not overflow when adding EAH This is a REALLY good hash but only gives you 0 255 out One other note you can move to a 16x16 S box same idea Your memory usage jumps from 256 or 512 bytes to 120 or 240K But then you are chunking two bytes at a time It s a better hash and nearly twice as fast after the sbox is built There are even more details than this stuff about collisions from pipelines when things are just one bit different that for the best hashing you want to avoid back to contents 5D vs BSP and ABVH by Nguyen Duc Cuong aka JuHu cn1 irz inf tu dresden de GX is an extended ray tracer with some interesting capabilities including the use of 5D ray classification a hybrid BSP and ABVH efficiency scheme selection of sampling patterns area light sources etc One of its primary uses has been in testing efficiency schemes Find it at http www inf tu dresden de cn1 gx html I find this work to be interesting as it explores two relatively new and unexplored ray tracer efficiency schemes Because the connection to JuHu s site at least from here is tenuous and slow I reprint the results of his efficiency scheme exploration here EAH Surprisingly BSP isn t always faster than ABVH especially when over partitioning occurs From my experiments the max number of candidates in a node can be adjusted to any given number but the max level of subdivision should be between 8 10 The results from my BSP and 5D Implementation show that 5D is faster than BSP only if the scene contains many low reflective refractive polygons with small changes in curvature teapot nff for example For other NFFs of SPD such as balls nff jacks nff etc 5D is much slower than BSP and the required memory for 5D is enormous compared to BSP Another problem is that the main advantage of 5D over BSP is not having to compute the voxel path but if the BSP tree is balanced it is possible to find the closest intersection very soon after few voxel tests And the beam box overlap test for the reclassification of candidates lists undermines the efficiency of 5D too I think 5D is only attractive for eye rays and shadow rays because with these coherency is high enough Hardware Iris Indigo w 33 MHZ IP12 Processor Main memory size 48 Mbytes Object CH shadow cache hits by last object Voxel CH shadow cache hits by last voxel BSP Tree is generated w X Y means the max depth is X and the max number of objects in a node is Y Preparation and tracing times are given in seconds For these tests GX uses BSP as a first method and ABVH as the second which generates an ABVH for each BSP node Pure BSP or pure AVBH can be applied by setting the max number of candidates in a BSP Node to 1 or to a large number max subdivision depth ceil log number of primitives max num of prim in a node log 2 1 gears4 nff Eye rays 40000 Reflection rays 13335 Refraction rays 16749 Shadow rays 238681 BSP Tree 15 1 11 10 10 20 9 50 8 90 7 200 6 400 5 1000 Preparing 74 52 60 65 56 55 76 86 Tracing 651 308 298 293 259 340 418 597 Object CH 40376 41524 41572 42145 42454 41866 4183 40253 Voxel CH 2578 5889 7077 10568 12296 16492 20374 24056 balls4 nff Eye 40000 Reflection 30889 Refraction 0 Shadow 150967 BSP Tree 14 1 11 10 10 20 9 50 8 90 7 200 6 400 4 1000 Preparing 37 45 40 65 44 43 47 65 Tracing 634 352 261 293 228 264 348 891 Object CH 23270 23660 23718 42145 23971 2382 23897 23429 Voxel CH 594 1470 2162 10568 3942 4985 5973 8617 As it turns out Matt Quail just tipped me off that George Simiakis who also has explored 5D ray classification RTNv6n1 RTNv7n5 has just put his thesis on the net it s 4 megs he should be compressing it soon ftp ftp sys uea ac uk pub ah G Simiakakis PhD ps gzipped much smaller 0 7 megs at http hardy ocs mq edu au mquail G Simiakakis PhD ps gz Paging through it this thesis looks like a good overview of existing RT efficiency research and Matt said the research looks well done The thesis examines pure 5D and hybrids using this scheme along with an in depth study of making such algorithms parallelizable George Simiakis writes If you ask me what I really think about 5D I believe it is good for low complexity scenes with lots of ray coherence but I prefer 3D methods or the 2D grid see my thesis as an all around method In other words I prefer scalability general robustness and predictability of performance Ray tracing may not be solved 100 but new improvements are bound to be insignificant compared to improvements in the past I hope to work on parallel radiosity now There is still some efficiency work to be done there EAH back to contents Interacting with Ray Traces by Bert Peers BERT PEERS student kuleuven ac be Mark Craig as5mcrai scot1 ucsalford ac uk asks Has anyone ever pre calculated a z buffer that is generated a scene in a ray tracer or similar app and somehow stored the depth of each pixel in a buffer and used this for the zbuffer I think the results would look interesting Yep I have written a little IBM Demo called The Attic maybe you ll find it on some demo collection cd as ATTICFIX ZIP which does just that an image of a sphere with some cylinders difficult to scan convert was raytraced including some cool procedural texturing not possible in realtime and with this stored fixed zbuffer a realtime rotating cube was mixed Looks good This is actually a fun trick and can even be useful I once wrote a demo for an HP graphics box where they had a weird mode where you could compare with the z buffer but not write to it and could render into an overlay plane The effect you could have a fully ray traced camshaft or whatever and move a semi transparent screen door square around through this scene and the object cool effect you could get a good sense of the contours of the object while having a nice rendering on display EAH back to contents Hierarchical Techniques for Glossy Global Illumination by Per Christensen per cs washington edu Abstract This dissertation concerns efficient computation of realistic images To compute realistic synthetic images the effect of global illumination is essential Ray tracing algorithms solve the global illumination problem for specular interreflections and radiosity algorithms solve it for diffuse interreflections But computing a solution is more complicated when the surfaces have glossy reflection This dissertation describes hierarchical techniques for efficient solution of the glossy global illumination problem Two types of hierarchy are utilized wavelets to accurately represent radiance distributions on surface patches and clusters to approximately represent radiant intensity from groups of surface patches Without hierarchical techniques the solution time would be quadratic in the number of patches and O b 1 5 in the number of basis functions b The hierarchical techniques make solution time linear in both the number of patches and in the number of basis functions This reduction is significant since the numbers of patches and basis functions are large for accurate solutions in realistic environments Furthermore directional importance is used to focus refinement of the solution on parts that contribute significantly to a particular view of the scene Our method is the first finite element method capable of handling complex glossy scenes If you would like to read more than the abstract go to http www cs washington edu homes per publication html and click on dissertation or smaller version The smaller version is much faster to transfer but has no color images A paper on this topic by Per Christensen Eric Stollnitz David Salesin and Dani Lischinski is available online via anonymous ftp from ftp espresso cs washington edu pub danix clustering EAH back to contents Global Illumination SIGGRAPH meeting by Greg Ward greg theo lbl gov Well we just got out of our annual Siggraph global illumination lunch meeting so I thought I would jot some notes about it while it was still fresh in my overcrowded brain There were about 20 of us attending and I won t embarrass myself by misspelling or forgetting everyone s name but instead I ll just mention some of the topics we covered and what was said about them 1 Sharing models and data To address need for shared models that are usable and useful for global illumination a new format has been developed called MGF for Materials and Geometry Format and models and libraries are now available from http radsite lbl gov mgf HOME html Or if you only have ftp access try ftp hobbes lbl gov www mgf This format supports a reasonable reflectance model CIE XYZ and spectral colors and the IES luminaire data format for light sources A number of models from Radiance and other sources have been collected and we encourage people with big hearts to add their own models to our collection Write to me if you have any questions or want to get on the mailing list for how to improve this format to meet our long term needs 2 Setting up light sources Dan Wexler see his article pointed out that one of the biggest time sinks in animation and rendering for film is the setting up of light sources and that methods for making this more interactive were critical to this application Specifically he felt that a deep raster approach similar to that developed by Sequin et al and presented at Siggraph 4 years or so ago was a good way to go In general he felt there needed to be more of an emphasis on animation and interaction than there was in our current focus on static environments and generating one really nice image 3 Image based rendering Pete Shirley addressed a general question to the group about the relative importance and promise of image based rendering ala Quicktime VR versus polygon based methods The overall response seemed to indicate that indeed image interpolation was a significant direction to head in the future though polygon rendering will continue to be important when object manipulating is required and for nearby objects It seemed that at least five people there were actively pursuing such techniques Check out this year s Siggraph proceedings on Plenoptic Modeling and Quicktime VR also Nimeroff et al in Eurographics Rendering Workshop 95 4 Visibility processing Several people talked about the difficulty of geometric simplification and other statistical or computational geometry methods for detecting visibility changes or approximating visibility Christine Piatko of NIST reminded folks that tracking visibility is an O N 6 problem and not something you want to do explicitly and there was an interesting paper by Francois Sillion and George Drettakis similar in some respects to the one Francois presented at EGRW this June on approximating shadows Jeff Nimeroff of UPenn also mentioned the work he had done with Julie Dorsey and Holly Rushmeier and presented at EGRW on statistical measures of object visibility for looking at this problem It was agreed by most that statistical measures or simplification were necessary in large environments though there is still much work to be done in this area 5 Calibrated input and output Holly Rushmeier who by the way is next year s Siggraph papers chair talked a little about the difficulty of obtaining accurate physical data from real world scenes and a number of people lamented about the undetermined nature of image to output mappings for computer monitors printers and film recorders It was suggested that these devices be measured which is certainly possible and that this data be shared with the larger community Hear hear let s all do it etc Holly and I also reminded people to look at the conference room image measurements and model we have made available on the web site http radsite lbl gov mgf compare html From there you can also pick up an online copy of our EGRW 95 paper on image metrics if you haven t purchased the Springer Verlag proceedings yet 6 Getting papers into Siggraph Henrik Wann Jensen of Denmark asked about the lack of papers covering global illumination this year at Siggraph and if this was a trend or what Holly answered that there s a bias against incremental work in any field and that Siggraph tends to accept papers that are new directions rather than the logical next step in a technique previously published Ian Ashdown of Ledalite said that he had submitted something that reviewers liked except that it didn t have any pretty pictures and was therefore rejected No one had anything to say to console him on this I made the unsubstantiated claim that it can help to provide evidence of a real life application along with an incremental improvement in one or more existing algorithms and Holly agreed that there must be a balance between application and innovation There is a lot of useful information by the way on next year s Siggraph in New Orleans Look for the new icons on the web site http www s95 siggraph org conferences siggraph96 siggraph96 html In particular you should be aware of the new electronic abstract requirement for technical papers 7 Oracle assisted rendering Another trend that people discussed me for one was the use of oracles to decide when and where to apply which algorithms a k a hacks to improve the speed and quality of renderings Some information may be derived from the scene itself but other assistance will always require the user to help the program to guide the calculation This is not as bad as it sounds since users are after all necessary to rendering so they may as well guide it I directed people to my EGRW 95 paper on the subject which I can make available online if people are interested Although I don t plan to pursue this too much myself I think it continues to be an interesting and promising direction for investigation 8 Rendering code available Philipp Slusallek of Erlangen Univ mentioned to the group that they have a renderer that extends Renderman input to include global illumination calculations physically based and that code is available from him His address is slusallek informatik uni erlangen de if you re interested He s going to hate me when he gets back Remember also about the Blue Moon Ray Tracer written by Larry Gritz lg pixar com and available at http www seas gwu edu student gritz bmrt html It also does some global illumination calculations though I m not in a position to compare the two As long as I m plugging other people s code must mention my own for those of you who have been asleep or locked up for some time http radsite lbl gov radiance HOME html Well that s about it I guess Anyone else who was there and remembers stuff I forgot or points I left out please pipe in I tend to do a really bad job at these sorts of summaries and I neglected to take notes during the meeting so I m relying here on my less than adequate memory back to contents Total Internal Reflection by Eric Haines Greg Ward greg hobbes lbl gov and Chris Larson larson kingston cs ucla edu I asked a few people I ve run into an interesting implementation problem again which I ve found annoying Imagine you ve got something with a big index of refraction like a diamond and you shoot a ray at it A refraction ray is spawned and passes through the diamond Due to total internal reflection TIR i e the ray s past the critical angle no refraction ray exits when this refracted ray the one passing through the diamond now intersects the surface only a reflection ray is generated which bounces back through the diamond The normal correction for TIR is to simply boost the reflection ray s contribution if the refraction ray is not generated However what happens if this reflection ray again hits TIR occurs and again only a reflection ray is spawned Say this happens again and again until the maximum level of computation is reached and we call it quits What happens at this point That is how do you shade this bottommost ray Very little color has been picked up along the way as it is expected that the reflection ray eventually hits something mostly diffuse and takes up that color Really this is just a special case of the general problem of what should happen when the maximum ray level is hit Currently my kludgy fix is to say when the maximum level is hit we simply don t shoot the reflection ray but return the background color times the reflectivity and call it a day I ve also tried just taking the bottommost ray s surface and boost the diffuse component but this is scary I am interested to hear how other ray tracer coders have handled this problem Perhaps I can glue up the answers into an article for the Ray Tracing News Greg Ward greg hobbes lbl gov replied I don t think you will see black faces due to TIR because the light in a mutifaceted gem eventually finds a surface at a passable angle If the light started from inside a pane of glass or something it might not ever get out it s true but that s the way it is The light that can t get out also couldn t get in i e any incident angle up to 90 degrees refracts to less than the TIR angle Greg focusses on the gem case in particular but I am interested in some general solution for the situation Thinking about it later I realized that in some cases there just is no good answer TIR is how fiber optics work and rays down a fiber optic cable yields a huge ray depth EAH Chris Larson larson kingston cs ucla edu replied Two comments First of all I don t hard code any maximum level for rays rather I maintain a fraction for each ray indicating its contribution to the intensity color whatever assigned to the root ray Recursion stops when this fraction falls below one bit of intensity in the final color I suppose this is still a hard limit in one sense but it allows as many reflections refractions as necessary to obtain this approximation of the root ray s color It also has the nice property that reflected refracted rays which don t contribute much can be solved without recursing to a hard maximum level Although this could just as easily be done with the maximum level approach my method provides this without any additional complexity However this method can still lead to infinite total internal reflection To combat that problem rays are attenuated based upon the distance they travel through any transparent or translucent media This attenuation is based upon the physical characteristics of the media in question exponential decay for non conductors different for conductors because the index of refraction is complex for an electrically conductive medium I think there is another thread around here discussing this very point Such attenuation is in addition to the typical division of energy performed between reflected and refracted rays Nothing about either of these approaches is new and different it was simply my chosen solution to the same problem For more on adaptive depth see IEEE CG A Roy Hall A Testbed for Realistic Image Synthesis v 3 n 8 Nov 1983 This method bears repeating here as it is a good technique to save time I use it too But without a maximum depth you can potentially bounce a ray forever as with the fiber optic case After getting people s insights my conclusion for TIR for now is what Hall concluded that a maximum depth is called for just to avoid a near infinite compute time for each TIR ray However this leads back to my original question how to shade once I reach this maximum level If you have written a ray tracer please let me know how you treat this case EAH back to contents Pretemporal Imaging Systems by Ken Musgrave and Eric Haines You too can get in on the technology Ken Musgrave and I are developing As you may know sometimes it is possible to get an index of refraction less than 1 0 Ken writes Anomalous dispersion the peculiar asymptotic curves for refractive index vs frequency which I mentioned before can yield a refractive index of less than 1 0 but apparently only occurs at frequencies higher than visible light e g UV and X rays Or so say Born Wolf in Principles of Optics 1964 edition pp 93 Another reference I read contradicts this saying that it happens in dyes which are necessarily colored due to the presence of an absorption band in the visible frequencies We suspect that the 6000 8000 Angstrom area of the spectrum holds a roseate coloured light which we can utilize in making spectacles By having an index of refraction which is less than 1 0 the light itself then must be moving faster than the speed of light in vacuum As you no doubt have surmised such spectacles would have the property of being able to look forward in time though admittedly only a small amount However we believe with an elaborate application of smoky dispersive materials and mirrors we can make a marketable product Ken suggests the names Pretemporal imaging systems or Supersimultaneous transmission optics for the industrial version but what we need is a good consumer brand name and that s where you can come in my suggestions of Turbo X Lenses and Tachyon Lenses are lame in the extreme Just send us your suggestions along with all your loose change and convertible bonds and we ll let you in on the ground floor or even the basement of our enterprise I think we could have an initial public offering at SIGGRAPH at a nickel a share for all those nickels which Ken Perlin should have made for developing turbulence functions I say we put all the initial money into the exploration of amber colored zymurgical beverages and their optical properties when placed in prism sided glass mugs back to contents PNG Status by Tim Wegner twegner phoenix net and Tom Lane tgl netcom com PNG say ping is the new alternative to GIF with development helped by CompuServe Here s an update EAH To find out who is leading the way with PNG check out Greg Roelf s page at http quest jpl nasa gov PNG Greg is one of the PNG spec developers I m a minor one also and is one of the zip unzip developers The page cited above will lead you to lists of software that already supports PNG there s a lot as well as portable source code libraries if you want to implement PNG in your own application These are the Libpng and Zlib libraries which are written in C and have been tested on many platforms CompuServe has endorsed PNG and Spyglass Mosaic supports inline PNG now Any browser can support PNG via helper applications Under UNIX there are patches available for adding PNG support to Mosaic and Netscape PNG incorporates all the features that make GIF popular and provides a badly needed update including support for true color gamma and alpha channels PNG uses the same deflate inflate algorithm as zip unzip gzip that is as patent safe as is possible these days PNG and JPEG are complementary the main difference being the use of lossless vs lossy compression Unlike GIF both support true color PNG also supports palette based color Tom Lane organizer of the Independent JPEG Group notes PNG is always going to be much faster at decompression than compression same as everything else that s based on the zip compression method This is the right tradeoff for most applications you make an image file once and then look at it many times PNG is strictly lossless On photo like images it will never be able to beat JPEG for file size that s not the point of PNG The other side of the coin is that JPEGed images can turn to mush after a few editing cycles due to lossiness PNG files won t PNG is smaller than other lossless image formats For instance it can store a palette color image in less space than GIF But lossy compression methods will always beat lossless methods on file size that s the only reason people put up with the obvious drawbacks of a lossy method And this just in from Tim Wegner The W3C is now releasing the PNG Specification Version 0 92 as a W3C Working Draft You can see the draft through the link at the W3C Technical Report page http www w3 org pub WWW TR This is important for PNG acceptance as it is now aimed to become a Web standard EAH back to contents Cinematography References by Dan Wexler wexler pdi com Last week at SigGraph I mentioned that the Cinematography literature is replete with information concerning real time global illumination Here are a couple of my favorite references American Cinematographer Manual Published by the American Society of Cinematographers ASC this is the Foley vanDam F H of all cameramen and lighting experts Complete descriptions of all types of cameras lights lenses filters and supports are given along with comparison tables Techniques for special visual effects background plates compositing miniatures travelling mattes optical printers and special techniques arial underwater arctic tropical day for night stereo 3D sound television are briefly discusses There s even a section on Computer Graphics This is a small book that can be found in many good book stores and sells for about 70 ISBN 0 935578 11 0 Sing Choong Foo sfoo graphics cornell edu notes that the price is only 49 95 You can order it from ASC American Society of Cinematographers 213 969 4333 Millerson Gerald Lighting for Television and Film 3rd Ed Focal Press This is a very good introduction on how to light for film and video Excellent discussions of the aesthetic qualities of light and perception The basic principals of lighting key fill shadows balance direction continuity are summarized Detailed chapters on lighting people the production process atmospheric lighting light sources and equipment color temperature picture control scenery and visual effects A great book to learn how to light a scene to achieve a specific mood First published in 72 third edition revised in 91 ISBN 0 240 51299 5 Malkiewicz Kris Cinematography Simon Schuster 73 89 A shorter but thorough treatment of the basic techniques Chapters include Cameras Films and Sensitometry Filters and Light Picture Quality Control Sound Recording Cutting and Lab Work The Basics of Optical Printing Vehicle and Underwater Cinematography Production and Video Transfer ISBN 0 671 76220 6 Other excellent texts include Lowell Ross Matters of Light Depth Broad Street Books 92 ISBN 1 879174 03 0 Brown Braun Grondin Lighting Secrets for the Professional Photographer Writers Digest Books 90 ISBN 0 89879 412 9 Hart John Lighting for Action AMPHOTO 92 ISBN 0 8174 4225 1 These contain other references and I will happily send you more if you send me mail I think I might like the third one because the author makes special mention of Haskell Wexler who is of course not related to me in any way I know of I am indebted to Jean Cunningham one of our local lighting experts for most of these references I cannot emphasize enough how much there is to learn from this body of knowledge Good lighting with a bad renderer always looks better than bad lighting with a good renderer IMHO Daniel Wexler R D Staff Pacific Data Images back to contents Getting Rid of the Divide by Frank Compagner fc fee uva nl and Bob Pendleton bobp bga com A common question when implementing z buffer algorithms is how one can avoid the division per pixel that is needed to correctly perform texture mapping Division is usually an expensive operation so is worth avoiding at almost any cost Yes this has nothing to do with ray tracing per se but as I have said before I will include topics here that are interesting to me Also more and more renderers are becoming hybrid systems where eye rays are done using z buffers so it has some relevance EAH Three possible ways of getting rid of the divide are 1 lines of constant z that s q to you for some reason First find the 2 d screenspace line along which the polygon has constant z or q There exists such a line for any polygon in any orientation Then scan convert your polygon along this line As z is constant along this line linear interpolation of the texture coordinates does give you the more or less correct result as long as you do the divide along the poly s edges to get the correct values to interpolate between pro s potentially very fast if all your poly s are walls floors ala doom marathon this gets a lot easier because then the lines of constant z are vertical horizontal lines across the screen very easy to do light diminishing with distance or fog con s nasty implementation You have to be very careful how you scan convert along these lines in order to avoid holes and or multiple writes to the same pixel This is especially true for the edges as the on screen line along which you are scan converting is necessarily an approximation of the real line of constant z the texture coordinates will not be absolutely correct 2 scanline subdivision This is what you mention above the divide and conquer approach You linearly interpolate the texture coordinates while making sure the distance across which you interpolate doesn t get too big You can do this by cutting up big polygons into lots of smaller ones or the more popular approach by sampling the texture coordinates at a couple of points for each scanline by doing the divide and interpolating between them pro s relatively easy implementation when correctly implemented easy to trade a bit of speed for accuracy and vice versa That is you can simply decide which combination of speed and accuracy looks best after you ve implemented it con s there are usually still artifacts from the linear interpolation visible These are in part caused by hard to find a good rule for the subdivision process how to cut up the polygons scanlines This must be continuous from frame to frame as sudden jumps in the places where you cut sample will produce very strange looking results I think this is where SlipStream 5000 a new 3D racing game for the pc there s a demo somewhere breaks down Just fly close to a wall and move around a bit it makes me want to cry 3 n th order approximation Here you do not linearly interpolate the texture coordinates a first order approximation instead you use a higher order of approximation Usually this means a quadratic approximation where you pick a third point somewhere between the endpoints and draw a 2nd order polynomial a parabola through these points The mathematics of this are not completely straightforward but they aren t exactly rocket science either If you want me to explain this in more detail mail me or better yet post here so others can read it as well pro s very nice clean implementation Your inner loop can look as simple as for x 0 x These are not the only ways of doing it but I haven t heard of another method that will ge reasonable results at a reasonable frame rate All of these approaches are approximating i e will not look as good as the real thing but you can get pretty close At the moment there is no realtime free direction texturemapper for the pc ppc or any other low end machine that does do the divide and some of them descent magic carpet do look quite good My personal favourite is approach nr 3 possibly combined with 2 although this is probably because I like a clean elegant solution more than anything else I ve heard somewhere that Descent uses this approach but I m not sure about this And while we re on the subject these are just my ideas opinions on the subject and while I don t think they are wildly of the mark I don t think they are 100 correct either If anyone sees things differently just say so Bob Pendleton bobp bga com comments Linear interpolation with runs of 16 pixels seems to be the best trade off between speed and image quality for perspective texture mapping using current PCs back to contents Eric Haines erich acm org Ray Tracing News Volume 9 Number 1 Ray Tracing News Volume 9 Number 1 Ray Tracing News Volume 9 Number 1 Ray Tracing News Volume 9 Number 1 Ray Tracing News Volume 9 Number 1 Ray Tracing News Volume 9 Number 1 Ray Tracing News Volume 9 Number 1 Ray Tracing News Volume 9 Number 1 Ray Tracing News Volume 9 Number 1 Ray Tracing News Volume 9 Number 1 http www acm org tog resources RTNews html rtnv9n1 html http www acm org tog resources RTNews html rtnv9n1 html http www acm org tog resources RTNews html rtnv9n1 html http www acm org tog resources RTNews html rtnv9n1 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv9n2.html%%==%%Ray Tracing News, Volume 9, Number 2%%==%%Ray Tracing News "Light Makes Right" January 24, 1996 Volume 9, Number 2 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%52780%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right January 24 1996 Volume 9 Number 2 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1996 all rights reserved by the individual authors Archive locations anonymous FTP from ftp ftp graphics stanford edu pub Graphics RTNews ftp wuarchive wustl edu graphics graphics ray RTNews ftp ftp povray org pub povray Ray Tracing News HTML at http www povray org rtn index html http wuarchive wustl edu graphics graphics ray RTNews html ftp ftp graphics stanford edu pub Graphics RTNews html index html You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Advice to Authors by Anonymae Introduction This is a special edition of the Ray Tracing News It contains no information on ray tracing or rendering If you may someday be an author it contains information potentially worth hundreds or thousands of dollars hopefully in your favor 62 More important it gives you some sense of what the publishing process is like If you know of some of the pitfalls and headaches in advance you are better prepared to produce your work without any unpleasant surprises A friend asked the going rate for author s royalties on a technical or trade paperback so I asked some people what they received A few wrote back with extremely enlightening and fascinating comments I passed these notes on to other authors and received yet more interesting reading back I have now edited all these comments down a bit mostly taking out the names of authors and publishers and removing publisher specific comments I have also avoided commenting on any text even that which disagrees with commonly held views I hope this compendium is as educational and eye opening to you as it was to me Thanks again to all who contributed back to contents Advice to Authors by Anonymae I would advise any writer seeking a book contract to contact the National Writers Union or the American Society of Journalists and Authors and get someone to help with the contract negotiations Both organizations have offices in New York ASJA is at http www eskimo com brucem asja htm and the NWU has an online forum in the Writers Forum on America Online and is at http www igc apc org nwu index html NWU has an entire group of volunteers ready to help writers with contracts book magazine electronic rights etc The ASJA can offer similar help Yes you will have to join but compared to the money you re about to make the membership is trivial And tax deductible I used a lawyer because at that time these advisory groups were not in place Next time I will use them NEVER EVER sign the first contract you get This goes for magazine articles CD ROMs books and anything else you care to mention The first contract you see will be tilted totally in favor of the organization which wrote it Don t be afraid to ask questions cross things out and tell people that you won t do whatever Royalties are tricky get somebody from NWU or ASJA to explain them to you Remember that whoever gets something down on paper first controls the agenda since this is ALWAYS the publisher don t be afraid to bring up things that aren t in the contract if you want them It never hurts to ask and you can always say no to something you don t want Don t be afraid to add things to the contract Don t worry when the editor says But nobody has ever asked for that before So what big deal and who cares The secret is EVERY author who asks for that is the first even if 10 000 authors asked for it before you I didn t understand all that was involved in writing a book with lots of graphics in it I didn t get any expense money for long distance calls nor did I think ahead to realize that maybe the artists might want money too I was fortunate in that artists contributed freely to my book But I felt bad about not being able to pay them even a token amount I didn t even think about indexing until I realized that the book was going to need an index and I better create one Indexing to put it bluntly is a bitch Unless you are the kind of person who really enjoys minutiae figure out a way to hire somebody to do it for you Another thing to keep in mind is that all your relatives and friends and everybody you interview and everybody who contributes images will ask for a free copy of the book Figure out a way to deal with this before it happens or you could have some awkward and potentially expensive moments In my opinion artists who contribute images to a book do deserve a free copy especially if you can t pay them in filthy lucre So plan for that up front Something else to consider is that unless you are the world s expert on a topic you are going to want content expert reviewers to look over your work and point out errors You d better figure out how you re going to say thanks to them too just an acknowledgment a lifetime membership at President and First Lady a free book Whatever it is figure it out early before you ve spent the advance Even better do it before the contract is signed a good time to ask for those extra free books you ll need For first time book writers writing a book is hard work Start as soon as your contract is signed and work like hell until it is finished Otherwise you will wind up begging your editor for extra time This is embarrassing at best At worst you could lost part of your advance Finally once your contract is signed no matter what squabbling went on beforehand the editor and publisher are now your best buddies You are all in the same boat all rowing to the same destination a successful book So once your signature is dry treat the editor as your friend If you have a problem of any kind relating to the book tell the editor immediately Don t wait until the last minute if advised early the editor may be able to help and can possibly do some re scheduling If the editor has a request answer it or explain immediately why you can t And if you need help ask for it The editor may not be able to help but he sure can t if you don t ask Authors should consider that a book is more than just the words It includes the front cover back cover images diagrams page layout chapter pages table of contents index and so forth All of these require creative thought and take money and time to put together If you have specific creative ideas for any of these then you should make sure your contract gives you the necessary control As an example in our book we failed to include creative control clauses in the contract The cover was designed and printed in a catalog before we had ever seen it In fact it was only after the book had gone to press that we finally saw the cover By luck it wasn t bad but we wish we d had control In the same book the color pages turned into a nightmare We wanted a particular set of images The publisher didn t like the esthetics of the images Since the book was a textbook and the images explanatory in nature not necessarily artistic we felt the publisher was inappropriately editing our visual content One set of images the publisher disliked illustrated issues in the use of color in shading Obviously such images must be printed in color We lost The images were dropped from the book or only printed in black and white We are still furious but without explicit control clauses in the contract we had no power Regarding text we recommend that the text you deliver be as edited by you as possible Don t count on the publisher doing a super editing pass to pick up all your little mistakes They ll catch grammar problems but generally not catch tone problems pacing problems incorrect figure references wrong numeric values in equations or sample code and so forth Don t assume it ll get fixed by them Do it yourself Despite our best efforts our book includes embarrassing mistakes for which we only have ourselves to blame Also regarding text make sure you know the practical page limits imposed by the publisher Such page limits arise from binding types printing costs and appropriate retail price During writing of our book our editor kept telling us to take as much space as we needed So we did and wrote 1000 manuscript pages which sift down to about 800 formatted book pages After turning in the manuscript we were informed that 670 printed pages was the top they d allow and we had to cut 150 pages from the book It was very painful If we d understood the limits up front we could have designed for them and saved a lot of wasted writing and editing time Another word of advice is to deliver your manuscript on time While schedules always include slack if you miss a deadline your publisher gains the upper hand They can cancel your contract which they won t but more importantly they now have a built in excuse for not doing additional work you request They ll say We d like to do that edit pass but since you were late in delivering the manuscript we re behind the schedule and in danger of missing the release date If you deliver on time you are in a better position to ask for additional work When choosing a publisher we went to the experts the book retailers We traveled to a number of stores and asked their managers and book buyers what publishers they liked and why We discovered that some publishers do a bad job of marketing others are unsupportive of their retailers and still others have a reputation of producing poor books It doesn t matter how good your book is if nobody knows about it or retailers are biased against your publisher you re in a bad spot We chose our publisher by picking one with a good reputation among retailers It s also important to note which publishers sell in to the stores where you want your book to be Low end consumer publishers won t have many books at university book stores High end publishers of professional texts won t have many books in neighborhood mall book stores We chose a publisher whose books consistently showed up in the appropriate stores In our travels we also learned a bit about what makes a book sell Here are the basics 1 it must be thick 2 it must have a colorful spine 3 it must have lots of diagrams and examples if it s a how to book To catch the customer s eye your book must be easy to spot To help this you want the retailer to face out your book to turn it so that the cover faces the aisle instead of the spine This is only possible if your book is thick enough to stand on its own Thickness is also a psychological cue to the customer that convinces them that the book is complete and therefore the only book they need to buy A quick thumb through the pages of your book should show lots of examples and images so that the customer is further convinced your book is the definitive helpful work on the topic Things that make a book not sell spiral bindings and shrink wrapped extras Spiral bindings don t show the name of your book when the book is not faced out Without a visible and colorful spine label customers don t see your product When books have shrink wrapped extras such as cheat cards the shrink wrapping prevents customers from thumbing through your book The wrapping also often breaks which causes the retailer to take the incomplete book off the shelves and again the customer doesn t see your product In our case even though we wanted a textbook with a binding that would let it lay flat and we wanted a cheat card we chose to use a standard binding and omit the cheat card so that the book we sell better To sum up our experiences we advise authors to learn as much about the publishing business as possible before writing a book or signing a contract The more you know the better you are able to insure the right things are in your contract and the wrong things are not You are in a better position to optimize your writing time argue for important book features and produce a better sellable product Do not sign the contract that the publisher puts in front of you They write the contract for themselves this is a general rule of contract writing BTW They make you sign away your firstborn child pay you royalties that scale with book sales etc DON T DO IT Just act confident and knowledgeable and they will cross out obnoxious parts of the contract like the option on your next book If they forget to cross it out cross it out and initial it yourself when you send it back That is a counteroffer if they sign they have agreed to your terms If they are not willing to well there are numerous publishers in the field They will also negotiate on percentages A lot of screw you contracts give you 8 5 on the first 5 000 copies 10 on the next 5 000 then 15 on the rest I got a straight 15 on two of my books with various other provisions for things like translations into foreign languages Scaling royalties make a sick intuitive sense to the hapless author since it appears that the publisher is minimizing the risk they are undertaking by publishing your book i e the publisher can afford to pay you the higher royalties once you have sold enough books This is horsepucky The publisher is undertaking a significant risk by publishing your book at all it probably costs more than 100k for them to bring it to market and screwing you on the percentages is just some profit for them They should be willing to forego the scaling royalties if not try taking the idea to another publisher The percentages paid are on the money paid to the publisher for the book about half the cover price If your book has a cover price of 40 and you are paid a 15 royalty you make about 3 per book sold For my books I was paid 10k in advance so the break even was a couple thousand books BTW you have to pay estimated taxes on this income on a quarterly basis The IRS gets really pissed off if you just pay them a big chunk of change in April Just something budding authors should keep in mind Another BTW agents are a waste of money for this small stuff Don t bother In contrast to fiction agents are unneeded in technical publishing because there are so few viable authors relatively speaking Not as many talented amateurs I found a lawyer who claimed to have experience with publisher contracts His responses to my questions were a bit surprising to me but also seemed reasonable once he explained the ideas behind the contract The basic premise behind these contracts is that they are a partnership between the author an the publisher It is to their advantage to have a good relationship with the author it means real dollars to them He also mentioned that publishers often consider their contracts as proprietary information and they should be treated as confidential information He also mentioned that the biggest area of risk for an author of a technical book was not from copyright violations or unscrupulous publishers but from your current employer He said that you should be very very careful to make sure that you employer would have no case against you by making sure not to use any work equipment time or information in the development of a technical book It might also be a good idea to get explicit permission a memo or letter if you feel that there might be a problem otherwise I signed unfortunately the standard first time author contract with the publisher Which means they have both the rights to the next edition of this book and right of first refusal on my next book that is assuming I feel like going through this kind of slavery again which being the troll that I am means probably as long as I can find a topic I think I have something to say about I kinda find these rights more onerous than royalties since I have been less than happy with the publisher A contract is a contract Both parties look out only for their own best interest If you want to make sure that you re getting a fair good deal get a lawyer if you really want to be sure get a GOOD lawyer If you re an inexperienced meaning unpublished author you don t have much negotiating pull so negotiate gently and or carefully Ask lots of questions It never hurts when negotiating to ask for a better deal and ask why the deal isn t better The single most important thing to remember when negotiating a book contract is that you are not dealing with a company Nobody deals with companies they are a legal abstraction You always and only deal with individuals This may sound obvious but consider the ramifications No contract can cover every aspect of book production and distribution it would be thicker than the phone book if it tried So you must rely on the integrity honesty and taste of the publisher and the people who work there to respect your work and treat it the way you want it to be treated You must trust your baby to their hands If you disagree they hold the cards and they ll do what they think best This will usually be what is best for them and their catalog and not what s best for you or your book Protect yourself by picking people carefully This leads to the natural tension between a large publisher and a small one A large publisher can offer you more of everything a bigger advance more production money more advertising better distribution Remember that they can offer you this but they don t have to deliver they will only put resources into a project if they feel confident those resources will repay them Your book might get lots of attention in January and be an orphan in March You are a small wheel in a big machine A small publisher can offer you personal assistance and dedicated service They can actually help you think about your book before and during writing They can work with you to direct it tune it and steer it to where it represents your very best work They will offer you the opportunity to be closely involved in all aspects of production and marketing Which way you go depends both on your style and the type of book you re writing If it s a mass market book then you probably will be fine with a big impersonal house that will take your manuscript chug it through the machine and then sell it as far and wide as possible If you re writing something that is less general and you care deeply about it then a small house is your best bet for preserving what s special in your book If your work is between these extremes you should sound out both big and small publishers One more point is to consider is that although you work with people you sign with a house If you sign a contract and the people at the company change and your friendly supporters are replaced by idiots you re stuck with the idiots who can transform your work significantly on its way to the press in ways that could never be spelled out in a contract Again you re back to trust Large publishers are like any large company they lay off people promote them move them around and hire new people Small publishers are personal and intimate the boss picks a few people who share his or her sensibilities and the people involved tend to be very stable As an example of some of the many issues involved let s work outside in beginning with the cover Consider who controls the cover finish binding jacket images and copy Is your book softcover or hardback Perfect bound Stitched in signatures or glued to a cardboard backing Is there a dust jacket If so is the title and author embossed into the cover for when the jacket is inevitably ripped or lost If not what kind of cover will it be What kind of finish Who selects the images for the front cover approves the text and the layout Who writes the back cover copy Will the back cover be used to promote your book or books or other books in that publisher s catalog Will it have a biography of you Will the book have to look like other books in the publisher s catalog If you care about how your book looks you ll want to have some kind of control Who writes the index If it s you what kind of format does it have to be in Have you considered just how bloody hard it is to write a good index It is very tough boring tedious detail oriented work If someone else prepares the index who pays them Who chooses the indexer Who does the illustrations and figures Can you get them redrawn if the versions they prepare are no good Who makes the judgement call Who does the layout What font What s the leading and spacing how large are the margins what runs on the headers and footers Is math handled in a special way How about code fragments Are index items in bold Or maybe glossary entries instead What kind of paper is used How thick is it What color Is it shiny or dull How opaque is the ink Does it bleed through the page Is the paper acid free And the list goes on endlessly Every book has numerous nuances and special details that are unique with respect to all other books How they are handled will in large part determine how happy you are with the result Your job is to write the manuscript and create or sketch the figures Their job is everything else By the time you finish writing your book you ll think of it as your baby You wouldn t just hand your baby to anyone to raise for you you d pick your child s guardians very very carefully Do the same with your publisher Find someone you trust The key words here are trust ethics and experience All publishers know how to contract with a printer and how to market books The differences are in how they treat you treat your manuscript during production and care for it after it s finished and in the market You can t put that in a contract I m only part way through the process so I don t know all the ways I might yet be screwed I m only a couple of weeks from delivering my finished manuscript before publisher review and I haven t gotten any sinking feeling yet When I started I took my book proposal around to a number of publishers I didn t like trusting the publisher s volume estimates to decide for myself whether writing the book would be profitable or not Since I have no way to judge volume on my own I used the advance amount to judge the publisher s sincerity Signing the contract was delayed over six months from first contacting publishers because it took that long to get an agreement that seemed to make business sense Of the two publishers that were willing to give a reasonable advance I picked the one that obviously had the larger marketing clout since my book is for a wider audience and a good marketing campaign should be real important to sales The total pre paid royalty amount the amount I get even if they never sell a single copy is 22 000 which is based on about 10 000 books paid to my company not me That gets around the tax problems That s enough money that I won t lose my shirt if that s all they sell So far I ve spent about two man months on the book spread out over the last year I can easily see where my total effort could reach three man months That means I would need to see a little over 13K books sold to declare it a gainful way to have spent my time I do mostly consulting and writing a book supposedly helps business However I have no way to quantify that so I just look at the book on its own The royalty amount is 15 of what the publisher gets I checked and that s pretty standard unless you re Steven King or someone like that Being a first time author I didn t think there was any leverage to get more besides it seemed they were being reasonably straight with me The publisher once mentioned that they could give me 18 on anything beyond about 18K books I don t remember the exact figure in an effort to entice me They tried to forget about that later but I wouldn t let them Of course who knows if we ll ever get to 18K books I m certainly not counting on it There has been one hitch so far The publisher originally was willing to give me the advance up front Obviously that would be best for me economically but I just felt uncomfortable getting a large sum of money before having actually done anything I would be liable to give it back if something went wrong Instead I suggested that they pay me for reaching certain milestones We finally agreed on what I d get paid for delivering chunks of chapters Unfortunately after the contract was signed and just as I was ready so send them my first milestone the editor I was working with and had negotiated the contract with left I hadn t noticed or understood the significance of the word accepted relating to my the milestone releases so that I would get paid The assistant the editor had left sent the milestone stuff out for formal review This stuff was real rough I knew I wasn t finished with it I was just making one rough pass through the book Of course the reviewers complained about lots of stuff I also wasn t real happy that people outside the publisher got to see the rough form Worse I ll never even know who they were The assistant then took that to the lawyers who said they weren t accepting the milestone chapters and refused to pay What a hassle They finally hired a new editor who has been trying to get me paid but it looks like I ll get the first two milestone payments only a month before the rest of the money So as far as advice to budding authors Since I haven t completed the process I m hesitant to say much of anything However I did find huge variations in the reactions to the book proposal from publisher to publisher Some turned it down flat while their direct competitors really wanted it and were willing to say it in dollars So I guess the moral is shop around Since my book is related to computer graphics I contacted every publisher that showed up at SIGGRAPH plus a few others that looked like plausible candidates I think that came out to 8 10 publishers Of those one never even replied and three more outright refused to pay any advance Eventually two were really interested I have written two books with two different publishers the first only published in hardback the second printed in hardback and simultaneously in paperback On the first book I received 10 on the second I received 15 on the hard cover version and 10 on the paper version On neither book did I negotiate the contract with the publisher I simply signed what they placed in front of me I only insisted that the paperback be cheap and they complied On neither book did I receive any advance or expense money For both books I prepared my own index and I strongly recommend that authors do this themselves as only the author can do a really good job Both of my books were typeset by the publisher Although typesetting your own book is a tremendous effort I would recommend it as the effort of ferreting out the errors the typesetters introduce eventually exceeds that of doing it yourself My first book had a uninterested editor my second has a superb editor This makes more difference than you might initially think even well after the book is published I recommend asking a potential editor to give you the names of authors of books she or he has edited and contacting those authors In my experience the editor is more important than the publisher Probably the biggest decision to make is whether to write a book at all It is a BIG time sink bigger than you think If you are planning on making a LOT of money on a technical book forget it You will make some but not a LOT unless you write a textbook that becomes a standard That said making a good arrangement with a publisher is important if only for your own sanity and to make sure you get your share The way I figure it the relationship is quite clear I want to create the best book possible they want to make a lot of money In general they only care about quality in so much as it helps sell books Understanding this helps This should help you realize that whatever contract they first put under your nose is heavily tilted in their favor Unless you love everything it says change it In my case I got 15 of the first 3000 copies 17 3000 5000 and 20 after that This is higher than first offered but not by much I delivered camera ready postscript including index and got 3000 extra for the pain and I mean pain of doing this If you are concerned about quality and for example want a right of rejection on how the cover looks say so in writing up front I also got shocked when they decided to release the book on CD ROM and found out I had signed all my rights away to this They apparently did not owe me one cent of royalties for the CD sales They did me a favor and finally agreed to 5 The bottom line is that I am not pissed about the arrangements I had full control of content and it was my fault I did not read the contract well about the CD royalties Read the contract carefully edit it at will and then write a good book and feel lucky for every penny you get for having the opportunity to tell the world what you know My experience with my publisher has been reasonably good My royalty rates are 12 for the first 2500 book 15 for the next 5000 and 18 thereafter I thought that was reasonable and competitive with rates I heard from other publishers and authors I think it is a good idea to establish price and distribution policy in advance Not having done so I had an initial problem with the price of my book At first the publisher set a price that was in my opinion outrageous Their price was so high that only libraries would have been able to afford it You don t have to have an MBA to figure out that overall sales and profits might increase if the book could be made affordable to the masses Anyway with much haggling in the first month or two the price dropped dramatically I handed the publisher a camera ready manuscript Although they could have assisted me on that I found the do it yourself approach to be less error prone Furthermore there is some time saved in not having to review anyone else s typesetting editing work but your own In any case it can be used to increase your own royalty rate because you can make the case that their costs are lowered by your own typesetting work Most people now write publications with latex anyway so it s not much added effort The publisher reimbursed me promptly for my reproduction copying expenses They were also fast in printing the book It took less than four months from the time I gave them the camera ready copy to the time the book was available for sale Having them meet a Siggraph deadline is good I have had one small monograph style book published Typesetting figures were done by me in Tex Latex and I gave the publisher camera ready pages printed on a hi res 1K dpi phototypesetter Or did I just preview it on that and give the publisher postscript I forget now I wrote my own index which was in some way the most painful part of the writing The publisher provided some proofreading I had no color plates My relationship with the publisher was fine The only big snag from my view was the cover I didn t pursue my ideas actively and in the meantime they made up some cover art which was in my opinion very inappropriate analogous to a picture of a steak on the cover of a vegetarian cookbook They claimed it was highly visible so would attract buyers and that they knew more about this sort of thing so I shouldn t argue I got a vague feeling that since they had already spent money on the artwork and didn t want to toss it I convinced them to take out the part that I found objectionable the steak The result is a cover that I find unattractive but harmless Morals a if you care about the cover make sure to insist on control up front b if you think you don t care about the cover think again because there s no telling what monstrosities the publisher might come up with Contractwise their initial offer me was 5 I balked and they came back with 5 for the first X copies sliding up to 10 for Y or more copies I took this to mean that they expected to sell X epsilon copies and accepted The book is a small enough thing that frankly it didn t make much difference the book wasn t written in order to make money Even if they gave me 50 it wouldn t make my fortune nor even be a reasonable hourly wage for the time put in I negotiated a sliding scale royalty at roughly 10 20 If you ve already worked with a publisher you get a bit more room in the negotiation and you can get them to really talk about costs and risks I did not do so well on my first book Also if you are confident about the sales of your work you can often give up just a little on the first bit and get quite a bit on the back end of the run As far as production face it much of the stuff we publish has a very limited life because of how fast all the tools around us are changing The key for us was to get from the copy we gave to the publisher to an on the shelf book as quickly as possible ours was about 6 weeks To get this to happen you the author need to provide camera ready copy to the publisher including index We did all of this on Word and had a local typesetting house run the final copy on a high res laser printing device used to always be a lineotronic but there are a bunch of better high res printers now We also supplied cover art in electronic form The key here is to have an ongoing relationship with the publisher have the publisher s production people review your templates EARLY in the process get complex art or color art to them early and run EARLY production tests through your typesetter particularly to test fonts figure line weights and shading things that come out of the hi res typesetter are way different than what you see on the screen and your publishers production people can tell you a lot about the differences there will be between the hi res output and the final printed work If you do go the camera ready route negotiate a rate for your production we did a per page from your publisher you are saving them lots of time and money by doing the production Lastly don t underestimate the headache of producing your own camera ready it s long hard and you have to get it right but in the end you get your book looking the way you want and the publisher s production time is vastly reduced I signed the standard contract straight away I m not sorry about that despite the other guy s comments I still feel like they ve been relatively fair on money issues I got a little less than 10 grand to write it and the sliding scale royalty thing that works out to about two bucks a book New authors should remember that the percentage quoted is based on the wholesale price of the book The only money thing that I thought was bit of a drag was the reserve clause they keep 25 of ALL of the royalties just in case they get returns Of course 25 is always much higher than the actual return rate so perhaps 1 4 of all the money you would have got sits in an account until the book is discontinued and closed out Sounds like that ll be about 2 or 3 years The publisher will want the book IMMEDIATELY after you have signed the contract They feel like they paid for it and where is it Therefore if you feel strongly about a project complete it and then approach the publisher If you are good at desk top publishing you can negotiate a far higher royalty for delivering a book that needs only to be printed and sold In my case the publisher wanted a book for which they had little more than a concept I was late from the beginning and it added to the stress and made it hard to keep the quality up As many authors say it s more fun to have written than it is to write I still would do it again except for one thing it takes all your time to do it right It d kill my business to take the 3 5 month hiatus required to do a full book That brings all my sales momentum and networking results to a complete halt and for months after the book is done you have to get all that going again If you do the math there isn t enough money in it as it stands even taking into account a better contract per your previous author s tips And you really can t just write a book as you find time When you write books about software time is critical if you take too much time to finish the next release of that software will make your manuscript obsolete before it hits the stores Besides I don t know if I or many other authors would really make a lot of progress without some sort of real deadline A certain small publisher seemed quite interested in seeking me out to write a book an opportunity I never thought would just drop in my lap Since I had never published anything before their royalty percentage under 8 and advance 60 3 000 was a little low but I was getting a chance to publish a book so I didn t mind I changed a couple things on the initial contract but nothing major Their word processing templates were not completely thought out and after they found a few problems in them they asked me to redo a couple of chapters with the new styles This was not too difficult but it did give me a queasy feeling about their ad hoc in house editing environment I was also surprised to find that even though we used e mail extensively to ship chapters illustrations and programs they also insisted that all revisions be done only on paper printouts instead of using change bars or colored text in the document files This meant that I not only e mailed the chapters but we were also FedExing bulky packages of paper just like 100 years ago The editor at one point undercounted the pages in the book and advised me to go into more detail to fill out the book even though my calculations said I was right on I did as I was told and later the editor sheepishly admitted he forgot to add illustration space Now that we were way over he asked if I could cut some chapters way back I stood my ground on this saying it was impractical at this late date while still meeting the deadline the publisher graciously ate it publishing a book that was 50 bigger than designed for the same price The project also included a CD ROM full of programs data and information which the publisher and I jointly designed They also contracted several other people to add large chunks of content and although it was a lot of additional work for me it went quite smoothly They had a technical editor go over the book and he came back with one change now that I ve tech edited another computer book I am very unimpressed with his lack of work They also contracted an outside Content Editor who was incredible very thorough and she practically read my mind when suggesting changes that fit my style As is the hallmark of this publisher the final design and layout of the book was quite beautiful and I was very proud of the way it turned out Now I will never again attempt writing a book on the side while juggling a full time job pregnant wife and major house remodeling all at once and I will certainly ask for more money next time However I am convinced that this writing publishing experience turned out to be positive for two main reasons 1 The small publisher was very interested in keeping me happy for future work and 2 I was interested in publishing a book not making money My first book experience was very enlightening and MUCH MUCH more work than I ever imagined My experience with the publisher was not as bad as some of the other responses to this inquiry The royalty rate I negotiated was 12 for the first 3000 books 15 thereafter The major mistake I made was in agreeing to format the text into almost camera ready copy using LaTeX macros supplied by the publisher I received a fee of 2000 for this It was not worth the money The macros were not complete and I would never agree to this again There are 3 other pieces of advice that I have 1 Make sure you know where and how often the book will be advertised In the end this is the main function of the publishing company They contract out the printing I was somewhat disappointed in the few ads that I saw for the book 2 If you work with co authors make sure you know how reliable they are and be ready for major work if you are acting as the editor for the project 3 Double or triple your initial estimate of the effort for the project Writing is only a small portion of the job Editing organizing indexing formatting etc takes up a large amount of time For about a year now publishers of every kind have been making attempts to grab all rights from authors The New York Times is one of the sorrier examples for years and years the Times practice was to buy one time rights to freelance articles Suddenly last year they announced a new policy of demanding all rights It s ignited protests across the writing community and many writers are refusing to write for the Times The reason this is a problem is that you just don t get paid enough for one newspaper article to be able to make a living writing them The writer s solution has always been to re sell in non competing markets Due to the electronic world s sudden imposition of deathless databases repeat downloads etc publishers are now seeing opportunities to sell the same article over and over whereas before they could only sell it once when the paper was published For some reason many publishers seem to feel that the writers don t deserve any part of the profits This war has been going on for a year it will continue The NWU and ASJA have brought suits against some publishers but the real war as in all wars is being fought by the infantry on the ground the individual writer negotiating with the publisher It s hard telling the editor of a big time publication that you aren t going to accept their contract The better paying ones where you re making thousands of dollars per article are also the ones that have the worst contracts in terms of rights As far as rights go rights can be split down to the quark level You name it there is a right for it For example I retained movie rights to my book It is unlikely that anything will come of that but I retained them It is possible a documentary could be made you see and then I would own those rights My publisher is now into CD ROM publication so they adamantly refused to allow me to keep those rights Then there are plain electronic rights databases posting articles on Usenet Facts aren t copyrightable of course arrangement of words IS copyrightable in fact is the main thing you copyright A posting on Usenet is copyrighted E mail is copyrighted If there was a means to present information using aluminum foil and earphones that would be copyrightable My point is that writers better pay attention to all the media in existence when reviewing contracts If the future is in electronic media then it s important not to sign away all your rights to that future Some advice for authors I thought about this for a while and decided that I have neither damnation nor praise for my publisher They sent me a reasonable contract I signed it and sent them a manuscript and they published it End of story My advice is more personal Writing a 500 page technical book is an activity that should come with a Surgeon General s warning May cause serious health problems Take good care of yourself as you burn the midnight oil Be forewarned that writing a good technical book is an all consuming task It will take over your life from the day you write those first few introductory words to the day you sign off on the final copyedited manuscript It may be fairly described as inhumane albeit self inflicted torture There will be days of absolute despair and frustration You will want to cleave your computer with a large and heavy fire axe Be sure to make a backup first and remember to disconnect the power Your family and friends may post Warning Vicious Dog signs in your immediate vicinity But there will come eventually two days that you will savor for years afterwards On the first occasion your editor will send you a copy of your book hot off the press This is a wonderful experience On the second occasion you will see your book proudly sitting on the shelf in a bookstore This is well check with your doctor first The heart can only take so much adrenalin And rest assured that your eyes do not deceive you your book will indeed glow with its inner radiance Writing a good technical book is hard work and you will be fortunate indeed if it sells more than a few thousand copies Unless of course it has the words sex or dummies in the title Unfortunately Dr Ruth and IDG Books have already laid claim to Sex for Dummies It used to be said that the ability to make tools separated us humans from the lower animals Today I think that it is our innate desire to write books But then what other primate would be stupid enough to want to Problem Publishing companies get bought out and merged regularly People in them shift around as well With publisher X my book was translated into German without my knowledge I learned about it on the net when someone emailed me a question about it I actually ordered copies of my book from a German bookstore I found on the net The bookstore gave me the email of the German publisher I contacted him and he told me that one of my other books had been translated too Publisher X was bought out by Publisher Y then by Publisher Z when I contacted Publisher Z there was confusion as to what had been done before the chain of buyouts Publisher Z in that they bought out Publisher X assumed responsibility for Publisher X s actions so they came clean and I got my royalties I would have never known about the translation if someone had not emailed a question starting I like you German translation of I said what German translation A similar event occurred when I learned about a CD ROM that my book was to be included on I found this information in a netnews newsgroup This did appear on my next royalty statement but I found it awkward to read about it before being informed of it from my publisher random notes I can get up to 20 royalties from my publishers 12 15 for the first 2500 copies 20 after 5k 10k copies usually with around 8k advance 50 front loaded with a 2k grant for work for hires helpers and a 2k grant for formatting 7500 books is what they expect to sell if technical w program source code I usually sell in the 15k 60k copies range they will let you promote your business in a book First book try for 12 royalties up to 5k copies 15 18 thereafter try to get 50 advance up front no less than 33 Beware subsidiary rights clauses that allow them to take major portions of your book and place them in other books for a nominal fee I have not been caught here but I know someone who wrote an extremely successful internet book who did lose by this clause Most publishers are relaxed if you are just a little late they all get up tight and rightly so if you are much late some publishers are extremely serious about deadlines and cost overruns they are in publishing to turn books and money so take their contracts very seriously they WILL enforce what s in them Be aware of the discounting schedules of the day breaks around 55 56 are important as these are likely to be where a publisher says you get 1 2 your royalty rate know the industry standard at the time Publisher X has good distribution but you are not likely to see a lot of the money made Publisher Y s distribution is lame because they don t have people hitting the streets reselling to stores that have sold out so a book store or chain might place only one order got to have those sales guys out there pushing more product through the distribution channels Publisher Z takes an aggressive approach with marketing and distribution taking advantage of modern electronic means internet cds etc but I don t have conclusive data on them yet looks good so far as far as getting them to make many press releases very important for book software sales In parts of contracts where they say these sales will not increase the book count used to determine royalty rate you can usually talk them into counting 1 2 the rate i e the sale of 2 books counts as 1 against the total needed to increase your royalty rate from 12 to 15 at 4000 copies for example The battle between publisher and author is eternal and unlikely to be resolved But book publishers particularly over software publishers seem bent on exploitation It is really just a supply and demand issue I think so hating the publishers is probably not healthy just fight back Remember it is just business back to contents Eric Haines erich acm org Ray Tracing News Volume 9 Number 2 Ray Tracing News Volume 9 Number 2 Ray Tracing News Volume 9 Number 2 Ray Tracing News Volume 9 Number 2 Ray Tracing News Volume 9 Number 2 Ray Tracing News Volume 9 Number 2 Ray Tracing News Volume 9 Number 2 Ray Tracing News Volume 9 Number 2 Ray Tracing News Volume 9 Number 2 Ray Tracing News Volume 9 Number 2 http www acm org tog resources RTNews html rtnv9n2 html http www acm org tog resources RTNews html rtnv9n2 html http www acm org tog resources RTNews html rtnv9n2 html http www acm org tog resources RTNews html rtnv9n2 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv10n1.html%%==%%Ray Tracing News, Volume 10, Number 1%%==%%Ray Tracing News "Light Makes Right" January 21, 1997 Volume 10, Number 1 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%61075%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right January 21 1997 Volume 10 Number 1 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1996 1997 all rights reserved by the individual authors Archive locations text version at http www acm org tog resources RTNews text HTML at http www acm org tog resources RTNews html You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction New People Jim Roedder Faster Refraction Formula and Transmission Color Filtering by Xavier Bec Results of Sphere in Box Ratio Contest by Han Wen Nienhuys Jim Arvo and Eric Haines Ray Tracing Roundup Papers of Interest by Eric Haines Synthetic Textures and Genetic Algorithms by Steve Worley Ray Tracing What is it Good For by Arijan Siska Fast Soft Shadows by Steve Worley Progressive Ray Tracing and Fast Previews by Eric Haines Free Radiosity Renderer inc C source code by Ian Ashdown Cells and Portals Resources by Randy Stiles New Books by Eric Haines Introduction Since the last issue around February much has happened of course Beats me what it could be I ve been too busy working Actually a few things did pop up above the noise level for me for example the new POV Ray 3 0 for Windows is finally out and the interface is pretty pleasant beats using the command line at least for test images As for myself instead of working on the Ray Tracing News I have put my efforts into other areas The first and second issues of the journal of graphics tools are out visit http www acm org jgt for more info I m one of ten editors for this refereed journal and I urge you all to consider submitting to it Personally I would like to see more short papers on specific practical algorithms to perform various tasks I believe most graphics programmers have a few tricks that have not made it into the literature for one reason or another For example if you ve ever written an article for comp graphics algorithms explaining some technique then you should consider contributing to jgt Because of its focus on practical tools for graphics programmers it is less formal that most other journals in computer graphics Empirical proof i e as you can see this works and usability of algorithms is more important here than formal proofs ACM TOG http www acm org tog has actually caught up its publishing schedule had once been more than a year behind and is back on schedule due to Andrew Glassner s fine whip hand and the suffering of numerous editorial board members not including me I ve just been webslaving for it Through the web site we have been able to offer additional materials for articles printed in TOG such as MPEG movies showing algorithm behavior We have also started to offer electronic versions of the latest TOG articles on an experimental basis Late breaking news Holly Rushmeier has taken over the Editor in Chief position for TOG as Andrew has become busy with Microsoft s MSNBC TV channel I have recently added new resource links to ACM TOG s web pages Under the Resources area you will find a number of interesting new programs such as the GIMP a free Photoshop like program for Unix Linux systems with source code and plug in interface There are also links to other resources such as bibliographies I was amazed to learn the Computational Geometry bibliography now has over 8000 entries FAQs links to on line papers and tutorials etc If you know of other resources on the Net that deserve a link please tell me I am focussing on the better free resources directly useful to researchers and educators for example programs listed on the web page generally have source code available ACM TOG s site has also become the official home of two software resources the Graphics Gems code and the Standard Procedural Databases package I am the archivist for the Gems code logging bug fixes and maintaining the errata Craig Kolb has quietly and diligently provided a home for the Gems code base at Princeton for years now His access to princeton edu is becoming limited he s now at Stanford and he is also in danger of graduating so I have moved the Gems code to http www acm org tog GraphicsGems The Standard Procedural Databases code has also moved to http www acm org tog resources SPD The SPD is code which produces various databases for testing ray tracer efficiency Over the years Alexander Enzmann and others have added a wide variety of output formats e g RenderMan Wavefront OBJ DXF and translators The latest release includes output into the VRML 2 0 and 3DMF file formats Also I should note I ve taken advantage of ACM s free membership benefit of having an email address from which I can forward My new email address is erich acm org This is actually handy for example I can forward mail to my free Juno email account during the Christmas vacation See http www acm org account for details George Kyriazis is in Greece s army for a year so I ve taken over his duties as maintainer of WUArchive s graphics archive site ftp or http wuarchive wustl edu graphics graphics Benign neglect has been my mantra so far unfortunately I would like to change this in the future updating the site with newer graphics software and information If you have resources such as code or papers you would like to see available at WUArchive let me know It s a free way to keep your works alive at a permanent site The computer graphics community has joined the API of the Month club Here you too can make up your own new API name simply pick one from each column prefix suffix Direct VRML Open X Shock GL Active Script Java Movie Cosmo Draw Cyber Wave Visual 3D BTW and FYI there s no doubt a good TIA Three Initial Acronym API generator could be made PDQ IMO given the existence of PCI MMX OLE RDX VFW GDI RSX OCX ICM MFC and AGP and that s only a small taste of what just Microsoft and Intel have been up to Actually we re running out of acronyms I just ran into two uses of STL contest time be the first to tell me what the two uses are and you win some random computer graphics CD laying on my desk In the same vein here is a trademark alert I recently noticed that the phrase Old Number 5 is trademarked I forget by who so remember when you use 5 s only use new ones And don t forget that the color Pink is a trademark of Owens Corning Fiberglas Corp Lastly something I keep forgetting to mention if you re a C coder check out Obfuscated C and Other Mysteries by Don Libes Wiley Books I bought this on a lark with some book credit money I had and it s one of the best things I ever got The Obfuscated C contest winning programs are interesting of course I m in awe of the program that solves differential equations and reverses code and when applied to its own code creates a sort program which when again applied to itself creates a Fibonacci sequence generator no I can t explain it better check out http reality sgi com csp ioccc index html for the Obfuscated C contest results http reality sgi com csp ioccc 1990 theorem hint for the program description However some of the explanations of the code in these programs drag on What s great about this book is all the stuff they never taught you in school techniques presented There are some excellent pieces on allocating memory faster than malloc does about efficient bit flag array creation and access about signals and many other topics which are useful for efficient and effective programming back to contents New People Jim Roedder Name Jim Roedder Organization McDonnell Douglas Interests acceleration methods fast intersection tests for bi cubic patches Methods Used SEADS hierarchical SEADS Newton Raphson for cubic surfaces Phone 314 232 7083 E mail roedder ws1777 mdc com Snail mail Jim Roedder MC 064 2263 PO Box 516 St Louis MO 63166 I have done ray tracing for about 7 years as a small fraction of my time I apply RT to the calculation of radar cross section electromagnetic scattering for aircraft I use the 3D billiards techniques of ray tracing for tracking ray bounces on a geometrical model My principal objects are parametric bicubic patches PBCs flat facets I use the point in polygon algorithm for general facets and the 3 planes algorithm for triangular facets I use 2 dimensional Newton Raphson for intersection tests on the PBCs and SEADS for geometry walk through I optionally use 2 levels of SEADS for reducing memory requirements when memory is limited Since about 1989 I have used a technique for PBC tracing similar to Rick Turner s RTNews Nov 18 91 where I subdivide my PBCs This technique yields SpeedIndeed Normally the volume of the bounding boxes encompassing the subdivisions is much less than the volume of a single bounding box containing the entire surface Further knowing which subdivision is being tested provides a better starting point to begin 2D Newton Raphson With this logic my ray tracer is only 3 to 6 times slower on curved surface geometry than on a comparable faceted model This is measured on a geometry where the bounces are not between close neighbors Staying with the original surfaces also increases my accuracy relative to triangulating Are any RTNews readers getting better speeds than this DOES ANYBODY HAVE FAST ASSEMBLY LANGUAGE for 4by4 matrix multiplies either double or single precision on the following machines Workstations SG HP IBM RISC Sun Supercomputers Intel Hypercube Paragon back to contents Faster Refraction Formula and Transmission Color Filtering by Xavier Bec xav buf imaginet fr Here are some improvements I found when writing refraction formula in my ray tracer Maybe they are not news it s news to me EAH In An introduction to ray tracing we can find this results from Heckbert s formulas sqrt n n1 n2 1 c1 I N 3 2 c2 sqrt 1 n n 1 c1 c1 1 3 2 T n I n c1 c2 N 7 4 1 1 13 8 We can do better Bec s method sqrt n n1 n2 1 c1 I N 3 2 w n c1 1 c2 sqrt 1 w n w n 1 1 3 T n I w c2 N 6 4 1 1 11 9 result 2 less 1 more Any comments I mentioned that on a few machines addition can be more expensive than multiplication Xavier replied I don t know if adds may be more expensive than multiplies but if it s the case on some machines one can write a simplier reformulation sqrt n n1 n2 1 c1 I N 3 2 w n c1 1 c2 sqrt 1 w w n n 1 2 2 T n I w c2 N 6 4 1 1 12 8 result 1 less and nothing more Not so good as the previous one but there is no operation added We also discussed light passing through colored transmitting objects and how to best control it EAH It appears that there is two ways for filtering colors 1 the first solution is as you say filter by the color of the object and then the formula looks like this result color kt light color object color Of course if you don t want the filtering color you have to put the object color to white 2 the second solution is the one used by Softimage for example As kt goes to 1 0 the object disappears So even if you have defined the object as red the object will be invisible and there will be no filtering effect at all result color kt kt light color 1 kt object color A somewhat surprising formula since there s a kt kt term in there EAH An analogous problem appears with illumination models One use additive formulation another softimage use multiplicative formulation result color local color ks reflected color kt refracted color result color 1 kt 1 ks local color ks reflected color kt refracted color In the second solution refraction is dominant I don t know what is better but I think you are right It s more easy to control the transparencies with the first solution combining kt and the object s color Maybe this is more difficult when the object is mapped because the object s color is given by the map and if you want a small color attenuation you have to transform all the map to white Personally I use a method between these two methods things like diffuse and ambient and reflection get scaled by Kt but the specular highlight does not This makes it easier to control the highlight which is a hack anyway you should really be reflecting the light source itself EAH By the way when working on the special effects for the movie The City of The Lost Children a problem arose When you compose a computer generated image on a real image you use a mask alpha plane for object occlusions But what is the correct solution for mixing the object s shadows too and the reflection of that object on mirrors We can do it all in a single image but we have never seen articles about such processes to know if we are wrong or right I sort of understand this problem Compositing is definitely a pain for example it s common to allow a texture map to act as a backdrop which fills the background However this backdrop has no physical location in the scene so if you put a reflective or refractive object in the scene the map is not seen Usually no big deal if you also just use the backdrop as a reflection refraction map used when nothing else is hit or perhaps actually give the texture a real location in space EAH Paul Heckbert Paul Heckbert HOSTESS GRAPHICS CS CMU EDU comments Yes that is a nice little improvement And I guess we would have to call it Bec s method As far as translucency I suggest a formula like final color transparency light color 1 transparency filter color where transparency exp alpha thickness and alpha is a parameter something like kt controlling how much scattering there is and thickness is the distance the ray travels through the transparent object I think you ll find formulas analogous to that in many computer graphics books back to contents Results of Sphere in Box Ratio Contest by Han Wen Nienhuys hanwen stack nl Jim Arvo arvo cs caltech edu and Eric Haines Here is the problem as stated last issue I have another problem again a useful result for ray tracing what is the average cross sectional area of the projection of a sphere vs a bounding box around the sphere In other words given a sphere in a bounding box what is the chance that an arbitrary ray originating outside the bounding box hitting the box will also hit the sphere The answer turns out to be the ratio between the sphere s surface area and the bounding box s area In fact surprisingly the chance of hitting any convex object with a random ray is proportional to its surface area Goldsmith Salmon s automatic bounding volume hierarchy article was the first place I heard of this theorem but I hadn t seen a proof so I asked around From Jim Arvo arvo cs caltech edu To answer your question yes the average projected area of a convex body is 1 4 its surface area You can check out my SIGGRAPH course notes from 1990 for a nearly rigorous proof or almost any book on geometric probability I gave at least one reference to the theorem in my chapter of the ray tracing book The 1990 course notes are not available on my web page yet but they will be as soon as I find the file I m such a pack rat I know I have it somewhere And indeed he found it check out http www cs caltech edu arvo papers html and get the Ray Tracing with Meta Hierarchies paper There are other great ray tracing and other papers here which have appeared only in course notes or hard to find proceedings e g The Ray Tracing Kernel and Backward Ray Tracing EAH It turned out that the first entry I received won From Han Wen Nienhuys hanwen stack nl http www stack nl hanwen I m not sure this is what you want but the expectancy of the area of a projection of any convex object compared to the area of its surface is a fixed ratio The ratio can be easily calculated take a sphere projection pi R 2 object area 4 pi R 2 ratio 1 4 The area of the boundingbox is 6 2 R 2 24 R 2 and the expected area of the projection is 24 R 2 4 6R 2 so the ratio of sphereprojection vs cubeprojection is pi 6 I am just doing this from the top of my head Last year s Dutch University Mathematics Competition had a similar question expected area of an isotropic projection of a cube The answer suggested partitioning the convex object in triangles and then proving the theorem for arbitrary triangles The idea is this let ExpArea be the expected area of a projection along a isotropically distributed direction and f is the ratio we are trying to find 1 For any triangle T ExpArea T f Area T f does not depend on T 2 For any convex polytope made of triangles T i P Union i T i So ExpArea P ExpArea Union T i Sum i ExpArea T i Sum i f Area T i f Area Union i T i f Area P maybe I am losing a factor 2 somewhere because a convex set has back and or front side It doesn t matter any factors will be absorbed in f 3 If C is a convex object it can be approximated by a triangularization P so ExpArea C ExpArea P f Area P f Area C The triangles can be made smaller and the approximations will be better In the limit ExpArea C f Area C for any convex C f is fixed does not depend on C 4 f can be easily calculated A sphere is radius 1 is convex ExpArea Sphere pi Area Sphere 4 pi So f is 1 4 5 Area BoundingCube 4 6 24 So ExpArea BoundingCube 1 4 24 6 ExpArea Sphere ExpArea BoundingCube pi 6 I know that this is only a so so proof if it is worth the name step 1 and especially step 3 would involve some advanced math but this is how you would prove it elegantly The result also generalizes to lower 2 and higher dimensions In case you didn t follow that here s a talk through To state this a little more loosely step one says that an arbitrary triangle and its average projected area have a constant ratio This could use a little more proof as he says but here s an intuitive way to know that this is true First this is definitely true for the class of all equilateral triangles there is some answer to what the average projected area is for some one equilateral triangle and scaling up this equilateral triangle to a different size won t change the ratio f between the new area and new average projected area So now make an arbitrary triangle out of a million tiny equilateral triangles sure the edges won t be perfect add another billion tiny triangles then i e take it to the limit but the point is that the ratio f for equilateral triangles then applies to arbitrary triangles or any 2D figure in fact So now we informally know step 1 is true that f is a constant Step 2 says that a convex object made of polygons will have a constant f ratio too same as in step 1 This is because from any angle no part of the object covers another forward facing part of the object it s convex So you can sum up all the triangles areas since they do not interfere with each other Step 3 is sort of like my step 1 informal proof it says that any convex object e g curved can be tessellated into triangles something I think we all believe Step 4 is the clever part a sphere is a convex object and the nice thing about a sphere is that its projected area is the same from any direction So now we simply work backward through the steps For a sphere the projected area vs the surface area is 1 4th so f must be 1 4 and since we proved this f is constant we now know that it holds for all convex objects so we can compute the answer to the problem in Step 5 If this proof seems bass ackwards to you check Arvo s paper for a formal integration of the projected area of an arbitrary triangle I personally like the looser proof as is since we never had to even integrate to prove it Note that the value of 1 4th is for a convex 3D object The ratio is 1 2 for an arbitrary 2D figure s average projected area to its actual area because we do not compute its actual area by adding its front area to its backface area if both sides of the 2D figure are visible i e no culling This result is handy for all sorts of things Goldsmith and Salmon use it to compute a cost function for the relative chances of hitting a bounding volume so helping them to optimize their hierarchy Or say you want to test a graphics rasterizer by tossing arbitrarily oriented polygons on the screen which will cover an average of 50 pixels each By this theorem you know that using a parallel projection the triangles need to cover 100 pixels when viewed straight on And the all mimsy were the borogoves comment of the day on this problem From Ken Musgrave musgrave seas gwu edu Just got back from a visit to Pixar where Ronen remarked that they were having a conversation recently the conclusion of which was there s very little volume of a 48 dimensional sphere in a unit bounding box Think about it as the dimension D goes to infinity the sphere s volume goes to zero All those corners to cut off Ronen credited someone I forget whom with noting back to contents Ray Tracing Roundup Much research related information which I usually would have listed here has moved to ACM TOG s Resources area http www acm org tog overview html resources Internet Raytracing Competition The Internet Raytracing Competition is an open competition held every two months Participants may use any 3D rendering program http www povray org irtc This is kinda fun and overwhelming in the number of entries submitted e g I see about 110 images in the latest contest You can vote on the entries something to do while waiting for compiles to finish Many images have how I did it information attached EAH POV Ray Mirrors This is a list of known mirrors of ftp povray org and ways you can access the mirrored files ftp or http wuarchive wustl edu graphics graphics mirrors ftp povray org ftp ftp shu ac uk pub computing packages raytrace ftp povray org ftp or http www hensa ac uk ftp mirrors povray ftp or http ftp nectec or th pub mirrors ray tracing ftp ftp etsimo uniovi es pub raytrace NB not all sites carry all files For example etsimo does not carry the competition mirrors images or Hall Of Fame The shu UK mirror as far as I know only carries a subset also Errata for Principles of Digital Image Synthesis You can find the errata listing on the web at http www research microsoft com research graphics glassner work projects pdis errata htm Thanks to all the bug spotters on the To line Andrew Glassner glassner microsoft com It is my pleasure to announce that my PhD dissertation is now available on the net The dissertation is entitled Mathematical Models and Monte Carlo Algorithms for Physically Based Rendering It s all about global illumination models Monte Carlo methods variance reduction techniques path tracing light tracing and bidirectional path tracing You can find the abstract an overview of the chapters the table of contents the colour images and the dissertation itself at http www cs kuleuven ac be ericl thesis Even if you re not interested in the text you can just have a look at the pretty pictures Enjoy Kind regards Eric Lafortune RayTraced Evolution For info about RTEvol RayTraced Evolution a free package for procedural modelling using Lindenmeyer grammars and interpreted C like macros functions look at this URL http www rz tu ilmenau de juhu GX RTEvol Primarily I use this package to test some raytracing acceleration techniques but now it expands to a fully programmable system It is an ideal tool for quick generation of test scenes Have fun JuHu cn1 irz301 inf tu dresden de Pete Shirley s moved to Utah and his useful page has moved with him http www cs utah edu shirley This page includes a focussed link list for Monte Carlo rendering techniques and a list of computer graphics related periodicals and conferences Grammar of Ornament now on CD ROM I love the Dover book The Grammar of Ornament by Owen Jones So I was happy to find that this book is now available on CD ROM see http www dimagin com This CD ROM is a labor of love the creator Stephen Hubbard says it took 5 man years 65K and 3 girl friends to make Flatland now on the Web While I m on the topic of classics the classic volume Flatland has been put on the web by Tom Banchoff check out http www geom umn edu banchoff Flatland You might also want to look at the projects Banchoff has been involved with he s well known for his visualizations related to topology 4D spaces etc http www geom umn edu banchoff projects html ZRend ZRend is also mentioned in RTNv7n5 it is part of the Graphics Gems V distribution and it has been improved since then by the author EAH The key features of this program are a Reads a variant of the standard Neutral File Format NFF as input b Outputs a 24 bit color TARGA file c Uses accurate fixpoint arithmetic in all its calculations d Works on X windows environment We have tested it on Sun Sparc machines e High Performance The renderer has almost realtime performance This software is available through the Web and via anonymous ftp The software includes sample files including the teapot We would appreciate any feedback you can give us on this software We are quite impressed by the quality of the images produced Enjoy the use of this utility http www cerc wvu edu public domain sw html Raghu Karinthi raghu cs wvu edu Application Challenges to Computational Geometry This tech report is now available at http graphics lcs mit edu seth pubs taskforce techrep html Seth Teller it s a report on the challenge of applying computational geometry to practical problems among other things Also check out http www cs duke edu jeffe compgeom for comments on this report and for many other computational geometry resource links EAH back to contents Papers of Interest by Eric Haines OK this is just a brief list of some papers I enjoyed in 1996 that others might have overlooked I won t bother listing SIGGRAPH 96 papers since I assume all researchers get this Anyway here goes A Andrew Woo A Andrew Pearce A Marc Ouellette T It s Really Not a Rendering Bug You See J IEEE Computer Graphics and Applications V 16 N 5 D Sept 1996 P 21 25 I found this is also on the web at http ada computer org 80 pubs cg a articles g50021 pdf very nice See http ada computer org 80 pubs cg a backissu htm for other IEEE CG A back issues and articles abstracts available online If you render read this one They point out many common bugs you ll run across I had already run into many of these bugs but a few were new ones I hadn t hit yet it s great to get a warning of what to watch out for sort of an FBI s Most Wanted list of rogues Their poor texture interpolation bug where a textured quadrilateral with one short side is badly rendered if split into two triangles actually has an interesting limiting case a tessellation of a cone A good textured cone tessellation needs to have quadrilaterals for the faces not triangles at the cone tip you need two vertices with the XYZ locations identical but the normals and texture coordinates different Systems which show textures by splitting up quads into triangles and rendering these will improperly display such quadrilaterals A Krzysztof S Klimaszewski A Thomas W Sederberg T Faster Ray Tracing Using Adaptive Grids J IEEE Computer Graphics and Applications V 17 N 1 D Jan Feb 1997 P 42 51 The short summary is automatic bounding volume hierarchy with grids at each level To make this scheme more profitable the authors discuss methods of merging bounding volumes and of nesting grids directly within voxels It s nice to see some serious ray tracing efficiency research still being done and the techniques and results are interesting and well presented Even if you just use grids their section on setting the resolution of grids is a nice take away the gist is an idea I ve heard of before but I don t recall seeing in print instead of giving a box of dimensions of say 1 4 9 a constant grid resolution along each axis instead scale the resolutions proportionally with the box s dimensions Timing results are given showing this to be a better method A Frederic Cazals A George Drettakis A Claude Puech T Filtering Clustering and Hierarchy Construction a New Solution for Ray Tracing Complex Scenes J Computer Graphics Forum Eurographics 95 V 14 N 3 C Maastricht Netherlands D 1995 P C371 C382 This one s available on line at http flamingo stanford edu cazals xfc research html It s got some interesting ideas on forming efficient access structures Specifically it uses techniques such as histogramming and filtering of the object sizes to split up and then cluster objects of differing scales in order to efficiently ray trace scenes I enjoyed it because it s a new way of thinking about the problem back to contents Synthetic Textures and Genetic Algorithms by Steve Worley steve worley com Steve and I had a long email exchange on this topic In my last note to him I was discussing Sims like methods of generating synthetic textures use genetic algorithms to combine equations with the observer picking which equation survives to the next generation and bemoaning the fact that minor evolutionary changes in equations usually caused huge textural changes Such large changes mean that you have little sense of being in control of the process and so there is little sense of steering generations towards more interesting and appealing results Contrast this to Latham s work where you get a strong sense of ancestry if you look through the choices you made in evolving a strange 3D creature BTW there is now a fantastic screen saver program for Windows 95 which Latham worked on check it out at http www artworks co uk EAH You make a great point about the fickleness of genetic algorithms One problem is that if you the human need to judge each image you have to see all these garbage tests Using some automatic quality selection algorithm instead will prune for you so while the generation effort is still wasted it s automatic and you just let things cook a bit longer But as we said the quality of texture is more a human subjective thing We need to stay in the loop Here a fast CPU is still good for fast updates so the human can make their choices faster I guess But a more promising method of using genetic algorithms is to limit their scope By feeding in a set of very complex primitives simple combinations can make new and impressive surfaces using only simple combinations Consider the impossibility of making a fractal noise cloudy surface with a genetic algorithm that can do only if and floor It just wouldn t happen though those operations are sufficient But when it has noise as a primitive magic can happen So I see a way in which say a limited number of complex primitives say two fractal noises a sawtooth and a radial ramp and a limited number of simple operations if sin get mixed together with rules to prevent super concatenation 3 noise x x noise sawtooth x is fine but sawtooth noise x 4 sin noise radial x 1 is not Maybe even limit it to simple binomial combinations The idea of this is that by limiting the genetic forms you can limit the complexity of the textures keeping them efficient and you also limit the number of changes that can occur during a mutation or breeding You give up some of the rich number of possible surfaces you might get by surprise but the extra control may be reasonable Have you used Kai s Power Tools texture explorer It seems to have only a very few base algorithms with only a few controls though they also use a large selection of spline color maps It s not overly complex yet people play with it for hours Another aspect of genetic algorithms is perhaps more interesting Forget changing the ALGORITHM take any current man made texture Nearly all are driven by a list of parameters like turbulence value or scale size etc What set of parameters looks best Answer jiggle a test test of parameters some way and let the user pick images until these parameters get set to some local user maximum happiness value I mention this a bit in the postscript of my chapter in the texturing book There s something to this I don t know just how to do it yet But it d be very useful both for end user as well as for developer and here s another interesting bit from another note from Steve EAH My main idea is that the algorithm for choosing the new parameters is not obvious and depending on the application it may even vary So I may write a METAalgorithm which basically has a bunch of methods to try It tries them all and notices which ones tend to make better pictures as scored by the user Then it starts using those selection methods more often This can happen adaptively even as the user plays around Maybe at first the user is just exploring looking for many different types of appearances until he finds a cool one he wants to refine Suddenly his goals change he wants one that s like THAT but better as opposed to something cool not like these Anyway just a long deferred project I haven t thought about it for a year or so back to contents Ray Tracing What is it Good For by Arijan Siska arijan kette fer uni lj si I m using 3DS a lot these days in my own animation company got my degree in December and believe me I sure do not miss the slowness of raytracing And it also seems that most of the reflections can be faked with automatic reflection maps ones that get rendered on actual scene prior to the rendering of the real picture Basically I ve compiled a list of reasons why would one use raytracing at all Here it goes Exact primitives spheres can be faked on scanconversion algorithm with adaptive subdivision based on pixel coverage No problem shadows Wide lights real softshadows Heightfields are supposed to be easier to trace than scanconvert zillions of polygons CSG objects Extended camera models cylindrical camera spherical camera fisheye Easy real reflection refraction I doubt these or other reasons will ever push scanline based renderers like 3DS out of the picture Real world animation visualization games will always need faster results even with god knows how fast machines academic research will without a doubt move to global methods like path tracing and particle tracing There is no easy cheap way to avoid aliasing in raytracing This is going to be a dominating factor when raytracing moves and it will I m sure into mainstream production software In production quality is very important Incidentally check out Blue Sky Productions http www blueskyprod com for a company which uses pure ray tracing for production work EAH back to contents Fast Soft Shadows by Steve Worley a fragment of a note from Steve This is an idea I ve thought about and always wanted to try but never got around to do nice to hear it actually works pretty well Sure it might not catch the soft shadows all the time just due to bad luck but for the most part I can imagine it working EAH a neat sampling scheme specifically for soft shadows If a pixel is in shadow but its neighbor is not both are sampled even more If one of the pixels is in PARTIAL shadow its neighbors are also sampled more Pass 1 basically uses a single sample per pixel but it identifies any shadow boundaries The recursive fill algorithm used in pass 2 helps a lot since it works very hard on the soft areas but doesn t fire much more in solid light or solid dark regions It worked surprisingly well I meant to do the same for depth of field but it was trickier and I never got around it However I really find the shadow area growth sampling to work exceedingly well looking at a grey scale image of the number of samples taken for each pixel the soft shadow regions are easily noticed This is good you only do the horrible soft shadow work where the shadow really is soft back to contents Progressive Ray Tracing and Fast Previews by Eric Haines Here s an interesting form of progressive ray tracing you first render everything at say 8x8 resolution and toss gouraud shaded polygons on the screen using the samples to generate 8x8 sized polygons to toss to the screen Then you look for large differences and resolve them My system started with the 8x8 s spiralling outwards from the middle of the picture since the interesting stuff is usually at the center then resolved on a variety of different types of corner comparisons did the objects at the corners differ Did the shadows change state Did the colors differ etc Just doing color differences was not good enough as you would waste a lot of time refining textures when what you really would rather have seen was object boundaries Whenever a sample was refined its neighbors would also be put in the queue so that while you watched an entire object or shadow edge would resolve itself It was nice in that you d get a 95 good sphereflake for example in 1 10th the rendering time As a bonus you d actually get somewhat soft reflections for awhile during the process since reflective areas were not refined first so they would be represented by gouraud blends of their samples As discussed in RTNv8n2 this soft reflection idea can actually be used in object space instead of image space as above Microcosm reviewed in RTNv7n5 now called Megahedron and available from Syndesis http www syndesis com actually implements this technique back to contents Free Radiosity Renderer inc C source code by Ian Ashdown iashdown ledalite com The C source code for HELIOS a fully functional radiosity renderer for MS Windows 3 1 is now available for downloading on the net Radiosity is a computer graphics technique that enables you to synthesize photorealistic images Whereas ray tracing techniques excel in the rendition of point light sources specular reflections and refraction effects radiosity methods accurately model area light sources diffuse reflections color bleeding between surfaces and detailed shading within shadows They are in a sense complementary approaches to photorealistic rendering Folklore had it that you needed a graphics workstation with gigabytes of RAM or even a supercomputer to do radiosity rendering This is no longer true You can use your personal desktop computer a 386 IBM PC with a math coprocessor 4 MB of RAM and a 256 color SVGA display will do nicely to experiment with radiosity methods A 66 MHz 486DX machine will render a simple scene 540 polygons in less than three minutes A more complex scene with 2 700 polygons can be rendered in a little over six minutes Commercial radiosity renderers are slowly making their way into the marketplace Take a look for example at the incomparable Lightscape Visualization system http www lightscape com to see what is available now for Windows NT Other interesting sites on the Web for commercial radiosity renderers are http www bentley com products masterpiece download the Microstation MasterPiece Technical Profile and the Italian http www atma it also Lightworks http www lightwork com products rad over htm EAH In the meantime you can download HELIOS to experiment with the possibilities of radiosity rendering using MS Windows 3 1 or Windows 95 The Web site is http www ledalite com software software htm where you will find a demonstration version of HELIOS Version 1 03A 144 KB and the complete C development package 700 KB including four different executable versions of HELIOS fully commented C source code over 12 700 lines make files for Microsoft Visual C 1 5 and Borland C 4 5 online help files two demonstration environments demo images and more While you are perusing our Web site you might want to look at http www ledalite com library ledapub htm we have an eclectic variety of academic papers and articles on computer graphics and related topics available online for downloading The HELIOS development package is not in the public domain It is copyrighted material that may be freely copied redistributed and or modified for personal non commercial use ONLY provided the copyright notice is included with all source code files HELIOS was first developed in Ashdown I 1994 Radiosity A Programmer s Perspective New York NY John Wiley Sons Inc Softcover 498 pages 12 color plates http www wiley com ISBN 0 471 30444 1 without diskette 39 95 US ISBN 0 471 30488 3 with 3 5 inch MS DOS diskette 54 95 US brief review and table of contents in RTNv7n3 EAH This book provides a detailed explanation of radiosity theory and its associated algorithms no knowledge of higher mathematics required More important it also includes complete fully documented and compiler independent C source code over 7 500 lines for HELIOS Version 1 00A a fully functional radiosity based rendering program for MS Windows 3 1 Windows 95 and Windows NT The radiosity related code presented in the book is identical to that now offered online If you want to fully understand how HELIOS and radiosity works you more or less need to buy the book back to contents Cells and Portals Resources by Randy Stiles stiles aic lockheed com This is a reply for information on cells and portals a technique for quickly culling out geometry for scenes with many rooms Invented for speeding architectural walkthroughs the most popular application of the ideas is now probably Quake EAH Carlo Sequin s group at UC Berkeley has done some good work in the area of culling scenes using cells and portals the URL for his home page with related links is http HTTP CS Berkeley EDU sequin A good reference for this technical area is S J Teller and C H Sequin Visibility Preprocessing for Interactive Walkthroughs Proc ACM SIGGRAPH 91 Las Vegas Aug 1991 and Computer Graphics Vol 25 No 4 pp 61 69 1991 Seth Teller is now at MIT and here is the URL for his PhD Thesis which is focused on the cells and portals culling area http graphics lcs mit edu seth pubs pubs html David Leubke at UNC has implemented a cell based culling system for Performer see his URL at http www cs unc edu luebke publications html back to contents New Books by Eric Haines One thing I ve been doing for a little money is review book proposals and technical edit book drafts I could probably make a better hourly wage at McDonald s but the concept that someone is actually paying me to read something that I want to read anyway is great don t tell any editors that or my wages drop Two books I ve worked on last year are Keith Rule s 3D Graphic File Formats A Programmers Reference Addison Wesley see http www europa com keithr and and Bridget Testa Mintz Graphical Treasures of the Internet Academic Press http www apnet com I ve also done some editing for parts of Rob Glidden s Graphics Programming with Direct3D Techniques and Concepts Addison Wesley 3D Graphic File Formats is about the only book in its field Murray and vanRyper s Encyclopedia of Graphics File Formats is about the only book that comes close at this point and their volume is primarily about image file formats Rule s book discusses VRML 1 0 DXF 3DS Wavefront OBJ TrueSpace WTK NFF POV Ray 2 2 and RAW formats For most readers Rule provides something no other book does a working program for reading and writing each of these 3D formats and translating from one to another It is written in C with a Windows framework to read view write models along with an OCX custom control The CD ROM also includes over 100 models not normally found on the web and trial versions of TriSpectives and TrueSpace The best thing about the book the DXF format is explained in English not tech ese Credit for this accomplishment is shared by Rule and Zap Andersson who has worked with the format for years Some limitations of the book should be mentioned First the software converts basic geometry but currently does not support translations of surface vertex normals i e any smoothing information is lost when moving between formats or texture coordinates It also does not have a serious polygon tessellator So you may have to get a professional translation program Syndesis InterChange Okino s Polytrans etc for higher quality translations Also the book is not meant to be the final word on each specification much of the book is dedicated to explaining how the software works not how the format works However given the page limitations this book is quite a feat It is more than adequate for those who want to get under the hood and understand various 3D file formats and for those who want to convert from their own file formats to others Adding new format readers and writers is a fairly straightforward process usually one of the formats Rule covers is similar to what you want to add so that code can simply be regrooved to read in the new format Mintz Graphical Treasures of the Internet is on the non technical end of the spectrum While a fair bit of the book is dedicated to explaining to beginners many of the basics of Internet commercial services and non commercial alternatives and I would bet that almost no one has tried all the resources she covers there is also a fair bit of meat about other topics There are interviews with a number of well known computer graphics and Internet people and many different perspectives are presented Personally I found the chapter on copyright and software patents particularly interesting it was something I felt confident passing on to our company lawyer for his own edification There is also information here found nowhere else For example she presents a history of the comp graphics hierarchy back as far as could be done Mintz is an engineer turned professional writer and it shows this book is both well written and well informed Glidden s Graphics Programming with Direct3D from Addison Wesley http www aw com is a pleasure to read which is surprising given that the topic sounds dry as can be His book talks about the place of 3D in the marketplace motion capture how to manage multi user spaces and other interesting topics which do not directly bear on the topic of Direct3D The author is a long time technical reporter on computer graphics and related topics so his prose is readable and he can t resist commenting on many aspects of the field He gives a great top level view of various areas of the field along with solid advice on Direct3D e g whether to go with retained mode vs immediate mode There is also some information on 3D file formats such as DirectX DXF and 3DS on the basics of 3D vector math and on the fundamentals of graphics PC hardware Given that the Direct3D API is still in flux e g today I read how a new command DrawTriangle was just added to it it means to me that this book actually could have a longer life span than could be expected as Glidden s discussions on more than just the nitty gritty of using D3D will last well beyond the next beta release Many other books came out during 1996 of course API books were a noticeable trend witness 3D with HOOPS by William Leier and Jim Merry Addison Wesley with a CD ROM with a personal version of the HOOPS library for the Mac Unix and Windows Such software used to cost hundreds if not thousands of dollars for a single person license but in the new market for mind share prices have dropped Same story for Learn 3D Graphics Programming on the PC by Richard Ferraro Addison Wesley which is essentially a nicely done explanation of 3D graphics using the RenderWare API and includes a personal copy on CD ROM again a few years ago a personal copy of this software would cost you about 1000 Certainly of note is Jim Blinn s Corner from Morgan Kaufmann Publishers http www mkp com Finally many of Blinn s IEEE CG A column articles are assembled in one place I personally wish they had just gone for it and published all 45 of his columns to date but having these 20 in one place saves me a lot of flipping through old issues of CG A In case you ve been missing out on this column think Graphics Gems meets Programming Pearls Each chapter is around 10 pages long and focusses on a particular topic like How Many Ways Can You Draw A Circle Subpixelic Particles and Backface Culling Snags There is a lot of useful here s what I think is the best fastest cleanest way to do this type of advice If you re a graphics programmer why you don t have this book I cannot imagine What else is new Well there s a second edition of Murray vanRyper s Encyclopedia of Graphics File Formats from O Reilly http www ora com which has bulked out a bit more with information on new formats like PNG and more on 3D file formats like 3DS I still consider this primarily a 2D file format book esp now that Rule s book is out but it s definitely the first place I look for information on such formats Other than that hmmm I haven t gone wild buying new books this year I guess There are a ton of new books on specific topics e g I d guess around 50 on just VRML itself but nothing else pops out at me as of general interest if you know anything good I ve missed let me know Another book of note is Watkins Mallette s Stereogram Programming Techniques from Charles River Media http www charlesriver com I beat this topic to death in RTNv8n1 reviewing two books in the process so I have to admit that I ve only skimmed through this new volume the fad s past right Stereogram pictures are destined to be remembered as the black light posters of the 90 s This new entry in the field looks pretty good it stresses the theory and programming behind the technique and there s no hidden agenda to sell you any additional software This book is considerably longer that the other two books I reviewed it s about 450 pages and so can take its time in presenting theory code listings etc The stress is put on stereo pairs SIRDS and SIS i e there are no text stereograms All in all it looks good and also points the reader at other articles and resources For more book recommendations try Brian Hook s page http www wksoftware com publications 3dbooks html Tastes vary and I disagree with a few of his reviews but the great thing for me was to hear about some books I ve never even run across Such a list gives you a chance to get some titles to page through at the bookstore and see if they look worthwhile Also there are some interesting HTML pages on Direct3D and OpenGL under the publications category at this site if you re in to such things back to contents Eric Haines erich acm org Ray Tracing News Volume 10 Number 1 Ray Tracing News Volume 10 Number 1 Ray Tracing News Volume 10 Number 1 Ray Tracing News Volume 10 Number 1 Ray Tracing News Volume 10 Number 1 Ray Tracing News Volume 10 Number 1 Ray Tracing News Volume 10 Number 1 Ray Tracing News Volume 10 Number 1 Ray Tracing News Volume 10 Number 1 Ray Tracing News Volume 10 Number 1 http www acm org tog resources RTNews html rtnv10n1 html http www acm org tog resources RTNews html rtnv10n1 html http www acm org tog resources RTNews html rtnv10n1 html http www acm org tog resources RTNews html rtnv10n1 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv10n2.html%%==%%Ray Tracing News, Volume 10, Number 2%%==%%Ray Tracing News "Light Makes Right" June 26, 1997 Volume 10, Number 2 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%87887%%==%%30 Jun 99%%==%% Ray Tracing News Light Makes Right June 26 1997 Volume 10 Number 2 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1996 1997 all rights reserved by the individual authors Archive locations text version at http www acm org tog resources RTNews text HTML at http www acm org tog resources RTNews html You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents SIGGRAPH Roundtable Introduction New People Marcos Fajardo Orellana Ray Tracing Roundup Illuminated by Black Light by Dan Wexler What s Wrong with Monte Carlo Methods by Nguyen D C JuHu Pete Shirley Stephen Westin and Eric Veach More on Rendering Bugs by Eric Haines The Curse of the Monkey s Paw by Eric Haines Global Illumination Bible by Ian Ashdown Megahedron Detecting Points on the Edge of a Polygon by Eric Haines Rendering Unflat Polygons by Eric Haines Free Polygon Tessellators by Eric Haines Octree Neighbor Finding by Andrew Glassner Francois Sillion and Paul Heckbert Author Sues Publisher by Ralph Grabowski European Graphics Tour by Nelson Max Fast Shadow Testing Bibliography by Slawomir Kilanowski SIGGRAPH Roundtable The ray tracing roundtable will convene at SIGGRAPH 97 Time Thursday 6 30 pm to 7 45 pm room opens at 6 Place Hotel InterContinental Cocker Room As usual the location is near the Thursday evening papers reception which follows The roundtable is simply a gathering for people interested in rendering and ray tracing and who d like to talk about what they ve been doing and meet other like minded souls It s extremely informal the agenda is that we introduce ourselves then break up and chat back to contents Introduction Not much has happened to me lately other than getting a new job and selling and buying a house Which sounds dramatic but these changes are actually surprisingly mild The new house is about 6 blocks from my old house easy move though the amount to pack remains the same For the new job I have to move even less exactly 0 blocks in fact It turns out Autodesk acquired the Ithaca branch of 3D EYE in February around Valentine s Day there s some joke about a sweetheart deal in there somewhere 3D EYE itself their headquarters is in Atlanta merged with VDS a CAD CAM solutions provider Long and short is that I am happy to find myself still in Ithaca after all of this Graphically speaking I ve been working a little bit with Java and VRML I went to the VRML 97 symposium back in February which was pretty fun The most memorable event was the Monday night demo dinner Each demo was limited to five minutes which was strictly enforced by the use of a countdown and nerf guns in the hands of front row audience members A brilliant feedback system was also implemented by the organizers in which the audience could immediately register their feelings about anything done during the demo Each person at dinner was provided with two toys if you liked something you heard you would squeeze your squeaky toy if you disliked something you d turn over your moo cow can toy I helped with the VRML Illumination working group at the conference and one thing that came out of this meeting was the need for a sample perfect implementation of the VRML illumination model Happily there s a nice way to do this Java This program seemed like it should have been easy make a GUI accepting the various variables hit a compute button compute an image The two big roadblocks for me were figuring out how to get the GUI elements to stay put on the screen and to get the compilers to work I won t get into the particulars but the hardest part for me was getting the various pieces of text and input boxes to not realign themselves in some obscure fashion Also I found that if certain routines in my code had more than say 40 lines of code they would not compile Sun s compiler gave false errors Microsoft s just gave an internal compiler error and quit Anyway the promise of Java is great it seems like a pleasant language but before doing another project I ll probably wait another year or two until the tools become more visual and more stable If you want to see my application check it out at http www acm org tog resources applets vrml pellucid html The cool thing about Java is that the GUI once you get it going is indeed portable a huge advantage over C This feature makes it possible to actually write tutorials about computer graphics concepts and be able to easily distribute them and for educators to share them Being able to actually play with BSP trees or vary illumination models or see the relationships between matrices and operations is great stuff Such applets can build up an intuition of how variables affect results and how algorithms work I have begun to gather Java applets used to teach about computer graphics go to http www acm org tog resources applets overview html to see the collection If you know of related applet URLs or can provide more Java code please do let me know One of the more entertaining and enlightening books I ve read this year has been Scott McCloud s Understanding Comics It was recommended by the folks at Thinkfish www thinkfish com who do real time non photorealistic rendering this book discusses many different facets of comics Visual styles portrayal of time and a zillion other topics are covered Oh and it s all done entirely in comic form Good one On this issue I ve still got a backlog of about 200K bytes of material to wade through and some of it I need to edit and some I need to just plain understand This issue has a theme of global illumination methods the next looks to be more about ray tracing efficiency yet again and various tricks and hacks Contest news Josh Hays was the first to correctly identify the packages in RTNv9n1 The question was what are the real names for FalseSpace 3D Atelier LightSwell RayReverie and AutoPUNK The answers truespace 3d studio lightwave raydream and autocad Stephen Westin was the first to identify the two uses of the acronym STL in the field of computer graphics RTNv10n1 1 Stereolithography actually the triangle based geometry file format for 3D Systems Stereolithography r devices 2 Standard Template Library for C Jens Kilian came in a close second back to contents New People Marcos Fajardo Orellana Marcos Fajardo Orellana mfajardo freenet hut fi We ve got a small computer graphics research group here at Malaga University Spain and I ve been playing for some time with analytic atmospheric scattering effects I mean avoiding sampling along rays using simplified scattering models that have a direct integral solution In particular we ve devised a nice solution for Warn spotlights within homogeneous fog You can see some test images in http www geocities com TimesSquare 2143 back to contents Ray Tracing Roundup Efficiency Scheme Pointers I ve been browsing all the Ray Tracing Newses more than I ever have in the past since I m spending a few weeks in a graduate course I m currently teaching going over spatial data structures to speed up ray tracing In a sense we re just putting together the pieces from all the papers that have been written over the years Your RTN collections are a nice complement to the often too formal and biased presentations of journal and conference papers In any case I ve found it helpful to collect together a list of the most relevant RTN articles into my own HTML file and organize them by topic instead of chronologically http www cs cmu edu ph rtn index html Paul Heckbert ph CS CMU EDU An encyclopedia like collection of articles from comp graphics on a wide variety of topics is available at http research microsoft com hollasch cgnotes Steve Hollasch stevehol MICROSOFT com On my homepage I have added links to graphics journals and conferences with home pages http www cs utah edu shirley I have a list of advanced graphics course pages http www cs utah edu shirley courses html If you teach some sort of advanced graphics course e g a seminar on rendering and want to be listed send me mail Pete Shirley shirley cs utah edu BMRT 2 3 5 is ready Lots of bug fixes and subtle enhancements are there but the big news is that this version has support for true displacements It s expensive and less flexible than PRMan but it basically works Give it a try Look in the manual for more details Other highlights of 2 3 5 include fixes to some subtle handedness problems of 1 sided primitives fixes to vertex variable interpolation working trim curve sense attribute improved derivative calculations for some subtle cases support for RiReadArchive instead of Include and HTML documentation The full list of fixes and enhancements can be found in the Changes file that comes with the distribution The WWW site for BMRT is http www seas gwu edu student gritz bmrt html Larry Gritz lg pixar com 3DS NFF Online Raytracer I just installed an online raytracer for 3DS NFF scenes at http tissot rz tu ilmenau de 8000 cgi bin gxtrace cgi It s a PVM ed version of the GX GENERIC raytracer running on 10 SGI R5000 JuHu Nguyen Duc Cuong juhu rz tu ilmenau de There is a wonderful annotated global illumination bibliography that has been put together by Travlex Yeap You can access it at http www scs leeds ac uk mscytsy md abs mnu htm Ian Ashdown iashdown ledalite com Ian s 1031 bibliography have been converted to a 2 frames hyperlink format for easy reference http www scs leeds ac uk mscytsy md abs ian0 htm for direct access Tralvex Yeap mscytsy scs leeds ac uk SIGGRAPH Articles Many of the articles in the SIGGRAPH 96 Proceedings were available on the web before the conference If you don t have this Proceedings the web site is still around at http www cs utah edu ppsloan siggraph96 html SIGGRAPH 97 articles are also starting to appear on line One paper about ray tracing is Rendering Complex Scenes with Memory Coherent Ray Tracing by Matt Pharr Craig Kolb and Pat Hanrahan at http www graphics stanford edu papers coherentrt Cool Relight Trick At Foundation imaging we used the primary and secondary specular colors combined with the edge falloff to make really cool view dependent iridescence Set one broad specular to be full strength in direct view and 0 strength at the edge and the other specular to be opposite It s fun Steve Worley steve worley com RT Evolution For info about RTEvol RayTraced Evolution a free package for procedural modelling using Lindenmeyer grammars and interpreted C like macros function look at this URL http www rz tu ilmenau de juhu GX RTEvol Primarily I use this package to test some raytracing acceleration techniques but now it expands to a fully programmable system It is an ideal tool for quickly generation of test scenes JuHu Nguyen Duc Cuong juhu rz tu ilmenau de Free Daily Spectrum Subscription Email subscriptions to Daily Spectrum are now free of charge to members of the interactive media online development industry If you do not currently receive Daily Spectrum by email and would like to fill out the following form and send it by email to duberman dnai com Please forward copies of this message to associates who you think would like to subscribe to Daily Spectrum Your name email address Organization name Your title Please note You must fill out the above form in its entirety to receive a free subscription to Daily Spectrum David Duberman duberman dnai com I like the Daily Spectrum I even laid out money for a subscription when it first went commercial Other good computer graphics related ezines include The WAVE http www fourthwave com wave The Tessellation Times http www 3dartist com tess tessmain htm and upFront http users uniserve com ralphg EAH Java raytracer http web mit edu lbw www laser html raytrace html I believe it is the first real raytracer written in Java Gamelan www gamelan com only lists one other and it is not very powerful Morgan McGuire morganm mit edu The paper Ray Tracing with Affine Transforms is available at http www olympus net biz 7seas contain html I was recently pointed to the web page http www erim org on line docs GUIDE guide frm html which has a discussion of several BRDF models It has several small errors but also some very good information A postscript version of the paper Automatic Termination Criteria for Ray Tracing Hierarchies from Graphics Interface 91 is available from my web page http www cs uncc edu krs publ html I also have a postscript file of my thesis K R Subramanian krs zappa cs uncc edu ART Advanced Rendering Technology has developed a dedicated ray tracing chip claiming 80 000 000 intersections a second Also they will have a box with 64 of these chips on it http www art co uk Snapshots of Silly Space v2 00 are now on line at http inside net silicon softworks Silly Space v2 00 supports Real time 3D click and drag mindless user interface Multiple Cameras and multiple views with split panes zooming wireframe field shape size indicators Real time 3D transparent blob modeling Multiple field shapes not just spheres with scaling in all directions of individual field shapes Adjustable space tessellation File loading and saving It s OpenGL based now so it s really reliable Silly Space it s Artsy Space Kyle Lussier lussier cis ufl edu Iv2Ray Inventor VRML 1 0 to Rayshade Translator The beta executable of iv2ray for Irix 5 3 is now available from Cow House Productions web page at http www cowhouse com Home Iv2Ray IvToRay html Iv2ray is an OpenInventor to Rayshade translator It converts Inventor 2 0 format files VRML 1 0 to the input language of the Rayshade ray tracer Cow House is offering this program free of charge If you need the source code drop me an e mail at laser cowhouse com I will consider giving it out if you give me a good reason If you do download and use this tool please drop me an e mail and let me know what you think And absolutely let me know if find any bugs Mark Lasersohn laser cowhouse com There is a comparison between Lightscape Specter and Radiance at http rmp kiam1 rssi ru articles pals There is also a paper Comparison of two Methods of Global Illumination Analysis devoted to comparison of Deterministic and Monte Carlo algorithms of global illumination analysis http rmp kiam1 rssi ru articles cmgia Andrei Khodulev abkhod gin keldysh ru If you want to see some other examples of how close Radiance can come to reality I always do check out the following web page http sap mit edu projects studioimages html This is work done independently by Philip Thompson and Jack DeValpine at MIT Greg Ward greg hobbes lbl gov If you are seriously interested in the topic you might contact Greg or Andrei there was an involved debate about the testing conditions used for the images EAH The large 6500 ref computational geometry bibliography is at http www cs duke edu jeffe compgeom biblios html Paul Heckbert ph CS CMU EDU Free Textures You can find free textures on my site http www mnet fr axem CORREIA Emmanuel axem mnet fr I ve created an index to mesh generation info on the world wide web This might be of interest to radiosity researchers http www cs cmu edu ph mesh html Paul Heckbert ph CS CMU EDU Here s a haptic web site http haptic mech nwu edu My Ph D Thesis is available on the WWW http www cs kuleuven ac be cwis research graphics CGRG PUBLICATIONS PHDPHD The files are available as gzipped postscript If you have any problems in downloading the text please do not hesitate to contact me Title Mathematical Frameworks and Monte Carlo Algorithms for Global Illumination in Computer Graphics Philip Dutre Philip Dutre cs kuleuven ac be Try rendering through the Web project I supervised summer of 96 http www cse ucsc edu jastory volrender html Links to Bill Lorensen s neat vol renderer web interfaces there too Craig Wittenbrink craig verity hpl hp com back to contents Illuminated by Black Light by Dan Wexler wexler pdi com Here s a great little anecdote that illustrates just how far rendering is from reality One of our animators was trying to simulate a shadow using a projection light He created a texture that was white where he wanted light and black where he wanted shadow Then he used a special material shader we have called a shadow only shader that renders the inverse shadow ie white gray wherever there are shadows and black everywhere else As you might guess the shadows from the projection light did not show up in the image generated by the shadow only shader When I explained the situation to him I caught myself saying Well those points are not in shadow They are illuminated with black light He looked at me with a completely blank expression so I went on If you were in a completely closed room without a light would the room be completely shadowed or not illuminated The boundary between science and philosophy is a blurry one back to contents What s Wrong with Monte Carlo Methods by Nguyen D C JuHu Pete Shirley Stephen Westin and Eric Veach Nguyen D C JuHu juhu rz tu ilmenau de writes I often ask myself Monte Carlo ray tracing is this the way to do global illumination in the future After reading a lot of papers about Monte Carlo methods I still get confused with their terminologies I can t see any advantage of these methods over traditional methods radiosity except the fact that meshing is not needed and that you can do reference images for RMS benchmarking Pete s reply quotes JuHu s text so the rest of his note is included there Pete Shirley shirley facility cs utah edu replies There is a lot of confusion on this because we all over hype our methods in papers me included and as reviewers and authors we are sloppy about making people carefully characterize their methods Here I will make up four scenes 1 Lambertian Cornell box 2 Lambertian Cornell box w smooth metal box 3 Lambertian Cornell box w glass sphere instead of short block 4 Semi matte direction diffuse Cornell box 5 Semi matte direction diffuse Cornell box with real object 10 6 patches 1 Traditional world space FE finite elements i e meshed polygons will work easily and we can do a walkthrough RADIANCE will also work easily but will not in practice allow a walkthrough the view independent info is there but it is not easily accessible MCPT Monte Carlo path tracing will take all day but will give an unbiased image so what 2 Now radiosity has problems We can add a virtual world or use particle tracing based radiosity with a density estimation post process but then doing the walkthrough is a problem RADIANCE does fine for a given viewpoint and we can re use the irradiance map MCPT will have LOTS of noise on the ceiling unless very good importance sampling is used 3 Uh oh particle tracing based radiosity works RADIANCE and MCPT will have a very noisy caustic under the ball although RADIANCE will not have this problem for the important glass case windows 4 Ouch Sillion style FE works as does Jensen s photon map MCPT is so dumb it doesn t realize that this case is harder than Lambertian RADIANCE will not work because it caches irradiance so it will degenerate to MCPT really you can treat secondary bounces as Lambertian I believe this is a good move in almost all scenes but it is hard to quantitatively justify 5 Ouch 2 FE runs out of memory FAST MCPT works no worse than 4 Jensen s photon map also works but will be storage intensive if the object is not very smooth Radiance will perform as in 4 In summary pure MCPT has only two advantages it is so dumb that it doesn t get hit by big scenes and it is easy to implement If you want an interactive walkthrough then you are currently limited to radiosity I use that term for all world space irradiance calculating alg s and that limits you to a relatively small scene 100k initial polygons will kill almost all radiosity implementations JuHu writes For me the most important feature of a rendering method is not its physical correctness but its efficiency and visual aesthetic possibilty With MC rendering I must spend lot of works to develop specific sampling schemes and reasonable good estimators Even w that I still get useless images too noisy or I must increase the sampling rate and wait forever It is not always true that most people find noises less observable than aliasing i e white pixels in a dark corner versus aliased dark lines I agree with the above and I think the solution is hybrid methods add bias This is blasphemy in MC circles I do want to keep the good parts of MC methods they are damned robust and are possible to implement correctly my MC code does not bomb on weird untweaked inputs tell me with a straight face that is true of most non MC implementations However you are right that the results are too noisy We can keep these benefits and reduce noise if we add bias the right way not that I know what that right way is JuHu writes Especially for the direct lighting computation MC methods are definitely NOT the way to go Most regions of an image are not in shadow so why should we cast so many shadow rays to the light source In fact we don t need to cast any shadow rays if the visibilities are known a priori w shaftculling and the radiance coming from the light can be easily computed analytically Only for the case where complex shadowing occurs would MC sampling be helpful Also for this case the soft shadows generated w them can be much better without increasing the sampling rate We simple smooth the shadow regions visual aesthetic not physical correct I welcome you to implement shaft culling on scene 5 above Slower than MC and will usually core dump even with a year of implementation I ll bet Now shaft culling on simplified geometries which it sounds like you might be suggesting sounds like a very good idea Only use MC when needed yes definitely smart Overall this has got me to again reflect on the state of our field It is VERY hard to get a rendering paper into SIGGRAPH even with good reviews It is easy to get toys based on low hanging fruit into SIGGRAPH Clearly we are doing something very wrong you could rightly argue SIGGRAPH is doing something wrong but that won t change anything we have to figure out where our share of the blame is I think this is partially because most graphics people think TOY STORY graphics is good enough I however want virtual reality that looks REAL and is predictive I don t want a virtual cartoon world We are very far from getting things to look real and from understanding our algorithms behaviors No working program gives useful error estimates We have totally inadequate local reflection models Most algorithms are memory hogs and don t parallelize Most algorithms do a very poor job with dielectrics water glass I think we need to make our own grand challenge models and publicize that they can t currently be done e g a human at a desk illuminated through a skylight so that our field won t dry up and blow away Nguyen D C JuHu replies I welcome you to implement shaft culling on scene 5 above Slower than MC and will usually core dump even with a year of implementation I ll bet I ve actually implemented shaft culling for complex scenes in GX GENERIC Not really shaft culling but a combined version of Arvo s hyperoctree and Haines s light buffer It s definitely faster than pure MC because the cost for collision test between a beam and a bbox is quite the same between a ray and a bbox Stephen Westin swestin ford com writes Why do folks bother at all with Monte Carlo methods for global illumination Complexity Think of the problem of computing the irradiance at a given point Do you want to go around the whole environment calculating the irradiance from every object regardless of occlusion or distance from the point Or do you want to probe the environment spending similar effort for every incident direction This is the basic choice between mesh based methods and Monte Carlo calculations For simple environments the mesh based methods are excellent they give no noise artifacts and computation is tractable For extremely complex environments mesh based algorithms tend to get inefficient Actually the mesh based world and Monte Carlo are working toward each other Hierarchical meshing is basically a way to make a mesh based algorithm behave more like Monte Carlo spending effort for irradiance contributions rather than for geometric complexity And any well designed Monte Carlo calculation uses deterministic methods wherever practical and attempts to take advantage of spatial coherence The ultimate global illumination method will probably be a hybrid of Monte Carlo and mesh based methods From Eric Veach ericv cs stanford edu One of the big advantages of MC algorithms is that they let you model the scene you actually want to use Sure radiosity algorithms can be efficient if we limit ourselves to diffuse surfaces with maybe a few mirrors or whatever that are handled in a ray tracing pass But flat polygons and diffuse reflectors do not go very far in modeling the real world and finite element algorithms don t seem to be practical for much more than this Memory usage blows up for complex scenes or when there are lots of glossy surfaces This is an important issue in graphics since often the biggest source of error is the scene model itself What good is an accurate solution to the wrong scene model At least MC algorithms start with the desired input Even if you aren t interested in physically correct results diffuse surfaces lead to that wonderful computer graphics look we all know and love It s no wonder that radiosity algorithms tend to be faster since they are solving a much simpler problem the solution is only a two dimensional function rather than a four dimensional one To me the amazing thing is that radiosity algorithms need to be so complicated to be efficient By the time you implement discontinuity meshing hierarchical basis functions clustering shaft culling etc how many lines of code are we talking about And can you actually trust it not to core dump and to compute a reasonable result in a reasonable amount of time And let s not kid ourselves that an algorithm is general just because it can handle a few mirrors or glossy surfaces The real test of generality is how an algorithm performs when there are no diffuse surfaces since that s how it is in the real world Another reason to use MC algorithms is scene complexity Finite element algorithms work with explicit representations of the scene and its properties They are strongly affected by the size and complexity of the scene representation On the other hand Monte Carlo algorithms are based on sampling which means that the scene model is accessed through a small set of queries e g what is the first surface point intersected by this ray This hides the scene complexity behind a layer of abstraction and can mean that rendering times are only loosely coupled to the scene representation e g it may affect the time required to cast a ray In effect Monte Carlo algorithms can sample the scene to determine the information they actually need while deterministic algorithms examine every detail whether it is relevant or not That s not to say that MC algorithms need to sample everything It s perfectly reasonable to embed deterministic calculations within a Monte Carlo framework especially for low dimensional integration problems e g direct lighting from a small number of uniform diffuse polygonal luminaires Sometimes this introduces bias but often this is okay especially when we can bound the errors or at least characterize them Ideally rendering algorithms should not depend on the details of the scene representation but only on the underlying mathematical model For example a square area light source can be simulated fairly well with a ten by ten array of point sources but many rendering algorithms would have a much worse performance in the second case Similarly if we replace the square light source by two fluorescent bulbs covered by a diffusely transmitting panel why should it make a huge difference to our algorithms The same comments apply to geometric complexity if we represent an indoor plant as a thousand polygons or a million Bezier patches how much should the rendering time go up I can t say that MC algorithms have achieved this level of isolation from the scene representation but at least it seems that the opportunity is there There has been a lot of emphasis on rendering algorithms that exploit special properties of the input scene e g that lighting is direct rather than through a diffusing panel or bouncing off the ceiling It would be nice to see more work on algorithms whose performance does not go down the tubes when these conditions are not met i e algorithms that are more robust It seems that this should be possible without resorting to the level of dumbness found in MCPT as Pete Shirley put it I guess the last major issue for MC algorithms is the correctness of the results Here it is important to distinguish between unbiased biased and consistent estimators Intuitively an unbiased estimator computes the right answer on average A biased estimator computes the wrong answer on average A consistent estimator also computes the wrong answer on average but the error can be made arbitrarily small by increasing the number of samples Most of the biased algorithms in graphics are in fact consistent otherwise we wouldn t have any confidence at all in their results The main advantage of unbiased algorithms is that they make it far easier to estimate the error in a solution For unbiased algorithms this error can be estimated by the sample variance since any error is guaranteed to show up as random variation among the samples Thus if an unbiased image is not noisy we can be reasonably sure that it is correct For scene of realistic complexity this seems to be the only practical way to generate correct images For algorithms which are merely consistent however we must also bound the bias In general this is difficult to do we cannot estimate bias by simply drawing a few more samples Bias shows up as results that are not noisy but in fact are incorrect In graphics algorithms this error is often noticeable visually in the form of discontinuities excessive blurring or surface shading that just looks wrong Other things being equal it is clear that we should prefer an unbiased algorithm If these algorithms were also robust and efficient then why would we want to use anything else However conventional wisdom says that unbiased methods are too expensive and that we can achieve an acceptable image in less time by making approximations But where is the research to support this claim There has been a huge amount of effort on approximate methods in graphics while there has been hardly any work on unbiased algorithms Some people seem to think that unbiased is a synonym for pure Monte Carlo path tracing Until we have thoroughly explored this type of algorithm we can hardly make judgements on their capabilities I would like to see more results on what can and cannot be achieved by unbiased methods so that we can make better decisions on these issues Can you tell that I m writing a thesis back to contents More on Rendering Bugs by Eric Haines As mentioned in RTNv10n1 the article It s Really Not a Rendering Bug by Andrew Woo Andrew Pearce and Marc Ouellette free at http ada computer org 80 pubs cg a articles g50021 pdf is one I consider required reading for anyone actually producing a renderer I had a few additional comments The surface acne problem in which a ray originating from a surface intersects the surface itself a bad thing can be fixed by being careful about keeping the surface orientation information around and ignoring intersections that are definitely acne Top of p 47 of An Introduction to Ray Tracing discusses this solution and it s my favorite I wish I had explained it more thoroughly there For a polygon when you know the ray is originating on it you simply never test the ray against the polygon since there s no way such an originating ray can hit it For a sphere you determine which sort of ray it is i e whether it is passing into or out of the sphere If out of then you can never hit the sphere if into then only accept the larger of the two roots as an acceptable intersection point the closer intersection will be at the origin This is foolproof For closed i e manifold where there is a definite inside and outside higher order surfaces you also don t need an epsilon For example imagine you have some arbitrarily high order closed surface terribly warped and you have a ray originating on its surface Say one side of the patch is red and the other side blue Now the ray originates and travels away from one side or the other which can be determined at the start of its journey Say we start with the ray leaving from the red side Now we get a list of intersections for that ray What we want is only the intersections in which we hit the red side blue side intersections are not what the ray needs Even if the ray is a shadow feeler for transmitting rays where you re filtering by all it hits say or a ray cast for solids properties computations you can wait until you get to the first positive red intersection on the ray and then deal with all intersections from here on in Spline patches or other surfaces that are not manifold closed need more care and this is where an epsilon starts to come back into play since you could view the blue side of a surface from the red side The nice thing is that you do not need to use an epsilon for the red intersections so very close valid intersection points are not discarded for being within epsilon Anyway my main point is that for a large number of classes of primitives you can fully solve the problem without using epsilon at all For what it s worth I think I invented the acne term some claim to fame I used it in the 1987 ray tracing course at SIGGRAPH my only laugh getter in an otherwise dull talk The terminator problem in which due to interpolation of the normal across a flat polygon a reflected ray actually reflects into the surface instead of away from it I solve in a similar fashion I never let reflective rays actually reflect through the surface By forcing the reflection to stay on the same side rotating it in the reflection plane until it is it is not a problem Of course the reflection itself will not quite be right but it will be a lot better than some sudden blackness due to intersection i e due to the ray reflecting into the surface and hitting inside the object This approach doesn t work for shadows though Naive texture interpolation good points and it s even worse in the limiting cases of say the tip of a cone or pole of a sphere here the quads are still quads but two of the vertices are in the same location but with different u v s and normals Replacing with two triangles is absolutely horrible Which leads into the next article back to contents The Curse of the Monkey s Paw by Eric Haines I was handing out what I called The Curse of the Monkey s Paw at the VRML Symposium in February Monkey s Paw only because it s something I no longer need to deal with for TriSpectives it s a curse I could pass on You know how hardware graphics accelerators are mad for triangles they just love them and use them for everything I found a case where triangles alone are not enough to easily render a simple VRML primitive a cone with a texture on it Basically you need quads Here s the case you have a cone or section of a cone the singularity at the tip is not the problem it just exacerbates it Having one end of the cone have a radius much smaller than the other is the real problem and a texture you want on the cone Say the texture image says VRML and you want it to naturally go around the cone in a typical u v or s t or whatever you like to use fashion with the cone s tip pointing upwards This is the default mapping of a texture on a cone in VRML in fact What you typically do is to tessellate the cone into a set of triangles right However at the tip of each of these triangles you really need two vertices each of these two vertices have the same x y z location the apex but a different u v pair e g if you tessellate into 10 triangles you really need 10 quads with the first quad having two apex points with u v of 0 1 and 0 1 1 second quad 0 1 1 and 0 2 1 etc If you just make triangles and not quads and just arbitrarily pick one of the two u v s to store at the apex you ll lose half of the texture because each triangle will only cover half of its section in the texture map So anyway you make quads Using a reasonable software renderer that handles polygons as is these quads will render fine However if you re using hardware and that hardware renders triangles or software renders only triangles for that matter you re in trouble the hardware will split the quads you sent to it into two triangles But because two of the quad s vertices are in the same location one of these two triangles will have zero area coincident vertices and so will have no effect on the rendering that triangle s part of the texture map disappears An underlying assumption of most hardware accelerators is that a convex polygon can be perfectly replaced by a fan of triangles but this turns out to be false I don t think most people have really realized that it has a serious effect on hardware acceleration schemes I personally found this problem surprising I always thought triangles really were enough for rendering any textured surface Of course you could always subdividing the cone with horizontal cuts and so make quads with area for both triangles Ken Turkowski s idea Woo et al also present this idea in their article but there s still a problem at the tip You could also warp the texture map itself so that the missing triangles no longer have any texture information and the rest of the texture is pushed into the visible textured areas Neither of these is a good solution for VRML where polygon counts are to be kept low and the level of tessellation is not under the user s control This problem is actually more general than just the somewhat pathological cone tip problem It happens any place where a texture mapping has some singularity For example at the poles of a tessellated sphere you get the same sort of problem The famous teapot has the same problem at the center of the handle when texture mapped and when triangles are used It is not that noticeable because these triangles are pretty small but it is there Also this problem is not limited to texture mapping Normals at the tip of the cone have the same interpolation problems The visual artifact is that the shading is not smooth near the tip of the cone In fact some surface based modelers which use triangles as their underlying primitives will not allow the creation of a cone with a tip for a similar reason since each vertex has only one normal stored with it if a tip gets created then the proper set of normals cannot be used Such modelers address the problem by trimming off a tiny bit of the tip so that a set of vertices is generated each storing a reasonable normal Note that this solution does not fully eradicate the discontinuities the extra points generate extremely thin triangles almost zero area In practice such shading discontinuities due to normals not matching along an edge between two triangles are not that noticeable the effect is strongest at the tip which covers little area and can be addressed by simply tessellating the cone into more triangles Note that this problem occurs only when using triangles and keeping information like normals and texture coordinates at the vertices Using quads solves the problem and other rendering techniques can also solve the problem For example if instead of using texture coordinates to do texture mapping on the cone you instead accessed the inverse mapping function for the cone i e you take the point on the approximated cone that you want to texture and compute from it the exact u v coordinate on the cone you would get the right answer This is often what photo realistic renderers will do but is usually not practical for real time performance The gist is that triangles are not always enough Quads turning into triangles is the limiting case but as Woo et al http ada computer org 80 pubs cg a articles g50021 pdf show texturing problems occur whenever a non rectangular quad is tessellated into two triangles back to contents Global Illumination Bible by Ian Ashdown iashdown ledalite com Adrian J Chung ajc doc ic ac uk wrote I m surveying a cross section of research publications in global illumination and have come across a few candidates for what I d consider to be the bible for this field in the same sense that the Foley Van Dam book is for CG in general I d like to hear your opinions on the matter I ve skimmed through the past archived communications for globillum in case this was already discussed but it doesn t seem to have been recently So In my very humble opinion the definitive bible on global illumination has yet to be written One good reason for this is that global illumination research is still a very active topic There have been close to 100 global illumination papers and theses released in the past six months alone Given that it takes 12 to 18 months to get a book written and published any bible will be at least a year out of date as soon as it is released Andrew S Glassner Principles of Digital Image Synthesis Is it well worth the US 90 How much does it cost in the UK I m considering diverting a portion of my student grant toward acquiring the two volume set Fewer beers on weekends looks like Knowing how much one publisher in particular marks up its books for the UK market I shudder to think how much the two volume set will cost you You may have to give up beer for the remainder of your academic career For what it s worth I much prefer Glassner to Foley et alia as my primary CG reference However I can appreciate that many undergraduate students may be intimidated by the mathematical depth of the former Different strokes How does it compare to the less expensive alternatives Francois X Sillion Claude Puech Radiosity and Global Illumination Michael F Cohen John R Wallace Radiosity and Realistic Image Synthesis It all depends on your needs and interests and also on whether you are interested in and enjoy the mathematical details I have all three and I can recommend any of them any others I should know about I haven t had the opportunity to read this book but you might try Kok Arjan J F 1994 Ray Tracing and Radiosity Algorithms for Photorealistic Image Synthesis Delft University Press Stevinweg 1 2628 CN Delft The Netherlands ISBN 90 6275 981 5 Also available from Coronet Books Philadelphia This was Arjan s PhD thesis at the Delft University of Technology There have been at least two other books written on radiosity but neither qualify as global illumination bibles Actually the best sources of up to date and comprehensive information on global illumination techniques are the most recent MSc and PhD theses many of which are available online PhD theses in particular are great the poor students are required to demonstrate their in depth knowledge of the field which generally means a 50 page prologue to their actual research topic and a bibliography with at least 50 references For a complete listing ah heck you know where to find my bibliography http www ledalite com back to contents Megahedron A commercial announcement but the trial is free This is an updated version of Microcosm reviewed in RTNv7n5 EAH Syndesis Corporation recently released Megahedron a 3D graphics engine controlled by a high level interpreted language called SMPL SMPL reportedly combines the broad functionality of C the ease of Pascal and BASIC and the type safe interpreted nature of Java With Megahedron you can write interactive 3D programs containing smart objects designed to move and react Your scripts can build models according to rules and procedures instead of building models by hand It includes a renderer for static scenes This precision is important for simulation scientific visualization virtual reality and game design Megahedron is useful for learning about 3D programming too The SMPL language frees you from the chore of writing low level graphics functions Useful programs can be written in just a few lines of code Megahedron includes distributed ray tracing combining up to 64 computers to compute a single image sharing computers on a local network or even across the Internet It can ray trace in real time in an interactive low res fashion Megahedron has a retail price of 99 The CD ROM includes online documentation viewable in any Web browser more than 300 example SMPL programs and executables for Windows 95 Windows NT Intel and Alpha Linux and SGI IRIX With its flexible software license one person may run as many copies as they can Time limited demos of Megahedron for each platform are available on Syndesis Web site at http www threedee com The manual for Megahedron is online too along with dozens of example scripts and sample images back to contents Detecting Points on the Edge of a Polygon by Eric Haines I ve received this question enough times that I think it s worth presenting an answer here The question is how do I detect if a point is on the edge of a polygon In RTNv5n3 and RTNv6n1 we discussed the problem of whether a point was inside or outside but not on The first question to ask is why do you want to test the on edge condition One nice feature of the crossings test where you count the number of edges between the test point and the outside world an odd number of edges means the point is inside is that when a single test point is checked against a mesh of polygons at most one polygon will contain the point That is when a point is on an edge shared by two polygons the crossings test is consistent though somewhat arbitrary in that the point will not be inside both or outside both polygons but always inside one polygon or the other This feature is handy for say GIS any point on a map split into areas will be inside one and only one area when using the crossings test See the next article for another use of this property If you truly do want to test for the on condition my general advice is to test for this separately First test each edge against the sample point and see if the sample is within your epsilon of the edge If this test fails then go ahead and do a normal inside outside test Yes it s more expensive than trying to modify the crossings test to attempt to yield on conditions but it s more predictable understandable and debuggable Actually you can probably gain a bit of efficiency by using some other inside outside test such as the barycentric or half plane tests in which the point is tested to see if it is inside an odd number of triangles formed by a fan from one polygon vertex These sorts of inside outside tests can be a little flakey on concave polygons as if the test point is on an edge shared by neighboring triangles it must be counted as being inside only once The advantage of using these sorts of tests is that they compute intermediate values edge vectors dot products etc which are also useful in computing the distance from an exterior edge to the test point back to contents Rendering Unflat Polygons by Eric Haines The crossings algorithm has the property that a point inside a polygonal mesh will be found to be inside one and only one polygon This property is useful when ray tracing non flat polygons One method of intersecting a ray with a polygon is to take the intersection point with the polygon s plane and then cast it and the polygon onto an axis plane This brings the problem into two dimensions and so simplifies it Typically the point and polygon are cast onto the orthogonal plane which gives the greatest projected area for the polygon i e the polygon s plane normal is examined and the largest magnitude component identifies the component to ignore for example a polygon with a normal 2 6 3 would have the Y component ignored However not all data is well defined for some systems For example a complex bevel might be represented by a quadrilateral mesh and some of the quads may be warped There are other operations which can yield unflat general polygons I recall a beautiful polygonal model of the Statue of Liberty which looked great when z buffered but had all sorts of terrible warped polygons when ray traced If you do point in poly testing you can get a bug some of these unflat polygons will cast onto one orthogonal plane some upon another and the warped nature of the polygons can give a result in which a ray that should have hit some polygon in the mesh will miss them all This all sounds unlikely and theoretic but it definitely does happen One answer is to triangulate these polygons triangles always being flat which costs more memory and changes the database Also a tessellator that works on all misshapen polygons is hard to find I don t have one the problem is that you usually need to find a direction to cast the polygon which keeps the data well behaved and avoids having any self intersection However a direct test is possible if you cast all polygons along the direction of the ray itself when you do inside outside testing you guarantee that when a ray is directed towards the interior of the mesh it will hit at least one polygon in the mesh One little side effect of such an intersection test is that the intersection point first computed for the plane is somewhat arbitrary since all the vertices of this unflat polygon do not lie in a plane there is no right answer for what exact depth a point in the interior has However we do know the edges have a precise depth so a good solution is to find the left and right edges by giving the ray an arbitrary up direction and interpolate a good depth from these Note that this method of casting along the ray is essentially the same as that used in scanline hidden surface algorithms where a projection is used to cast the polygons onto the image plane back to contents Free Polygon Tessellators by Eric Haines in response to a request for what tessellators are out there I do not know of a free tessellator out there which robustly handles polygons with multiple outlines i e holes and or polygons with bridging edges If you do please let the rest of us know I m the archivist for Graphics Gems the latest Graphics Gems release is at http www acm org tog GraphicsGems Watch out with the Narkhede tessellator in Graphics Gems V It probably works for polygons without holes but it fails on single outline polygons with holes in other words you connect the holes to the perimeter with a pair of bridging edges O Rourke does have a tessellator available online from his wonderful book Computational Geometry in C it s at ftp cs smith edu pub compgeom I can t vouch for the robustness I vaguely recall that it may not handle bridging edges well either Also check Paul Heckbert s site http www cs cmu edu ph under My Bibliographies and Link Collections for some links to mesh generation and simplification related material back to contents Octree Neighbor Finding by Andrew Glassner Francois Sillion and Paul Heckbert From jpt btc uwe ac uk I have a problem relating to finding neighbouring voxels in octrees and feel sure this must have been addressed previously I want to be able to find all the neighbouring adjacent in space voxels from a given voxel stored in an octree It seems feasible that an operation based on traversal of the octree will allow neighbouring voxels to be discovered From Andrew Glassner glassner microsoft com I believe they re called Neighbor Pointers that might be a good place to start looking in the index From Francois Sillion Francois Sillion imag fr I have only done it with quadtrees but I believe that you will find simple code that does precisely that in one of H Samet s book on hierarchical data structures book Samet90 author Hanan Samet title The Design and Analysis of Spatial Data Structures publisher Addison Wesley address Reading Massachusetts year 1990 book Samet author Hanan Samet title Applications of Spatial Data Structures publisher Addison Wesley address Reading Massachusetts year 1990 From Paul Heckbert ph cs cmu edu One of the methods that Samet describes does not require neighbor pointers although that is certainly one way to do it but instead you ascend the tree until you can step in the direction you want then you descend the tree staying as close spatially to the previous point as possible until you hit a leaf or get to the level of the tree that you desire With this method you don t need neighbor pointers just 8 child pointers and 1 parent pointer Samet shows as I recall that you go up and down 2 times on average i e that the average cost to find a neighbor is O 1 If you found neighbors by starting at the root every time it would cost O depth back to contents Author Sues Publisher by Ralph Grabowski ralphg xyzpress com RTNv9n1 was devoted to writer publisher relations so this article caught my eye This article is republished with permission from upFront EAH A Canadian free lance writer not me this week launched a CDN 100 million law suit against ITP International Thompson Publishing for copyright infringement She had sold an excerpt from her book to ITP s Globe and Mail newspaper of Toronto ON In addition to printing the article in the newspaper ITP placed the article in their electronic database which is accessible by other ITP owned companies The author is objecting to the possibility of other newspapers reprinting her article without compensation One problem faced by authors is that publishers sometimes reuse their work without additional compensation The situation is akin to the problem software companies have of people using more than one copy of a single software license One AutoCAD author successfully sued after the publisher reused her book as part of a larger book without compensation What can authors do First remember that no contract is standard as publishers are fond of describing them You are free to change any part you don t like even when the publisher insists no changes are permitted I am amused at how quickly an iron clad contract changes when faced by a contract with better terms from a competing publisher An unsigned contract is merely an offer and you have every right to present a counter offer Second follow this procedure many magazines include a clause in their standard writer s contract that allows them to reuse the article in any form without additional compensation to the author I routinely cross out that section and replace it with First North American serial rights only That means the publisher can only print it once First in a magazine serial in North America The publisher cannot place the article on a Web site nor reuse the article nor use the article outside of North America These and other situations require the publisher to negotiate another contract with the author The Web makes it easy for authors to enforce these legal requirements Simply use any search engine I prefer Alta Vista and do a search for your name In less than a minute you have a list of all Web sites containing your name In case the publisher stripped your name you may want to search for phrases you used in your articles Ralph runs the XYZ Publishing Ltd and among other things publishes a useful free ezine called upFront which tracks CAD related topics and VRML Visit his site at http users uniserve com ralphg back to contents European Graphics Tour by Nelson Max max2 llnl gov The following is a report on three conferences I attended in 1996 I am broadcasting it because it contains summaries of several papers that may not appear for awhile in more widely read venues Only the first two conferences were on rendering so you might want to skip the stuff about the last one though my summaries for it are mostly restricted to rendering related talks My first stop was the University of Kaiserslautern where I visited the research laboratory of Hans Hagen Hans arranged for a schedule of demonstrations and discussions with his graduate students and arranged for them to take me out to lunch and dinner in town I paid for my food but they provided the transportation and the company which was a nice form of hospitality I was impressed with Hans personal research in the design of plastic reflector and lens shapes for car headlights to give a desired distribution of illumination intensity on the road I also had a long discussion with Alexander Keller who explained to me in detail the Quasi Monte Carlo method he was using for global illumination which he presented at both of the next two meetings He gave me the longer uncut version of his paper so I was able to appreciate well the fact that certain non random sequences of test points give estimates that converge much faster than for random test points A final memorable project was a method where potential purchasers could design and view semi custom prefabricated homes over the Internet The meeting in Schloss Dagstuhl was one of a series of week long seminars in aspects of Computer Science partially supported by the governments of Germany and the state of Saarbrucken The topic of this seminar was rendering and it was scheduled to just precede the Eurographics workshop the following week The hope was that attendees from outside Europe would gain efficiency in their long distance travel plans which was the case for me but many Europeans could not afford more than a week away from their institutions especially if they were teaching so the attendance at the Eurographics Workshop was actually down from last year A summary of the some of talks follows Xavier Pueyo proposed methods for generating random densities of infinite lines in space and intersecting each line with all objects in the scene to get form factor contributions from each segment in the space between two object surfaces He chose his lines by connecting two random points on the surface of a sphere enclosing all the objects which in fact does give the appropriate random density of lines although this seems non intuitive at first Dani Tost discussed her work on visualizing blood vessels involving both maximum intensity projection and shading with voxel splats Henrick Wann Jensen s talk on Global Illumination using Photon Maps generated the most excitement and discussion of the seminar because of the impressive performance of his method which is based on saving in a spatial data structure a KD tree both position and direction of all hits by photon paths traced from light sources through multiple random bounces During viewpoint dependent rendering these are used for the intensity at the second bounce in a local pass from the eye by expanding a sphere about the hit point until the n closest photon hits are found in the KD tree At the first bounce from the eye the same distribution is used for importance sampling of the bounced rays Finally the initial rays from the light source are continued past their first surface intersection to create shadow maps at subsequent intersections which are used to decide when shadow feelers are necessary to determine direct illumination Since the incoming directions are available non diffuse reflections can be rendered A separate caustic map with many more photons directed at only the shiny surfaces is used similarly at the first bounce in rendering Dani Lischinski gave a preview of a Siggraph paper on Hierarchical Image Caching for Accelerated Walkthroughs of Complex Environments Robert Garmann talked on the computational complexity of hierarchical radiosity and gave a careful analysis of the number of links required in a simple scene with two parallel plane patches in which the subdivision oracle is based on the total form factor of a link He showed that the total number of links as the allowed error approaches zero is of order O N 2 where N is the number of leaf nodes in the hierarchical subdivision This seems to contradict previous beliefs that it would be O N log N or even O N Dieter Fellner working with Stefan Mueller s group at Darmstadt showed how real time rendering of radiosity scenes could be accomplished on environments with the order of a million polygons and presented an impressive video of additions to the Frankfort airport Wolfgang Sturzlinger talked about using hierarchical radiosity links in the local pass final one bounce gather to the viewpoint by doing a Weiler Atherton type subdivision of the unit hemisphere using 3D coordinates of the unit vectors in order to determine the links involved at a pixel Mark Summinger from Erlangen University talked about decoupling the reflection and transport operators in a progressive radiosity framework for non diffuse surfaces The shot and transported energy is saved in a data structure which is indexed by both receiving position and angle bins The advantage is that when it is time to shoot for a patch all the energy in an incoming angle bin can be reflected at once which requires fewer evaluations or accesses to the BDRF The abstracts to these talks were handwritten into a Dagstuhl record book and are being transcribed to be sent to the participants and saved at Dagstuhl The proceedings of the next conference I attended the 7th Eurographics Workshop on Rendering at Porto Portugal will be published rapidly by Springer At Porto and also at Dagstuhl I spoke on Hierarchical Rendering of Trees from Precomputed Multi Layer Z Buffers This is based on reprojecting images of trees and their subparts prerendered from different viewpoints image based rendering Fabrice Neyret gave a related paper which had an impressive video of a flight over a forest produced by ray tracing hierarchical mip mapped volume textures with an ellipsoidally approximated surface normal distribution at each voxel Fredo Durand George Drettakis and Claude Puech gave a speculative talk on an unimplemented method of dividing the 4D space of all lines in 3D up in to regions where the visibility along the ray is constant To deal with rays which have multiple segments in the free volume between objects they use and extra discrete dimension to index the segments but the space of such segments still has only 4 real parameters for a fixed scene They discuss the various lower dimensional manifolds of visibility change events that divide this space into regions of homogeneous visibility and show why the resulting data structure is of size O n 4 where n is the number of polygon edges and can be constructed by a sort and sweep algorithm in time O n 4 log n This is considerably better than the aspect graph of size O n 6 because the aspect graph computes for each viewing direction or viewpoint the intersection of the 2D pencil of lines making up the image with this subdivision of the 4D space of all lines Eric Veach pointed out that in the case of caustic maps under water and the case of bump mapped shading normals differing from the normals of the surfaces which intercept the light transport rays non symmetric scattering functions BDRFs or BDTFs must be used which do not satisfy reciprocity and therefore act differently when light energy or importance are being transported or equivalently act differently for the two directions in bidirectional path tracing photon paths and viewing paths Stephen Hardt and Seth Teller from MIT showed how the rendering pipeline and texture mapping hardware with perspective correction of a high end workstation could be cleverly used to produce accurate radiosity rendering at interactive rates by fitting the radiosity off line ahead of time by quadratic triangular patches and then using the hardware polygon renderer to deposit at each pixel the polygon ID and two barycentric coordinates in the triangle They use the perspective correction in the texture mapper to get the barycentric coordinates accurately With Michael Allison I showed in Graphic Gems III how the barycentric coordinates could be stored in color fields using only the Gouraud shading interpolation hardware if perspective corrections are not needed The radiosity is then computed in software as a quadratic polynomial in the two barycentric coordinates with coefficients indexed by the polygon ID Jos Stam and Eric Languenou spoke about ray tracing in non constant media mirages Eric Lafortune and Yves Willems extended bidirectional path tracing to the case of 3D volumes with participating media smoke steam or clouds George Dretakis and Francois Sillion spoke on incorporating discontinuity meshing into hierarchical quadtree meshes which allows large quadtree cells on homogeneous unoccluded regions previous discontinuity meshes based on BSP trees had unnecessarily long edges crossing into regions beyond the discontinuities that defined them I spent the 6 days between the Porto and Chamonix conferences on vacation in Portugal cycling with my wife Mika from Coimbra to Alcobaca on bicycles kindly loaned by the local conference organizer Augusto de Sousa because there were no bicycle rental shops in northern Portugal The final day before the Curves and Surfaces conference began was spent travelling from Porto to Chamonix The topics of the Chamonix conference were less familiar to me being weighted towards approximation theory based on functional analysis on Sobelov spaces I still haven t figured out what these are and wavelets I attended because Greg Nielson invited me to give a talk at a Mini symposium he organized an Scientific Visualization I spoke on Applications of Texture Mapping to Volume and Flow Visualization giving in 25 minutes almost all the content of the version I also earlier presented at the University of Kaiserslautern in 65 minutes In the same session Marcus Gross gave a talk on Finite Element Modelling and Visualization for Facial Surgery in which the soft tissues between the bone and skin are modelled by finite elements whose deformation is simulated as bones are cut and displaced so that the final appearance of the face can be displayed before the operation is carried out There were 6 days of mostly 3 parallel sessions of 25 minute talks form 8 30 AM until 6 30 PM with a 2 hour break for lunch and two half hour coffee breaks for 6 conference days which made for a pretty grueling schedule I attended most of the time but admit to playing hooky for two mornings in order to enjoy the mountain scenery I probably absorbed some approximation theory by osmosis especially from an excellent Mini symposium on non linear and adaptive wavelet approximation including talks by Yves Meyer on the bump algebra by S Mallet on Image Compression emphasizing the quantization and coding of the wavelet or basis coefficients and the coding of the position indices of the non zero coefficients as well as just which coefficients can be set to zero and by Ron DeVore on adaptive numerical methods for partial differential equations There was also an interesting talk by A Pinkus on approximating by ridge functions the set of finite linear combinations of ridges which are long crested waves of one linear parameter in 2 or 3 dimensions There were many talks on extending the ideas of wavelets from the plane to arbitrary 2 manifolds and in particular to the 2 sphere Beyond these approximation theory talks the talks I understood best were on surface shape There were a couple of talks on developable surfaces which are important in manufacturing because they can be formed from sheet metal without stretching An invited talk by Joseph Hoschek on interpolation and approximation with developable surfaces gave an example of designing the blank holder in a sheet metal forming process This is the part of the mold which should first clamp the sheet without stretching it and hold it while the part of the deformation involving more severe stretching deformations takes place Another talk by Y L Kergosian analyzed the folds and cusps where a developable surface can have singularities and simulated them for the case of a bent tin can generating impressively realistic images There was also a Mini symposium on Multiresolution Methods in Computer Graphics including the following talks Richard Bartels talked on hierarchical splines Peter Schroeder spoke on spherical wavelets and showed his Siggraph 95 images After hearing it for the nth time I finally understood the idea behind lifting R Westerman described his wavelet based volume rendering in which the wavelets are used only for determining the appropriate adaptive sampling frequency along a ray and for reconstructing the samples for a traditional opacity accumulation algorithm Thus full opacity effects are possible in contrast to faster algorithms which try to precompute the splats of each wavelet and therefore cannot account for interwavelet opacity effects David Salesin presented three multiresolution techniques from his past and future Siggraph papers image editing image querying and multiresolution video clip art Dieter Fellner writes that I have attributed too much to his group at Darmstadt Here is the text of his message May I suggest a minor change to your report on the Dagstuhl workshop You write Dieter Fellner working with Stefan Mueller s group at Darmstadt showed how real time rendering of radiosity scenes could be accomplished on environments with the order of a million polygons and presented an impressive video of additions to the Frankfort airport Well I don t know how the two presentations could be linked so closely And of course it s quite flattering for my group But truth is that our two groups have not cooperated in this activity My group has been working on a graphics architecture called MRT and as one of the more interesting applications I talked about the simulation of radio wave propagation in urban environments used in the planing of micro cells for mobile phone networks as well as on the consistent handling of approximative rendering and radiosity both based of a clever use of a data structure derived from the winged edge data structure There turns out to be a large body of literature using ray tracing for mobile phone network related planning see IEEE s site members only at http www biblio ieee org biblio keyword search html and search on ray tracing EAH As I don t want to take credit for things we haven t done and your mail reached a large number of people I would like to ask you to consider a revised version of your report back to contents Fast Shadow Testing Bibliography by Slawomir Kilanowski metagram wro ternet pl Below you ll find the small bibliography I have completed on speeding up shadow analysis I hope it may be of some use for someone who will encounter the same problem For those who are interested in quick fix of performance of a ray tracer with shadows calculated by ray casting I may honestly devise the Greg Ward s method described in Adaptive Shadow Testing for Ray Tracing It gave average speed up factor varying from 1 5 5 0 calculated on models build of 10 000 40 000 polygons with 50 400 lights The differences in resultant images were not noticeable In absolute terms number of differing pixels and magnitude of differences the differences were smaller than introduced by standard JPEG compression Andrew Woo and Pierre Poulin and Alain Fournier A Survey of Shadow Algorithms IEEE Computer Graphics and Applications Vol 10 No 6 November 1990 Andrew Woo and John Amanatides Voxel Occlusion Testing A Shadow Determination Accelerator for Ray Tracing Proceedings of Graphics Interface 90 held in Halifax Nova Scotia 14 18 May 1990 Andrew Pearce and David Jevans Exploiting Shadow Coherence in Ray Tracing Proceedings of Graphics Interface 91 held in Calgary Alberta 3 7 June 1991 Frederic Asensio A Hierarchical Ray Casting Algorithm for Radiosity Shadows Third Eurographics Workshop on Rendering 1991 Bristol UK H K Choi and C M Kyung Pysha A Shadow Testing Acceleration Scheme for Ray Tracing Computer aided design Vol 24 No 2 February 1992 A James Stewart and Sherif Ghali An Output Sensitive Algorithm for the Computation of Shadow Boundaries Canadian Conference on Computational Geometry August 1993 Arjan J F Kok and Frederik W Jansen and C Woodward Efficient Complete Radiosity Ray Tracing Using a Shadow Coherence Method The Visual Computer Vol 10 1994 A James Stewart and Sherif Ghali Fast Computation of Shadow Boundaries Using Spatial Coherence and Backprojections Proceedings of SIGGRAPH 94 Orlando Florida July 24 29 1994 Yiorgos Chrysanthou and Mel Slater Shadow Volume BSP Trees for Computation of Shadows in Dynamic Scenes 1995 Symposium on Interactive 3D Graphics Seth Teller and Pat Hanrahan Global Visibility Algorithms for Illumination Computations Computer Graphics Proceedings Annual Conference Series 1993 A J F Kok and F W Jansen Source Selection of the Direct Lighting Computation in Global Illumination Proceedings Second Rendering Workshop Barcelona Spain May 1991 In Photorealistic Rendering in Computer Graphics Springer Verlag 75 82 Kurt Zimmerman Peter Shirley A Two Pass Realistic Image Synthesis Method for Complex Scenes Rendering Techniques 95 Proceedings of the Sixth Eurographics Workshop on Rendering Springer Verlag New York NY 1995 pp 284 295 George Dretakkis and Eugene Fiume A Fast Shadow Algorithm for Area Light Sources Using Backprojection Proceedings of SIGGRAPH 94 Orlando Florida July 24 29 1994 Seth J Teller and Carlo H Sequin Visibility preprocessing for interactive walkthroughs Computer Graphics SIGGRAPH 91 Proceedings held in Las Vegas Nevada 28 July 2 August 1991 Ward Gregory Adaptive Shadow Testing for Ray Tracing Second EUROGRAPHICS Workshop on Rendering Barcelona Spain May 1991 Shirley Peter Direct Lighting Calculation by Monte Carlo Integration Second EUROGRAPHICS Workshop on Rendering Barcelona Spain May 1991 George Drettakis Francois Sillion Accurate Visibility and Meshing Calculations for Hierarchical Radiosity Seth Teller Pat Hanrahan Global Visibility Algorithms for Illumination Computations Computer Graphics SIGGRAPH 94 proceedings Kurt Zimmerman Peter Shirley A Two Pass Realistic Image Synthesis Method for Complex Scenes Indiana University Technical Report No 434 Eric Haines Donald Greenberg The Light Buffer A Ray Tracer Shadow Testing Accelerator IEEE Computer Graphics and Applications Vol 6 No 9 Sept 1986 back to contents Eric Haines erich acm org Ray Tracing News Volume 10 Number 2 Ray Tracing News Volume 10 Number 2 Ray Tracing News Volume 10 Number 2 Ray Tracing News Volume 10 Number 2 Ray Tracing News Volume 10 Number 2 Ray Tracing News Volume 10 Number 2 Ray Tracing News Volume 10 Number 2 Ray Tracing News Volume 10 Number 2 Ray Tracing News Volume 10 Number 2 Ray Tracing News Volume 10 Number 2 http www acm org tog resources RTNews html rtnv10n2 html http www acm org tog resources RTNews html rtnv10n2 html http www acm org tog resources RTNews html rtnv10n2 html http www acm org tog resources RTNews html rtnv10n2 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv10n3.html%%==%%Ray Tracing News, Volume 10, Number 3%%==%%Ray Tracing News "Light Makes Right" December 2, 1997 Volume 10, Number 3 Compiled by Eric Haines erich@acm.org . Opinions expressed are mine. All ...%%==%%104659%%==%%21 Dec 99%%==%% Ray Tracing News Light Makes Right December 2 1997 Volume 10 Number 3 Compiled by Eric Haines erich acm org Opinions expressed are mine All contents are copyright c 1997 all rights reserved by the individual authors Archive locations text version at http www acm org tog resources RTNews text HTML at http www acm org tog resources RTNews html You may also want to check out the Ray Tracing News issue guide and the Mother of all Ray Tracing Pages Contents Introduction New People Ray Tracing Roundup Two New Graphics Books plus One by Eric Haines Ray Classification for Animation by Matt Quail Raytracker Tricks by Hakan Zap Andersson Even Faster Crossings Test by Philip Brown Additional Notes on Nested Grids by Kris Klimaszewski Andrew Woo Frederic Cazals and Eric Haines Recursive Grids and Ray Bounding Box Comments and Timings by Andrew Woo CD ROM The Internet Raytracing Competition Year One review by Eric Haines Pl uuml cker Coordinates by Jeff Erickson Errors of Commission and Omission by Eric Haines Cyrus Beck as a Ray Polygon Tester by David Rogers Mirror Reflectivity by Greg W Larson Testing a Matrix for Uniform Scaling by Charles Iliya Krempeaux and Eduardo Marreiros Declassified CIA BRDFs now available by Greg Ward Larson Lifting the Monkey s Paw Curse by Jeff Goldsmith Eccentricity Effects in Blobs by Alfonso Hermida Introduction While looking over Matt Quail s thesis I noticed an interesting page in which the number of references in the ray tracing bibliography http www acm org tog resources bib is shown as a function of the year This graph is fairly revealing 1990 is when the number of references peaked I just noticed this week that his graph is from the collection of computer science bibliographies http liinwww ira uka de bibliography index html The ray tracing reference graph is at http liinwww ira uka de bibliography Graphics ray html Other interesting graphs include the radiosity bibliography which peaks at 1994 and the comprehensive computer graphics reference listing maintained by SIGGRAPH which peaks at 1983 but has other lower peaks at 1991 and 1995 Ian Ashdown who maintains the radiosity bibliography thinks that the quality of work in radiosity research is still going up This should be the case new work is judged against the old but it is interesting to see that in some rough measure the rate of work in these areas has declined As the on line editor of ACM TOG I finally made a personal web page http www acm org tog editors erich as much for myself as for anyone else it has links to a number of my papers online links which I usually have to dig up At the bottom of my page are some different rendering experiments which might be of interest Holly Rushmeier Editor in Chief of ACM TOG also now has a web page http www acm org tog editors hollyr with links to her papers available online Her pages caused me to burn a good hour surfing some of her co authors personal pages which had some fascinating links back to contents New People Andrei Sherstyuk Department of Computer Science Monash University Clayton Victoria 3168 Australia ash bruce cs monash edu au http www cs monash edu au ash My research interests are general ray tracing modeling rendering implicit surfaces convolution surfaces and new methods in ray surface interactions I have written a ray tracer that is faster than POV ray and almost as fast as Rayshade It allows modeling rendering and animation of implicit surfaces based on skeleton design ala Jules Bloomenthal s convolution surfaces Samples of my work including papers pictures and animations may be found at my home page I am a Ph D student finishing some time 1998 back to contents Ray Tracing Roundup As usual I have added the more interesting new free software packages and tools to ACM TOG s software links site http www acm org tog Software html For example links to a new visualization toolkit and to radiosity test scenes are at the TOG site Below are sites which did not belong there Graphics Interface 97 Papers Electronic copies of all the papers from GI 97 are available from the conference s web page http www dgp toronto edu gi gi97 home html Hardcopies of the proceedings may be purchased from Morgan Kaufmann Publishers Their web page s URL is the following http www mkp com A T Campbell atc arlut utexas edu Fast Minimum Storage Ray Triangle Intersection This paper by Tomas M ouml ller and Ben Trumbore was recently published in the journal of graphics tools http www acm org jgt The abstract code and statistics but not the algorithm description is available online at http www acm org jgt papers MollerTrumbore97 I think this is an important paper The intersection method is comparable to other more traditional methods with the important advantage that the triangle s normal does not have to be stored in order to efficiently compute the intersection Near Real Time RT on a Pentium A fast 1 2 fps on a Pentium 90 ray trace demo with reflections and shadows on curved surfaces can be found at ftp ftp cdrom com 24 demos demos 1997 j jlantani zip It was faster than expected Eric Haines Quadric Java Raytracer I have a neat applet for newbies to Java and or raytracing I ve written a Java applet that allows web users to interactively render all of the Quadric Surfaces and my home planet from any perspective set by using a custom built mouse keyboard responsive integrated cylindrical and spherical coordinate system graphical user interface http www frontiernet net imaging raytracing html Imaging the Imagined Raytracing tips from da Vinci and me Raytracing and computer imaging the math theory and practice 10 pages http www frontiernet net imaging rt how html Notable as the first use of a supermodel to help explain ray tracing EAH Paul Flavin imaging frontiernet net 65535 Dimensional Ray Tracer I ve written some ray tracing code and am looking for some feedback I haven t written any sort of interface so I can t post an exe yet but please let me know what you think of the concept Basically I ve written the most gimmick laden ray tracer I have ever seen Gimmicks include Objects may be up to 65535 dimensional really The screen may be defined parametrically in up to 65535 dimensions It has a very primitive particle system however view rays are bent by a particle s gravity At the moment it doesn t do color or textures and only polynomial objects are allowed stuff like cylinders don t generalize to 65535 dimensions too well Basically I was wondering if anyone would be interested in the finished result First indications are that it will be very tricky to use and let s face it pretty much useless The idea was so cool that I had to do it anyway Mike Ferenduros m ferenduros btinternet com There s a lot of software out there on FTP sites which because it s FTP does not get caught by web search engines There is a search engine specifically for FTP http ftpsearch unit no ftpsearch There are U S sites which also run this engine but with annoying ad banners UNC Polygon Manipulation Packages RAPID Robust and Accurate Polygon Interference Detection this is a free C package available for non commercial use available from http www cs unc edu geom OBB OBBT html There is also a paper on OBB Trees the data structure on which the software is based Related to this package is V COLLIDE see http www cs unc edu geom V COLLIDE for more information Key features of the package include application to all polygonal models support of dynamic addition and deletion of objects from an environment and fast overlap tests and incremental computation There is also a package for automatic simplification of polygonal models http www cs unc edu geom envelope html and also an improved fast polygon triangulator based on Seidel s algorithm http www cs unc edu dm CODE GEM chapter html This triangulator appeared in Graphics Gems V since then the authors have improved the code so that it handles holes a significant addition I do not know if the code is robust enough to handle coincident edges Mesh decimation Delaunay triangulation and similar software is available at http miles cnuce cnr it cg swOnTheWeb html CGAL the Computational Geometry Algorithms Library is written in C and is available free of charge under mild conditions It is the result of an ESPRIT project conducted by seven leading research groups in computational geometry It is at http www cs ruu nl CGAL Remco Veltkamp remcov cs ruu nl This library contains a large number of standard computational geometry algorithms such as convex hull Delaunay triangulation etc EAH Flying Text rendered as GIF animations by POV Ray while you wait for free http www lucidimages com spin html Richard C Church animated GIFs are to 1997 as textured backgrounds are to 1996 and large image maps are to 1995 too slow for us modem bound mortals used too much and generally not a good idea That said this site s a cute idea and I enjoyed it Make your own eye candy easily and free EAH MAC POV Ray Resources by Shawn Fumo shawn fumo the spa com Here are some places that you can find more information Macintosh POV Ray Resources http home pages de mac pov resources This page has a good amount of information but unfortunately some of it is outdated such as Mondfarilo being out now etc POV Ray Mac OS Information http ourworld compuserve com homepages povraymac This is an official page which is done by one of the POV Ray Team members A lot of good information here Shawn Fumo s POV Ray Utilities List http www the spa com shawn fumo povutils This one is my listing It is IMHO one of the more complete listings of utilities for any platform They are sorted by topic and not platform but if you do a search for MAC you should be able to find the entries It can also usually be found posted in this very group Another thing to remember is that all of the ones listed as Include Files can be used on any platform There may not be a whole lot of binary utilities for the MAC but the include files are your ticket into utility heaven the PILE http user baden online de mbachman pile pile eng htm No discussion of Include Files can be made without mentioning the PILE When it comes to include files this site surpasses all others including my own Gautam N Lad s POV Ray Page http www interlog com gautam povpage html You may also be able to find something of interest here He has a comprehensive listing of a lot of different utilities general links and include files Thanks to David C Browne dbrowne kbsi aus com a WIN32 port of rayshade is now available for ftp at ftp gil physik rwth aachen de pub rayshade win32 rs406w32 zip Christoph Kukulies kuku gilberto physik RWTH Aachen DE A reflectance model visualizer is available in SGI executable form and C source code form at http www cs cmu edu ph src illum The program should be portable to other machines that support the Xforms user interface library and X windows without too much difficulty This program is a fairly general viewer for bidirectional reflectance distribution functions BRDF s It was written by some students and myself in a graduate course in global illumination that I taught in Fall 1996 The program implements the following reflectance models Phong Cook Torrance Oren Nayar He et al I demonstrated the program at the Eurographics Workshop on Rendering in St Etienne France and there was enough interest that I decided to release it more generally enjoy Paul Heckbert ph cs cmu edu There is another BRDF viewer at http www graphics stanford edu smr brdf bv which works on SGI IRIX and i386 Linux and GNU Mesa source code EAH The RenderPark renderer currently offers Galerkin radiosity both gathering and shooting with or without hierarchical refinement higher order approximations clustering view importance stochastic ray radiosity ray casting classic and stochastic ray tracing It is known to compile and run fine on a SUN Sparcstation with LEO graphics hardware and the Nth Portable GL under Linux with Mesa a free OpenGL like graphics library and on a number of SGI machines with OpenGL You can retrieve the source code and example scene files MGF format from the URL http www cs kuleuven ac be cwis research graphics RENDERPARK Philippe Bekaert Philippe Bekaert cs kuleuven ac be Quaternions ftp ftp netcom com pub hb hbaker quaternion There is all sorts of information there about using quaternions Pat Fleckenstein pat csh rit edu There are extensive statistics for comparisons using SPD scenes for the GX GENERIC FTPOV and POV ray tracers at http www rz tu ilmenau de juhu gx html A hybrid algorithm of Hybrid VistaBuffer BSP LightBuffer wins out as the fastest scheme of those tested beating ABVH and BSP EAH There is also an article here about generating near optimal BSP trees for ray tracing reminiscent of some of K R Subramanian s work Finally there is a draft of a paper on the work at http www rz tu ilmenau de juhu Papers IWK IWK html EAH Juhu juhu rz tu ilmenau de Errata for Principles of Digital Image Synthesis is available at http www research microsoft com research graphics glassner work projects pdis errata htm Terrain Forge at http www geocities com SiliconValley Park 7425 is a heightfield generator written for Windows 95 It exports to POV Ray and other formats There is a walking motion library by Theresa Willis for POV Ray at http www win or jp kom indexe html as well as some other tidbits Theresa s site is http www jbarchuk com twillis Guy Rauscher is working on the next generation of Theresa s program called the Character Animation System More information can be found at the following site http www geocities com capecanaveral 7999 there is also a fun little flag waving include file for POV Ray Shawn Fumo shawn fumo the spa com Real Time Stuff Here s yet another free Wintel 3D engine http www geocities com SiliconValley Way 7233 index html by Chong Jiayi I haven t a clue if it s any good but the page is certainly nice enough And here are some little fire and water demos http www cs tut fi kroimela fire html by Kimmo Roimela Parallel Graphics Library The initial public release of the PGL graphics library is now available for downloading at http www icase edu tom PGL PGL is a parallel polygon rendering package designed for use in SPMD style parallel applications running on distributed memory architectures It exploits the power of the parallel platform to perform rendering operations in place enabling applications to generate live visual output without having to move large data sets across the network for subsequent post processing PGL includes a core set of 3D graphics routines which provide modeling rendering and display operations and auxiliary components which support higher level graphics and visualization functions image transport and user interaction Tom Crockett tom icase edu Genesis 3D is available at http www silicond demon co uk It is a surface modeler that does lathe objects sweeps along paths and booleans For Windows 95 and it s free The FLIRT Faster than LIght Ray Tracer by Wolfgang Stuerzlinger is available at http www cs unc edu stuerzl software html for those of you collecting ray tracers Documentation s in German This site also has some other graphics code discontinuity mesher constrained Delaunay triangulator and other tidbits An Empirical Comparison of Radiosity Algorithms is available at http www cs cmu edu radiosity emprad tr html Some of our conclusions Wavelet radiosity without clustering and matrix radiosity are memory hogs esp matrix radiosity and higher order wavelets HR not so bad This was previously known our results show how bad they are Visibility handling in wavelet radiosity algorithms is poor consequently higher order wavelets are not currently practical Progressive radiosity with substructuring is often a better choice than wavelet radiosity Paul Heckbert ph cs cmu edu 3D BSP Trees I have made a 3D BSP compiler and there are some pages about algorithms for 3D BSP http www ce unipr it tommesa jaluit html The best FAQ about BSP is http www qualia com bspfaq Andrea Marchini marchini ulisse cedi unipr it and don t forget the BSP software in Graphics Gems V by Norman Chin I ve never used it but heard it works well EAH Mathematic URL Grab Bag passed on by Paul Flavin imaging frontiernet net EAH http forum swarthmore edu steve steve mathgraphics html a ton of links mathematics and graphics related resources http euclid math fsu edu Science Software html mathematical software index http www sci lib uci edu HSG RefCalculators html 5000 different calculator programs on just an amazing array of areas Aztec date calculator Honeymoon calculator direction to Mecca calculator you name it back to contents Two New Graphics Books plus One by Eric Haines Two noteworthy graphics texts have come out recently One is An Introduction to Implicit Surfaces edited by Jules Bloomenthal Morgan Kaufmann Press http www mkp com books catalog 1 55860 233 X asp This is another book which began as a SIGGRAPH course and like other books from course is the first in depth book on modeling with and rendering implicit surfaces Chapters are by experts in both research and commercial spheres If you want to know about blobbies marching cubes and much more you now have a great single place to start Note that the M K web site URL above has a full table of contents and errata link for the book For some interesting variants on potential functions for implicit surfaces see Alfonso Hermida s article in this issue Also see the New People section for someone doing implicit surface ray tracing work I enjoyed the implicit seafood images at Andrei s web site The second book is David Rogers Procedural Elements for Computer Graphics 2nd edition WCB McGraw Hill This volume is almost twice as long as the first edition There are many minor additions and clarifications and major new sections on ray tracing color quantization radiosity texturing and color reproduction This book is worth having if you need practical advice and pseudocode for common graphics algorithms be it drawing an ellipse or making an octree This book gives you the tools which you will use again and again or like me reinvent because you did not read the book carefully the first time more on that later Like any book with a lot of solid information there are bound to be a few minor bugs more on that later too But from my brief skimming of it this book looks like a well crafted work Another book in the pipeline is Rendering with Radiance The Art and Science of Lighting Visualization accompanied by a CD ROM which should be available from Morgan Kaufmann http www mkp com by early 1998 It is authored by Greg Ward Larson and Rob Shakespeare Radiance http radsite lbl gov radiance HOME html is an excellent free physically based rendering system which has been developed for more than a decade now The book will cover the uses of Radiance and include individual application chapters by a number of users of the system back to contents Ray Classification for Animation by Matt Quail matthewq auslabs lucent com Matt compared and contrasted the 5D ray classification method extended to do ray traced animation with Glassner s space time method IEEE CG A March 88 EAH I finished my thesis and had some interesting results Modeling animation transformations robustly is a lot harder than just normal transformations and these difficulties play havoc with the theory design and implementation of a animating raytracer For instance the maths behind finding a sets of slabs bounding volume for an arbitrarily animated object is pretty hairy Ray classification as expected hoped extended quite nicely to 4D space time How did this compare with Glassner s space time method Well my method had better rendering times than his for my test scenes but I m only calling these preliminary results for the following reasons My implementation of Glassner s method was spending an extraordinary amount of time pre processing I think this is for 2 reasons 1 maybe my implementation isn t as efficient as it could be 2 Ray classification uses lazy evaluation The good news is that Glassner s method could be done using lazy evaluation also Neither the implementation of my method or Glassner s was completely bug free there was some erroneous artifacts in the scenes generated The most complex scene I tested it with would be only on the low side of medium complexity My rendering system only currently supports spheres polygons and point light sources no texture mapping and those simple types cause plenty of theory problem in 4D A rendering system that supported more appropriate types patches blah blah is DEFINITELY needed if you are going to be looking at the efficiency of ray tracing to produce photo realistic animations photo realism is what we are after with ray tracing anyway It is simply not enough to just use spheres and polygons The salient points of my space time ray classification scheme are lazy evaluation of the hierarchy prune parts of the hierarchy that will never be used again like those that belong solely to previous frames this gains us big memory savings for ray classifications which has big memory problems to start with some other speed up that I can t remember it s still early yet The interesting thing is Glassner s technique could use these things as well So is my method better than Glassner s We can t really tell yet In regards to my testing scenes I came up with a few that had varying characteristics you can see these anims in fli format at ftp ftp mpce mq edu au pub comp src 960008 quail anims tar gz My actual thesis is at ftp ftp mpce mq edu au pub comp techreports 960008 quail ps Z The source code is at ftp ftp mpce mq edu au pub comp src 960008 quail back to contents Raytracker Tricks by Hakan Zap Andersson zap lysator liu se Features in Raytracker a ray tracer written for rendering CAD models include raising the diffuse cosine to a power less than 1 and non linear addition of light intensities and luminosity based brightness correction instead of RGB The diffuse cosine power factor you can accurately render the moon if you like When you start playing with it you ll quickly notice that LOTS of things look less plastic when you start fooling with that parameter It s not just the moon who has this quality that s for sure Wood looks better for instance Non linear addition of light intensities That started as a request from one of the two people who ever bought Raytracker while it was commercial his company made booths for exhibitions routinely scattered with TONS of spotlights His problem to get light levels right Either everything was too dark and the lit areas of the spotlights were okay or everything was okay and the spotlight lit areas was burned out The problem is that if you tested things in real life with actual spotlights and brought out an actual camera and snapped a photo then sure you MIGHT have gotten the same or similar results But f ck the camera stand there and use your EYES The eye is highly nonlinear and has an AMAZING adaptability to light levels You don t perceive the dark areas to be as dark as they really are or the light areas to be as light as they really are You perceive a smaller difference So what I did is that I created a brightness correction scheme Basically I had a SPLINE that I set up in a cfg file which defined what the output value should be for a given input value I think the default spline went like this In Out 0 0 0 0 0 7 0 5 1 0 0 8 2 0 0 9 3 0 1 0 That means that for an input value of 0 you got 0 out For input of 0 7 you got 0 5 out etc The problem was where to apply this curve In the first generation of the code it was applied to everything before it went to the screen which gave the whole thing a much broader brightness dynamics range i e lighting equations could output values in the range 0 3 without burning out the display The problem was applying the curve to RGB individually had bad effects on the saturation of the screen Everything became more white So I fixed this by instead of calculating on RGB summing up RGB to intensity using factors 0 4 0 5 0 1 or somesuch then I pushed that brightness through the equation and multiplied all RGB with the new brightness divided by the old brightness Anyway the end result looked a bit dull because of the nonlinearity of the shading Sometimes it had interesting effects and it might help the problem but sometimes it didn t So I made a different approach Instead of applying this color correction at the end of everything where it just squashed up the luminosity dynamic range of the output I applied it at the root of the problem the lights So when I summed up my light I applied the correction there instead Now things get tricky to explain you see the Raytracker shading model is a bit strange For each light I calculate two types of light The light to be multiplied with the surface color i e the diffuse light e g Ka Kd and the light to be added to the the surface regardless of its color i e the specular light This isn t 100 true since Raytracker also has a specular color affected by surface color factor which when it is 1 the specular reflection is calculated into the light to be multiplied i e gets the surfaces color but when it is zero the specular light is put in the light to be added i e gets the lights color and when it s 0 5 the specular light is divided fifty fifty into these two types of light Anyway to get a long story long once I had calculated these two kinds of light both were affected by my color correction curve Then the final intensity at the point was calculated as C color at point light to be multiplied light to be added where color at point is the material s color at that point e g texture color or whatever Anyway this is pure fudge cola all of it but the end result works and works well You can spray many lights on an object and instead of getting burned out it just gets bright If you set up the spline to end with output value 1 0 as the default above did then no matter how much light you spray on a point it ll never be brighter than 1 0 times its surface color PLUS any specular on top of that so it s still possible to get burnouts due to specular reflections but that just looks cool Burn outs due to diffuse just looks stupid On the fly 256 color palette selection I asked about this it worked pretty well the palette would be biased on the fly to the ray trace being generated EAH Duh that s just trivial It just collects colors that deviates so and so much until the palette is full When it s full it increases the so and so value applies the same calculation to itself i e colors within the palette closer than so and so becomes the same color remaps the display and continues The advantage of this method is that there is no stupid histogram made I dunno why histograms are even used for color quantization In what way does the fact that a color is used often or not have to do with the usefulness of it in the palette Stupid A single blue pixel in a sea of red and yellow shades would get lost with that method But with a pure difference method it won t Some of the reds and yellows would be set to the same color but so what Frankly if the histogram should be used it should have the inverse use the more often a color is used the less use does it have in the palette Antialiasing Another interesting aspect of Raytracker is its antialiasing it uses a hashing method so it only antialiases on object boundaries No extra rays shot for texture differences The textures are filtered by calculating the area covered by the pixel using a simple algorithm of the size of a pixel at the screen multiplied with the Z value increasing into the screen and being 1 0 at it This gives us the flat coverage when the texture is hit dead on Now divide this by the cosine between the eye ray and the normal and you have the approximate coverage in texture area of that pixel That s how Raytracker does it A more detailed method is to calculate the texture s X and Y directions and instead of dividing the total area by cosine with the surface normal divide by the sine of the angle from the eye ray to the texture X axis to find out how large area in texture X space to average and divide by the sine of the angle to the texture Y axis to see how large area in the Y axis to average That would be more accurate Anyway there is one problem with the hashing method in Raytracker and that is rapidly changing surface normals my method won t antialias under these conditions since the surface itself doesn t change So I have invented a much better method that I haven t implemented Think like this A plain old stupid ray tracer antialiasing just compares the color of this and the neighbor pixels If they changed by more than such and such then supersample This is a fairly important problem textures are usually best rendered by using mipmaps or summed area tables or similar better than point sampling with a set of rays However traditional difference between sample colors means shoot more rays methods ignore this method and foolishly supersample such pixels A better method is to shade without the texture and do the color comparisons to see if more sampling is needed this picks up edges and highlights Also generally only one texture sample should be generated and shared by the samples in the pixel IMHO EAH But if the texture is already filtered then what is it that must change more than such and such for the pixel to need to be supersampled The answer is lighting And since Raytracker already calculates the light to be added and light to be multiplied as I mentioned above before actually multiplying with the texture color well the perfect antialiasing would be a test if the light levels for the to be added and to be multiplied lights had changed more than such and such since last pixels and if so supersample back to contents Even Faster Crossings Test by Philip Brown phil mitre org The Crossings Test is about the fastest point in polygon test when no precomputes are done This is the test where a ray is sent from the test point along the X axis and the number of polygon edges crossed is found It s been beaten to death in RTNv5n3 RTNv7n2 and Graphics Gems IV code at http www acm org tog GraphicsGems There have also been slight improvements to the algorithm such as turning the divide into a multiplication see the Gems IV code for CrossingsMultiply online it s not in the book Phil found another little speed up to the Crossings test if you allow doing a precompute on the polygon and are willing to store more information with it For him it s worth it he works with the FAA doing flight data analysis looking at millions of flight positions each day EAH I ve played around with ways to speed up the point in polygon test from the comp graphics algorithms FAQ and I found another 10x speedup by precalculating the slopes of all the edges and keeping them with the polygon object Since I ll be reusing this part x2 x1 y2 y1 of the equation multiple times I don t mind the extra space required and since I have a finite set of polygons sectors I don t really have to worry about long term space usage back to contents Additional Notes on Nested Grids by Kris Klimaszewski kriskk sprynet com Andrew Woo awoo aw sgi com Frederic Cazals Frederic Cazals inria fr and Eric Haines Kris Klimaszewski and Tom Sederberg s paper on various improvements and variants on nested grids was interesting to me so I wrote Kris for additional information in February 1997 Andrew Woo at Alias is an expert in the field of ray tracing and efficiency schemes and he quickly joined into the discussion Here is an edited version of these conversations You will have to read Kris paper to fully follow the thread I think nested grids is currently about the best efficiency scheme for ray tracing Note that octrees are just a special case of nested grids i e you nest grids of size 2x2x2 and nested grids tend to beat octrees because the set up costs for traversing the grid is amortized over more cells However among Woo Klimaszewski and Cazals I certainly cannot say which is the best variation I d personally go with Woo mostly because I understand it the best This might be a nice little student term project I hope someone will pick up on this topic and formally compare these schemes Unfortunately I think I m becoming more and more convinced of the idea that Kris expresses that at a certain point the fastest efficiency scheme is scene dependent That said I think that there is still work to be done to find the best overall contenders EAH Eric writes As far as the new algorithm itself I was curious about the upper levels of the hierarchy I was wondering about what sort of number of children there were after creating the bounding volume hierarchy using Goldsmith Salmon and then merging using your rules If I understand it correctly you put grids at all the nodes of the hierarchy It seems like you could get trees where each node has only a few children at the upper levels in which case using a grid at such levels might not gain much i e if at a node there are only two bounding box children just intersect these boxes directly instead of making a 2x2x2 grid at this node Kris replies Good point Unfortunately I cannot give you a clear and sure answer the grid research ended in the summer of 1994 the sparse sampling scheme predated it by at least a year things are somewhat rusty in my memory I believe the upper levels in some of the test scenes and some other I tried indeed had only a few children The difference in the resulting rendering time between two bounding boxes and a 2x2x2 grid at the top was negligible The regular grid IS efficient Moreover I played with both rounding up and truncating when computing the formulas for the number of voxels Truncation would not allow your bounding boxes to be converted into grids The round up formula even when used indiscriminately on all the levels of the hierarchy seemed to give better results probably due to the more liberal voxelization at the lower more crowded levels where it is desirable The difference was not large however The entire algorithm appeared to be more sensitive to the way I was merging the bounding boxes This is part of a more general question as you know the entire problem of tracing rays in complex scenes tends to be a matter of statistics Some improvements may be taken advantage of too seldom detrimental factors may come into play infrequently etc This is why theoretical predictions often fail For example my experience was that even with the best known ray triangle intersector bounding boxes applied to every triangle in large and completely and fairly uniformly triangulated scenes still some time savings could be made If my memory serves 11 23 in the case of scenes I tried Another example is the 3DDDA before its implementation Fujimoto was convinced that the octree would always be faster than the regular grid Andrew Woo writes When I read your article the first thought that came to my mind was Frederic George and Claude s paper in Eurographics 95 reference 13 Their hierarchy of uniform grids is similar to what you call adaptive grids that you should do a comparison in some fashion I ve dabbled with heterogeneous grids a bit myself Got decent results in a GI 92 paper And your subvoxel grid s ray bounding box idea p 46 was very clearly illustrated in Snyder Barr s paper I m a bit disappointed at your evaluation of Jevans Wyvill s accelerator it was treated as a side thing that might be helpful His recursive voxels can stand alone as an intersection culler it might be interesting if you did a comparison of your technique against the Jevans technique At Alias we ve implemented the Jevans technique Snyder s ray bounding boxes and it s pretty fast When we get huge databases to render we find that the Jevans technique may be better or worse than yours Jevans does no scene analysis constructs more subvoxels on the fly as it needs it This has a big advantage in the raytrace the football inside a complicated football stadium scene Then the on the fly only spends time on where things are raytraced Both yours Cazal s technique requires more preprocessing time Good and bad depending on the scene One thing that is obvious about using the Jevans scheme is that traversal cost is still high and that s usually our most computationally expensive part of the raytracer How s yours in relationship to the rest of your raytracer One final point comparing your technique against a uniform voxel scheme is disappointing Yes it sounds good when you can say it s 50 times faster When I played with Snyder s bounding boxes that alone gave me huge magnitude of improvement over uniform voxels All I m saying is that you re comparing against a clearly primitive interesection culler Comparison against something like Jevan s technique might be an interesting start Chris replies Thanks for your comments All of them are appreciated in response to the mention of Cazals Eurographics paper Although this will sound defensive a bit of history is needed here I wish I could call myself a rendering dude but I am not one anymore and this matters here My adaptive grid research ended in the summer of 1994 The dissertation was published through UMI in December of the same year and a portion of it was submitted as an article to CG A soon after that My contact with the state of the art in ray tracing ended at that point Although it is embarrassing I admit I have not read the Eurographics 95 paper you refer us to and even do not know if that paper is the same we mention in our article at the end of the Future directions section The name seems to be different Since the dissertation was out there before Eurographics 95 one may regret George did not compare his grids with mine I am aware of at least two companies that managed to incorporate my algorithm into their products before Eurographics 95 in response to the GI 92 references and Snyder Barr I tried to get as conscientious survey of previous work as possible Among the 130 references in my thesis there are three relevant papers of yours but the GI 92 paper is something I simply have not come across or found referenced by others My university had only one issue of GI proceedings and to get Jevan s paper I had to resort to an inter library loan Honestly my assumption was heterogeneous grids are so simple and obvious that every one is using them but no one is either brave enough or bothers to make a deal out of it in public Regarding Snyder Barr s paper it is my recollection and understanding that the authors came up with the subvoxel bounding box not a subvoxel grid Our paper introduces the latter and calls the box and other classic Snyder Barr s improvements standard Besides S B clearly say that their grid hierarchy was built manually while we create it automatically a step forward I hope Moreover our article states up front that it is merely filling gaps and expanding upon the work done by the giants on whose shoulders I Kris was trying to treacherously stand I assure you Give credit where credit is due is one of the first things Dr Sederberg teaches and demands from his students on Jevans Wyvill s work Certainly it was not our intention to disregard anybody s work including Jevans You are right his technique is very powerful You may have noticed I mention near the end of the paper doubling the speed of the algorithm I have never finished that work but some aspects of Jevans concept played a certain role in it However at that time Yagel s Raster Ray Tracer was the last word on the acceleration techniques and this is why I chose it over Jevans scheme or any other for that matter Also it may be of some interest to you that the Japanese ray tracing company I worked for earlier evaluated Jevan s algorithm which they dubbed N tree The results were mixed The algorithm performed really well with some scenes while with others it would lose to the SEAD based solution we were using then The conclusion was that both algorithms were clearly scene dependent and the company kept looking for alternative solutions I read an internal document in 1990 or 1991 the company systematically evaluated newly published algorithms regularly N tree was just one of them The findings were quite often different from what we read in articles Mainly I think because our scenes were usually dramatically different from those presented in the papers I think Akira Fujimoto as I am referring to his company would be the best source of information although I m sure he will blast me for divulging any info about the matter It is relevant I think to say that this unusual man gave up the glory of publishing his ideas for the sake of his company He had come up with several solutions years before the world got to know them by the names of others When I mentioned to Eric the best known ray triangle intersector I meant something that is faster than Badouel s algorithm and existed at least two years earlier in our production code Fujimoto s ingeniously simple idea When I said that my sparse sampling was earlier than Kenji Mase s method I did not brag Long before Mase s paper appeared Akira s firm had a perhaps a little crude yet fairly efficient pixel interpolator in its ray tracer In conclusion I cannot predict if Akira will be willing to share information he s always considered sensitive but you may try Iint jom fujimoto integra co jp Speaking of comparisons to the best of my knowledge even before all of the acceleration techniques were implemented the same program we present in the paper was tested by Evans Sutherland against a number of commercial ray tracers Dr Sederberg may know better but it seems to me that Alias and or Wavefront as well as the Japanese company I mentioned earlier were among the contestants because they were referred to as leading ray tracing companies or something to that effect The Car scene shown in the paper was one of the benchmarks As a result E S chose our program As you can see the value of any comparisons even those conducted independently may be limited I would have been more inquisitive concerning the E S comparisons if I had known what algorithms were in the tested ray tracers I apologize for my ignorance but your information about the algorithm Alias Wavefront is actually using is a sort of revelation to me In the places I worked before this was considered a trade secret I am not qualified to comment on the results of the E S tests They surprised me to say the truth But if interested you should be able to obtain more information from E S itself or Pro E Parametric Technologies which later bought the program along with E S s CDRS division Which of the two the program or the division were more important to the buyer remains a matter of speculation Traversal time originally I intended to use a concept of a wall street not to get rich but to create a modified SEAD non hierarchical organization in which rays would travel from wall to wall using Osterhout s corner stitching technique Corner stitching had actually been used earlier by Arnaldi The profiling I did on my code showed that traversal should not be the prime target to attack and eventually I gave up the idea I do not believe there is the best fastest and producing quality pictures ray tracing algorithm There is always however the best RT algorithm for a particular scene So I think you are right it is conceivable that my algorithm may lose to another algorithm and vice versa This is why we wrote we do not consider the new method as the fastest ray tracing scene decomposition possible The right answer would be to cleverly choose on the fly from a number of algorithms depending on the complexity of the scene Complexity is of course understood here not as merely the number of objects primitives etc But so far all the attempts to do so at least those I know of looked good in theory but failed in practice on comparing to a uniform voxel scheme Looking good was not my objective I played with Snyder s bounding boxes as opposed to subvoxel grids before I had adaptive grids too quite a bit Alas the improvements were rather small never more than a few dozen percent 30 at best I also tried the dynamic bounding box that is one that shrinks after an intersection is found Also Snyder s idea The improvement with respect to the static box was practically none If my memory serves the boxes increased memory usage significantly since I created them during preprocessing but I may be wrong This is not to say that Snyder s idea is bad Once more we deal with scene dependence here I was using a fine subdivision of the regular grid which was giving me consistently better timings than coarser voxelizations On the average the distribution of the primitives in the voxels was more or less even the primitives were relatively small Snyder s ray boxes could not do much good in too many voxels they were too large I tried both triangulated and non triangulated scenes Still the improvement was not impressive mildly speaking In the adaptive grid scheme the matter looks differently Typically we begin with much larger voxels and uneven object distribution This sets a better stage for ray boxes and consequently for subvoxel grids Why just regular grid Again there were more recent developments in the fields at the time and I was eager to pitch my ray tracer against them Secondly in my view the lack of a common basis on which various techniques might be compared is a major problem the field has struggled with Eric s Standard Procedural Databases was a step in the right direction but it addressed only one aspect of the issue This is not an excuse but I think you will agree that there are many papers that failed to compare their results with anybody s There are even articles that propose solutions without actually implementing them palm of victory without work Examples on demand I chose the regular grid for two reasons First because it is one of the best known and easy to implement acceleration techniques on which many tried to improve This I hoped would make comparisons with numerous papers straightforward Second I wanted to make sure that the implementation of the algorithm against which I was to test my method or methods the paper treats only some of them was best possible For someone who comes from the school where 3DDDA originated Akira Fujimoto was my mentor for many years and the regular grid and its optimization tricks were practically a staple the choice was quite obvious Among others Fujimoto s disciples were required to use A Proposal for a Hybrid Voxel Traversal Approach by A Woo in lieu of our normal makura s Japanese wooden pillows so that even our dreams be properly stimulated As to the cost of intersections I was advised that some companies in Japan dealing in lighting simulation for interior design use lighting equations computed in physical units that are so complex that ray object intersection calculations do not dominate rendering time anymore People at Pixar appear to agree with this statement EAH Intersection culling dudes call me so please may be squabbling over a dead duck these days what follow are some interesting bits from back and forth discussions EAH Andrew writes Telling you we use the Jevans technique is no big deal it s a published algorithm after all Kris replies Right but any information about what you actually have inside your ray tracer or any product for that matter gives your competitor an edge This is how many Japanese companies tend to think at least Andrew replies Not so in most companies In SoftImage s raytracer they even try and educate users on what 5d subdivision involves and how to optimize for them Don t need to do much guessing there In our raytracer user parameters include subdivision recursive level voxel resolutions etc Not much of a secret Andrew writes What is your portion of time spent on traversal vs ray triangle intersections Kris replies Your interest in the ratio makes me uneasy I hate thinking I missed an opportunity to make the program even faster Andrew replies I m getting more and more interested in this as I m very surprised by this statistic every time I benchmark scenes I agree when I ve benchmarked I generally find traversal takes say 60 of the time and actual intersection testing takes say 20 or less the rest is shading and bookkeeping It seems contradictory so much time spent passing the ray on and so little actually testing objects But then the whole point of an efficiency scheme is to avoid testing objects it s the overall time that is to be minimized EAH Frederic Cazals joins in a week or two later Hi everybody So it goes Eric forwarded me a couple of emails related to the chat you have been involved into about RT speed ups and since I have been interested in this topic in the last 3 years with a 16 months break because of my national service here are my 02 Before discussing the main points raised in Kris s email to Andrew let me define the following bibliography 0 Goldsmith and Salmon IEEE CG A 7 5 1987 1 Jevans and Wyvill GI 89 paper 2 Filtering Clustering and Hierarchy construction a New Solution for Ray Tracing Complex Scenes F Cazals and G Drettakis and C Puech Eurographics 95 at http pauillac inria fr algo cazals xfc research html 3 Kris s recent paper in IEEE CG A 4 Bucket like space partitioning data structures with applications to ray tracing F Cazals C Puech 13th ACM Symposium on Computational Geometry 1997 at http pauillac inria fr algo cazals xfc research html 5 F Cazals Combinatorial properties of one dimensional arrangements Experimental Mathematics 6 1 1997 at http pauillac inria fr algo cazals xfc research html 1 About 2 3 and 4 2 and 3 were clearly developed independently and I think it was almost impossible for each party to be aware of the other one early 95 The goal pursued is exactly the same and the resulting hierarchies are slightly different since the grids of 3 are nested please correct me if I am wrong while the ones of 2 are not so The ways the hierarchies are built are very different 2 proceeds by grouping the objects by homogeneous size finding subgroups of neighbors the so called clusters within these groups building a hierarchy from the clusters grids 3 proceeds by building a hierarchy of bounding boxes as in 0 merging neighbor boxes containing dense sets of objects gridding the so formed volumes in a heterogeneous fashion replacing some crowded voxels by sub voxels grids as in 1 It would be very interesting to test 2 4 against 3 and this can indirectly be done by just comparing 3 to recursive grids see point 2 just below But even more interesting from my point of view would be to get precise statistics describing how the hierarchy of 3 is organized and works depth distribution of the number of items per voxel per level distribution of the number of intersection tests per level All these statistics are precisely defined in 4 and I think they should provide enough insights to make the solutions even better or to understand why some optimum has been reached Also I think an intuitive explanation of why the serendipitous discovery of page 44 in 3 works is given in section 5 of 4 The long version of 4 also contains some negative results I got with heterogeneous griddings based on overlap numbers defined in 5 2 About Jevan s work and reference DS new solutions should be tested against As mentioned in the conclusion of 1 the question that remains open is to come up with a method for determining the optimal resolution and tree depth for a given scene Jevan s contribution is important but subdividing a grid containing n objects into alpha n voxels with alpha being some positive constant sounds as much important to me please correct me if I am wrong but the first time I saw this criterion is in E Jansen s note in RTNews 5 1 1992 Jevan s recursive DS data structure with this criterion is what we use to call a recursive grid well I think And so I believe that the reference DS every new solution should be tested against is a recursive grid and not a uniform one This is especially easy since once one has a uniform grid implementing a recursive one is straightforward as an example the h and C of my recGrid are jut 46 and 102 lines of C code 3 Intersection time and traversal time Andrew s question What is your portion of time spent on traversal vs ray triangle intersections is very interesting In our implementation which relies on OORT the polygons are not necessarily triangles or squares even if more than 95are so for the test models of 2 4 As a consequence note that this observation is sufficient but not necessary since one may proceed in the same way for triangles only the ray polygon intersection test is as follows t1 if the ray and the polygon are coplanar return else compute the intersection point p between the ray and the polygon plane t2 if p does not belong to the polygon 2D bounding box return t3 compute the crossing number and conclude of course test t3 is more expensive than t1 or t2 As pointed out in 4 the exit point of this algorithm depends of the coarseness of the DS the ray polygon intersection test is called through which has an integral geometry explanation This is just to say that in our implementation the average call cost of the ray polygon test varies within a non negligible factor 7 or so in the worst case which makes impossible writing something like t r t t n i t 0 with t r the total rendering time t t the traversal time n i the number of intersection tests t 0 the cost of an intersection test because the higher the number of intersections the lower t 0 and vice versa 4 A point about N trees this is not of major importance but it should be pointed out that in the theory of one dimensional search and sort data structures N trees refer to the work of Marku Tamminen see e g M Tamminen Analysis of N Trees Information Processing Letter 1983 vol 16 unlike Jevan s DS the point here is that the branching factor of a node is not constant After looking over this article just before this issue went out Kris writes Regarding the discussion of superiority of one spatial enumeration scheme over another last summer I had a an interesting conversation with an employee at Evans Sutherland He told me that in 1993 or 1994 I don t remember they compared 15 best ray tracers they could find The first crude version of adaptive grids and Fujimoto s physically accurate commercial ray tracer were among them It stuck in my memory that it took over 67 hours to render the test image Car shown in my paper using Fujimoto s program According to my article Car was ray traced with adaptive grids at standard resolution in 75 secs From what I know none of the other programs came even close to adaptive grids The employee asked me what accounted for such a big difference in speed and practically none in image quality I could only speculate as I did not know what acceleration techniques the competing packages utilized I am not suggesting you should put this info into the article but am mentioning the fact as a yet another indicator that adaptive regular grid approaches be it mine or Jevans or Cazals may be superior to other known methods Last I would like to stress the fact that using the regular grid as a standard against which new space subdivision algorithms are compared resembles the concept of your procedural database Probably both the regular grid and database are not what we deal with in the so called real world but being easy to use or implement they became de facto standards Similarly many years after the 1 MFLOP VAX machine became a museum piece it served the useful purpose of an informally but commonly approved basis for measuring the performance of computers that were ages away as far as sophistication architecture storage capacity and speed were concerned While I certainly understand Andrew s concern I would call for declaring the regular grid the VAX of spatial enumeration techniques back to contents Recursive Grids and Ray Bounding Box Comments and Timings by Andrew Woo awoo aw sgi com I started a bit of a discussion with Eric Haines and Kris Klimaszewski after having read Kris Tom Sederberg s CG A paper on adaptive grids for raytracing acceleration Several items that might interest the general RTNews reader include In our raytracer we employ the Jevans Wyvill GI 89 recursive grids technique with the Snyder Barr ray bounding box Usually the traversal cost is most significant in our timings However Kris says this is not so in his implementation We use the floating point traversal scheme introduced in parallel by Pearce Wyvill MSc thesis 86 Snyder Barr Siggraph 87 Amanatides Woo Europgraphics 87 I d like to hear from other experiences of their traversal costs relative to the costs of other parts of their raytracer in their implementations of some form of recursive adaptive grids By traversal cost I mean the entire process of initializing the ray for traversal traversal from one voxel to the next and resetting back to the next subgrid that the ray came out of I had concerns about raytracing acceleration papers comparing their results against the straight forward uniform grid I felt this was not a good relative benchmark Comparing against Jevans Wyvill might have been more suitable in this particular case But I suggested a simpler variation to compare Kris results against which is the Snyder Barr Siggraph 87 ray bounding box idea on top of the uniform grid It still surprises me how well this simple optimization does as compared to the raw uniform grid I also suggested some minor improvements in my GI 92 paper for the REALLY interested reader who wants to be bored Here are some sample benchmarks The database used is from Eric Haines procedural database Most of this was benchmarked in 1988 on a SUN 3 280 with fpa If I had data on 20x20x20 which I don t that will even be better as it s the n 1 3 rule Sphere Flakes Grid Resolution objects Uniform Ray Bounding Box 40x40x40 7382 391 mins 163 mins 50x50x50 7382 270 mins 142 mins 60x60x60 7382 220 mins 138 mins 70x70x70 7382 199 mins 133 mins Note that at a pretty high grid resolution of 40x40x40 we got close to twice the speedup Also check out the intersections needed for testing Grid Resolution Uniform Ray Bounding Box 40x40x40 128566950 3858198 50x50x50 89045372 3662689 60x60x60 68387039 4816035 70x70x70 55492658 4152675 I also tried this against the tetrahedron and rings model The results showed ray bounding boxes to be slower because the model was so uniformly distributed Then I played with determining when ray bounding boxes should be used or not on a per voxel basis then again I got good improvements in performance The heuristic is very simple if the ray s bounding box is above 750f the volume of the voxel skip the ray bounding box test because the ray bounding box is so huge that its culling is likely useless Addendum timings are also available in RTNv3n1 for a number of timing articles and also RTNv6n2 RTNv6n3 and RTNv8n3 back to contents CD ROM The Internet Raytracing Competition Year One review by Eric Haines When all is said and done the whole point of most computer graphics research is about images The Internet Raytracing Competition has been around since 1994 collecting images created by hobbyists artists researchers and others and putting them on the web to be judged by their peers It should be noted that entries to the IRTC do not have to be rendered by POV Ray nor by any ray tracer at all in fact commercial rendering packages are fine Their site is http www irtc org The entries and results for the first official year May 1996 to April 1997 are now available on a CD ROM from Hallam Oaks http www aussie org products Profits from the CD s help fund the continued existence of the IRTC and POV Ray http www povray org web sites The CD ROM itself is painless to use Pop it in and autoplay starts your web browser and you begin on an index page While most of the disk is filled with contest entries there are also a few other goodies like version 3 02 of POV Ray binaries for many platforms source documentation and a museum tour movie which runs a few minutes There are also short auto biographies of some of the competition winners The main thrust is of course the entries themselves You can view all entries or just the winners There are about 1000 images from the competitions and of these about 500 come with ZIP archives containing the entire scene s data So not only can you see the images you can also recreate them play with them and learn from them I found the creators notes on how they made the scenes the most interesting part of the package For example it is almost painful to read that a classroom scene with three detailed blobby children was modeled entirely by hand The images themselves me I ve seen a lot of synthetic mirror reflections and too sharp shadows in my life so I m probably jaded The winners are generally worthwhile usually because of the elaborate modeling and materials work and sometimes because of the scene s concept or layout I would put most of them in the Ripley s Believe it or Not category not great art not particularly photorealistic but amazing to contemplate that many of the scenes were done for the love of it in spare time with free software and a lot of talent and a lot more sweat Amazing and inspiring seeing all this time and energy and spent cycles in one place All in all this is a pleasant CD ROM Most of the content can be found on the web but for most people accessing the images off of this CD ROM will be much faster and more dependable not to mention more portable If you do any non trivial rendering with POV Ray or just want to have a collection of fun images to look at and show others it s worth getting back to contents Pl uuml cker Coordinates by Jeff Erickson jeffe cs duke edu thanks to Mike Kelleghan for retrieving this from the aether for me EAH The best explanation of Pl uuml cker coordinates I ve seen is in Jorge Stolfi s book Oriented Projective Geometry Academic Press 1991 I ll try to give a sketch here but you should really check out Stolfi s book if you want to learn about these things Pl uuml cker coordinates are an incredibly useful way of specifying lines and rays in 3 dimensional space by six dimensional vectors Suppose L is the oriented line passing through two points with homogeneous coordinates a b c d and w x y z or with standard Cartesian coordinates b a c a d a and x w y w z w in that order Then the Pl uuml cker coordinates of L are a x b w a y c w b y c x a z d w b z d x c z d y Pl uuml cker coordinates are homogeneous multiplying all six coordinates by any real number gives you new Pl uuml cker coordinates for the same line Also not every set of six numbers is the Pl uuml cker coordinates of a line Pl uuml cker coordinates L1 L2 L3 L4 L5 L6 always satisfy the following equation L1 L6 L2 L5 L3 L4 0 Two oriented lines L and M can interact in three different ways L might intersect M L might go clockwise around M or L might go counterclockwise around M Here are some examples M M M L L L V V V intersect counterclockwise clockwise M M M L L L The first and second rows are just different views of the same lines once from the front and once from the back Here s what they might look like if you look straight down line M shown here as a dot L o L o L o intersect counterclockwise clockwise The Pl uuml cker coordinates of L and M give you a quick way to test which of the three it is cw L1 M6 L2 M5 L3 M4 L4 M3 L5 M2 L6 M1 0 thru L1 M6 L2 M5 L3 M4 L4 M3 L5 M2 L6 M1 0 So why is this useful Well suppose you want to test if a ray intersects a triangle in 3 space One way to do this is to represent the ray and the edges of the triangle with Pl uuml cker coordinates The ray hits the triangle if and only if it hits one of the triangle s edges or it s clockwise from all three edges or it s counterclockwise from all three edges For example in this picture the ray is oriented counterclockwise from all three edges so it must intersect the triangle L The L is an arrowhead So if you use Pl uuml cker coordinates ray shooting tests like this take only about ten lines of code there s more on Pl uuml cker coordinates in the next RT News back to contents Errors of Commission and Omission by Eric Haines A random title but it does cover these two bits of errata fairly well I will start with a minor but important error in Dr Rogers new Procedural Elements for Computer Graphics 2nd edition WCB McGraw Hill We discussed this topic back and forth and while I pressed my arguments hard I did not continue to nag about it and it slipped into the book The errata is from page 551 on and has to do with the ray tracing illumination model The problem is that the distance along reflection and refraction rays is used to attenuate these rays contributions Specifically the intensity of the ray s contribution is divided by the length of the ray this is incorrect It is an educated error physics says that light from a source drops off with the distance squared for example but is not a good simulation of what actually happens in the real world Note that the illumination model presented does not attenuate eye ray contributions these are left as is The error does have a logic to it in that shadow rays generated from surfaces can get attenuated if desired by a function related to the distance to the light source so why shouldn t reflection rays To digress a bit this reminds me of an interesting erroneous algorithm someone starting out in ray tracing told me they would not simply ignore the light if the surface was in shadow but rather would attenuate the light s effect based upon the distance the shadow ray went before it hit the occluder This idea is interesting I ve never tried it out and you do have to modify good ray tracers to return the first not just any object hit by the shadow ray But think about it as an occluder gets further away from the object being occluded more light appears in the shadow this is sort of a poor man s radiosity effect and has a rationale Surfaces which are close together usually minimize the amount of light which bounces into the area between them There are cases where this algorithm is nonsense two occluders one large and then one small while moving from the light would give a darker shadow where the smaller occluder casts a shadow but it s an interesting idea There are also cases in which the contribution from reflections or refractions or from the eye are attenuated e g atmospheric effects absorption due to the glass etc and these are usually handled using exponential drop offs not divisions by the distance Nonetheless always dividing by the distance is incorrect it does not happen in reality The simplest counterexample is a mirror You look directly at something far away You now turn around and look into a hand mirror at the same scene It may dim a little bit simply due to the fact that the mirror is not 100 reflective However it does not dim due to the distance not any more than it does looking at the scene directly with the eye The ultimate case is a reflector telescope which normally has almost perfect mirrors the light from the stars point sources or moon area source reaches the eye from mirror reflections and the mirror does not dim the perception of the stars just because the stars were reflected and not seen directly The eye itself works by refraction and the refracted rays coming in through the lens are not dimmed by the distance just because they are refracted vs pinhole camera type eyes where no lens is present On to other errors The error of omission is one of my own and I came to know about it when I was writing Dr Rogers about the bug above I realized that Cyrus Beck 3D clipping is almost exactly what I was doing in my article in Graphics Gems II about ray convex polyhedron intersection testing which is a variant on Kay Kajiya slab testing Kay Kajiya properly note that their slabs method is similar in spirit to Cyrus Beck I never followed up this reference and so did not fully comprehend how closely related these were and how my own ray intersection method was essentially identical to Cyrus Beck What is the quote about those who do not study history are doomed to repeat it I guess I am in good company Rogers makes a case in his book how Liang Barsky 2D clipping 1984 is a special case of the Cyrus Beck algorithm 1978 showing how the flowcharts and steps of the two algorithms interrelate Evidently Liang and Barsky did not know of Cyrus Beck another case of history repeating itself Rogers thorough treatment in his book of all the variants of 2D and 3D clipping algorithms leaves no excuse for anyone to reinvent any of these basic algorithms again back to contents Cyrus Beck as a Ray Polygon Tester by David Rogers Another little tidbit that dropped out of our conversations EAH Actually there is a neat way of doing a ray polygon intersection with Cyrus Beck clipping A containment test is not required Just consider the polygon as two opposite pointing faces of a 3 D polyhedron and use the 3 D C B For example consider a triangle to be a five sided polyhedron with two faces one in each direction on the triangle s plane and three faces forming the edges with each face perpendicular though not required to the plane Interesting scheme I would suspect the traditional hit the plane test the point method of ray tracing a triangle might be faster but I won t swear to it this new method gives a tight single loop of code testing the ray against each plane in turn with two planes sharing results Whatever the case Rogers method is definitely more elegant For another elegant recent solution to this problem see M ouml ller and Trumbore s paper in the journal of graphics tools abstract code and statistics but not the algorithm description at http www acm org jgt papers MollerTrumbore97 EAH back to contents Mirror Reflectivity by Greg W Larson gregl sgi com Due to the interesting discussions with Dr Rogers I asked Gregory Ward Larson the computer artist formerly known as Greg Ward the actual reflectivity for a typical mirror EAH A front surface mirror can be as high as 99reflectance though I haven t measured any lately Reflectances this high are also reported by some makers of aluminized plastic reflectors used in light fixtures and they do indeed achieve this when new Dust diminishes this value by 5 15 unfortunately A typical bathroom mirror has a reflectance of around 90when it s clean due mostly to internal absorption of the glass itself The actual RGB reflectance of the mirror in our bathroom is 0 916 0 938 0 858 back to contents Testing a Matrix for Uniform Scaling by Charles Iliya Krempeaux and Eduardo Marreiros This is one of those common operations I tend to forget and have to look up putting it here means there s now a place to look Knowing that a transformation uniformly scales and does not invert i e does not make the object go through the looking glass can be handy For example such objects can be rapidly illuminated when using hidden surface techniques This is done by applying the inverse of their matrix to the light sources instead of transforming the object s vertices to world space non uniform scaled objects cannot correctly use this trick A few years ago a certain company wanted to patent this technique I only hope their attempt failed EAH Eduardo Marreiros emarreiros mail telepac pt writes I m interested in finding a QUICK and LINEAR way to determine if some 4x4 matrix produces a transformation in which all 3 scale factors are equal I mean if some object is to be transformed it will not be deformed An object will be grown shrunk by the same amount in all 3 axes Charles Iliya Krempeaux ckrempea sfu ca replies One way to do it is Having a11 a12 a13 a14 a21 a22 a23 a24 a31 a32 a33 a34 0 0 0 1 Check that the upper left 3x3 sub matrix matrix multiplied with its transpose gives you a matrix of the form k 0 0 0 k 0 0 0 k This makes sure that the upper left 3x3 sub matrix is orthogonal and nicely ignores scaling but not spatial inversions so Then make sure that a11 a12 a13 determinant a21 a22 a23 is positive a31 a32 a33 This makes sure that you don t invert your space coordinate system Peter Pike Sloan ppsloan lal cs utah edu notes If you test that a11 2 a21 2 a31 2 a12 2 a22 2 a32 2 a13 2 a23 2 a33 2 and that a11 a12 a21 a22 a31 a32 0 a11 a13 a21 a23 a31 a33 0 a12 a13 a22 a23 a32 a33 0 then the matrix is orthogonal and its axes are all the same length The first set of equations checks the length of the axes to determine that the scales are all the same the second set that the axes are mutually perpendicular These tests are equivalent to doing the transpose multiplication test without wasting time duplicating dot product tests The determinant test is still needed to determine whether inversion occurs So you may be able to get away without doing all these tests depending on what your system allows Tolerances are also obviously important EAH back to contents Declassified CIA BRDFs now available by Greg Ward Larson From minutes of the global illumination meeting at SIGGRAPH 97 Bob Lipman also of NIST talked about a newly available database of BRDFs for various common materials collected by the CIA for use in analyzing satellite images Recently declassified and simultaneously defunded the NEF database obviously stands for Nonconventional Exploitation Factors contains hundreds of exterior finishes and natural materials characterized by full spectral reflectance models and measurements It was meticulously created by the National Imaging and Mapping Agency and represents a huge effort I strongly recommend to anyone interested in material reflectance data that they go check it out For more information see the following web sites http ciks cbt nist gov appearance http ciks cbt nist gov nef The first page has some good links to BRDF related work elsewhere The interface to the database currently runs only under Solaris and Bob is looking to create a simpler interface to access the data under other systems as well as seeing if the current interface can be ported His initial attempts to do so failed for unknown reasons Looking at the pages also SGI IRIX and IBM AIX versions are now available Bob Lipman is at robert lipman nist gov 301 975 3829 back to contents Lifting the Monkey s Paw Curse by Jeff Goldsmith Jeffrey M Goldsmith jpl nasa gov This is one way to lift the Monkey s Paw Curse RTNv10n2 Ken Turkowski I believe suggested squishing the texture individually for each triangle in the cone but Jeff s solution is more simpler and general it does not need to know the amount of tessellation in advance However if you do not allow manipulation of the texture itself the curse is still a problem for designers using texture coordinates on surfaces EAH I am doing gobs of coordinate transformation stuff and the Curse of the Monkey Paw intrigued me Your example is really only 2D Imagine looking down at the top of the cone and projecting everything into a plane Lo and behold you have a polar projection of the texture Is it possible to design a set of triangles such that the transformation you want is achieved I don t know But if you transform the texture first via something simple it s easy although you lose a little information Filter the texture so that it compresses linearly as you travel vertically That is convert the texture you have into a triangular texture by compressing the data near the tip to a point then linearly out towards the base I m not sure if this will work perfectly with texture mapping hardware there is probably some constant or two to deal with but the general idea of applying a filter seems like it might do the trick I haven t thought it through completely and I imagine linearly and triangle are errors but the basic idea is to transform the original texture so that the triangles forming the cone map into the texture appropriately How general is this Fairly so it seems This will work somewhat for spheres too if you cut them in half at the equator Will it work for all point singularities Probably not The prefiltering actually does make some sort of sense for cones There s less surface area near the tip as there is in a polar projection of a plane than at the base so there really is less information in a sense in the texture to be applied there More importantly consider the reverse problem you have a texture on a cone and want to draw it onto a rectangle You cut the polar projection radially then stretch out the pole converting what was really once a triangle into a rectangle To do the reverse it seems obvious to convert a rectangle into a triangle Since you only have locally linear texture lookup a little bit of tinkering will need to be done but for small triangles a linear approximation will probably suffice back to contents Eccentricity Effects in Blobs by Alfonso Hermida ahermida mscmail gsfc nasa gov Some years ago I asked myself if there was a way to make isosurfaces a little more versatile or at least be able to tweak them somewhat since the objects used were always too symmetric To understand how I modified the method let s take a look at how it s normally done using an ellipsoid as our test case I m writing all the steps for those who are not familiar with the details Personally I would use a sphere and just apply a non uniform scaling matrix to my equation results I need a transformation matrix to move the object away from the origin anyway EAH 1 Take an ellipsoid with radii A B and C in the axes X Y and Z respectively The equation for an ellipsoid located at the origin is X 2 A 2 Y 2 B 2 Z 2 C 2 1 2 Let the center of the ellipsoid be defined by a 3D vertex named Q which for simplicity is actually the origin we can always use a transformation matrix later to move this point 3 An arbitrary test point anywhere inside or on the surface of the ellipsoid will be named P Our goal is to compute the potential at this point 4 Construct a vector V such that V P trivial but we ll modify this definition later We can define a ray V t e g it generates the set of points P V t where t is a parameter t 0 at t 0 P Q at t 1 P P 5 Now let M be the point where the ray V t intersects the ellipsoid at t tm so M V tm P tm 6 The potential of the blob at any point P can then be calculated as Potential S 1 r R 2 2 where S maximum strength of the blob scalar at the center r mag P R mag M 7 To solve for the potential of point P we need to find the ratio r R which in turn depends on the intersection point M using X 2 A 2 Y 2 B 2 Z 2 C 2 1 and M P tm let M have the components P have the components so substituting everything into the ellipsoid equation Px tm 2 A 2 Py tm 2 B 2 Pz tm 2 C 2 1 Now solve the previous equation for tm and find M using M P tm This gives you the intersection point M 8 Since you know have the points M P and the strength value S solve for r and R and use equation 6 to find the potential value of point P 9 If we repeat this for a number of points inside and on the surface of the ellipsoid and use a marching cubes algorithm we can build the surface by polygonizing it This entails calculating potential values of points located in a 3D grid in space and selecting points in space where the value of the potential is near some arbitrary threshold value These points are then used to polygonize the surface Modifying the Previous Steps In the previous steps the origin of the ellipsoid is used as the starting point for the ray V t Now say that the origin for generating our V vector is some defined point E Why am I doing this I want the surface of the ellipsoid to be the physical boundary or limit of the implicit surface that is when E Q center of ellipsoid then the implicit surface generated with the algorithm will be similar to that of the ellipsoid BUT when E is not equal to Q we should have some interesting surface that will be enclosed by the ellipsoid boundary surface but may or may not be similar in shape to it Using E as the start of the vector V let s see how the equations change ellipsoid X 2 A 2 Y 2 B 2 Z 2 C 2 1 vector V P E ray equation P E V t then M E V t E P E tm Potential S 1 r R 2 2 where S is now the maximum strength of the blob at point E before it used to be at center of ellipsoid r mag P E R mag M E Substituting M E P E tm into the ellipsoid equation let D P E Ex Dx tm 2 A 2 Ey Dy tm 2 B 2 Ez Dz tm 2 C 2 1 and rearranging Dx 2 A 2 Dy 2 B 2 Dz 2 C 2 tm 2 2 Ex Dx A 2 Ey Dy B 2 Ez Dz C 2 tm Ex 2 A 2 Ey 2 B 2 Ez 2 C 2 1 This one is a tad more complex than the other one Now solve the previous equation for tm select the positive value and find M using M E P E tm Since we know points M P E and the strength value S solve for r and R and use equation 6 to find the potential value of test point P If this new style ellipsoid is rendered as an implicit surface at a potential of 0 it won t look a bit different than a standard ellipsoid Where it gets interesting is when the surfaces at potentials greater than 0 are used and when such ellipsoids are blended with other primitives The isosurfaces radiate out from point E instead of the geometric center of the shape If you try this out you ll see that we have now broken the symmetry of the potential value If you plot the change of potential across one of the axes in the standard method the peak of the potential distribution was located at the origin now with the new method the potential has a peak offset at a distance equal to mag E Q I gave you a straightforward example of the new method by using a simple object such as an ellipsoid What about other shapes Well how about a cylinder Researchers such as Jules Bloomenthal have used implicit cylinders to do blobs One of the approaches is to use the perpendicular distance between a line segment and the test point P to be equal to a value d This creates a cylinder with capped i e hemispherical ends of radius d a cheese log If we were to break the symmetry we would have to go beyond using a new point E to be the center of the cylinder we would have to create a new line segment with the same or different length that would be translated and rotated relative to the cylinder s original line segment Now the method would be to calculate the perpendicular distance between the NEW line segment and the test point P The point M would be the intersection point of a vector that is perpendicular to the new line segment and passes thru point P and the surface of the cylinder as defined by the original line segment We can go now one step further in the case of the cylinder instead of creating a new line segment and moving it inside the cylinder s surface use a spline instead This would make the implicit shape more complex and interesting The method stays the same but now we have to calculate the distance between the spline and the point P Here s yet another idea So far I have suggested moving the center point of the ellipsoid somewhere else and moving the line segment that defines the cylinder somewhere else also This modifies the vector s V origin How about using a point instead of a line segment in the cylinder that is the boundary surface is the cylinder but the vector V is calculated as if the original shape was an ellipsoid hmmm Also it would be interesting to check out weird surface boundaries such as superquadrics with points line segments or splines to break the symmetry If you think this method only applies to blobs here s another idea In 1994 I talked a few times over the phone with Paul Borrel at the IBM T J Watson Research Center He had written a paper about a deformation method they named SCODEF His method used something similar to what I described in detail in the first section of this article but he uses SCODEF to perform deformations rather than to do implicit surfaces I was able to modify his equations and implement the eccentricity effects as described in this article with no difficulty NOTE Paul Borrel s paper is Simple Constrained Deformations for Geometric Modeling and Interactive Design Paul Borrel and Ari Rappoport ACM Trans on Graphics Vol 13 2 1994 pp 137 155 back to contents Eric Haines erich acm org Ray Tracing News Volume 10 Number 3 Ray Tracing News Volume 10 Number 3 Ray Tracing News Volume 10 Number 3 Ray Tracing News Volume 10 Number 3 Ray Tracing News Volume 10 Number 3 Ray Tracing News Volume 10 Number 3 Ray Tracing News Volume 10 Number 3 Ray Tracing News Volume 10 Number 3 Ray Tracing News Volume 10 Number 3 Ray Tracing News Volume 10 Number 3 http www acm org tog resources RTNews html rtnv10n3 html http www acm org tog resources RTNews html rtnv10n3 html http www acm org tog resources RTNews html rtnv10n3 html http www acm org tog resources RTNews html rtnv10n3 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtn_index.html%%==%%Index to Ray Tracing News%%==%%Index to Ray Tracing News The following is an index to some of the articles in Ray Tracing News , an electronic newsletter edited ...%%==%%28488%%==%%21 Dec 99%%==%% Index to Ray Tracing News The following is an index to some of the articles in Ray Tracing News an electronic newsletter edited by Eric Haines I created the index primarily to organize the articles from RTN devoted to the topic of spatial data structures for optimizing ray tracing but I ve also included some other articles that looked interesting to me The index was created for a course I m teaching Each article is listed just once with title author s and in some cases my summary or comments on the article in italics I can t vouch for the accuracy of the information in these articles RTN articles generally have quality somewhere between that of a SIGGRAPH paper and a comp graphics algorithms posting But that s a wide range Please let me know of errors or mis categorizations you find here Paul Heckbert and updated by Eric Haines Categories Spatial Data Structures for Optimizing Ray Tracing Optimizing Ray Tracing General Ray Surface Intersection Ray Tracing General Soft Shadows Texture Mapping Antialiasing Radiosity and Global Illumination Modeling Miscellaneous Book Reviews Ray Tracing Resource Roundups Spatial Data Structures for Optimizing Ray Tracing Book Reviews on Hierarchical Data Structures of Hanan Samet by A T Campbell III January 2 1990 Any Future for Efficiency Research by Eric Haines August 26 1992 3D Point Hashing by Steve Worley January 18 1996 Grids Uniform Hierarchical and Nonuniform Ideal Grid Object Densities by Dan Gehlhaar Marc Andreessen July 10 1992 Uniform Grids 3DDDA Comments by John Spackman March 1 1991 uniform grid traversal Comparison of Ray Traversal Methods by Erik Jansen February 2 01 1994 results on grid method Fast Raytracing via SEADS by John Chapman and Wilfrid Lefer February 2 01 1994 grids and nested grids Additional Notes on Nested Grids by Kris Klimaszewski Andrew Woo Frederic Cazals and Eric Haines December 2 1997 Recursive Grids and Ray Bounding Box Comments and Timings by Andrew Woo December 2 1997 Comparison of Hierarchical Grids by Vlastimil Havran and Filip Sixta June 25 1999 Quicker Grid Generation via Memory Allocation by Eric Haines June 25 1999 Non Uniform Grids NuGrid results by Mike Gigante July 10 1992 nonuniform grids NuGrid Update by Mike Gigante August 26 1992 Adaptive Trees Octrees k d BSP Octrees Response to the teapot in a football stadium Problem by Andrew Glassner March 1 1988 hybrid of octree amp bounding volume Linear time Voxel Walking for Octrees by Jim Arvo March 26 1988 nice article see also similar ideas by Erik Jansen Octree edited by Eric Haines October 27 1989 Octrees and Whatnot by Steve Worley and Eric Haines May 16 1995 best way to build octree hierarchy also about HBV Octree Neighbor Finding by Andrew Glassner Francois Sillion and Paul Heckbert Octree Traversal and the Best Efficiency Scheme by Ben Hutchison Eric Haines Hanan Samet and Erik Jansen A Summary of Octree Ray Traversal Algorithms by Vlastimil Havran December 21 1999 Additional Octree Traversal Notes by John Spackman Erik Jansen and Joel Welling December 21 1999 Binary Space Partitioning BSP Trees Re Linear time Voxel Walking for BSP by Erik Jansen April 6 1988 good see also Arvo s octree article above Recursive Ray Traversal by Erik Jansen and Wim de Leeuw July 10 1992 concludes that recursive traversal of BSP data structure is faster than incremental BSP Traversal Errata by Kelvin Sung August 26 1992 Hierarchical Bounding Volumes HBV s Bounding Volume Hierarchy edited by Eric Haines October 27 1989 Bounding Box Intersection edited by Eric Haines October 27 1989 BVH Traversal Results by Nicholas Wilt July 10 1992 Bounding Volumes Sphere vs Box by Tom Wilson January 27 1993 Tight Bounding Spheres Minimum Bounding Sphere continued by Jack Ritter June 21 1989 fast algorithm to find a near optimal sphere around n points Minimum Bounding Sphere Program by Marshall Levine October 13 1989 Solution to Smallest Sphere Enclosing a Set of Points by Tom Shermer January 2 1990 references to computational geometry papers that find smallest sphere Goldsmith Salmon Automatic Creation of Bounding Volume Hierarchies Goldsmith Salmon Hierarchy Building by Jeff Goldsmith March 8 1988 Automatic Creation of Object Hierarchies for Ray Tracing by Eric Haines April 6 1988 lengthy Re Goldsmith and Eyes by K R Subramanian November 4 1988 optimization for eye rays An Improvement to Goldsmith Salmon by Jeff Goldsmith March 20 1990 Faster Bounding Volume Hierarchies by Brian Smits and Eric Haines September 28 1993 using randomization and multiple trials to find the best clustering useful for both Goldsmith Salmon and Kay Kajiya Kay Kajiya Intersection of Slabs Method Sorting Unnecessary on Shadow Rays for Kay Kajiya by Eric Haines and Mark VandeWettering September 11 1988 More Comments on Kay Kajiya by Jeff Goldsmith Eric Haines October 3 1988 Question Kay and Kajiya Slabs for Arbitrary Quadrics by Thomas C Palmer January 2 1990 Convex Polyhedron Intersection via Kay amp Kajiya by Eric Haines October 1 1990 Other Fancier Spatial Data Structures Partial list Constant Time Ray Tracing by Tom Wilson Eric Haines Brian Corrie and Masataka Ohta August 26 1992 Ray Classification for Animation by Matt Quail Mailboxes and Other Miscellaneous Speedups for Spatial Data Structures Avoiding Re Intersection Testing by Eric Haines March 20 1990 mailboxes Public Ray Tracing Software Partial list At Long Last Rayshade v4 0 is Available for Beta testing by Craig Kolb March 1 1991 POV Ray August 2 1995 Free Radiosity Renderer inc C source code by Ian Ashdown January 27 1997 Benchmarking Ray Tracers Comparison of Kolb Haines and MTV Ray Tracers Part I by Eric Haines January 2 1990 using grids HBV Comments on Last Issue by Mark VandeWettering March 20 1990 MTV ray tracer switched to Goldsmith Salmon New Version of SPD Now Available by Eric Haines March 1 1991 Standard Procedural Databases for benchmarking ray tracers Ray Tracer Races Round 2 by Eric Haines July 1 1993 An Enhanced Standard Procedural Databases Package by Eric Haines September 28 1993 SPD Platform Compiler Results by David Hook September 28 1993 Recursive Grids and Ray Bounding Box Comments and Timings by Andrew Woo December 2 1997 Comparison of Spatial Data Structures and Ray Tracers Poll What efficiency schemes have you used August 29 1989 Algorithm Order Discussion by Masataka Ohta Pete Shirley October 1 1990 computational complexity 5D vs BSP and ABVH by Nguyen Duc Cuong January 18 1996 Comparison of Hierarchical Grids by Vlastimil Havran and Filip Sixta June 25 1999 A Summary of Octree Ray Traversal Algorithms by Vlastimil Havran December 21 1999 Optimizing Ray Tracing General Efficiency Tricks by Eric Haines March 26 1988 little optimizations for ray tracing Efficiency Schemes edited by Eric Haines October 27 1989 similar to the previous Comments on Various Ray Tracing Speedups by Andrew Woo July 1 1993 Faster Refraction Formula and Transmission Color Filtering by Xavier Bec January 21 1997 Z buffer and Raytracing by Sam Paik December 21 1999 Importance for Ray Tracing by Per Christensen December 21 1999 Optimizing Shadow Testing A Suggestion for Speeding Up Shadow Testing Using Voxels by Andrew Pearce October 1 1990 Shadow Testing Simplification by Tom Wilson March 1 1991 Fast Shadow Testing Bibliography by Slawomir Kilanowski June 26 1997 Ray Surface Intersection Polygons Point in Polygon Testing Ray Triangle Intersection with Barycentric Coordinates by Rod Bogart Jeff Arenberg November 4 1988 Point in Polygon One More Time by Mark Vandewettering Eric Haines Edward John Kalenda Richard Parent Sam Uselton Zap Andersson and Bruce Holloway October 1 1990 Quadrant Counting Polygon In Out Testing by Craig Kolb Ken McElvain October 1 1990 Point in Polygon September 2 1992 Bounding Areas for Ray Polygon Intersection by Steve Worley and Eric Haines January 27 1993 Simple Fast Triangle Intersection by Chris Green and Steve Worley January 27 1993 Simple Fast Triangle Intersection part II by John Spackman July 1 1993 Point in Polygon the Quick Answer by Wm Randolph Franklin and Eric Haines February 2 01 1994 short code A Storage Trick for 3D Polygons by Eric Haines July 6 1994 save 4 or 8 bytes per vertex Detecting Points on the Edge of a Polygon by Eric Haines June 26 1997 Rendering Unflat Polygons by Eric Haines June 26 1997 Even Faster Crossings Test by Philip Brown December 2 1997 Cyrus Beck as a Ray Polygon Tester by David Rogers December 2 1997 Origins of Point In Polygon Take 10 by Neil Stewart July 11 1998 Quadric Surfaces Primitive Box Overlap Testing by Ruud Waaj Paul Heckbert Andrew Glassner March 8 1988 which voxels should list a given primitive More Comments on Tight Fitting Octrees for Quadrics by Jeff Goldsmith March 26 1988 C Code for Intersecting Quadrics by Prem Subrahmanyam March 20 1990 Tori and Quartic Root Finding Quartic Roots and Tori January 2 1990 Correct Roots for Torus Intersection by Haakan Zap Andersson Joe Cychosz July 10 1992 Faster Ray Torus Intersection by Eric Haines July 6 1994 Parametric Surfaces e g Bicubic Patches Spline Surface Rendering and What s Wrong with Octrees by Eric Haines January 15 1988 how to choose octree subdivision criteria for parametric surfaces Spline Surface Intersection edited by Eric Haines October 27 1989 Ray with Bicubic Patch Intersection Problem Wayne Knapp John Peterson et al July 13 1990 Spline Patch Ray Intersection Routines by Sean Graves August 26 1992 Ray Tracing Procedural Parametric Surfaces by Mark VandeWettering Stephen Westin and Matt Pharr December 21 1999 Implicit Surfaces A Short Note on Kalra and Barr s Algorithm by Andrei Sherstyuk July 11 1998 Ray Tracing General Ray Transformation by Kendall Bennett January 27 1993 generating eye rays Shadows from Refractive Objects by Steven Collins September 28 1993 Shadows Through Transmitters by Eric Haines Greg Ward Alexander Enzmann Stephen Coy and David Hook September 28 1993 Obfuscated Postscript Ray Tracer by Takashi Hayakawa July 1 1993 this is insane Distribution Ray Tracing by Marc Levoy July 6 1994 email to Levoy s graphics class Interacting with Ray Traces by Bert Peers January 18 1996 Total Internal Reflection by Eric Haines Greg Ward and Chris Larson January 18 1996 Ray Tracing What is it Good For by Arijan Siska January 21 1997 Progressive Ray Tracing and Fast Previews by Eric Haines January 21 1997 More on Rendering Bugs by Eric Haines June 26 1997 Raytracker Tricks by Hakan Zap Andersson December 2 1997 Mirror Reflectivity by Greg W Larson December 2 1997 Recent Ray Tracing European Conference Papers July 11 1998 Attenuation in Water by Bretton Wade and Ian Ashdown July 11 1998 Raytracing Gloss Translucency by Peter Eastman Matt Pharr and Stephen Westin December 21 1999 Soft Shadows True Integration of Linear Area Lights by Kevin Picott January 2 1990 Ray Tracing Penumbral Shadows Prem Subrahmanyam July 13 1990 Soft Shadow Ideas compiled by Derek Woolverton August 26 1992 Fast Soft Shadows by Steve Worley January 21 1997 Great Shadow Hack summarized by Eric Haines June 25 1999 Texture Mapping Projective Mapping Explanation by Ken Turk Turkowski October 13 1989 A Note on Texture Sampling by Eric Haines March 20 1990 texture filtering Getting Rid of the Divide by Frank Compagner and Bob Pendleton January 18 1996 Synthetic Textures and Genetic Algorithms by Steve Worley January 21 1997 The Curse of the Monkey s Paw by Eric Haines June 26 1997 Lifting the Monkey s Paw Curse by Jeff Goldsmith December 2 1997 Antialiasing Antialiasing Issues by Arijan Siska October 13 1994 Raytracker Tricks by Hakan Zap Andersson December 2 1997 Radiosity and Global Illumination Radiosity via Ray Tracing by Pete Shirley October 1 1990 Simple Databases Available For Rendering Global Illumination by Peter Shirley July 6 1994 Hierarchical Techniques for Glossy Global Illumination by Per Christensen January 18 1996 What s Wrong with Monte Carlo Methods by Nguyen D C JuHu Pete Shirley Stephen Westin and Eric Veach June 26 1997 European Graphics Tour by Nelson Max June 26 1997 Declassified CIA BRDFs now available by Greg Ward Larson December 2 1997 Modeling Correcting Normal Direction by Gavin Bell October 13 1994 Eccentricity Effects in Blobs by Alfonso Hermida December 2 1997 Polygon Shrinking by Dave Rusin and Jeff Erickson July 11 1998 Correcting Normals on Flipped Polygons by Kev Duncan Colvin Steve Baker John Nagle Dennis Jiang Alejo Hausner and Eric Haines July 11 1998 Miscellaneous Order of Rendering and Fast Texturing by Bruno Levy Dan Piponi and Bernie Roehl May 16 1995 per pixel cost of Gouraud Phong texture mapping Cells and Portals Resources by Randy Stiles January 27 1997 Pl uuml cker Coordinates by Jeff Erickson December 2 1997 Testing a Matrix for Uniform Scaling by Charles Iliya Krempeaux and Eduardo Marreiros December 2 1997 Pl uuml cker Coordinate Tutorial by Ken Shoemake July 11 1998 Info on REYES Algorithm by Robert Speranza and Tom Duff July 11 1998 What s Mesa by Brian Paul July 11 1998 Multithreading Mesa by John Stone July 11 1998 Book Reviews alphabetic Advice to Authors by Anonymae advice on writing a book Good Computer Graphics Books by Brent McPherson 3D Computer Animation by John Vince 3D Graphic File Formats A Programmers Reference by Keith Rule 3D with HOOPS by William Leier and Jim Merry Advanced Rendering and Animation Techniques Theory and Practice by Alan and Mark Watt Adventures in Ray Tracing by Alfonso Hermida The Algorithm Design Manual by Steven Skiena Computational Geometry in C by Joseph O Rourke Computer Graphics by Don Hearn and Pauline Baker CRC Handbook of Discrete and Computational Geometry edited by Jacob Goodman and Joseph O Rourke Create Stereograms on Your PC by Dan Richardson Encyclopedia of Graphics File Formats by James Murray amp William vanRyper The Geometry Toolbox by Gerald Farin and Dianne Hansford Graphical Treasures of the Internet by Bridget Mintz Graphics File Formats by David Kay and John Levine Graphics Gems IV edited by Paul Heckbert Graphics Programming with Direct3D by Robert Glidden Hidden Images Making Random Dot Stereograms by Bob Hankinson and Alfonso Hermida An Introduction to Implicit Surfaces edited by Jules Bloomenthal An Introduction to Ray Tracing edited by Andrew Glassner The Inventor Mentor by Josie Wernecke Jim Blinn s Corner by Jim Blinn Making Movies on Your PC by David Mason and Alexander Enzmann Numerical Recipes by William Press et al Object Oriented Ray Tracing in C by Nicholas Wilt Photorealism and Ray Tracing in C by Christopher Watkins Stephen Coy and Mark Finlay Photorealistic Rendering in Computer Graphics edited by Pere Brunet and Frederik Jansen Practical Ray Tracing in C by Craig Lindley Procedural Elements for Computer Graphics 2nd edition by David Rogers Principles of Digital Image Synthesis by Andrew Glassner Programming for Graphics Files in C and C by John Levine Radiosity A Programmer s Perspective by Ian Ashdown Radiosity and Global Illumination by Francois Sillion and Claude Puech Ray Tracing Creations by Drew Wells and Chris Young Rendering with Radiance The Art and Science of Lighting Visualization Greg Ward Larson and Rob Shakespeare Stereogram Programming Techniques by Christopher Watkins amp Vincent Mallette Texturing and Modeling A Procedural Approach edited by David Ebert Tricks of the Graphics Gurus by Dick Oliver Scott Anderson James McCord Spyro Gumas and Bob Zigon Ray Tracing Resource Roundups December 21 1999 June 25 1999 July 11 1998 December 2 1997 June 26 1997 January 21 1997 January 18 1996 August 2 1995 May 16 1995 January 23 1995 October 13 1994 July 14 1994 July 6 1994 February 2 01 1994 February 2 1994 September 28 1993 July 1 1993 January 27 1993 August 26 1992 July 10 1992 Index created by Paul Heckbert 5 Oct 1996 Updated by Eric Haines 21 Dec 1999 Index to Ray Tracing News Index to Ray Tracing News Index to Ray Tracing News Index to Ray Tracing News Index to Ray Tracing News Index to Ray Tracing News Index to Ray Tracing News Index to Ray Tracing News Index to Ray Tracing News Index to Ray Tracing News http www acm org tog resources RTNews html rtn index html http www acm org tog resources RTNews html rtn index html http www acm org tog resources RTNews html rtn index html http www acm org tog resources RTNews html rtn index html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv11n1.html%%==%%Ray Tracing News, Volume 11, Number 1%%==%%Ray Tracing News "Light Makes Right" July 11, 1998 Volume 11, Number 1 Compiled by Eric Haines , 1050 Craft Road, Ithaca, NY 14850 ...%%==%%109474%%==%%21 Dec 99%%==%% Ray Tracing News Light Makes Right July 11 1998 Volume 11 Number 1 Compiled by Eric Haines 1050 Craft Road Ithaca NY 14850 erich acm org Opinions expressed are mine not Autodesk s All contents are copyright c 1997 1998 all rights reserved by the individual authors Archive locations text version at http www acm org tog resources RTNews text HTML at http www acm org tog resources RTNews html You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Ray Tracing Roundup Pl uuml cker Coordinate Tutorial by Ken Shoemake A Short Note on Kalra and Barr s Algorithm by Andrei Sherstyuk Origins of Point In Polygon Take 10 by Neil Stewart Info on REYES Algorithm by Robert Speranza and Tom Duff Polygon Shrinking by Dave Rusin and Jeff Erickson Correcting Normals on Flipped Polygons by Kev Duncan Colvin Steve Baker John Nagle Dennis Jiang Alejo Hausner and Eric Haines What s Mesa by Brian Paul Multithreading Mesa by John Stone Recent Ray Tracing European Conference Papers Attenuation in Water by Bretton Wade and Ian Ashdown Introduction First the Ray Tracing Roundtable which is essentially a schmooze fest for graphics programmers will be on Thursday at SIGGRAPH at the Peabody Hotel across the street from the convention center in Bayhill Rooms I amp II from 6 15 to 7 45 pm This is the dead time between when papers and panels end and when the reception starts Usual about 50 people gather introduce themselves then break up and talk until time s up An extremely cool idea was implemented at the Java One conference this year thanks to John Foust for passing on a report about it The Java Rings given to attendees each held a microprocessor which ran a Java VM Here s a quote from http java sun com features 1998 03 rings html go there for images and more info quot Another applet on the ring calculated pixel values for a 3x3 tile that would contribute to a large fractal image being computed by Java Rings throughout the show Each time an attendee would snap a ring into a reader the calculated pixel values would be loaded onto a server collecting tiles to form a kind of fractal quot quilt quot The corresponding host application on the server would display the aggregate image throughout the conference allowing people to watch the fractal grow quot I know another graphics application that s extremely parallelizable and the code can fit on a business card It would be a challenge to see if there s enough room on a ring for ray tracing a procedural model Really for each ring 9 pixels of a fractal image were probably computed in less than a second A nice compact and complex database would be an interesting application 4K bits of memory is not a lot but it would be fun to try There are 20 million of these processors deployed by the manufacturer many on the ears of cows and whatnot quot Yep this barn here produces 5000 gallons and traces 10 million rays a day quot On another front one of the more interesting sites I ve come across is http www cut the knot com It s a pleasant collection of mathematical recreations with java applets helping to explain various phenomena and theorems I particularly love the shapes of constant width page http www cut the knot com do you know cwidth html Java with a purpose used instructively and non obtrusively This issue has a bias towards geometric operations I m privileged to present Ken Shoemake s tutorial on Pl uuml cker coordinates not available anywhere else There is also material on shrinking polygons and correcting surface normals This issue also contains a huge roundup of links to resources Some amazing things are in there one of my favorites being the Hungarian model converter that almost no one s heard of but that converts 90 file formats In the next issue there will be a lot of interesting tidbits from various people including new SPD timings In terms of just plain speed Sami Perttu tried Rayshade 4 0 with lots of tuned compiler options in gcc and Linux 2 0 and rendered the Sphereflake in 79 seconds on a 200 MHz Pentium John Stone has been designing and implementing a parallel processing ray tracer that is extremely fast He told me Sphereflake on a 4 processor DEC Alpha ran in 4 5 seconds And on a 50 processor SGI Origin2000 at NCSA it ran in 1 5 seconds The previous record that I m aware of was 16 seconds set by the AT amp T Pixel Machine in 1988 I m not sure what to be more amazed by John s time I recall back when it took me hours to render Sphereflake or Sami s a Pentium is one fifth the speed of the Pixel Machine at less than one hundredth the price quot If cars were computers they d now get 10 000 miles a gallon go 6 000 miles per hour and cost 5 quot and all that of course they d also inexplicably blow up once a year killing all occupants back to contents Ray Tracing Roundup There are way too many links here partly because there are way too many cool resources on line partly because I ve been collecting these for about a year without catching up and writing them up here Happy wading SIGGRAPH 98 Papers With the help of Tim Rowley I ve gathered a lot of links on the electronic versions of the papers that will be presented at SIGGRAPH this year They are available at http www imagis imag fr Membres Fredo Durand Book sig98 html Not all papers are available at the moment if you know a link I have forgotten or missed please let me know By the way these are part of my collection of computer graphics links where you can find web pages of researchers labs conferences image galleries code etc http www imagis imag fr Fredo Durand book html Fredo Durand lt Fredo Durand imag fr gt There are a great many links here well worth a look Especially useful is the list of researchers and their homepages EAH Algorithms Come Get Your Algorithms Bookmark this site it s pretty cool when you re thinking about solving a problem with software http www cs sunysb edu algorith The author of the site Steven Skiena has a book The Algorithm Design Manual that I bought down at the UW bookstore It s great to page through when you re noodling on a problem and trying to break it down and see if other s have solved it in an efficient way It s the first good book I ve seen devoted to a practical application of over 75 classic algorithms vs the mathematical analysis and proof of correctness of algorithms The book comes with a CD that contains an entire HTML version of the book completely hyperlinked for cross references and searchable The CD also has over 30 hours of audio lectures in real audio format complete with HTML lecture notes for an entire semester course on algorithms The author did this for a course at SUNY and tossed it in snippet passed on by John Foust lt jjf viewpoint com gt EAH Numerical Recipes The book Numerical Recipes is now online at http www nr com in Postscript and PDF forms Figures seem to be missing from the PDF files I ve looked at but you can t beat the price In a reverse of normal practice the text is free for viewing but the code must be purchased For a critique of the material presented in Numerical Recipes see http math jpl nasa gov nr nr html Some of the users comments I know to be dated for example the HEAPSORT bug I reported years ago and was fixed in the 1994 edition But it s still good to be aware that the methods given in Numerical Recipes are not the final word Rendering with Radiance book Greg Ward Larson and Rob Shakespeare publisher Morgan Kaufmann have written a detailed and well produced book on the use and algorithms behind the Radiance rendering system http radsite lbl gov radiance Code examples documentation and more are included on a CD ROM in the book In case you hadn t heard Radiance is an amazing free software system for physically accurate lighting design The book starts with tutorials then discusses different sorts of applications lighting analysis daylight simulation stage lighting etc and ends with 120 pages on calculation methods These last chapters cover the system in much more depth than Greg Ward s original SIGGRAPH 88 paper as well as discuss possible errors extensions and other developments since that time The Table of Contents is available at http www mkp com books catalog 1 55860 499 5 asp The Geometry Toolbox Authored by Gerald Farin and Dianne Hansford A K Peters Ltd this book looks to be useful for teaching analytic geometry for computer graphics What is appealing to me is the copious use of illustrations to build an intuition about what the various operations actually do Two sample chapters along with the table of contents and index are available online at http eros cagd eas asu edu farin gbook gbook html This is a book I am definitely getting at SIGGRAPH How can you turn down a book with a section called quot Eigen Things quot Seriously skimming the sample chapters it looks to be a good combination of solid equations and explanatory text and illustrations perfect for computer graphics programmers CRC Handbook of Discrete and Computational Geometry This book released in July 1997 is edited by Jacob Goodman and Joseph O Rourke who is the FAQ maintainer and frequent contributor to comp graphics algorithms For an overview and sense of topics covered see http www crcpress com cgi bin SoftCart exe catalog 8524 HTM E storecrc If you already have the book the errata listing is at http cs smith edu orourke books errata html Error in Advanced Animation and Rendering Techniques Page 90 of AART by Alan and Mark Watt has an errror verified by others EAH B0 u 1 u cubed 6 should actually read B0 u 1 u cubed 6 I have the proof if anyone cares Chris Anthony lt jsc lds co uk gt Links to links to links to http www iro umontreal ca ratib code redirect cgi Goto cg htm a nice collection of computer graphics research related links especially papers http mambo ucsc edu psl cg html you have probably seen this wonderful site already a collection of links to computer graphics research centers Less known there is also a set of links specifically for facial animation research http mambo ucsc edu psl fan html http www 3dlinks com Ultimate 3D Links mostly for users of computer graphics vs programmers http 3dup com a searcher for links specifically for 3D graphics The babelfished press release said quot We know accurately what the graphic artist need and unfortunately we cannot get rid of our bugging creative ideas quot We all know how that is Anyway easy to type and worth a try http home3 swipnet se w 34077 dev index htm a page for plug in developers with links to interesting code bits such as combustion and particle effects http www2 inetdirect net hastings art html Utilities lots of links for users of various free graphics software packages http dns uncor edu links siterepo htm an incredibly thorough collection of links to free software and code on the web http dns uncor edu links siteos htm the thorough collection grouped by operating system CP M lives thanks to Dan Hastings lt hastings inetdirect net gt for these last three EAH Kris Klimaszewski s Accelerated Ray Tracer This ray tracing acceleration scheme was discussed by Kris and others in RTNv10n3 For test images run times and more see his page at http home sprynet com sprynet kriskk RayTrace htm Rayshade on Linux and Windows98 I have an unofficial Linux port of Rayshade I have tested it under Linux gcc and Windows98 msvc It works under both of those platforms but I am not certain that it will function under the platforms on which it has traditionally been used The majority of the porting effort was converting the old style Configure script to the newer style gnu configure script generated by autoconf If you are interested in it I would appreciate feedback as to whether or not it still works under the platforms on which it was traditionally used You may find the ports at the following location http www primenet com jarney rayshade Jonathan S Arney lt jarney primenet com gt Laser Laser is a Scheme like 3D scene language with a VR browser and ray tracer working with it Interesting to see a networked ray tracer available for work online http web mit edu lbw www laser laser html Ray Traced Evolution L Systems software with a ray tracer and an ability to export to POV Ray and NFF formats among others It s at http www rz tu ilmenau de juhu GX RTEvol An interesting Java project sorry no code is located at http www cs brown edu people jks thesis html It s a ray tracer with fast lighting editing reminiscent of Sequin s work There s also an interesting summary of what Pixar teaches at their technical director s course http www cs brown edu people jks pixar pixar html History of Computer Graphics A medium sized history of computer graphics starts at http www disney com DisneyVideos ToyStory about history 1960s htm It ll take maybe a half hour to read through and you ll be better informed for it There s a stress on the film industry in the history and any time something to do with Disney or Pixar appears it s in bold but it s nonetheless worthwhile reading The free ray tracing bibliography at http www acm org tog resources bib has been updated A searchable version of this bibliography is located at http liinwww ira uka de bibliography Graphics ray html Usenet Clippings and Links If you read USENET you often find articles worth saving around I ve kept a bunch of these from the comp graphics newsgroups over the years When I hit some new topic I need to know about it s worth grepping around this pile of files for tidbits Steve Hollasch is more organized than I am in this He has created a sort of quot best of comp graphics quot index of posts and other material he feels are worth keeping available It s huge at http research microsoft com hollasch cgnotes Graphics Tutorials and Code There are many great documents and code bits at David Eberly s site http www cs unc edu eberly It s an impressive collection of material Boris Kogan lt bkogan j51 com gt comments quot On his site you will find a ps file describing spline and quaternion calculus in gruesome detail Above that for the coder in you he also provides a rather well implemented if not complete set of source files demonstrating the technique I say not complete because Dave chose not to deal with rotations gt 360 degrees and constraints are not covered at all But these are minor points which can easily be overcome quot Franklin s Tutorials Long time contributor to the field of computer graphics Wm Randolph Franklin has a number of tutorials on line at http www ecse rpi edu Homepages wrf geom top html There s a near ultimate this problem s never done page on my favorite point in polygon as well as tutorials on 3D and 4D rotations and some other common FAQs Tutorials on bump mapping NURBS particle systems and many other topics are on line at http www cs wpi edu matt courses cs563 under the quot Presentations quot section These pages are presentations given by students taking an advanced computer graphics course so don t expect expert information but the tutorials seemed sound enough Tutorials on all sorts of computer graphics related subjects are also available at http www scs ryerson ca h2jang gfx c html The tutorials are a little pedantic and don t give enough context for my tastes but the breadth of topics covered is impressive and there are reasonable links and paper references in the articles A more hands on set of tutorials on various effects and algorithms particularly for games programming can be found at http www users globalnet co uk tomh All sorts of tutorials algorithms and other material is available at Paul Bourke s site http www mhri edu au pdb I particularly liked his online explanations of analytical geometry operations http www mhri edu au pdb geometry An interactive Java based tutorial from Brown University on color perception is at http www cs brown edu research graphics research illus spectrum A wavelets tutorial based for the most part on the wavelets course given at SIGGRAPH 96 is available at http www cs wpi edu matt courses cs563 talks Wavelet Presentation A nicely illustrated pair of tutorials on compositing for video and other applications are at http www tjfx demon co uk part one html http www tjfx demon co uk part two html A large number of tutorials for beginning users of 3D computer graphics software especially for web designers are located at http www webreference com 3d Other resources can be found in the education area at SIGGRAPH s site http www education siggraph org docs C and I htm Schools for 3D graphics http www pixar com jobsite list of schools html has a good list of post secondary options for both technical directors and animators Tom Duff lt td pixar com gt Chris Hecker s homepage Is at http www d6 com users checker There are worthwhile articles and tutorials here There is quite a lot on physical simulation of rigid body dynamics and a good series of articles on practical perspective texture mapping on the PC The PC compilers articles I found particularly interesting Quake 3 Lighting and Shading Techniques There are two nicely done articles on the various multitexture shading methods used in the upcoming Quake 3 program at http www bigpanda com trinity Funding If you have a project that you think might benefit the members of SIGGRAPH you might be able to get funding for it http www siggraph org othercom special projects For those who are interested my thesis is now available online Robust Monte Carlo Methods for Light Transport Simulation Eric Veach Ph D dissertation Stanford University December 1997 http graphics stanford edu papers veach thesis It describes techniques such as Metropolis light transport multiple importance sampling and bidirectional path tracing in more detail than in the corresponding papers It also includes quite a bit of new material including studies of the inherent limitations of unbiased Monte Carlo methods new variance reduction techniques the history of reciprocity principles and important exceptions to them the derivation of a new reciprocity principle that applies to materials that transmit as well as reflect light i e BTDF s as well as BRDF s You can find the abstract and table of contents on the web page as well as Postscript and PDF versions of the thesis Eric Veach lt ericv graphics stanford edu gt Radiance related papers Many papers relevant to Radiance radiosity and ray tracing are now available online at http radsite lbl gov radiance papers These include The RADIANCE simulation software in the architecture teaching context by Raphael Compagnon A Visibility Matching Tone Reproduction Operator for High Dynamic Range Scenes LBNL Report 39882 Making Global Illumination User Friendly 1995 Eurographics Workshop on Rendering The RADIANCE Lighting Simulation and Rendering System SIGGRAPH 94 Energy Preserving Non Linear Filters SIGGRAPH 94 Measuring and Modeling Anisotropic Reflection SIGGRAPH 92 Irradiance Gradients 1992 Eurographics Workshop on Rendering Adaptive Shadow Testing for Ray Tracing 1991 Eurographics Workshop on Rendering A Ray Tracing Solution for Diffuse Interreflection SIGGRAPH 88 Vienna University of Technology papers A number of technical reports concerning ray tracing are available online http www cg tuwien ac at research TR 95 TR 186 2 95 06Abstract html Ray Tracing with Extended Cameras by Helwig Loeffelmann Eduard Groeller http www cg tuwien ac at research TR 95 TR 186 2 95 05Abstract html A Distortion Camera for Ray Tracing by Pietro Acquisto Eduard Groeller See http www cg tuwien ac at research TR for a full list of papers available online New Perspectives It s cheering to know that old papers in hard to obtain proceedings can sometimes be found on the web For example the paper quot New Perspectives for Image Synthesis quot originally published in Compugraphics 92 is on the first author s web page no images though http www emse fr mbeig It discusses different types of perspective transformations used in art which can become part of a ray tracer That is it truly is about new perspectives it s not some fluffy quot what is new in the field in other words what am I doing quot paper My old Master s thesis from 1992 has made it to the Web http www graphics cornell edu westin Also available are 92 SIGGRAPH paper full text and images Images from the paper thesis and SIGGRAPH talk Microgeometry for a Gaussian rough surface used in the paper and the thesis Stephen Westin lt westin graphics cornell edu gt 3D Site newsletter http www 3dsite com n sites 3dsite newsletter The Rendering Times An ezine for users of POV Ray and Topas http www spake org rtimes Wavelet Digest http www wavelet org wavelet be over there now New Journal The International Journal of High Performance Computer Graphics Multimedia and Visualisation has been announced For details see http www bath ac uk maxhpcg Near Real Time RT on a Pentium part II RTNv10n3 gt A fast 1 2 fps on a Pentium 90 ray trace demo with reflections and gt shadows on curved surfaces can be found at gt ftp ftp cdrom com pub demos demos 1997 j jlantani zip gt It was faster than expected At demoscene there are more attempts at realtime raytracing For example ftp ftp cdrom com pub demos demos 1995 c chrome zip my work ftp ftp cdrom com pub demos demos 1996 c chrome2 zip my work ftp ftp cdrom com pub demos demos 1996 i ign desp zip ftp ftp cdrom com pub demos demos 1996 m mfx tgr2 zip ftp ftp cdrom com pub demos demos 1997 m mfx gma zip ftp ftp cdrom com pub demos demos 1997 s sk iflic zip Tamas Kaproncai lt tomcat rs1 szif hu gt POVRay Webring POVRay Ring is a group of sites dedicated to POVRay image galleries file archives tutorials quot howto s quot project info source code patches and more but always related in some way or another to POVRay Currently there are over 75 sites and more to come so if you are looking for something about POVRay you should check the ring maybe it is there faster than other ways of searching If you have a page that meet the requirements it is really easy to join and free fill out a form and put some HTML code in the page To keep the sites joined we use the services of WebRing The POVRay Webring homepage is http www webring org cgi bin webring home amp ring povrayring The ring is administered by Guillermo S Romero lt famrom ran es gt The Webring system can be reached at http www webring org Guillermo S Romero lt famrom ran es gt To see an index of the POVRay web ring visit http www webring org cgi bin webring ring povrayring list There are many other rings relating to computer graphics Visit http www webring org and look under computers and graphics Helios on Unix Dr Ugur Gudukbay gudukbay CS Bilkent Edu TR and his students at the Department of Computer Engineering and Information Science Bilkent University Ankara Turkey have kindly ported my hopelessly Windows centric Helios Radiosity Renderer to the UNIX operating environment If anyone is looking for C source code for a basic but effective progressive radiosity renderer you can download helios tar tar from http www cs bilkent edu tr gudukbay home html Ian Ashdown lt byheart direct ca gt Radiosity amp VRML http www tisny com vrml eai radiosity Jason Key lt jasonk eye com gt Pretty wild run radiosity solutions over the web and see the output as VRML It takes awhile to load the page if you stop it early go to the bottom of the page for the link to run the radiosity Java applet EAH Howell Book online I just found that Jack Howell s quot Catalog of Radiation Heat Transfer Configuration Factors quot is now on line it used to be only in a book that you could only find in some Engineering libraries It s at http sage me utexas edu howell Section C is not completely filled in so perhaps it is still a work in progress At least now everyone can have access to infamous cow factors http sage me utexas edu howell sectionb b 63 html Holly Rushmeier lt holly watson ibm com gt In response to a query for wavelet radiosity on triangular meshes Philippe Bekaert and I have adapted wavelet radiosity to triangular meshes I think there are also some triangular coefficients listed in Peter Schroeder s thesis I have a technical note online at http www cs cmu edu radiosity notes note coeffs ps pdf which discusses wavelet radiosity operations in a matrix oriented setting lists the necessary coefficients for these operations and gives some examples of how to use them It includes coefficients for the M 2 3 F 2 3 bases for both quadrilaterals and triangles You may also want to download Philippe et al s RenderPark and or my rad radiosity program and try looking at the code They can be found at http www cs kuleuven ac be cwis research graphics RENDERPARK http www cs cmu edu radiosity dist Andrew Willmott lt a willmott cs cmu edu gt We have full hemispherical BRDF data for blue latex paint available at our web site http www graphics cornell edu online measurements The data were measured by Sing Foo and we used them in our Siggraph 97 paper quot Non Linear Approximation of Reflectance Functions quot I ve just added some graphs of the function in the plane of incidence to give a first impression of its shape It s an interesting start for experiments Eric Lafortune lt eric graphics cornell edu gt 1998 Lightscape Image Contest Some more breathtaking radiosity magic from Lightscape users These are all new and it s well worth the while to have look http www lightscape com Contest98 Jason Key lt jasonkey mindspring com gt I usually don t list commercial sites but these are downright amazing The winner s reality vs rendering comparison is great EAH The Visualization Toolkit The code from the book The Visualization Toolkit An Object Oriented Approach To 3D Graphics is available online at http nswt tuwien ac at htdocs vtk It s free and looks impressive If anyone has had experience with this system please send a review SPD for Mac The Standard Procedural Databases software is available for the Mac at http www geocities com SiliconValley Horizon 4977 macspd html due to the efforts of Eduard Schwan Clouds Some gorgeous computer generated clouds can be seen at http www seas gwu edu student sylee cloud html Gamma Correction A place for all your gamma correction needs http www cgsd com papers gamma html Some interesting tutorials links and more One of the better links is to the site by Charles Poynton who has organized a color management course at SIGGRAPH this year http www inforamp net poynton Poynton colour html Encyclopedia of Graphics File Formats book updates O Reilly s update page which has new chapters for the second edition i e has new formats which have come out http www ora com centers gff index htm The FAQ by one of the authors on file formats is at http www ora com centers gff gff faq index htm File Formats Galore A huge collection of file format documentation is available at http www wotsit org I ve seen other file format collections but this one is by far the most wide ranging including the usual 2D and 3D formats movie formats plus formats for spreadsheets sound printers and all sorts of others Unfortunately there are no links to converters or code just documentation For just 3D file formats you might want to try http www octobernet com brian graphics 3D formats html It hasn t been updated in a few years but it s pretty comprehensive Metastream A new streaming 3D file format for the web is at http www metastream com Impressive demos the models are way smaller than the same models saved as VRML which still suffers from the lack of a binary file format It will be interesting to see if this new format takes off whether it competes with or complements VRML and also Microsoft s Chrome initiative Free Polygon Tessellators take 2 In RTNv10n2 I summarized a number of free tessellator resources out there At that time I commented that Narkhede amp Manocha s tessellator did not handle holes Now the code has been improved to do so according to their web page Find their explanation and code at http www cs unc edu dm CODE GEM chapter html gpc Someday we will run out of TIA s three initial acronyms Before that happens gpc is a generic polygon clipper library clipping anything against anything The gpc polygon clipper handles degenerate cases cleanly difference union and intersection supported all polygons may have holes multiple contours self intersect etc no clockwise anticlockwise vertex ordering required gives contour vertex or tristrip output Find the source and impressive examples at http www cs man ac uk aig staff alan software There are also links there to other polygon clippers Lib3d Lib3d is a high performance 3d C library distributed under the GNU Library General Public License Lib3d implements sub affine texture mapping Gouraud shading and Z buffer rasterization with support for 8 16 and 32 bit depths Lib3d has been developed under Linux and has been tested with DOS Solaris and OSF 1 on Dec alphas Performance is a major design goal for Lib3d Compared to other free renderers Lib3d is about 3 5 times faster than TAGL v22 many times faster than Mesa and perhaps half as fast as a good commercial renderer Location http www ozemail com au keithw CIDLib A free C class library for Windows NT Includes an object oriented extensible ray tracer and fractal generation engine as part of it It s at http www charmedquark com Alice Alice is a 3D Interactive Graphics Authoring Programming Environment The goal of Alice is to make it easy for novice programmers to develop interesting 3D environments and to explore the new medium of interactive 3D graphics It runs on Windows 95 and Windows NT 4 0 with Direct3D Location http alice cs cmu edu AC3D AC3D is a free modeller which works on various flavors of Unix and exports to VRML RenderMan POV Ray and other formats Get it at http www comp lancs ac uk computing users andy ac3d html Also available at this site is 3DC a free DOS 3D model converter sorry no source by Zoltan Karpati of Hungary which converts to and from a huge number of formats The quality of the conversion is nothing spectacular but the format list is impressive 92 different file types Breeze Designer A free modeler for POV Ray for Windows 95 and NT While primarily for POV Ray it also exports to VRML RenderMan DXF and PolyRay formats http www imagos fl net au Moonlight Creator A free modeler with source available for Windows 95 NT uses OpenGL and Linux Has NURBS and object polygon vertex editing imports DXF OFF and 3DS ASC and exports DXF Rayshade POV Ray RIB and VRML 1 amp 2 Supports True Type fonts Does not support textures yet Does radiosity lighting and raytraced rendering http www cybersociety com moonlight bCAD a DOS modeler free sounds quite stable includes a ray tracer in it Imports and exports 3DS ASC and Sense 8 NFF Check out the rave review at quot The Unofficial bCAD appreciation page quot http www wooldale demon co uk bcad htm FORM This is an IBM Windows DOS program for doing Latham like L systems exports direct to image files or to VRML DXF POV Ray VIVID and PLG http www netlink co uk snaffle form form html The language looks a bit intimidating to learn but the program s pretty accessible just start up WFORM quot WFORM res2 quot is better on faster machines more screen space open a FRM file from the SHAPES or OTHERS directories and hit quot Go quot If the shape looks interesting go to quot MutateMode quot and hit quot Go quot again The shape is used to produce 3 offspring a la Todd and Latham Double click on an offspring or the parent again and you get more offspring from that I think if you set the Mutation Settings under File to a lower value you get less variation Pretty fun and quick to start using To actually save your creation you seem to have to do a little two step save it out as filename frm then run quot FORM vrml filename frm quot and the file temp wrl is output Drop this in your browser and there it is Some images from FORM are at http www netlink co uk snaffle form formgall html CAD Model Viewer Most free model viewers are concerned with polygonal based surfaces for rendering applications So it is nice to see a new free viewer come out for CAD related formats such as IGES SolidWorks ISO G Code whatever that is as well as CAD surface description file types such as STL and VRML See http www actify com 3DView 3DView html Implicit amp Parametric Surfaces for POV Ray If you want to add these to POV Ray go now to http atrey karlin mff cuni cz 0rfelyus povray html 3D Implicit Function Viewer A free demo version of an implicit function viewer is available at http mathware com html cyclone html If you play with implicit functions at all it s worth a look L Parser Front End On a related note LSys32 is a graphical shell to the L Parser program at http www mindspring com chlichti html lsys32 html LOD for VRML There is an interesting application called LODestar at http www cg tuwien ac at research vr lodestar It works only on VRML 1 0 files but has some nice features It cleans up the original VRML file eliminating duplicate data and has the ability to generate lower polygon count level of detail versions of the model If you combine this utility with Keith Rule s Crossroads 3D file translator at http www europa com keithr which reads and writes VRML 1 0 you have a nice poor man s polygonal model simplifier for any format that Crossroads can write which is quite a few at this point Free Java 3D vecmath library An unofficial free implementation of the Java 3D API vecmath library is available at http www esm co jp java vecmath The code for Computer Graphics for Java Programmers can be downloaded from http home wxs nl ammeraal grjava htm Macbeth photo mosaic program Macbeth is a Unix based program with source which uses small images as pixels for making large images A little bit hard to describe see the examples on his page to know what it is http kunst uib no stig Macbeth gd gd is a graphics library which is handy for drawing vectors regions text and compositing other images into a GIF It s free with source http www boutell com gd The most tantalizing thing about version 1 3 is that the GIF compresser called miGIF appears to both get around the LZW patent and is also efficient It basically is a run length encoder which is not patentable which uses the LZW s table to store runs Such an encoder is ideal for gd because it generates images which typically have solid color areas I wouldn t bet the house that miGIF is patent free nightmares of saying quot Your honor LZW works likes this quot come to mind it takes a court to quot prove quot this but technically it looks like it is Lens Flare Everyone s favorite special effect there s some free source code at http www geocities com SiliconValley Campus 4128 Lensflare html to do it Free Textures Five years ago free textures were pretty rare now they re fairly common Now the trick is separating the wheat from the chaff Some fairly nice and pleasantly organized free textures are available at http axem2 simplenet com heading htm An old site with a large number of tiling and non tiling textures is at http www mhri edu au pdb texture A little care should be taken with redistributing these textures as some are possibly copyright protected Grafica Obscura If you have not visited this site lately do so http www sgi com grafica index html I particularly enjoyed quot Synthetic Lighting for Photography quot http www sgi com grafica synth index html Explore on your own there s something for everyone Midpoint Algorithm On the fast midpoint line drawing algorithm and its application to texture mapping http www oiri demon co uk texmap texmap htm This is definitely off the topic but I find it so amazing that I must mention it This site is for a computer game company that has gone under but which decided as a last act to release the complete source and art for its last release an action game using Direct3D http www 47 tek com source htm While I m on the topic of games for a true nostalgia trip visit http www davesclassics com a labor of love or something devoted to PC emulators of old arcade machines and defunct platforms Inexplicable and worth a quick look http www2 sva edu studio96 soojeong back to contents Pl uuml cker Coordinate Tutorial by Ken Shoemake ks emanon net Pl uuml cker 3D line coordinates are concise and efficient for numerous chores Dot products and cross products reveal their geometry without the need for determinants For the impatient and aren t we all a little results come first then explanations On notation Frequently 3D graphics uses a 3 tuple x y z without concern for whether it represents a vector or a point When being more careful U 0 will be the homogeneous coordinates of vector U with U Ux Uy Uz and P 1 or P w the homogeneous coordinates of point P with P Px Py Pz The origin is then O 1 with O 0 0 0 and subtracting it from a point creates a vector The cross product PxQ is the 3 tuple PyQz PzQy PzQx PxQz PxQy PyQx and the dot product U V is the number UxVx UyVy UzVz A direction is a vector with length ignored A plane has equation ax by cz dw 0 or D P dw 0 so its coordinates are a b c d or D d with D a b c perpendicular to the plane Planes D 0 contain the origin Colon quot quot rather than comma quot quot proclaims homogeneity Here are common Pl uuml cker 3D line computations collected in one place All lines are ordinary Euclidean lines not projective oddities like lines at infinity L U V with 3 tuples U and V with U V 0 and with U non null L P Q PxQ for P and Q distinct points on L L U UxQ for U the direction of L and Q a point on L L qP pQ PxQ for P p and Q q distinct homogeneous points on L L ExF fE eF for E e and F f distinct planes containing L U1 V1 s U2 V2 tests if L1 U1 V1 equals L2 U2 V2 s gt 0 if L1 and L2 have same orientation V V U U is the minimum squared distance of L from the origin VxU U U is the point of L closest to the origin UxV V V is the plane through L perpendicular to its origin plane for non null V VxN Un U N is the point where L intersects plane N n not parallel to L UxP Vw V P is the plane containing L and point P w not on L UxN V N is the plane containing L and direction N not parallel to L Let N N1 N2 be unit vectors along the coordinate axes with U N non zero VxN U N is a point on L if N is not perpendicular to U U and this point both satisfy a plane equation E e if the plane contains L Represent L as U and this point to transform by non perspective homogeneous matrix Represent L as two points to transform by perspective homogeneous matrix UxN1 V N1 and UxN2 V N2 are distinct planes containing L P satisfies both these plane equations if L contains P Pnt t VxU tU U U parameterizes points on L Pln t 1 t 2 UxN1 V N1 2t UxN2 V N2 parameterizes planes through L U1 V2 U2 V1 0 tests if L1 U1 V1 and L2 U2 V2 are coplanar intersect Sum positive if right handed screw takes one into the other negative if left handed U1xU2 0 tests if lines are parallel Let N be a unit vector along a coordinate axis with U1xU2 N non zero V1 N U2 V2 N U1 V1 U2 N U1xU2 N is the point of intersection if any U1xU2 V1 U2 is the common plane for non parallel lines Let N N1 N2 be unit vectors along the coordinate axes with U1 N non zero U1 N V2 U2 N V1 V1xV2 N is the common plane for parallel distinct lines U1xN1 V1 N1 is the common plane for equal lines through origin Here are two related tricks a lagniappe as they say in New Orleans Let P be the point x y z 1 0 0 x and 0 1 0 y and 0 0 1 z are independent planes through P Let E e be a plane and N N1 and N2 unit coordinate axis vectors with E N non null Point eN E N and distinct direction vectors ExN1 and ExN2 lie in the plane Note E U 0 if U is a direction vector in plane E e If P is in the plane so is P U Warning In reality line intersections parallelism and various other alignments have vanishingly small probability Small perturbations destroy them and so numerical tests may need the robustness of error bounds Now we pause a minute to let the cookbook crowd rush off to write code The overachievers may want to drift off to prove everything for themselves All gone Then the rest of us can try to build a little intuition so as to understand the results The standard determinant definition of Pl uuml cker 3D line coordinates takes two distinct points on line L call them P and Q written homogeneously in two columns as follows Px Qx row x Py Qy row y Pz Qz row z Pw Qw row w Make all possible determinants of pairs of rows Only six combinations are independent these are the Pl uuml cker coordinates See geometry yet Probably not But set the w s to 1 and look again Rows x and w in that order give Px Qx Also rows y and w give Py Qy and rows z and w give Pz Qz So define U P Q That s half the Pl uuml cker coordinates Rows y and z give PyQz PzQy Hmm look familiar Sure enough rows z and x and rows x and y also give cross product components So we define V PxQ as the other half of the Pl uuml cker coordinates Using L U V P Q PxQ we can think geometrically not algebraically Example P 2 3 7 Q 2 1 0 Then L U V 0 2 7 7 14 4 We just use familiar properties of dot products and cross products The dot product of any two vectors A and B is 0 just when they are perpendicular and the cross product of A and B is a vector that always is perpendicular to both A and B or is null The squared length of A is A A and A B B A In contrast AxB BxA implying AxA 0 0 0 Thus AxB nulls any component of B parallel to A and rotates the rest of B 90 degrees When A and B are perpendicular and of unit length this implies Bx AxB A BxA xB Both dot and cross products distribute over sums and scales so A aB1 bB2 a A B1 b A B2 and aA1 bA2 xB a A1xB b A2xB for example Now clearly U P Q gives the direction of the line and V PxQ if it s non null is perpendicular to the plane through P Q and the origin Less obviously the colon is there because moving P and or Q scales U and V together Think about it We know P U Q with U some multiple of a fixed unit vector But then V PxQ U Q xQ UxQ so moving P clearly scales V the same as U All variation in Q also comes from adding multiples of U to the point T where a vector from the origin meets the line perpendicularly in other words Q sU T But that means V UxQ Ux sU T UxT and T is a fixed point of L that does not depend on P or Q So if either P or Q moves the length of U changes and with it the length of V by the same scale factor Clearly we can also generate coordinates directly from a ray representation U Q a direction and a point We know that U is the direction of L which we can normalize then the length of V gives the minimum distance from L to the origin T and so T T V V U U Example P 2 3 7 Q 2 1 7 Then U V 0 4 14 14 28 8 Squared distance from origin is 261 53 Example U 2 1 0 Q 2 1 0 Then U V 2 1 0 0 0 0 Squared distance from origin is 0 Since a line is uniquely determined by its direction and its vector displacement from the origin there is a one to one correspondence between lines and Pl uuml cker coordinates Lines in 3D have four degrees of freedom but the U V pair has six numbers Obviously homogeneity accounts for one freedom The second comes from the fact that U V 0 so not all pairs are valid lines Nevertheless two lines are distinct if and only if their Pl uuml cker coordinates are linearly independent That is the test for equality is like that for points given as homogeneous coordinates Example 0 2 7 7 14 4 is the same line as 0 4 14 14 28 8 Example 0 2 7 7 14 4 is not the same line as 2 1 0 0 0 0 Now still thinking geometrically look at dual coordinates defined from two plane equations of the form ax by cz dw 0 namely E P e 0 and F P f 0 We know that as vectors E and F are perpendicular to their respective planes Clearly ExF being perpendicular to both must be the direction of L their intersection Any point P on L satisfies both equations and also satisfies the linear combination fE eF P 0 Thus the vector fE eF defines a plane through the origin that contains L So miraculously it turns out that U V ExF fE eF Assuming neither defining plane passes through the origin we can normalize so e and f are 1 and the duality is P Q PxQ ExF E F Example E e 1 0 0 2 and F f 0 7 2 7 Then U V 0 2 7 7 14 4 The striking similarity of the point and plane definitions tell us Pl uuml cker 3D line coordinates precisely balance these extremes Many computational benefits accrue Also many questions come in dual pairs with the answers for one obtained by swapping U and V in the answers for the other We know for example that V 0 is an origin plane through L if V is not null and that U 0 is a vector in the direction of L each unique The point T VxU U U of L is perpendicular to U 0 meaning T U 0 because V UxT so VxU U U T Dually the plane UxV V V through L is perpendicular to plane V 0 Example U V 0 2 7 7 14 4 Then T 106 49 14 53 is point closest to origin Plane perpendicular to V 0 is 106 49 14 261 What point do L and a given plane N n have in common Consider first an origin plane N 0 It meets the V 0 plane in a line of points VxN w and to meet the UxV V V plane w must satisfy w V V VxU VxN V V U N Therefore the common point is VxN U N when n is 0 or VxN nU U N in general Dually the plane that L has in common with a given point P w is UxP wV V P For a vector N 0 this is UxN V N Example U V 0 2 7 7 14 4 and N n 0 0 1 0 Intersection is 14 7 0 7 N n 0 0 1 7 Intersection is 14 21 49 7 P w 2 0 0 1 Common plane is 7 0 0 14 N 0 1 1 1 0 Common plane is 5 7 2 3 These are important results so let s take it again more slowly The vector VxN 0 is perpendicular to both V and N as is any scalar multiple VxN 0 w Since N 0 and V 0 both contain the origin O 1 they also contain point O VxN w which scales by w to give VxN w in homogeneous form Now a point P w lies in plane UxV V V if it satisfies the equation UxV P V V w 0 Noting UxV VxU this is w V V VxU P Substituting the point we want satisfies w V V VxU VxN We deduce w U N by showing VxU VxN V V U N The cross product with V rotates and scales plane V 0 which contains U and nulls any component of N parallel to V Since the latter contributes nothing to the dot product with U we have our desired result If V is null VxN U N is still a point of intersection the origin However when the line and plane are parallel they either intersect everywhere or nowhere and the formula fails From these few formulae we can produce a number of other useful results To transform a line by a matrix without perspective we first convert the line to direction point form transform that pair then convert the result back to Pl uuml cker form For this and other reasons we want the quickest way to find a point on L U V For example this also gives the necessary data to determine if L lies in a given plane Notice that we can easily generate more using U This is necessary to apply transforms with perspective which require a pair of points But VxN U N gives points on L and choosing N cleverly will avoid multiplies Merely find a non zero component of U and let N be a unit vector in that direction Example U V 0 2 7 7 14 4 Take N 0 1 0 giving point 4 0 7 2 on line Plane 1 0 0 1 does not contain the point so it does not contain the line It does contain direction 0 2 7 0 so is parallel to the line To test if a point P is on L we should use two independent plane equations The obvious idea is to dualize what we just did using V 0 and UxN V N with N a unit vector in the direction of a non zero component of V Yet this may fail We always have a non null U but lines through the origin give a null V Still we can work with what we have Let N N1 and N2 be unit vectors for the three coordinate axes with N in the direction of a non zero component of not V but U Then N1 and N2 give two suitable planes UxN1 V N1 and UxN2 V N2 Example U V 2 1 0 0 0 0 Take N 1 0 0 N1 0 1 0 N2 0 0 1 giving planes 0 0 2 0 and 1 2 0 0 through line Point 2 3 0 1 lies only in the second plane so is not on the line Every point on L is a weighted sum of U 0 and VxU U U so a parametric equation for all points on L is Pnt t VxU tU U U Dually a parametric form for planes through L is Pln t 1 t 2 UxN1 V N1 2t UxN2 V N2 a weighted combination of the two planes we learned how to generate a moment ago This latter pair of weights 1 t 2 and 2t is perhaps overly elaborate but chosen as points on a rationally parameterized circle x y w 1 t 2 2t 1 t 2 Any way to get all possible ratios of weights will do Example U V 0 2 7 7 14 4 Pnt t 106 49 2t 14 7t 53 Example U V 2 1 0 0 0 0 Pln t 2t 4t 2 1 t 2 0 If two lines intersect they are coplanar This latter condition we can test as follows Suppose L1 U1 V1 and L2 U2 V2 The common plane containing both L1 and U2 is U1xU2 V1 U2 while that containing L2 and U1 is U2xU1 V2 U1 Since U1xU2 U2xU1 coplanarity demands U1 V2 U2 V1 0 When the two lines are parallel U1 and U2 give the same direction and the plane formulae are invalid yet the test still works If we want a formula for a common plane even so we can try a linear combination of V1 and V2 for the normal since both are perpendicular to the common direction Find a non zero component of U1 and let N be a unit vector in that direction then if V1 and V2 are not both null use U1 N V2 U2 N V1 V1xV2 N Otherwise L1 and L2 are not only parallel but identical and pass through the origin generate a plane for L1 using the standard method Perhaps the reader can devise a uniform method for generating a common plane however small perturbations generally have large consequences for this situation We cannot hope to find a point of intersection for parallel lines but otherwise a suitable formula is actually the dual V1 N U2 V2 N U1 V1 U2 N U1xU2 N where N is a unit axis vector independent of U1 and U2 This is less computation than its size suggests It can be derived as the plane through L2 in the direction N U2xN V2 N intersected with L1 V1x U2xN U1 V2 N U1 U2xN followed by two cross product identities Ax BxC A C B A B C and A BxC AxB C When neither V1 nor V2 is null the far simpler formula V1xV2 U1 V2 will suffice it is the dual of the common plane U1xU2 V1 U2 Example L1 0 2 7 7 14 4 and L2 2 1 0 0 0 0 are coplanar Lines are not parallel Common plane is 7 14 4 0 Taking N 1 0 0 intersection point is 14 7 0 7 Tempting as this geometric development is it conceals the generality of the algebra Pl uuml cker 3D line coordinates are only one special case albeit a very useful one of Grassmann coordinates Using Grassmann coordinates we can uniformly manage points lines planes and such generically flats in spaces of any dimension We can generate them intersect them and so on with simple equations There are fewer special cases such as lines given by two points versus point and direction Three planes through a point or three points on a plane in 3D use the same algebra as two planes through a line Two solid references are Stolfi s doctoral dissertation at Stanford and later book and Hodge and Pedoe s classic multi volume text Methods of Algebraic Geometry available in paperback from Cambridge In 3D Pl uuml cker line coordinates can be extended to wrenches and twists known as screw coordinates These cleverly employ all six degrees of freedom to describe forces and motions The results have proved useful for kinematic investigations as described for example in Mason and Salisbury Robot Hands and the Mechanics of Manipulation MIT there s more on Pl uuml cker coordinates in the previous RT News back to contents A Short Note on Kalra and Barr s Algorithm by Andrei Sherstyuk ash cs monash edu au This message is intended for folks who might be interested in implementing this algorithm The algorithm was published as quot Guaranteed Ray Intersection with Implicit Surfaces quot in SIGGRAPH 89 proceedings pp 297 306 Kalra and Barr s algorithm has been around for almost 10 years and gained a good reputation among implicitly minded ray tracing people Still I could not find a public domain ray tracer that implemented this algorithm So I had to write it from scratch En route I found a typo in the math appendix of the paper apparently introduced during typesetting In the paper there is a brief description how to compute L and G for Gaussian potentials aka Blinn s blobs f r B exp A r 2 where r 2 is a squared distance to the center of the blob page 305 I did not check the computations of L the Lipschitz constant for the functions itself However computations of G must be corrected in the following way the 2nd directional derivative h t is given as h 2 0 AB exp A r2 k1 A k2 t k1 k2 t k1 The correct expression is h 2 0 AB exp A r2 k1 2 0 A k2 t k1 k2 t k1 The result of this typo is that the G values for each blob come out smaller than they really are This may cause the algorithm to underestimate the rate of change of the field function and start closing on the root in the interval where the function is NOT monotonic In principle this could cause divergence if Newton s method is used or the first intersection may be missed if regular falsi is used which may converge to the second root In practice with all datasets that I tried this bug does not surface The reason is the following the collective G value for a sum of several blobs is calculated as a sum of G values computed for individuals blobs This is a very conservative result In a way the algorithm is very self protective and always sets the safety limits basing on the worst case behavior of the collective field function which in practice almost never happens Therefore a little loosening of G only helps the speed at the expense of safety However since so much math is involved already it makes sense to do it by the rules which makes the algorithm absolutely reliable To finish the plot of h t Figure 21 should be viewed upside down This minor inconvenience is not really important for the algorithm but also should be corrected to obtain peace of mind after all these troubles back to contents Origins of Point In Polygon Take 10 by Neil Stewart stewart iro umontreal ca Chris Schoeneman tracked the origin of the point in polygon algorithm back to 1962 see RTNv4n1 However the solution to the problem dates much further back Neil Stewart wrote this in some correspondence EAH Taking the parity of the number of crossings of a fixed direction as a definition of the winding number is attributed to Poincare in the book A Combinatorial Introduction to Topology Michael Henle Freeman and Company 1979 From page 49 quot Here is an alternative method for computing the winding number suggested by Poincare himself Instead of keeping track of the vector V P as P traverses the path gamma we watch just one particular direction of our choosing and record only the times that the vector P points in that direction If the vector V P passes through the direction going counterclockwise we count plus one if it passes through the direction going clockwise we count minus one and we count zero if the vector only comes up to our chosen direction and then retreates sic back the way it came For the distinguished direction we choose due north quot Neil is working on an algorithm similar to the one in Section 2 of the paper quot Ray Tracing Trimmed Rational Surface Patches quot by Nishita Sederberg and Kakimoto Computer Graphics 24 No 4 Aug 1990 337 345 The clever bit of these curve algorithms is the use of convex hulls around the curves For example with a test ray pointing north if you know that your test point is south of the convex hull and you know that one endpoint of the curve is west of the ray and one is east then you know the ray crosses the curve an odd number of times This is all you need for an inside outside test you do not have to compute the actual intersection Similarly if both endpoints of a curve are to one side of the ray you know the ray hits the curve an even number of times EAH back to contents Info on REYES Algorithm by Robert Speranza and Tom Duff td pixar com Robert Speranza wrote on comp graphics rendering renderman Basically the REYES algorithm involves taking the rendering geometry and dicing up into micropolygons that are less than one pixel in size in screen space and then shading them Once they are all shaded which usually involves sampling their midpoints because they are so small that they are at the Nyquist limit for the display device a filter is applied to antialias the resulting values into the pixels you see in the final image This is performed for each scan line which is why PRMan does not raytrace This technique does not mix well with raytracing since micropolygons are discarded as each scanline is rendered Tom Duff replied Almost A better certainly more long winded summary might be 1 Divide the screen into smallish typically 4x4 or 16x16 pixel rectangular buckets Bucketing is done just for memory saving amp is not essential to the algorithm 2 Read geometry into the bucket list An important feature of Reyes is that the geometry it renders need not be just polygons but can also be higher order curved surfaces like quadrics NURBS and Catmull Clark subdivision surfaces Each primitive is stored with the first bucket to be processed in which it appears actually might appear based on bounds that could be too conservative 3 Loop through the buckets examining all the geometric primitives Primitives that fail a screen space flatness test are subdivided and the pieces rebucketed Those passing the test are diced into grids of micropolygons which are shaded The intent is that micropolygons be so small that their shape is not discernable in the final image Typically this means that their edges are about 1 2 the pixel spacing The shading system is fully programmable and interprets shaders in a SIMD manner running on all points in the grid simultaneously The three important features of this scheme are that interpreter overhead is amortized over many micropolygons that values of all variables and interpreter temporaries are available at all points on the grid allowing the interpreter to provide spatial derivatives of arbitrary quantities and that shaders have the ability to alter geometry since no hidden surface decisions have been made yet Derivatives give a straightforward way to compute surface normals and to estimate sampling rates for anti aliasing Contrary to Speranza above micropolygons are not sampled at their midpoints Rather color is computed at vertices with the intent that it be Gouraud interpolated across micropolygons 4 After shading break grids apart into individual micropolygons which are hidden using a Z buffer algorithm The Z buffer samples are randomly jittered in space time and lens position to allow anti aliasing motion blur and depth of field blur To handle transparent surfaces each sample has a list of visible micropolygons After all micropolygons have been sampled those that overlap other buckets are forwarded to the appropriate bucket lists Transparent values in the Z buffer sample lists are collapsed to single pixel values by compositing and the final sample values are filtered to produce pixel values I m not sure why you say that Reyes is incompatible with ray tracing All that is required is to make a copy of the input geometry in a geometric search structure when it s read and trace rays when a shader requires it PRMan doesn t ray trace because we don t see a demand for it not because it s hard to do it s not Thanks to Andy Gibson lt gibsona jedi nwnet co uk gt for passing this on EAH back to contents Polygon Shrinking by Dave Rusin rusin vesuvius math niu edu and Jeff Erickson jeffe cs duke edu This is a fairly useful topic as a common modeling operation is to take an outline and expand it while moving it along a path For example beveled letters are done using this operation From what I ve seen most programs usually do give self intersecting output This usually doesn t matter about the only case I recall where I ever saw some problems was with one of the Microsoft Wingdings hand glyphs EAH lt bpangtay ci sat tx us gt wrote on sci math gt Given a polygon defined in 2 D space as a series vertices cartesian gt coordinates How do I define a new polygon which is equal to the original gt polygon plus a buffer of a specified width around perimeter of the polygon What do you want for an answer when say the polygon is a triangle I can describe another triangle whose sides are parallel to the original triangle s sides but are a perpendicular distance d away but the new one s vertices are further than d units away from the original is that OK Getting the new edges is trivial every line in the plane may be written in the form a x b y c for a unique unit vector a b pointing to the outside of the polygon The line parallel to this but d units out is given by a x b y c d gt I need it in a formula that can easily be reproduced in a program Thanks for gt your help Given the ordered list P0 P1 Pn P0 of points traversing the polygon counterclockwise compute in turn the vector r s P i 1 P i the outward normal s r the unit outward normal a b the new line L i a x b y a x i b y i d the intersection Q i with the previous new line L i 1 for each i These points Q i are the vertices of your new polygon in what I assume is the preferred format for specifying a polygon Note that you said quot easily quot not quot efficiently quot or quot stably quot If I did this for a living I d probably write a real algorithm not just a naive translation of mathematics into code In particular for nonconvex polygons you have to watch out for self intersections etc If you really need the set of points which are a perpendicular distance away from the original polygon you need to replace the corners of the new polygon with circular arcs This new curve is the envelope of the original one see e g http www math niu edu rusin known math index 14HXX html Jeff Erickson lt jeffe cs duke edu gt writes In particular for nonconvex polygons you have to watch out for self intersections etc and this is hard Programs that compute offset polygons like Adobe Illustrator simply punt and give you self intersecting output Even defining exactly what the offset polygon should look like is nontrivial if the original polygon is nonconvex The quot correct definition quot in my opinion is the result of growing the offset polygon outward from the original polygon Whenever an offset vertex runs into an offset edge split the offset polygon into two pieces at the point of collision and continue Whenever an offset edges shrinks down to a point delete it create a new offset vertex and continue The fastest practical algorithm for computing offset polygons runs in O n 2 time where n is the number of edges in the original polygon Perhaps counter to intuition you can do slightly better if most of the vertices of the polygon are CONCAVE The time bound becomes O n log n nr where r is the number of CONVEX vertices If the polygon is totally convex you can compute any offset polygon in linear time using exactly the algorithm Dave described For details see the following web pages http www cs duke edu jeffe open skeleton html http www cs duke edu jeffe pubs cycles html http www iicm edu jucs 1 12 a novel type of gt If you really need the set of points which are a perpendicular gt distance away from the original polygon you need to replace the gt corners of the new polygon with circular arcs This is not the right way to think about it since you have to know what the polygon is first Rounded offset curves are MUCH easier to compute than mitered offset polygons See Martin Held s research web page for a good description of offset curves and how to compute them efficiently http www cosy sbg ac at held projects voronoi 2d voronoi html back to contents Correcting Normals on Flipped Polygons by Kev shkwav globalnet co uk Duncan Colvin duncan cads ac uk Steve Baker sbaker link com John Nagle nagle netcom com Dennis Jiang jiang nortel ca Alejo Hausner ah cs princeton edu and Eric Haines I ve edited and merged some of the USENET replies trying to leave intact a sense of the problems which emerged from various solutions EAH Kev writes on comp graphics algorithms I m in the process of writing a 3D object viewer in OpenGL which is the easiest nicest 3D API I ve every used I might add the problem I m having is this The 3D program which uses the object format I m displaying renders everything as double sided polygons however OpenGL doesn t When I attempt to render these polygons in OpenGL some of them will always appear facing the wrong way i e the model looks like it has holes it in I know this is happening as I can spin the model round and see the reversed polygons through holes in the other side So does anyone know how I can fix this I had an idea of quot doubling up quot each polygon i e create two polygons for each polygon in the mesh and reverse the normal for the second copy this would work but makes the model twice as large and slower to draw Does anyone know of a fix in OpenGL for this or an algorithm to correct flipped normals in solid models I know it can be done as programs like Lightwave Rhino have a feature which can do exactly that Duncan Colvin lt duncan cads ac uk gt replies I think I know what you re on about I have to import a mesh from a POV file into my program The problem is that POV is a raytracer and doesn t care about triangle winding This means I have to rewind the mesh once it has been loaded into my program I have an algorithm that works although I m sure there is far better which I ve implemented in my CTriMesh class so that meshes can rewind themselves Although I deal only with triangles which makes things a lot easier I think the same algorithm could be used in your case also Anyway I will now attempt to describe the algorithm If y all know of anything better let me know NOTE works only for non self intersecting objects Choosing the first polygon in the object and find out if it is facing the right way This is done by Calculating the surface normal of the polygon and treating it as an infinite vector starting from the center point of the polygon Then check this vector against all the other polygons to see how many it intersects If there are an odd number of intersections then the polygon is not facing the right way so rewind it Now you have one polygon that is correct it is simple to find the others I base the next bit around the fact that if two polygons are both facing the same way having the same winding e g counterclockwise their shared edges must have opposite direction vectors gt gt lt lt I ve separated the two polygons but you can see the edge they would both share With this in mind it is a case of recursing through the polygons and rewinding them all so as they satisfy the above rule Steve Baker lt sbaker link com gt comments on Duncan s method of finding the quot seed quot polygon that is supposed to face outwards This wouldn t work for an object that described say the inside of a room This might be as simple as an inside out cube i e a cube with all the faces pointing inwards Your code would see exactly one intersection which is an odd number and turn the room into a normal outward facing cube I don t think there is any way to distinguish between a cube and a room and automatically do the right thing Also your trick only works as far as it does work for objects without holes in their surfaces i e solids John Nagle lt nagle netcom com gt comments Holes aren t a problem but other mesh defects like isolated faces and duplicate edges will cause some faces not to be corrected And a Moebius strip or Klein bottle will hang the algorithm so you have to detect examining the same face twice My point is that you have to protect the algorithm against failure to terminate This requires some extra bookkeeping This algorithm is O N Counting surface crossings is a very expensive way to solve this problem it s O N 2 You also have all the usual problems with ambiguous cases where the normal crosses very near an edge or vertex There is the view from inside view from outside problem as you point out For self intersecting surfaces it s even worse you could be inside one region but not all of them This is a classic problem and one often solved badly For example the quot cleanup quot function in Softimage doesn t do it very well Duncan Colvin lt duncan cads ac uk gt replies O N 2 Only if you used that method to correct every polygon You only need to correct the first polygon Please correct me if I am wrong Steve Baker lt sbaker link com gt replies I think the problem of not knowing whether the object is intended to be viewed from the inside or from the outside is enough to show that the entire premise of trying to find an algorithm to do this is bogus The data must be created with the correct face orientation or you are screwed Dennis Jiang lt jiang nortel ca gt comments Your algorithm only works for manifold geometry For non manifold solids with bad normals such as two cubes touching each other at a single vertex or a solid with holes it will not work I think Duncan s first step i e ray casting for finding or forcing a correct face normal is most general The second half of his algorithm is not general though I used the ray casting to correct bad normals for arbitrarily complex solids using a BSP tree to speed up the search for intersections If you know your solids to be manifold Duncan s method should work reasonably quickly BTW I am talking about correcting bad normals of a closed solid with or without holes manifold or non manifold Not for open meshes Alejo Hausner lt ah cs princeton edu gt comments This is a problem in mesh fixup If you have connectivity information then the method proposed by Duncan Colvin which makes sure that one polygon is oriented outwards then propagates that information to its neighbours should work But if you don t know which polygons are adjacent to which others the problem is harder There is one approach which will work in such cases assuming objects don t share faces It s an idea by T M Murali and Tom Funkhouser The idea is to throw the polygons into a BSP tree which subdivides space into convex cells and then to figure out which of those cells are solid and which ones are empty Once you know which cells are solid you can unambiguously orient the polygons on its boundary Each cell is assigned a quot solidity quot value 1 if empty 1 if solid in between if we re not sure Unbounded cells are known to be empty Each cell votes on its neighbour Suppose cell A and cell B are neighbours and A has solidity quot x quot If the two cells are separated by a polygon then A votes that B has solidity x If there is no separating polygon A votes that B has solidity x same as A If there is a partial polygon separating the two cells A s vote depends on how much of the boundary is occluded the vote being somewhere between x and x depending on the fraction of the boundary taken up by the polygon The sum of the votes is a linear equation relating one cell s solidity to the solidities of its neighbours All the votes together give a system of linear equations with the solidities as the unknowns The rest is sparse matrix numerical analysis This method also corrects for numerical errors and non coincident vertices all without user adjustable error tolerances For all the details check out Funkhouser s page http www cs princeton edu funk modeling html Kev reveals the boring answer William R Bishop and several other people cheers wrote Try turning off quot backface culling quot this should make the polys re appear but may increase your draw time Eric Haines comments not on Usenet just here A few years ago I spent a lot of time working on just this problem Duncan gives the basic principle edges of opposite directions and two basic parts of the problem establishing a quot seed quot polygon which all other polygons orient themselves to and then traversing the connecting polygons and flipping face orientation as needed As far as establishing a face which points outwards I used Gavin Bell s method discussed in RTNv7n5 I will go over this method here and also discuss some of the problems encountered when using it My own goal was to determine whether a mesh could be properly oriented If it could not for whatever reason then I would note that the mesh could not use culling when displaying it the user could override this setting Using something like a BSP tree to sort the polygons and so establish connectivity is one approach Personally I went for coding simplicity and used the qsort sorter to find matching edges Each edge for each polygon had an edge record made for it pointing back to what polygon it was from The edge record also included pointers to the two vertices it was made from and a flag as to whether it was flipped or not Here s the technique for using qsort first within the edge record the two vertices saved are always ordered such that the first vertex is quot before quot the second Basically the X s of the two endpoints are compared and the point with the lower value is saved first In case of a tie the Y s then the Z s are used Then all the vertices can be sorted by giving qsort a simple routine to compare each edge for a quot before quot condition This test involves doing the quot before quot test for the first vertices if identical then the second two vertices are compared At the end of the sort the edges are in order and identical edges are next to each other in the list This algorithm was probably overkill I didn t want a sorted list so much as just wanting the clusters of identical edges To me this meant I wanted to use a hashing scheme where the six coordinate values of the edge s two vertices would be used in the hashing function For some reason my attempt at hashing code never really bought me much more speed in practice though My feeling is that a BSP scheme would also be costly involved to code and the BSP gives much more information than is needed for the problem all we need are edge matches we don t care about edge proximity Anyway once you have the matching edges you can build up links from each polygon to its neighbors This process will give you one or more continuous meshes where all the polygons are connected You then properly orient the polygons in each continuous mesh so that they all face the same direction using the edge rule Duncan gave it doesn t matter which direction just as long as they are all consistent we ll correct the direction in a minute John Nagle is correct in that you do need a little bookkeeping to keep track of what faces you ve checked Gory details follow skip to the next paragraph if you don t care I personally just used a stack and a flag for each polygon grab any polygon as a seed flag it as done flip its neighboring polygons those sharing an edge as needed flag each as done and then put each on a stack Pop the stack and if a neighbor is unflagged as tested then flip the neighbor and flag it and push it in turn When the stack is empty then all connecting polygons have been visited and oriented This orientation process is sometimes easier said than done some cruddy models out there have edges which are shared by say three polygons making it impossible to determine locally i e without looking at the mesh as a whole which orientation all three faces should have This is not a theoretical problem there s an old DXF head file out there which has ears that attach in just this way to the head giving edges shared by three faces Nonetheless almost all models have all edges shared by at most two polygons Note that if you detect any edge in a continuous mesh that belongs to only one polygon you then do not have a solid manifold essentially surface If a surface is not solid you re now definitely playing the odds when it comes to trying to guess the surface s proper orientation more on that after the final step The final step is finding which way to orient each continuous mesh If the object is solid Gavin s method works great you take the centroid of the bounding box around the mesh note that the point does not have to be inside the solid for the following to work and compute the volume defined this point and each individual polygon in the mesh preserving the sign of the volume of each Summed together these volumes will give a total volume which is positive or negative If it s negative reverse the sense of all of the faces in the mesh You re done Well there are a few things to worry about As Steve Baker points out your model could actually be a room in which case you re in trouble getting exactly the wrong answer In theory this is true there s no perfect algorithm but in practice what it means is that you should provide the user with the ability to override the algorithm determined face culling settings e g turn off culling probably a good idea for a room so you can see it from the outside or reverse the face orientations as a whole Alternately for this special case you could use the viewpoint and test it against the solid if a test ray hits a backface as the closest hit then the solid is a room and so should be reversed Pathological self intersecting objects which are a pain to detect and extremely rare in the real world of CG I ve never seen one don t have a right answer as far as being single sided goes but Gavin s test will ensure that the surface with the most volume enclosed faces outwards Another problem occurs if you apply your algorithm to meshes which are not solid and which are the majority of models you ll find out there as most are not made on a solids modeling system If for instance you have two separate continuous meshes representing a box with one mesh being the lid you will run into problems if the lid turns out to be concave for example In this case the centroid of the lid will truly be outside it and because the lid is not solid a quot solid quot will be formed between the centroid and the lid s polygons which will cause the lid to face inwards There are many other surfaces which will fool the algorithm for example a flat lid with thin raised letters will also raise the centroid above the lid and create more volume to be computed outside the lid One solution to this problem is to take the volume of both meshes with respect to the centroid of the box enclosing both and ensure both have a positive volume However this won t work in many cases you have to know beforehand that the two meshes make up the same solid object Another possibility is that you may not have to do the volume test at all if the polygon vertices have their own vertex normals these can be used to give a sense of which part is the outside if they can be trusted Alejo Hausner s answer is interesting has anyone had experience with using Funkhouser s solution back to contents What s Mesa by Brian Paul brianp ra avid com Mesa s not a ray tracer and I ve covered it before in the RTN but it bears mentioning again It s grown considerably since the last time I saw it and the fact that it has 3Dfx support and multi threading is pretty great EAH Mesa is a free implementation of the OpenGL API which runs on Unix Windows 95 NT Macintosh and most other computers Version 2 6 was released in February The most exciting new development has been 3 D hardware support specifically support for the 3Dfx Voodoo hardware on Linux and Windows Performance depends the CPU and other factors but up to several hundred thousand 3 D textured triangles can be drawn per second Not bad for a free graphics library and a sub 200 graphics card Version 3 0 of Mesa is in development It will feature an implementation of the pending OpenGL 1 2 specification perhaps the first quot to market quot Also version 3 0 will feature the multi texture extension which supports simultaneous application of multiple texture maps The new 3Dfx Voodoo2 chipset supports this feature Perhaps those most enthusiastic about Mesa s 3Dfx support have been gamers ID Software has released versions of Quake I and II for Linux with 3Dfx support Several other 3Dfx Linux games are now available and more are in development Other Mesa developments in progress include further hardware support multi threading and X server integration For more information about Mesa see http www ssec wisc edu brianp Mesa html back to contents Multithreading Mesa by John Stone johns ultra2 cs umr edu Christoph Poliwoda and I have been working on adding multithreading features to Mesa which allow an OpenGL programmer to safely use multiple threads each thread potentially performing OpenGL operations in its own active rendering context The work we ve completed so far has added thread safety features for Unix platforms using POSIX threads and Unix International aka Sun threads With threads a programmer may render to multiple OpenGL contexts simultaneously potentially offering a gain in performance when run on multiprocessor machines Through the use of quot sort last quot style depth compositing operations rendering of exceedingly complex depth buffered scenes can easily be accelerated Other potential uses involve rendering to multiple windows concurrently with potential performance improvements on multiprocessor systems Since the multithreading work is still in the early stages the full range of potential applications hasn t been explored yet As we make progress adding thread safety to more of the Mesa drivers we should be able to further explore the potential uses of multithreaded OpenGL rendering providing demos of multithreading tricks that work well in future releases of Mesa back to contents Recent Ray Tracing European Conference Papers Here are some ray tracing references from recent conferences in Europe Proceedings of WSCG 98 the 6th International Conference in Central Europe on Computer Graphics and Visualization 98 February 1998 Thanks to Dr Andrea Sanna lt sanna polito it gt for passing these on A M Krajecki A Z Habbas A F Herrmann A Y Gardan T A Performance Tool Prediction for Parallel Ray Tracing P 200 207 K parallel algorithm MIMD application A A Lukaszewski A A Formella T Fast Penumbra Calculation in Ray Tracing P 238 245 K shadow computation stochastic ray tracing bounding volumes The Lukaszewski paper is interesting the others are probably interesting too but I have not seen them Say you are using stochastic ray tracing for shadows shooting a large number of shadow rays at a light disk This is obviously expensive as many rays are shot for each shadow test The author s idea is to quot explode quot the original objects in a scene with respect to the area light If the exploded object is hit by a ray traveling to the center of the light then that object must be tested against the bundle of rays but if missed then that object can be ignored entirely for the entire bundle This results in great savings as there are many samples which are fully illuminated by the area light and these can be quickly categorized as such Only samples which are in the penumbra or umbra have to have the whole bundle shot The authors also consider imploding the objects if a test ray hits such an object it means that the sample is fully in the umbra EAH A A Sanna A P Montuschi T An Efficient Algorithm for Ray Casting of CSG Animation Frames P 323 330 K animation rendering bounding box computation CSG A P Wonka A M Gervautz T Ray Tracing of Non linear Fractals P 424 430 K nonlinear fractals CSG pL systems natural phenomena A J Zaninetti A B Peroche T A Vector Model for Global Illumination in Ray Tracing P 448 455 K global illumination shading You can find other information at http wscg zcu cz wscg98 wscg98 htm At http www cg tuwien ac at conferences EGRWS98 is the site for the 9th Eurographics Workshop on Rendering The workshop schedule shows what papers were presented These papers eventually get published in a Springer Verlag book if you want a copy of a paper before that find the author The two ray tracing related papers A Leif P Kobbelt A Katja Daubert A Hans Peter Seidel T Ray Tracing of Subdivision Surfaces A Laszlo Szirmay Kalos A Werner Purgathofer T Global Ray bundle Tracing with Hardware Acceleration J Ninth Eurographics Workshop on Rendering Thanks to Phil Dutre lt phil graphics cornell edu gt for the URL EAH The Second Eurographics Workshop on Parallel Graphics and Visualisation will be held in September The web site is http www irisa fr caps workshop Some papers from it A Greg Ward Larson T The Holodeck A Parallel Ray caching Rendering System A E Reinhard A A J F Kok A A Chalmers T Cost Distribution Prediction for Parallel Ray Tracing A J C Nebel T A New Parallel Algorithm rovided by a Numerical Model A T A Davis A E W Davis T A Parallel Frame Coherence Algorithm For Ray Traced Animations back to contents Attenuation in Water by Bretton Wade bwade sgi com and Ian Ashdown iashdown ledalite com Bretton Wade writes I m seeking information about attenuation of light in seawater Does anybody have any pointers I m not really interested in scattering due to particles in suspension only clean clear water Ian Ashdown replies There is some basic information in Chapter 28 quot Underwater Lighting quot of the IES Lighting Handbook Eighth Edition It includes a discussion of the absorption coefficient which is wavelength dependent plus scattering information The chapter includes 17 references although these should be sufficient Lankes L R 1970 quot Optics and the Physical Parameters of the Sea quot Opt Spectra 4 5 42 49 Smith R C and K S Baker 1981 quot Optical Properties of the Clearest Natural Waters 200 800 nm quot Applied Optics 20 2 177 184 Duntley S Q 1963 quot Light in the Sea quot J Optical Society of America 53 2 214 233 Austin R W 1970 quot Assessing Underwater Visibility quot Opt Spectra 4 5 34 39 Kinney J A S M Luria and D O Weitzman 1967 quot Visibility of Colors Underwater quot J Optical Society of America 57 6 802 809 Eric Haines erich acm org Ray Tracing News Volume 11 Number 1 Ray Tracing News Volume 11 Number 1 Ray Tracing News Volume 11 Number 1 Ray Tracing News Volume 11 Number 1 Ray Tracing News Volume 11 Number 1 Ray Tracing News Volume 11 Number 1 Ray Tracing News Volume 11 Number 1 Ray Tracing News Volume 11 Number 1 Ray Tracing News Volume 11 Number 1 Ray Tracing News Volume 11 Number 1 http www acm org tog resources RTNews html rtnv11n1 html http www acm org tog resources RTNews html rtnv11n1 html http www acm org tog resources RTNews html rtnv11n1 html http www acm org tog resources RTNews html rtnv11n1 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/search.html%%==%%Ray Tracing News Search Engine%%==%%Try out our internal search engine for the fastest way to find what you're looking for!%%==%%4308%%==%%7 Oct 98%%==%% Ray Tracing News Searcher Match All Terms Any Term and show results in Standard Form in Compact Form Search Help To find information about a topic simply type in a few keywords The more detailed your query the more relevant your results Our search engine also comes with some advanced capabilities to help you find exactly what you re looking for These capabilities are best shown with a few examples Translated require CGI require scripting Finds CGI Scripting CGI scripting and scripting of type CGI Does not find the lowercase cgi scripting nor the abbreviated CGI script Translated forbid CGI require scripts Finds Perl scripts Hollywood scripts and lowercase cgi scripts Does not find CGI definitions nor CGI scripts Translated prefer CGI require scripts Finds Perl scripts CGI scripts and CGI Scripts Documents with both terms appear higher in the list Translated require the phrase CGI scripts Finds CGI scripts Does not find CGI Scripts nor scripts of type CGI Translated require cgi case insensitive require words starting with script Finds CGI scripts cgi scripting Cgi scripter The asterisk is a wildcard representing any four or fewer characters Translated require Venus case sensitive require pictures forbid planet prefer images First lists pictures and images of Venus then Venus pictures Does not list lowercase venus picture nor forbidden picture of planet Venus Translated ignores common words like where is and the requires words containing frog Finds frog frogleg and bullfrog To suppress the ignore feature use quotes as in Where is the frog Note on case sensitivity only words or phrases containing an upper case character will be treated as case sensitive A search on usa will match Usa USA and usA while the term USA matches only its uppercase version The asterisk is a powerful search tool but has some limitations It cannot span words that is the query powerfu earch would not match the first sentence of this paragraph and it can represent at most four letters or numbers To avoid overly broad searches the asterisk can only be used in words or phrases which have at least three alpha numeric characters A search for th would be ignored Ray Tracing News Guide Page The Xavatoria Search Engine is Copyright 1997 by Fluid Dynamics Visit the Search Page for help files and most recent version Intermediate Search Pro Ray Tracing News Search Engine Ray Tracing News Search Engine Ray Tracing News Search Engine Ray Tracing News Search Engine Ray Tracing News Search Engine Ray Tracing News Search Engine Ray Tracing News Search Engine Ray Tracing News Search Engine Ray Tracing News Search Engine Ray Tracing News Search EngineTry out our internal search engine for the fastest way to find what you re looking for Try out our internal search engine for the fastest way to find what you re looking for Try out our internal search engine for the fastest way to find what you re looking for Try out our internal search engine for the fastest way to find what you re looking for http www acm org tog resources RTNews html search html http www acm org tog resources RTNews html search html http www acm org tog resources RTNews html search html http www acm org tog resources RTNews html search html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv12n2.html%%==%%Ray Tracing News, Volume 12, Number 2%%==%%Ray Tracing News "Light Makes Right" December 21, 1999 Volume 12, Number 2 Compiled by Eric Haines , 1050 Craft Road, Ithaca, NY 14850 ...%%==%%100257%%==%%21 Dec 99%%==%% Ray Tracing News Light Makes Right December 21 1999 Volume 12 Number 2 Compiled by Eric Haines 1050 Craft Road Ithaca NY 14850 erich acm org Opinions expressed are mine not Autodesk s All contents are copyright c 1999 all rights reserved by the individual authors Archive locations text version at http www acm org tog resources RTNews text HTML at http www acm org tog resources RTNews html You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Ray Tracing Roundup The Ups and Downs of Multithreaded Ray Tracing and Optimization by John Stone A Summary of Octree Ray Traversal Algorithms by Vlastimil Havran Additional Octree Traversal Notes by John Spackman Erik Jansen and Joel Welling Z buffer and Raytracing by Sam Paik Ray Tracing Procedural Parametric Surfaces by Mark VandeWettering Stephen Westin and Matt Pharr Raytracing Gloss Translucency by Peter Eastman Matt Pharr and Stephen Westin Importance for Ray Tracing by Per Christensen Good Computer Graphics Books by Brent McPherson Introduction From Ken Turkowski a sad piece of news Pierre Bezier died on November 25 1999 Peter Shirley is writing a book on ray tracing The title is quot Realistic Ray Tracing quot ISBN 1 56881 110 1 from A K Peters http www akpeters com and looks to run 200 pages 35 The book is not out yet but appears to be near completion I look forward to it as it s by a master of the subject who is also an excellent teacher This issue of the RT News has two excellent longer pieces Vlastimil Havran presents an overview of all research that he could get his hands on done on using octrees in ray tracing then compares the more promising schemes against each other John Stone gives his insights and guidelines for writing a parallel ray tracer on modern architectures I appreciate Vlastimil s work from the standpoint of attempting to bring more of an engineering approach to the study of efficiency schemes Instead of presenting yet another variant scheme and testing it against some basic algorithm he compares and contrasts algorithms from the literature and truly attempts to find what works and what does not Evolving architectures can invalidate such results over time but this practical research is a valuable starting place for anyone implementing octrees I also admire his courage in giving his honest opinions on how significant the various papers are something that is extremely useful but rarely done in the field of computer graphics John Stone s article discusses what to watch out for when attempting to parallelize code and how to design from the ground up for an interactive ray tracer vs batch mode code He also points out how changing architectures affect code in sometimes unexpected ways Note that John has source code and related papers at his site Of course if you re a researcher you will probably ignore this issue of the RT News until January 12th the SIGGRAPH 2000 deadline It s also the deadline for another critical life changing event it s the last day you can submit your Fantasy Graphics League team http www realtimerendering com fgl The winner gets a lifetime subscription to the Ray Tracing News and many other valuable prizes honors titles distinctions and related privileges thereto as soon as we can figure out what these might be The puzzle from last issue was given an axis aligned cube with corners at 0 0 0 and 1 1 1 cut it with the three planes x y y z and x z How many pieces is the cube cut into The answer 6 not 8 What is interesting about this one is that there are any number of ways of thinking about it One is simply to note that the three cutting planes all share the line running through 0 0 0 1 1 1 so only 6 pieces could be formed Another solution is to look at the cube down this axis i e view it from say 3 3 3 The cube has a hexagonal silhouette and from this view the three cuts slice it like a pie I like this visualization as it shows that literally a different view of the problem makes the answer obvious A third solution presentation thinks about the equations for x z the cube is divided into a part where x gt z and one where x lt z same for the other two equations 2 2 2 would be 8 pieces but two pieces cannot exist x lt y lt z lt x and x gt y gt z gt x which leaves 6 pieces that can exist The next puzzle is one from quot The Mathemagician and Pied Puzzler quot by Berlekamp and Rodgers http www akpeters com berlekamp2 html an homage to Martin Gardner You have a cube and you select at random three different corners What is the chance that the triangle formed by these corners is acute all angle lt 90 degrees is a right triangle has one angle 90 degrees back to contents Ray Tracing Roundup Vlastimil Havran has issued a call for models for testing a variety of ray tracing efficiency schemes http sgi felk cvut cz GOLEM proposal1 html If you have scenes in NFF VRML 2 0 or MGF formats or can convert to these of course please contact his group Global Illumination Compendium Phil Dutre has been collecting formulae and equations relevant to global illumination and putting them in a single place Visit his page for the current version at this time about 23 pages long http www graphics cornell edu phil GI 36 Pentium II s on 17 servers running Linux beat a Cray using POV Ray benchmark http cnn com TECH computing 9903 16 super idg thanks to Hector Yee for this story I ve written a fur hair shader unfortunately not renderman yet based on Rendering Fur with Three Dimensional Textures by James T Kajiya and Timothy L Kay California Institute of Technology Computer Graphics Volume 23 Number 3 July 1989 http dspace dial pipex com adrian skilling texels texels html I ve included code and images there Adrian Ian Skilling skilling signal dra hmg gb I recently completed my PhD at the MIT Graphics Group under the supervision of Profs Julie Dorsey and Seth Teller The title of my thesis is quot Radiance Interpolants for Interactive Scene Editing and Ray Tracing quot The abstract is included below The thesis is now available at http www graphics cornell edu kb publications html Abstract Ray tracers are usually regarded as off line rendering algorithms that are too slow for interactive use This thesis introduces techniques to accelerate ray tracing and to support interactive editing of ray traced scenes These techniques should be useful in many applications such as architectural walk throughs modeling and games and will enhance both interactive and batch rendering This thesis introduces radiance interpolants radiance samples that can be used to rapidly approximate radiance with bounded approximation error Radiance interpolants capture object space ray space image space and temporal coherence in the radiance function New algorithms are presented that efficiently accurately and conservatively bound approximation error The interpolant ray tracer is a novel renderer that uses radiance interpolants to accelerate both primary operations of a ray tracer shading and visibility determination Shading is accelerated by quadrilinearly interpolating the radiance samples associated with a radiance interpolant Determination of the visible object at each pixel is accelerated by reprojecting interpolants as the user s viewpoint changes A fast scan line algorithm then achieves high performance without sacrificing image quality For a smoothly varying viewpoint the combination of lazily sampled interpolants and reprojection substantially accelerates the ray tracer Additionally an efficient cache management algorithm keeps the memory footprint of the system small with negligible overhead The interpolant ray tracer is the first accelerated ray tracer that reconstructs radiance from sparse samples while bounding error conservatively The system controls error by adaptively sampling at discontinuities and radiance non linearities Because the error introduced by interpolation does not exceed a user specified bound the user can trade performance for quality The interpolant ray tracer also supports interactive scene editing with incremental rendering it is the first incremental ray tracer to support both object manipulation and changes to the viewpoint A new hierarchical data structure called the ray segment tree tracks the dependencies of radiance interpolants on regions of world space When the scene is edited affected interpolants are rapidly identified and updated by traversing these ray segment trees Kavita Bala kb graphics cornell edu http www graphics cornell edu kb A commercial product but one that should be mentioned if only because commercial hardware dedicated to ray tracing is currently rare http www art render com ART s RenderDrive Algorithm details are relatively scarce but you might glean something from their page http www art render com technology ar250 html There was a paper on this at the hardware conference that took place concurrently with SIGGRAPH 99 no I do not have a copy Announcing Steve s Object Builder Ver 1 4 Steve s Object Builder is a free script based tool that can be used to make 3D objects for ray tracing programs such as POV Ray The tool uses Perl Practical Extraction and Report Language as its script language interpreter One nice thing about Perl is that it is easy to use and it is freely available on many platforms such as UNIX Windows and Macintosh You do not have to be a expert Perl programmer to use this tool Features RAW output POV Ray smooth triangle output Moray UDO output DXF output POV scene file output Set smoothing angle for POV output Set edge angle for UDO output Swap the y and z axis option Scale the final object to a absolute size Hermite curves Bezier curves Bspline curves Catmull rom curves Translate Rotate Scale functions Skin Extrude Extrude along a path Gravity Sweep Polygon triangulation Group object pieces by name L systems Over 40 example objects Check out my latest version at http www carr lib md us stevensl Steven Slegel sslegel pop700 gsfc nasa gov A modeller in Perl It s more an aid for doing procedural modeling with a number of constructs for you to control The basic mode of operation is to define a 2D contour and extrude it in some way Since it s procedural things like L systems can be done relatively easily EAH I ve A J Chung finally completed my Ph D duties and have placed the resulting thesis online http www doc ic ac uk ajc Papers thesis ps bz2 2 0 MB While this body of work does not concentrate purely on Global Illumination some interesting ideas are proposed implemented and studied that may be of interest to researchers in this field 1 Ray space partitions for ray casting acceleration 2 Detecting total occlusion of ray shafts in non polygonal environments 3 Constructing smooth shading functions over arbitrary topologies 4 Robust classification of shadow regions umbra penumbra and full illumination to uncompress this file get the bzip2 uncompressor from http sourceware cygnus com bzip2 EAH Panorama is a GNU project framework for 3D graphics production The site has not been updated in the past few months but the code appears to have a number of more advanced effects including volumetric lighting and an implementation of the cellular texture basis function http www gnu org software panorama panorama html BMRT Pixar Tidbits We used the ray tracing functionality of BMRT http www bmrt org on A Bug s Life for 15 shots totalling around 30 40 seconds Of course the way the quot ray server quot works is that BMRT was only used for the refraction rays and what you see quot through quot them the rest of the scene was rendered with PRMan as usual http www bmrt org bmrtdoc rayserver html gt Does anyone here know how BMRT s radiosity works I hear it s the most gt accurate algorithm developed so far apart from reverse raytracing and the gt like I ve never heard that BMRT just uses a fairly standard finite element progressive refinement radiosity then substitutes the indirect component of the radiosity pass for the ambient illumination in the ray tracing pass It s really not all that sophisticated Larry Gritz lg pixar com A number of polygon triangulators were mentioned in RTNv10n2 Here are some others and new links for older ones http www cs unc edu manocha CODE GEM chapter html http www cosy sbg ac at held projects triang triang html http www cs cmu edu quake triangle html http www cs huji ac il danix code cdt shar gz The last two are more concerned with triangulations which avoid producing narrow triangles which processes such as finite element analysis prefer links from Jeff Erickson in comp graphics algorithms Radiance Online is a unique web based fully automated 100 self service rendering server providing user friendly rendering based on the Radiance synthetic imaging system http www artifice com rendering render html Small renderings are free an interesting concept though it s not clear from the web page why you d want to do this The normal advantage of this sort of thing is that the server is much more powerful than your client machine but the server available is not discussed here EAH If you enjoy links to new ray traced images or want to announce your own works consider subscribing to the Raytraced Mailing List http www povlab org raytraced If you use POV Ray you might like TextureView a free texture manager http home t online de home schmidtze software The SIGGRAPH bibliography searcher http www siggraph org publications bibliography is a wonderful tool which has been upgraded this year It does not provide you with lists of papers on particular subjects though Pointers to some human generated lists on particular topics can be found on the ACM TOG page http www acm org pubs tog BibLook html I welcome additions to the focussed bibliographies listed here ACM TOG can also provide such bibliographies a home if you do not have web space Megahedron RTNv10n2 lives on as Hypercosm http www hypercosm com This renderer is interesting in that it uses the trick presented in a technical sketch at SIGGRAPH 99 by Abe Megahed who runs Hypercosm of reflecting rays at the vertices of polygons and sampling the reflection direction The reflection color is then added to the local shade for the vertex and the resulting color blended as usual using Gouraud shading It gives a rough soft sometimes funky reflection at the cost of just a few rays allowing real time reflection approximation The same technique can be used for rough shadows the major criteria affecting quality is the underlying mesh and its resolution on the screen Ken Joy s On Line Computer Graphics Notes and Geometric Modeling Notes pages have some valuable tutorials on a wide range of subjects These are at http graphics cs ucdavis edu GraphicsNotes Graphics Notes html http graphics cs ucdavis edu CAGDNotes CAGD Notes html thanks to Craig Reynolds for pointing these out Another Java raytracer with source http www l shaped freeserve co uk computing lray Me I m waiting for a ray tracer for the Palm PDA Source for a Java Z buffer class can be found here http home wxs nl ammeraal grjava html Stomp3D is a modeler written in pure Java Find it at http msnhomepages talkcity com RedmondAve stomp3d download html Worth a look is http www personal umich edu mstock pages builder html This site has some interesting 2D vortex erosion and other simulation demos as well as some DEM converters and other tidbits back to contents The Ups and Downs of Multithreaded Ray Tracing and Optimization by John Stone johns ks uiuc edu http www ks uiuc edu johns John has one of the physically fastest ray tracing systems on the planet see the end of the Introduction in RTNv11n1 EAH Basic Parallelism Issues It is well known that ray tracing is a highly parallelizable process A naive ray tracer can be trivially parallelized by splitting up the image into chunks which are divided up evenly among processors with each processor computing its own pixels entirely independently of the others This simple approach will go a long ways in making a naive ray tracer run faster With a more complex ray tracing system there are several trade offs that have to be made The granularity of the parallel decomposition size of the work chunks has a direct effect on the amount of load imbalance among the CPUs The larger the chunks the more imbalanced the CPUs will tend to be The smaller the chunks the more balanced the CPUs loads will be A quot pixel cyclic quot decomposition each CPU traces every Nth pixel in the image yields the best load balance The granularity of the parallel decomposition also affects the spatial coherence of consecutively traced rays on a CPU Larger sized chunks of work yield good ray coherence The quot pixel cyclic quot decomposition yields almost no ray coherence Some classic ray tracing acceleration schemes depend on ray coherence in order to function well e g shadow cache Ray coherence has an additional side effect of promoting accesses to already in cache data structures yielding better performance than random access patterns The way that computed pixels are stored in memory can have a direct effect on communications performance when gathering pixels together into a final image buffer When a CPU s finished pixels are stored in a contiguous array they are very easily transferred to their destination using a minimal amount of communications and no requirement for quot packing and unpacking quot that data at source or destination When groups of finished pixels are not in contiguous memory they have to be sent using multiple communications calls or by packing unpacking at source and destination When pixels are stored in a strided manner packing and unpacking operations are necessary at both source and destination Since CPU speeds have been increasing substantially every year but memory bandwidth and latency have not kept apace floating point operation counts are no longer the dominant issue in writing high performance rendering software This is especially true since great progress has been made in development of ray tracing efficiency schemes Modern CPUs are highly pipelined often having tens of instructions in flight at any given time As a result it is becoming more important to avoid causing CPU pipeline stalls than to reduce overall operation count Typical causes of such stalls are memory load store operations and compare branch operations Items 1 2 and 3 from the above each have a relationship with the CPU issues in the previous paragraph Balancing these issues is a major part of writing a fast ray tracer on parallel multiprocessor computers What combination of 1 2 3 is best depends on what goals a ray tracer is attempting to meet They are vastly different for a real time oriented ray tracer than they are a normal ray tracer The Challenges of Multithreading Although the parallelism issues involved in ray tracing are well known the vast majority of the work done in parallelizing ray tracing as been done on distributed memory parallel computers Shared memory parallel computers offer a number of advantages over distributed memory machines but they also present a number of challenges which need to be overcome in order to fully capitalize on these advantages Some advantages of multithreading and shared memory hardware 90 of the data structures in a typical ray tracer can be shared by all threads processors yielding a tremendous savings in memory Most notable candidates for sharing are the scene database texture maps and volumetric data Most modern distributed memory ray tracers do not partition the scene database across nodes due to the high communications costs and complexity involved in passing rays or objects between nodes Most implement by keeping an entire copy of the scene on each node CPUs can synchronize and communicate with each other at tremendous speeds Typically these speeds are order s of magnitude faster than the message passing hardware in distributed memory machines It is easier to parallelize code to very fine granularity on most shared memory machines This allows a ray tracer to extract parallelism that is difficult or impossible to squeeze out of a typical distributed memory machine Complications involved in multithreading and shared memory Most ray tracing algorithms were designed with sequential non reentrant implementations in mind Any algorithm can be adapted to yield correct results in a multithreaded environment but some perform very well and others perform very poorly The main issue which determines performance in a multithreaded environment is the way an algorithm uses memory especially memory which is shared by multiple threads The actual implementation issues vary considerably including The use of unprotected static global data When multiple threads access global static data without the use of mutual exclusion locks the values of these data items become scrambled Adding mutex locks to protect such data items can cure the scrambling problem but may also result in poor performance if done naively The assumption that data structures will not be used in a reentrant way As with global data shared data structures must also be protected from unintentional concurrent use The use of non reentrant or otherwise unsafe library functions There are surprising number of commonly used library functions which are not thread safe Library functions can encapsulate problems such as a and b causing problems for code that uses them A simple example of this is the rand implementation provided by most C libraries The rand function contains internal static data and is not thread safe When use concurrently by different threads it yields unpredictable results ranging from incorrect behavior to fatal crashing Straightforward modifications to existing data structures to allow reentrancy i e addition of mutex locks etc typically yield performance problems due to high lock contention etc It often takes a slightly novel approach to keep 90 of the benefits of the original sequential non reentrant code when going to a fully reentrant multithreaded implementation The layout of data structures in memory may cause quot hot spotting quot thrashing the machine s cache coherency hardware Hot spotting occurs when two unrelated data structures occupy nearby memory addresses close enough that they fall within the same cache line most SMPs or memory page some NUMA machines When the quot unrelated quot data structures are accessed concurrently by different CPUs the cache lines that contain the data structures thrashes back and forth between the CPUs as writes occur to the two data structures The Challenges of Real Time Ray Tracing The design and implementation of a ray tracing system capable of attaining real time rendering rates 15 fps or more poses several unique challenges to the implementer Some of these challenges actually simplify other design decisions quite a bit At a rate of 15 frames per second there is no time to dynamically load balance cpus to any great degree By the time you figure out which processors are doing too much work and which ones are underutilized the frame is finished rendering Since we re talking about real time it s safe to assume that the next frame will be different maybe quite different from the last one so load balancing factors computed for a previous frame probably aren t too helpful either For real time ray tracing we might as well throw out any ideas of load balancing and instead concentrate on reducing overhead in the code The best strategy for load balancing in this case is to come up with a good static decomposition balanced against ray coherency and other issues mentioned previously In order to achieve high frame rates the per frame overhead in the ray tracer itself must be minimized Simple things like allocating image buffers allocating and clearing counter arrays for grid data structures these all add to the overhead which is incurred on every frame At 15 frames per second there s no time for copying data around much The layout and format of the rendered pixels needs to be darn close to its final form so that there s no need for various packing unpacking of strided pixel data from remote CPUs and the number of messages sent between CPUs should definitely be minimized Unlike a regular non real time ray tracer overhead from simple processes in the ray tracing algorithm can actually have a direct effect on the maximum attainable rendering speed Such processes include pixel value range clamping and quantization generation of primary rays according to camera parameters allocating or clearing arrays to store counters for quot mailboxes quot used by grid acceleration schemes etc Things that would never make the Top 10 list of time consuming pieces of code in a regular ray tracer may actually show up as serious CPU time contenders in a real time ray tracer when rendering scenes that are simple enough to be rendered in real time or when using enough CPUs to render more complex scenes at such a speed A simple way to see this effect is to render a quot blank quot screen How fast can your favorite ray tracer render an empty scene with no objects and no lights It is surprising how slow most ray tracers are before they are tuned for this Remember we get less than 1 15th of a second to do everything Obviously if a ray tracer can t effectively render a quot blank quot scene at a very high rate then there s no way it can render a real scene at sufficient speed Once a ray tracer can render a quot blank quot scene at a very high rate then the next step is to start rendering progressively more complex scenes concentrating on finding unnecessary overhead when rendering very simple scenes There are often bits of overhead which can be eliminated by pulling various initialization code outside of the per frame sections of code and moved into a separate centralized initialization section For more information publications and John s source for a portable high performance ray tracing system supporting MPI and threads and with a front end that reads NFF MGF and AC3D see his web site at http www ks uiuc edu johns EAH back to contents A Summary of Octree Ray Traversal Algorithms by Vlastimil Havran havran fel cvut cz Vlastimil is currently at the Department of Computer Science and Engineering Faculty of Electrical Engineering Czech Technical University Prague In the previous RTNews RTNv12n1 there was an informal discussion about octrees especially about ray traversal algorithms for octrees Since I have devoted some effort in the past to implementing and testing three octree ray traversal algorithms I have decided to try to review these and other octree traversal algorithms for ray tracing in this article There were at least 20 papers written about octrees and related stuff in RTNews this topic was also heavily discussed The last article about octrees that I am aware of was published more than three years ago I have decided to cite these paper chronologically as they were published in order to estimate the contribution of these papers when they appeared Principally creating octree spatial data structure is nothing complex We start with the axis aligned bounding box of the whole scene consider this as a node of the octree at the depth zero Subdivide it by three planes at all three axes eight smaller bounding boxes are created that are called octants Now recursion takes place for all the eight octants 1 Find out how many objects intersect the corresponding bounding box of the octant 2 If the number of objects is greater than a given threshold and the depth of the node in the octree is smaller than a maximum depth allowed consider this octant as the scene and start from the beginning Otherwise mark this octant a leaf node then assign it the objects intersecting with its bounding box usually simply a linked list or an array of pointers to objects The issue of when to declare the node as a leaf is usually called termination criteria with the number of objects and the depth of the node are the variables usually discussed and used So the octree is simple is not it So the question is what all the papers were about Let us look at the articles 1 A S Glassner Space Subdivision for Fast Ray Tracing IEEE CG amp A pp 15 22 October 1984 This is the first paper about octrees and tracing rays that is usually credited in citations The traversal algorithm is simple compute the point Q that is not currently inside the processed leaf voxel but in the neighbor voxel and perform point location for this point Q The point location search always starts from the root of octree for deeper hierarchies this may waste time For memory representation Glassner used a hashing scheme over the octree node s unique IDs At that time memory saving was an important issue so storing empty nodes was avoided This article is also considered historically the first one that really brought significant speedup for ray tracing algorithm by a practical algorithm comparing with an O N one the truth is that two octree amp ray tracing article were published in 1983 in Japan by Fujimoto et al and Matsumato et al but they were written in Japanese and thus were are not publicly available I implemented this traversal algorithm results are below 2 F W Jansen Data structures for ray tracing Data Structures for Raster Graphics pp 58 72 June 1985 The paper is a summary of the ray tracing algorithm and it also includes a part about spatial subdivision methods and ray traversal algorithms It first outlines on page 68 the recursive traversal algorithm for the hierarchy that can be used both for BSP trees and octrees No experimental results were presented 3 Kaplan Space Tracing A Constant Time Ray Tracer SIGGRAPH 85 Tutorial on STAR in Image Synthesis July 1985 This paper is actually about BSP trees but is included since they can emulate octrees in a simple way by forcing the BSP construction to finish only at the depth of a multiple of three My opinion is that the title of the paper is rather an exaggeration I do not have a copy of this paper if any of the readers would send me a copy I would appreciate it 4 A Fujimoto et al ARTS Accelerated Ray Tracing System IEEE CG amp A Vol 4 No 4 1986 This paper is actually about uniform grids called SEADS but it discusses the traversal algorithm for octrees that gave rise to uniform grids It follows from the paper that uniform grids were invented because the 3DDA traversal algorithm for octrees was not as efficient as the authors had expected particularly the vertical traversal algorithm for the octree They discussed the 3DDA octree traversal in detail and compare it with the uniform grid 3DDA traversal For a presented scene the total rendering time of the ray tracing with octrees was about 3 times longer than the one for uniform grids when using the octree traversal algorithm using Glassner 1 The time for a traversal step to the next voxel is for the uniform grid 3DDA 13 times faster than for a octree traversal step using Glassner The total rendering time and the time for one traversal step is sometimes misinterpreted by papers that follow 5 Q Peng et al A Fast Tracing Algorithm Using Space Indexing Techniques Proceedings of Eurographics 87 pp 11 23 1987 This paper is about reduction of empty voxel encoding It also discussed the intersection test of a triangle with a voxel The authors claim that their traversal algorithm is faster in execution than 1 2 but they do not support it by any experimental results In my personal view the contribution of this paper is unclear 6 A S Glassner Spacetime Ray Tracing for Animation IEEE CG amp A pp 60 70 1988 This paper touches the hybrid of BVH and octree together with fourth dimension time when ray tracing the animations The details of octree traversal are not discussed 7 J Arvo Linear Time Voxel Walking for Octrees RTNews2 March 1988 In this RTNews issue the author analyses the properties of the recursive octree traversal algorithm which actually was first published in 2 by Jansen He uses BSP trees to explain the algorithm and especially for the analysis Even if the concept of the traversal he reinvents is the recursive algorithm the analysis is bright and it is interesting brain exercise you can try it The originality and properties of this traversal method are discussed by Eric Jansen in the subsequent RTNews3 and later in the RTNv5n1 also by Kelvin Sung in his Gems III article on BSP tree traversal and in the RTNv5n2 8 H Samet Implementing Ray Tracing with Octrees and Neighbor Finding C amp G Vol 13 No 4 pp 445 460 1989 This paper introduced a special traversal method algorithm based on tables to neighbors Since the results of this algorithm are presented below for SPD scenes we briefly describe it 1 compute the intersection point P of a given ray with the axis aligned bounding box of the scene 2 Move the point P inside the bounding box by epsilon along the ray path 3 Find out the voxel V of the octree containing P using point location 4 Compute the exit point Q of the ray with this voxel 5 Move Q by epsilon outside the voxel boundary along the ray path 6 Ascend octree hierarchy until Q lies in the node pointed at This is performed using several intricate tables for faces edges and vertices 7 Descend down the octree until a node W of a size greater or equal to V using only tables routing 8 If the reached node W is not a leaf node of the octree descend further using point location 9 Compute the intersection test of a ray with the objects in the voxel 10 If an intersection exist lying between P and Q computation is over 11 Otherwise go to step 4 At first view this complicated algorithm is interesting in the sense it descends using point location if needed and ascends until some upper node is found It does not precompute where this ascending will be in the hierarchy and in this way differs from recursive ray traversal It also intelligently uses the information of where the ray exits the voxel to avoid point location when ascending and descending back to the same depth The algorithm was also probably published in Samet book Application of Spatial Data Structures but I was not successful in buying this book it was sold out or in borrowing it from the library If anyone can lend me this book for some time I would appreciate it 9 K Sung A DDA Octree Traversal Algorithm for Ray Tracing Eurographics 91 proceedings pp 73 85 September 1991 In this paper the author uses a method similar to Fujimoto of a virtual uniform grid over the octree Unlike Fujimoto s approach the traversal is based on the smallest voxel size and is actually 3DDA uniform grid traversal algorithm In each virtual voxel it is checked whether it is a new processed voxel using a smart hashing scheme which was for me at the first view rather hard to understand The necessary condition of this approach is that subdivision planes for each interior node have to lie in the middle of the current octant He compares the algorithm with octree by Glassner 1 Arvo Jansen 7 2 and uniform grid 4 The results are not striking no significant difference in timings is reported 7 17 for scene quot mount quot from SPD the proposed algorithm is even slower 10 B S S Pradhan and A Mukhopadkhyay Adaptive Cell Division For Ray Tracing C amp G Vol 15 No 4 pp 549 522 1991 This paper claims in the introduction that it is the combination of the octree and the uniform grid I have found out after careful reading that it is actually about BSP trees but they are traversed as octrees The authors do not cite any paper about BSP trees Kaplan or MacDonald amp Booth or Subramanian amp Fussell and do not compare their results experimentally with another method The interesting is that the octree traversal algorithm that was briefly outlined very much resembles the one later discussed in detail and published by Gargantini 14 11 M D J McNeill et al Performance of Space Subdivision Techniques CGF No 11 Vol 4 pp 213 220 1992 Authors from University of Sussex discuss the octree in context of parallel execution on more processors They deal mainly with the dynamic subdivision of the octree on the fly and showed the statistics of the number of octree leaf nodes at different octree depths They also provided their view of comparison among grids octrees and BSP trees to some extent using common sense but without any experimental results The interesting fact is the use of the HERO traversal algorithm for octrees Agate Grimsdale and P F Lister The HERO algorithm for ray tracing octrees in Advances in Computer Graphics Hardware IV 1991 that does not require the octants to have to be cubes I do not have this paper so I do not know what HERO was about Surprisingly they conclude the paper with the statement that octree are a more efficient data structure than BSP tree and grids Another related paper not covered here is the SMART algorithm see the article that follows EAH 12 P K Hsiung and R Thibadeau Accelerating ARTS Visual Computer Vol 8 No 3 pp 181 190 Springer Verlag 1992 This paper claims in the abstract that presents a hybrid combination of uniform grid and octree that is why I include this paper here The authors discussed a method when the node is subdivided into more than 8 voxels namely 4 3 or 8 3 though these should not be called octants any more They call their method FINE ARTS For traversing between the voxels they used 3DDA algorithm at the corresponding depth of a node But stop reading and think now This is actually the approach of recursive grid with limited resolution setting is not it The authors compare the results with Fujimoto 4 octree and uniform grid The authors do not cite work of Jevans and Wyvill Adaptive voxel subdivision for ray tracing GI 89 pp 164 172 1989 So their contribution is rather questionable 13 E Groeller Oct tracing animation sequences SSCG 93 pp 96 101 1993 this conference has its page at http www uniba sk sccg Author presents an approach based on octrees when rendering multiple frames of a scene with moving CSG primitives He uses some global CSG trees and local instances and for presented scenes he saves up to 75 of rendering time The paper is about temporal coherence when the viewpoint is fixed Author in this paper follows the work of Glassner 6 14 I Gargantini and H H Atkinson Ray Tracing and Octree Numerical Evaluation of the First Intersection CGF Vol 12 No 4 pp 199 210 1993 In this paper the authors propose the recursive traversal algorithm that has special identification of octants that have to be traversed Authors claim the improvement of execution speed from 32 to 62 over the Samet traversal code 8 when the number of voxels is huge Since we implemented this traversal algorithm we outline it briefly We assume the signed distance to the entry point and exit point of the octant is known First we compute the signed distances with all three subdivision planes We sort these three signed distances in an ascending order Then we disregard the signed distances outside the interval given by the entry point and the exit point Next we identify the octants by the positioning of the intersection points with subdivision planes with regard to the other planes coordinates The traversal is based on the knowledge that in an octree at most four octants can be pierced These are induced by four intervals given by three intersection points inside the current octant plus entry and exit point five points along the ray path gives four intervals The authors also discuss the robustness of the traversal algorithm when the ray pierces the neighborhood of intersection of more than one splitting plane at worst the middle point of the octree node 15 R Endl and M Sommer Classification of Ray Generators in Uniform Subdivisions and Octrees for Ray Tracing CGF Vol 13 No 1 pp 3 19 1994 In this paper the authors give a comparative study of traversal techniques for uniform grids and octrees The number of traversal methods they implement and test is eleven so it is the most extensive study of octree traversal algorithms presented up to now We only enumerate these traversal algorithms called in the paper ray generators a Glassner 1 b Peng 5 c Samet 8 d Part of Samet 8 algorithm devoted to the ascending descending phase e Sandor J Sandor Octree Data Structures and Perspective Imagery C amp G Vol 4 No 4 pp 393 405 1985 I do not have this paper f Rothe in Dissertation of University in Karlsruhe Germany 1991 written in German g B Froehlich and A Johannsen paper from 1988 also written in German h Sung 9 i Fujimoto 4 j Optimized travesal algorithm of Samet 8 h two Endl s methods which is also another hybrid of Samet 8 and Fujimoto 4 very similar to Fujimoto s octree traversal From the paper follows that for two test scenes the j algorithm is probably the fastest Paper concludes with stating that selection of the fastest acceleration method is scene dependent uniform grid versus octree 16 N Stolte R Caubet Discrete Ray Tracing High Resolution 3D Grids WSCG 95 pp 300 312 1995 WSCG conference is at http wscg zcu cz This paper is about discrete ray tracing originally coined by Yagel or as it is also known volume ray tracing when the objects are represented not by shape but by the presence in a huge voxel space let us say at least 256x256x256 This requires the memory to be large enough so the authors attack the problem from the opposite direction grids gt octrees They use the octree to reduce this space They provide a fixed point two step traversal 3DDA algorithm but over the octree which saves 50 of rendering time in comparison to Yagel s algorithm The two step algorithm is considered as one octree of resolution having more than 8 voxels for example 32x32x32 similarly to 12 This node if it is not empty contains another such an octree In my opinion it is actually the concept of the hierarchical grids but used for volume visualization 17 S Worley and E Haines Octrees and Whatnot RTNv8n2 May 16 1995 This RTNews contribution discussed some unusual tricks for octrees and z buffering using octrees Better to read now than have any comments 18 N Stolte R Caubet Discrete Ray Tracing of Huge Voxel Space Eurographics 95 CGF Vol 14 No 3 pp 383 394 1995 This paper has completely the same content as 16 but different text formatting and sentences are changed I really wonder that it was not rejected when previously published by WSCG in February The paper also does not cite 16 and I consider this paper publishing policy of authors rather inconvenient 19 I Gargantini and J H G Redekop Evaluation Exact Intersection of an Octree with Full Rays using only Radix Sort and meet operations Compugraphics 95 pp 278 284 1995 This paper deals with volume visualization as well It uses the information about the viewpoint with regards to the bounding box of the whole scene that is 26 3 3 1 regions The visibility of octants is then predetermined by the priority order of octants for a given region if rays hits octree root node This is then used for DDA to accelerate ray shooting but unfortunately no experimental results are reported Similar approaches can be found in many visibility papers 20 K Y Whang et al Octree R an adaptive octree for efficient ray tracing quot IEEE TVCG Vol 1 No 4 pp 343 349 1995 This paper applies a cost function based on surface area heuristics to octree construction precisely according to the paper of MacDonald and Booth Heuristics for Ray tracing Using Space Subdivision Visual Computer pp 153 165 Vol 6 No 6 1990 The idea is not to split the octree node to the eight voxels of the same size but to position the plane s at the minimum of the cost function estimate The cost function is computed independently at all three axes and the planes position is also selected independently The paper does not introduce anything that is novel except the name Octree R It reports the results on scene gears tetra balls and rings the improvement is by 4 47 concerning the intersection tests The authors neglect the rendering times in the comparison this improvement is 17 37 They do not mention which traversal algorithm they used and also they do not compare the results with the original paper of MacDonald and Booth However the results of this approach are below 21 E Reinhard A J F Kok F W Jansen Cost Prediction in Ray Tracing EGWR 96 pp 41 50 1996 This paper is not about octrees but it estimates the cost of a spatial hierarchy for a given scene when the hierarchy is built The issue is whether it is possible to predict the performance of a spatial data structure before ray tracing is started this issue is important especially for huge scenes The first half of the paper is about any hierarchy but the octree is taken as the example in the article at the second half It is difficult to restate the results here in short it is an interesting paper worth reading also containing experimental data I have not included papers which are specifically about BSP trees k d trees since these are something rather different The BSP tree can emulate the octree but the octree cannot emulate the BSP tree The cost for traversing this simulated octree using a BSP traversal algorithm can be higher or lower but it very much depends on the implementation I do not included on this list the papers which I have not read mostly several master theses and technical reports since they have been unavailable These probably do not contain new stuff I also omitted several papers which use octrees but in which the octree is not a topic discussed in the paper From of all the papers listed above we can observe these important issues a scheme for storing octree hash table linear scheme node with pointers b construction algorithm for octree in the midpoint of the current node the position with best cost estimate c traversal algorithm sequential recursive neighbor finding etc These three issues are usually somewhat intertwined A year ago I decided to form my own opinion about octrees based on the implementation in the GOLEM rendering system developed at our department http www cgg cvut cz GOLEM I therefore involved three undergraduate students in the fifth year for one term After reading the octree papers I selected following methods OCTREE84 C Glassner s classic paper 1 but implemented without a hashing table but rather using nodes with eight pointers to descendants OCTREE89 C the paper of Samet 8 since the traversal code is intricate and thus appealing OCTREE93 C the paper of Gargantini 14 since it was the latest one about the traversal algorithm for octrees and generally usable for ray tracing OCTREE84 A the approach of Octree R 20 applied to 1 The octrees are built by subdividing the center of the box except OCTREE84 A My strong request to students was that the generated octrees had to be the same for all the source code so the octree can be fairly compared based on ray tracing SPD scenes The termination criteria was the maximum depth also called level in some papers of the node in the octree and the number of primitives in the node For testing below I decided to take the maximum depth as variable 4 5 6 or 7 The node is not further subdivided when the number of objects is smaller than two The students did their job but later when I studied their source code I have found out that the coding itself is rather inefficient Therefore I completely rewrote their source code which took more than one man month of programming debugging and testing I improved the timing about three times in the best case and thus I believe the source code are now efficient enough I also decided to include Octree R for the paper of Gargantini OCTREE93 C this is marked as OCTREE93 A the approach of Octree R applied to 14 Letter C means center subdivision letter A means adaptive that is cost estimate subdivision The finding of the position of the splitting planes with minimum cost was performed exactly according to 20 for the object and spatial medians and for N splitting planes equidistantly placed between these two medians select the one with the minimum cost estimation I used N 10 I would like to note that such a selection scheme does not always find the minimum cost estimate since there can be a plane with better cost estimate even a plane outside the median interval Here we present only the timings for ray tracing SPD scenes for maximum depth allowed 4 5 6 and 7 The additional parameters number of nodes references to objects etc can be found at SPD site http www acm org pubs tog resources SPD overview html The parameters reported are the same as for previous comparison paper about hierarchical grids so the comparison between grids and octrees can be performed directly Rendering times are in seconds testing was conducted on Intel Pentium II 350 MHz Linux egcs 1 1 2 optimization switches O2 Method Maximum depth allowed 4 5 6 7 Scene OCTREE84 C balls 626 60 227 70 121 80 102 30 fluid 218 00 61 68 30 50 22 85 gears 316 10 247 00 260 60 339 50 lattice 64 53 56 37 61 37 65 65 mount 38 70 32 40 34 76 41 19 rings 179 80 113 50 111 80 133 30 teapot 50 55 33 17 30 72 34 12 tetra 7 27 6 34 6 79 8 00 tree 2907 00 1537 00 805 30 338 20 Scene OCTREE84 A balls 45 74 35 40 36 88 42 18 fluid 25 31 20 74 21 88 24 29 gears 206 60 209 70 246 10 330 00 lattice 60 03 49 32 51 75 52 90 mount 32 49 28 34 30 23 36 33 rings 109 30 86 47 92 81 119 40 teapot 34 77 27 65 28 56 33 27 tetra 6 48 5 31 5 05 5 57 tree 94 44 44 67 35 33 34 84 Scene OCTREE89 C balls 627 00 206 30 97 29 67 47 fluid 222 40 60 33 28 34 18 80 gears 302 70 229 00 236 30 303 40 lattice 60 72 45 22 47 68 50 58 mount 35 96 28 27 28 90 32 07 rings 173 70 101 80 94 38 107 60 teapot 46 44 27 16 22 97 23 92 tetra 6 60 5 23 5 24 5 90 tree 2887 00 1510 00 769 70 288 50 Scene OCTREE93 C balls 624 90 218 60 116 20 91 43 fluid 223 50 61 33 29 87 22 00 gears 314 10 246 10 256 60 327 90 lattice 65 89 55 45 59 00 62 19 mount 39 72 32 71 34 42 39 12 rings 181 10 112 10 108 80 126 30 teapot 48 92 30 82 27 78 29 89 tetra 6 93 5 83 6 10 6 96 tree 2893 00 1501 00 785 80 317 60 Scene OCTREE93 A balls 47 05 33 80 34 99 38 86 fluid 24 51 19 57 20 16 21 74 gears 210 90 212 00 245 50 323 60 lattice 62 33 50 15 51 39 52 36 mount 33 76 29 24 30 51 35 16 rings 111 30 87 69 92 60 115 90 teapot 33 05 25 33 25 67 29 27 tetra 6 21 5 09 4 94 5 60 tree 91 05 40 57 30 88 29 90 Best timings achieved Method OCTREE84 C OCTREE84 A OCTREE89 OCTREE93 C OCTREE93 A Scene balls 102 30 35 40 67 47 91 43 33 80 fluid 22 85 20 74 18 80 22 00 19 57 gears 247 00 206 60 229 00 246 10 210 90 lattice 56 37 49 32 45 22 55 45 50 15 mount 32 40 28 34 28 27 32 71 29 24 rings 111 80 86 47 94 38 108 80 87 69 teapot 30 72 30 72 22 97 27 78 25 33 tetra 6 34 5 05 5 23 5 83 4 94 tree 338 20 34 84 288 50 317 60 29 90 I have put s around the fastest timing for each scene EAH We can observe some interesting properties from the statistics When using subdivision for center and for cost estimate subdivision there is local minimum for the maximum depth allowed let us call it d min This minimum is more apparent for center subdivision the times for depths d min 1 and d min 1 are relatively higher than for adaptive subdivision For some scenes tree the local minimum was not achieved for tested maximum depth This property was reported by several papers starting with Fujimoto 4 The optimum maximum depth allowed always depends on the number of objects and their distribution in the scene The center subdivision always shows worse performance than cost estimate subdivision for SPD scenes for the same maximum depth allowed On the other hand the preprocessing time for cost estimate subdivision is usually higher than for center subdivision We cannot predict which of the subdivision methods will create a smaller number of leaves Usually for densely occupied scenes such as quot balls quot and quot gears quot the cost estimate subdivision creates a smaller number of leaves and surprisingly still outperforms center subdivision For sparsely occupied scenes such as quot tree quot cost estimate subdivision creates a significantly higher number of nodes and outperforms center subdivision considerably My opinion is that cost estimate subdivision adapts better to the objects distribution in the scene The best timings do not differ too much for center subdivision and cost estimate subdivision for some densely populated scenes But for the same depth cost estimate subdivision is the indisputable winner For sparsely occupied scenes the cost estimate subdivision is of significantly better performance The three different traversal algorithms show different number of traversal steps per ray OCTREE84 C A has always the largest number of traversal steps reported It is interesting that the difference in timings between traversal algorithms for the same scene and subdivision approach do not differ too much The reason for that is the traversal step for OCTREE84 C A is of low computational cost only three comparisons of coordinates per one step Surprisingly for center subdivision the quickest implementation is Samet OCTREE89 C We suppose that the traversal tables are probably stored in the cache so a traversal using mostly these tables can be also very quick This does not correspond with 14 too much OCTREE93 traversal cost per one step is rather high Current hardware eliminates to some extent the performance dissimilarities for different traversal approaches I can only state that I as the programmer did my best It is interesting to compare hierarchical grids with octrees The performance of hierarchical grids and octrees constructed with cost estimate subdivision are very similar for SPD scenes It is also valid for number of intersection tests per ray and number of traversal steps The number of cells interior nodes and leaves generated by hierarchical grids is remarkably higher It is caused by the construction of grids when creating a grid subdivision the number of cells is required to be near the number of objects in the grid bounding box We should realize that the octree is only a special case of hierarchical grids with a specialized traversal algorithm For SPD scenes measured and the parameters of statistics we can conclude that the hierarchies created by hierarchical grids and octrees are very similar and exhibit similar performances Hierarchical grids are not so sensitive to the setting of parameters for grid construction as the setting of the termination criteria for octrees It only supports the conclusion that these termination criteria for octrees in spite of their intuitive and common sense are not the most suitable for octree construction It should be interesting to implement the termination criteria using the cost estimate as outlined by the article K R Subramanian and D S Fussell Automatic Termination Criteria for Ray Tracing Hierarchies pp 93 100 GI 91 The article only discusses the possibility of using such termination criteria but no exact termination criteria are given and no experimental results were given in the article though the cost of the hierarchy is elaborated well It will be also interesting to compare octrees and hierarchical uniform grid for huge scenes containing millions of polygons since for such scenes hierarchical grids can have a real appeal I do not have available such scenes if you can provide any for this purpose please contact me by e mail What about the best efficiency scheme It is related but completely another problem Now we would like only to point out an article where the authors formally proved that the worst time complexity of ray shooting is O log N where N is the number of objects See please L S Kalos and G Marton Analysis and construction of worst case optimal ray shooting algorithms C amp G Vol 22 No 2 pp 167 174 1998 Most of the methods developed by computer graphics people do not take worst case complexity into account but average case complexity is rather the main issue even if not explicitly mentioned in the paper It still holds that the methods aiming at the worst case complexity that were developed by computational geometers exhibit practically unacceptable space complexity and preprocessing time complexity for common size scenes At the present I can only agree with the opinion that no acceleration technique has been proven to be prevalent for ray shooting problem for scenes with different number of objects and their distribution in the scene Any comments are welcome write to me at havran fel cvut cz back to contents Additional Octree Traversal Notes by John Spackman Erik Jansen F W Jansen twi tudelft nl and Joel Welling welling psc edu John Spackman writes I saw the quot Octree Traversal and the Best Efficiency Scheme quot thread in RTv12n2 as spawned by the question quot I m trying to find out about fast methods for traversing octrees It strikes me that you could use some kind of integer math method like a 3D Bresenham algorithm to get a list of cells a ray intersects quot As you point out Erik my SMART algorithm adopts this approach though as I recall Agate Grimsdale and Lister s HERO approach is a variant on SMART rather than vice versa I visited them at the University of Sussex in 1989 Anyway I thought you might be interested in some code I knocked up back at Edinburgh University for the lazy evaluation 3 D projections of Quaternion Julia Sets ray traced with SMART in integer arithmetic see the attachment This allows for some fast voxel addressing schemes during traversal The code only does orthographic views at the moment but perspective would be easy enough I can send this code on to interested parties EAH Erik Jansen F W Jansen twi tudelft nl replies Thanks Good to hear some more history My answer to Ben was just a direct reaction I did not check on the historical correct order HERO and SMART just came to my mind as octree versions of the ARVO algorithm Thanks for your code BTW I found the C amp G article extremely difficult to read It took me quite some time to find out that indeed the SMART algorithm was a top down recursive algorithm It was well hidden in the code Looking backwards we all can see how we failed to sell our ideas in a clear and effective way John Spackman replies Ah that ll be because I found it extremely difficult to write I m certainly more to blame than anyone for any confusion about the algorithm Now that the WWW is here I ve uploaded some old slides which may clarify the approach if you re interested they re at http homepages tcp co uk john mandy smart tree ps Joel Welling welling psc edu writes I just noticed your discussion in the latest Ray Tracing News RTNv12n1 The original topic was a Bresenham like octree traversal algorithm Do you know about Spackman and Willis quot SMART quot algorithm The Smart Navigation of a Ray Through an Oct Tree by Spackman and Willis Computers and Graphics Vol 15 No 2 pp 185 194 1991 It s quite elegant in C there is a C version which is perhaps less simple but more general included in my VFleet volume renderer http www psc edu Packages VFleet Home It s probably not a huge win for ray tracing as it comes from the days before cache coherence was the big issue but it certainly fits the description of being an integer based octree traversal algorithm back to contents Z buffer and Raytracing by Sam Paik paik webnexus com http www webnexus com users paik from comp graphics algorithms Nicolas Delalondre wrote I m trying ways to speed up my raytracing engine It uses currently a box automatic hierarchy I ve heard about the use of an modified Z buffer can do it for primary rays Is there someone to explain me how to use and implement such a Z buffer Can we use it in addition to bounding boxes Almost any rendering system can be used to do the eye rays Two major variants render but instead of a color per pixel use an object ID per pixel The object ID will be the first intersecting object After quot rendering quot the scene you go back over the buffer and compute the scene where the eye ray for each pixel is intersected with only one object the one whose ID is in the object ID buffer This extends to light sources you can go and compute the scene from each light source s point of view assuming you are talking about a point light and when you go to compute the ray tree intersection rays to the light can be looked up approximated really due to the sampling grid instead of a full traversal of the object database render then use the z buffer by discarding objects during the database traversals that could not have an intersection with the depth in the z buffer Same idea for the light sources here it is called a shadow depth buffer and the usage is much easier than for the object ID buffer just compare the distance to the light with the correct pixel in the shadow depth buffer if it is further away then you conclude the point is in shadow if it is approximately equal or closer due to sampling grid errors it is not shadowed by some other object You can see that a good hybrid solution is to use an object ID buffer for the eye rays and a shadow depth buffer for the light rays I can comment further on method a having used Weghorst amp Hooper s original code for it and implemented the algorithm again a few times over the years This method is mostly a fine idea but getting a perfect match between the Z buffer and ray tracer is impossible If the Z buffer says there s a particular object at a pixel and the ray tracer doesn t hit it no big deal you just shoot a full eye ray But you can get the opposite case the Z buffer says there s some object or no object but a full eye ray traced through the scene actually hits a closer object while also hitting the Z buffer s object further on This is indetectable short of shooting the full ray and results in an incorrect pixel Usually not a serious problem but something to be aware of One way to ameliorate the effect is to sample an area of the Z buffer e g get the IDs of a 2x2 or 3x3 area of the Z buffer and test all these EAH back to contents Ray Tracing Procedural Parametric Surfaces by Mark VandeWettering markv pixar com Stephen Westin westin nospam graphics cornell edu and Matt Pharr mmp graphics stanford edu from comp graphics algorithms Anis Ahmad anis NOTHANKSsprint com wrote What techniques are available for raytracing procedural parametric surfaces Tessellate to hell and find the intersection between the ray in question and the generated polygons It is usually preferable to stop just before the Stygian Gate but yes you are headed in the right direction I believe tessellation is in most cases the appropriate algorithm to choose There are some refinements of course tessellate only to the appropriate level based upon how large the patch is on the screen to avoid linear artifacts in the image and how strongly it is curved to avoid missing highlights You might also think about doing this tessellation in a lazy fashion only tessellate when the first ray penetrates the bounding box of the parametric surface and caching saving and throwing away tessellations in a LRU fashion The Toro crew at Stanford had some good ideas on how to make this work with their memory coherent raytracing research It is hard to argue that any numerical ray patch intersector has any advantages If you d like to try implementing one the Nishita Sederberg Bezier clipping algorithm is one to try described in Siggraph 90 proceedings if memory serves or Toth s 85 Siggraph paper on interval techniques If you are clever I believe you can combine ideas from the two techniques to develop one which might be superior to either The main problem with any technique like this is that the work done by each algorithm amounts to essentially a patch split per iteration usually with several iterations per ray If a patch is hit many times by rays you keep paying for patch splits Any attempt to cache the split caches is very similar in spirit to just tessellating anyway so why not just admit it up front and make that work well Stephen Westin replies Or to put it another way tessellation on demand with LRU caching is very similar in spirit to numerical iteration for direct intersection Seriously finding an optimal tessellation for a parametric surface is a significant computational task and for a trimmed surface it hurts just to think about Matt Pharr writes Hmm I don t think that it s that terrible to find a good tessellation rate for a parametric surface Can you elaborate on the problems you re thinking of Granted It s probably the hardest part about handling them in general vs bounding and evaluation say but the basic quot project the control points onto the screen and use them to bound parametric rate of change approach quot is pretty inexpensive computationally and works quite well As for trimming and ray traced patches I ve always been a fan of figuring out if the candidate hit point is actually trimmed out after an intersection with the non trimmed patch is found which is a comparatively easy 2d ray tracing problem Stephen Westin replies If you try hard to find the optimal tessellation i e the minimum set of polygons that represent the surface to within a given tolerance you wind up with some pretty funky mesh topology gt Granted It s probably the hardest part about handling them in general gt vs bounding and evaluation say but the basic quot project the control gt points onto the screen and use them to bound parametric rate of change gt approach quot is pretty inexpensive computationally and works quite well Isn t that a conservative approach that finds the max tessellation rate needed and tessellates the whole patch to that level I can imagine that it could over tessellate pretty badly which matters on large models and possibly lead to cracking between patches How does that work for secondary bounces where there is no quot screen quot to project onto Or to put it better the mapping to the screen is more complex and possibly ill behaved e g discontinuous I agree with Steve here it s harder to tessellate well for bounce rays and over tessellation for the view is a serious problem not a weird pathological case I remember walking through a scene with a few NURBS spheres on a workstation which had NURBS support in microcode At one point I thought the workstation had hung but in fact it just happened to be close to one of the spheres and its image based tessellation criterion caused it to generate millions of polygons EAH gt As for trimming and ray traced patches I ve always been a fan of figuring gt out if the candidate hit point is actually trimmed out after an gt intersection with the non trimmed patch is found which is a gt comparatively easy 2d ray tracing problem Assuming that relatively little is trimmed off that s a reasonable approach How does that work out with real world CAD models It s certainly possible that say 90 of the surface area is trimmed off which would be a big efficiency hit and a last tidbit from Stephen Westin As for procedurally defined surfaces the only reference that comes to mind is Kajiya s paper quot New techniques for ray tracing procedurally defined objects quot It was presented at SIGGRAPH 83 and published in Computer Graphics v 17 3 Besides laying out a method to calculate robust bounding volumes for fractal surfaces he describes a really odd way to ray trace surfaces of revolution involving bending space and using curved rays back to contents Raytracing Gloss Translucency by Peter Eastman peastman drizzle stanford edu Matt Pharr mmp graphics stanford edu and Stephen Westin westin nospam graphics cornell edu from comp graphics algorithms I m writing a ray tracer and I want to implement gloss and translucency effects In principle this is simple just use a random distribution to perturb the reflected rays about the pure specular direction and same for the transmitted rays As soon as I get into the details though it s not at all clear how to do this I ve gone through every book and article I can get my hands on and none of them give any details so I m hoping someone on here can help me out So to put it simply what s the best way of finding the perturbed ray directions For consistency with the Phong shading model I presumably need something that at least approximates a cos n distribution Also it needs to guarantee that no ray ever gets perturbed too far so that a quot reflected quot ray actually comes out the other side of the surface And finally to make sure the rays are uniformly distributed it would be nice if the full distribution can be broken up into bins and I can specify which bin a given ray should be in Simple right Any help would be very much appreciated Matt Pharr mmp graphics stanford edu replies A good place for starters is the book quot Monte Carlo Methods Volume I Basics quot by Kalos and Whitlock Every hour you spend reading that will more than make up for itself in writing a good distribution ray tracer Andrew Glassner s quot Principles of Digital Image Synthesis quot may also have some good material In general one wants to have an importance sampling function that maps two random numbers u1 u2 both between 0 and 1 to a direction on the hemisphere given the outgoing direction That importance sampling function should return both a new direction as well as the probability density function of choosing that angle hello Kalos and Whitlock The pdf roughly gives the probability of sampling that direction rather than some other direction Now the Monte Carlo estimate of the integral which is what you re trying to compute is f est Sum 0 n f x i pdf x i That is it s a sum over some number n of samples of the function f at point x i each one weighted by 1 pdf x i In this case your f is equal to the value of the reflection function e g Phong times the incident light in direction x i trace a ray and recurse to compute that A simple importance sampling function just picks random directions on the hemisphere This is a good importance function for a diffuse surface as you might imagine but it s lousy for a very glossy surface since most of the directions that it chooses will be in directions where the reflection function is low How to turn u1 u2 into a direction on the hemisphere One option is to ignore u1 u2 and pick random vectors in the unit square until you find one that s inside the unit sphere exercise show that you get a non uniform distribution of directions if you just randomly pick a direction in the unit square Vector3 sampleHemisphere Vector3 w do w x RandomDouble 1 1 w y RandomDouble 1 1 w z RandomDouble 0 1 while w length squared gt 1 w z 0 return w hat normalize w In this case the pdf is 1 2pi K amp W is your friend A better option is to map u1 u2 to a direction See Pete Shirley s web page for some techniques I think these are in some Graphics Gems book http www cs utah edu shirley Glassner probably discusses these too I just looked at Shirley s web page and was reminded of some good references see in particular quot Distribution Ray Tracing Theory and Practice quot If you have a more interesting reflection function e g Phong you re right about approximating the cos n stuff For Phong it turns out that you can sample it exactly What you want to do is use u1 to compute an offset from the reflected direction R dtheta and then u2 to compute a rotation around that offset phi These and some vector geometry give you the new direction Computing dtheta and the pdf is the tricky part The following function importance samples the Phong BRDF I really urge you to save this message read K amp W and maybe some of Glassner and try to derive the importance sampling function on your own Really you ll be glad you did returns pdf and fills in incoming pdf is zero if incoming is below the horizon in which case no ray should be traced and this sample s value should be zero double brdfSampleR const Vector3 amp outgoing Vector3 incoming double sample 2 double exponent double costheta pow sample 0 1 exponent 1 double sintheta sqrt 1 costheta costheta double phi sample 1 2 M PI Vector3 R reflection outgoing compute perfect reflection direction Vector3 Ru Rv R coordSystem amp Ru amp Rv computes two vectors Ru and Rv to form a little coordinate system around R incoming R costheta sintheta sin phi Ru cos phi Rv if dot incoming N lt 0 return 0 else return exponent 1 pow costheta exponent The next fun thing to do with a distribution ray tracer is area lights see quot Monte Carlo Methods for Direct Lighting Calculations quot again on Peter Shirley s papers web page Hope this helps Stephen Westin westin nospam graphics cornell edu responds to Matt s posting gt A better option is to map u1 u2 to a direction See Pete Shirley s web gt page for some techniques I think these are in some Graphics Gems book Gems III pp 80 83 gt If you have a more interesting reflection function e g Phong you re gt right about approximating the cos n stuff For Phong it turns out that gt you can sample it exactly And also for Eric Lafortune s multi cosine lobe representation which has at least a chance of physical accuracy For most glossy surfaces it s probably your best bet A RenderMan shader implementing the function but not random sampling of it is available at http www graphics cornell edu westin lafortune lafortune html Peter Eastman replies Thanks a lot to both of you for your suggestions I just glanced over Shirley s paper on distribution ray tracing and it definitely looks like something I should spend some time with Lafortune s model looks rather more elaborate than anything I was figuring on trying to do but who knows maybe I ll go crazy and give it a shot I ll take a look at the other references you suggested too I was thinking more about the problem last night and came up with another idea for how to handle it My idea was Find a unit vector in the ideal specular direction Add a random vector to it chosen from a uniform spherical distribution I d choose it using basically the method you posted pick random x y and z values and throw them out if the length is too large The radius of the distribution less than 1 determines how much reflections are blurred Renormalize the resulting vector and use it as the reflected ray direction Does this sound reasonable It s certainly not quot accurate quot in any sense of the word but it should be fast and look reasonably good One other question for Matt In the code you posted I noticed that when your reflected ray direction ends up on the wrong side of the surface you just return 0 Doesn t this cause reflections to get dimmer at grazing angles Or do you repeatedly call the routine until it gives you a nonzero value I was figuring that when this happens I would just flip the reflection vector to the other size of the surface so that the brdf would get squashed but keep the same total intensity Thanks a lot Matt Pharr replies gt Does this sound reasonable It s certainly not quot accurate quot in any sense of gt the word but it should be fast and look reasonably good That would definitely work in the sense of giving you pictures but I think it would cause weird artifacts As I understand the idea you re effectively sampling uniformly over a cone around the reflection direction Because the value of the effective reflection function doesn t fall off on the edges of the cone the reflections might look weird One possibility is to probabilistically reject rays rejecting them more often the farther they get from the R vector This is known as a rejection sampling technique gt One other question for Matt In the code you posted I noticed that when gt your reflected ray direction ends up on the wrong side of the surface you gt just return 0 Doesn t this cause reflections to get dimmer at grazing gt angles You would call the function n times n chosen ahead of time For any times that the reflected ray is below the horizon you just assign zero to that ray s result and still divide the sum of the samples by n when you re done That flip trick though done in certain widely used renderers is wrong An intuition is that you happen to have chosen to sample the function somewhere that it s zero You d like to avoid doing that but when you do that s relevant information and you should record it As such you take your lumps and record a zero result for the direction that you sampled Another way of thinking about it consider uniform sampling of a constant function over the hemisphere You take n samples Each sample has pdf 1 2pi see previous message Say the function is 2 everywhere Your estimate of the function is 1 n Sum n 2 1 2pi n n 4pi 4pi Now say that you re foolish and you pick random directions over the sphere The pdf is 1 4pi surface area of unit sphere The function is 2 for half of the directions you choose on average and 0 for the other half making an average value of 1 Your estimate should be 1 n Sum n 0 2 5 1 4pi n n 1 1 4pi 4pi If instead you reflected all of those rays to go in the up direction you d incorrectly get 8pi as an answer There are a couple of different ways to think about sampling in a distribution ray tracer One which seems to be where you re starting from and which is how Cook et al described the process originally is to find a way to generate samples that mimic the distribution you re interested in In effect it s necessary to integrate the function and invert the integral to do this Sometimes this isn t possible Another way of thinking is in terms of importance sampling you ve got some function that is maybe equal to the function that you re trying to integrate or maybe just similar to it in some way You figure out how to generate samples from that function s distribution Then when estimating the final value of the integral you divide by a normalization factor that accounts for the distribution that you actually sampled from This is a more general way of going about all this stuff though it is more tricky and adds another layer or two to get right But I d urge you to try to head in that direction at some point in the future Peter Eastman responds gt That would definitely work in the sense of giving you pictures but I gt think it would cause weird artifacts As I understand the idea you re gt effectively sampling uniformly over a cone around the reflection direction gt Because the value of the effective reflection function doesn t fall off on gt the edges of the cone the reflections might look weird Actually it isn t uniform since the displacement vector can lie anywhere inside the sphere not just on the surface So the probability is maximum at the center of the cone where the sphere is thickest and goes to zero at the edges gt You would call the function n times n chosen ahead of time For any times gt that the reflected ray is below the horizon you just assign zero to that gt ray s result and still divide the sum of the samples by n when you re done Ah I understand So at each surface you fire off many reflection rays to sample the distribution I m following Cook s method of only firing one ray and picking it according to the desired distribution In this case flipping the ray isn t really wrong it just means that your rays have a different distribution at glancing angles gt There are a couple of different ways to think about sampling in a gt distribution ray tracer One which seems to be where you re starting from gt and which is how Cook et al described the process originally is to find gt a way to generate samples that mimic the distribution you re interested gt in In effect it s necessary to integrate the function and invert the gt integral to do this Sometimes this isn t possible Shirley s Distribution Ray Tracing paper tells how to do that for a Phong distribution so I can use his equations Thanks again for telling me about that paper back to contents Importance for Ray Tracing by Per Christensen myandper aloha net It recently occurred to me that there is no paper or text book or other source that I know of that describes all the potential uses of importance to reduce ray tracing render time Hall s paper from 1983 describes how one can keep the fraction of contribution with each ray and use that to prune the ray tree There s an allusion to this method in RTNv9n1 The basic idea is to keep track of how much the ray will potentially change a pixel s color So if you say bounce off a surface that is 5 reflective and that bounce ray hits something else that s 5 reflective you might not generate this next reflection ray since its contribution will be only 0 25 EAH But this fraction which is identical to importance can also be used for many other things reducing the sampling of area light sources for soft shadows reducing the sampling of distant point lights reducing the computational effort spent in procedural texture shaders reducing the step length in ray marching for volumes with participating media reducing the number of rays in distribution ray tracing for glossy reflection reducing the computational effort spent in the computation of indirect global illumination of diffuse surfaces there are probably several other uses but I can t think of any more right now Do RT News readers know of any paper publication that describes this Just because I haven t found one doesn t mean that there isn t one Importance formally defined as the adjoint of radiance has been used a lot in global illumination since Smits Arvo Salesin 1992 but I wonder why it isn t more widespread in ray tracing None of the commercial ray tracers I know have this feature but then again I don t know them all As a point of reference the two commercial ray tracers I have written have this feature EAH I wonder why that is The potential time savings are quite considerable And it just requires a simple extension of the shading interface along with the cooperation of shader writers Of course for some shaders it doesn t make sense to use importance but then that shader should just pass its importance on in the next procedure calls The way I see it only BMRT has a good reason not to supply importance to its shaders it has to adhere to the Renderman definition Does anyone know if POV ray has importance Looking at the POV Ray docs I don t see anything EAH If not it s really a crying shame One last thing about importance and ray tracing it sometimes pays off to keep importance as an rgb color rather than just a scalar For example if a purely yellow metal sphere reflects a blue diffuse object none of the illumination of that blue object will matter for the reflection it will all be black anyway So we can save time by not tracing light rays and whatnot back to contents Good Computer Graphics Books by Brent McPherson brentmc microsoft com From comp graphics algorithms I liked his list so I thought it worth reprinting EAH Zachary Turner wrote can anyone recommend some good books on computer graphics theory Obviously there s the Foley book can anyone recommend some other good ones First I would recommend anything by Alan Watt I find his writing style very accessible and understandable His book quot 3D Computer Graphics quot is more accessible to a beginner than Foley et al IMHO As a computer graphics programmer I find the Graphics Gems books indispensable but they are not ideal tools for learning the theory Here s a few good books from my bookshelf 3D Computer Graphics Watt Advanced Animation amp Rendering Techniques Watt amp Watt Computer Graphics Principles amp Practice Foley et al Mathematical Elements for Computer Graphics Rogers Adams Procedural Elements of Computer Graphics Rogers Computer Graphics Handbook Mortenson Computational Geometry in C O Rourke Graphics Gems I V The Computer Image Watt Policarpo Principles of Digital Image Synthesis I amp II Glassner Splines for use in CG and Geometric Modeling Bartels Beatty Barsky Texturing and Modeling A Procedural Approach Ebert A Trip Down the Graphics Pipeline Blinn Dirty Pixels Blinn back to contents Eric Haines erich acm org Ray Tracing News Volume 12 Number 2 Ray Tracing News Volume 12 Number 2 Ray Tracing News Volume 12 Number 2 Ray Tracing News Volume 12 Number 2 Ray Tracing News Volume 12 Number 2 Ray Tracing News Volume 12 Number 2 Ray Tracing News Volume 12 Number 2 Ray Tracing News Volume 12 Number 2 Ray Tracing News Volume 12 Number 2 Ray Tracing News Volume 12 Number 2 http www acm org tog resources RTNews html rtnv12n2 html http www acm org tog resources RTNews html rtnv12n2 html http www acm org tog resources RTNews html rtnv12n2 html http www acm org tog resources RTNews html rtnv12n2 html 
%%==%%http://www.acm.org/tog/resources/RTNews/html/rtnv12n1.html%%==%%Ray Tracing News, Volume 12, Number 1%%==%%Ray Tracing News "Light Makes Right" June 25, 1999 Volume 12, Number 1 Compiled by Eric Haines , 1050 Craft Road, Ithaca, NY 14850 ...%%==%%51241%%==%%21 Dec 99%%==%% Ray Tracing News Light Makes Right June 25 1999 Volume 12 Number 1 Compiled by Eric Haines 1050 Craft Road Ithaca NY 14850 erich acm org Opinions expressed are mine not Autodesk s All contents are copyright c 1998 1999 all rights reserved by the individual authors Archive locations text version at http www acm org tog resources RTNews text HTML at http www acm org tog resources RTNews html You may also want to check out the Ray Tracing News issue guide and the ray tracing FAQ Contents Introduction Ray Tracing Roundup Comparison of Hierarchical Grids by Vlastimil Havran and Filip Sixta Great Shadow Hack summarized by Eric Haines Octree Traversal and the Best Efficiency Scheme by Ben Hutchison Eric Haines Hanan Samet and Erik Jansen Quicker Grid Generation via Memory Allocation by Eric Haines Introduction So what s my excuse this time Well it s a good one actually I ve been working on a book I m the second author of the upcoming book quot Real Time Rendering quot Tomas Moeller is first author I m still not exactly sure how I got involved with the project but am happy to have done so we wrote the book we wished we d had when starting out Interestingly Tomas and I have never met in person and talked but once on the phone after the bulk of the work was done That said I ve never worked as closely with anyone else in my life ahhh the miracle of email and FTP Anyway the book will be out by SIGGRAPH 99 the publisher is A K Peters the web site is http www acm org tog resources RTR and has sample sections and an edited guide to resource links Actually real time ray tracing rendering techniques RTRTRT is a hot topic now Remember SIGGRAPH 98 The Ray Tracing Roundtable was more than just a shmooze fest last year with the idea of using ray tracing in a real time setting discussed as a serious possibility Well real time ray tracing has been possible for years on a PC but only through demo programs see http www acm org tog resources RTNews demos overview htm for a page put together by Piero Foscari That a 4K program can do anything let alone rapidly ray trace is pretty great For an online Java interactive ray tracer in action see http www eyeone no raytracing index html Parker et al at the University of Utah just presented a paper quot Interactive Ray Tracing quot at the 1999 Symposium on Interactive 3D Graphics 35 million spheres at 15 frames per second on 60 processors Admittedly a lot of those spheres were occluded by being in a dense array hey even if spread out there are only so many pixels on the screen but the point is that a hidden surface algorithm which simply threw the entire database at the screen currently cannot compete The announced Playstation 2 which I ve read one reviewer say is about 4 5x as fast as an InfiniteReality 2 can do 20 million polygons a second This is pretty good no actually it s incredible but a far cry from 525 million spheres a second With Moore s Law it would take pure Z buffer based machines almost a decade to catch up to Utah s feat See their paper at http www2 cs utah edu bes The one word summary of their paper optimization For every hour spent programming algorithms they spent four hours optimizing the code It is interesting to see that as architectures change the importance of avoiding cache misses and branches and whatnot has become much more important than worrying about algorithm operation counts i e how many adds and multiplies there are See quot Efficiency Issues for Ray Tracing quot by Brian Smits published in the journal of graphics tools It is also available online at http www2 cs utah edu bes The Utah paper has one of the best hacks I ve seen in years for ray tracing a great way of faking soft shadows It s explained in the article in this issue and is one of the main reasons I felt the need to get out an issue It was going to be the lead article but then I received Havran and Sixta s article on hierarchical grid efficiency scheme testing Their results are surprising plus they give a nice grid traversal speed up so they re now in the lead spot To finish up here s an interesting puzzle from an MAA question book given an axis aligned cube with corners at 0 0 0 and 1 1 1 cut it with the three planes x y y z and x z How many pieces is the cube cut into back to contents Ray Tracing Roundup Ulf Assarsson Jonas Lext and Tomas Moeller are leading an initiative to create a set of animation benchmark scenes for testing renderers typically ray tracers which have temporal coherence schemes See their call for participation and current thoughts at http www ce chalmers se staff tomasm benchmark Mark VandeWettering contributed a much better hashing function by Bob Jenkins for the fractal mountain generator in the Standard Procedural Databases code If you make fractal mountains using the SPD and generate a huge number of polygons you ll notice patterning artifacts The new hashing function gets rid of these http www acm org tog resources SPD overview html Teddy is an amazing modeler which will be presented at SIGGRAPH 99 easy to learn use and it s fun Play with the Java version at http www mtl t u tokyo ac jp takeo teddy teddy htm For links to other SIGGRAPH 99 papers see Fredo Durand s site at http w3imagis imag fr Membres Fredo Durand Book sig99 html Xfrog creates extremely impressive plant forms and more exporting to POV Ray Rayshade DXF OBJ RIB VRML and Maya formats Currently on SGIs they re seeking beta sites for the Windows and Linux versions http www greenworks de 3DWin a shareware 3D file converter is available at http www stmuc com thbaier The paper Image Based BRDF Acquisition Including Human Skin by Steve Marschner myself Eric Lafortune Ken Torrance and Don Greenberg presented at the 10th Eurographics Workshop on Rendering is now available online at http www graphics cornell edu westin pubs egwr99 marschner pdf It describes how we measured the BRDF of various surfaces including living human skin using only a digital camera an electronic flash and a Cyberware scanner The measurements have been verified against measurements on our gonioreflectometer in the best case they appear to be accurate to within the limits of the gonioreflectometer Stephen H Westin lt westin graphics cornell edu gt For mathematical definitions and tidbits along with collections on other topics try Eric Weisstein s treasure trove http www treasure troves com The book made from his math collection quot CRC Concise Encyclopedia of Mathematics quot is an amazing achievement no great depth but an incredible range of material and fun to just page through Various geometric formulae can be found at http freeabel geom umn edu docs reference CRC formulas Linear algebra definitions can be found at http maths uwa edu au keady M25n M25nS1 laglossary html Finally for a quick reference to mathematical formulae in general try Dave s Math Tables at http www sisweb com math tables htm back to contents Comparison of Hierarchical Grids by Vlastimil Havran havran fel cvut cz and Filip Sixta Vlastimil and Filip are part of the Department of Computer Science and Engineering Faculty of Electrical Engineering Czech Technical University Prague In RTNv10n3 we observed an interesting discussion concerning hierarchical grids The problem with the algorithms published was that they were developed more or less independently on different platforms and hardware and they could not be compared against one another We decided to take up the gauntlet and make some comparisons There have been about three methods published let us recall the basic properties of these approaches a Jevans and Wyvill s article GI 89 we call this approach the recursive grid here The principle is simple construct a uniform grid over the set of objects assign the objects to all voxels where they belong Then recursively descend that is for each voxel that contains more objects than a given threshold construct a grid again The construction of grids is terminated when the number of primitives in the voxel is smaller than a threshold or some maximum depth for grids is hit usually 2 or 3 b Cazals Drettakis and Puech articles EG 95 and SCG 97 we call this approach the hierarchy of uniform grids HUG here The principle is more complex first we compute the histogram according to object size Using the histogram we split the objects into groups we use three groups here for explanation The first group contains large objects the second group middle size objects and the last group small sized objects Within the middle size and small size groups we perform clustering according to the distance between the objects Thus each group contains several clusters For large size group objects we construct an initial global grid For all clusters having a large enough number of objects we also construct the grid These grids are inserted into the global grid recursively so the smaller grids are contained in bigger ones The author s statement in the paper s introduction that the method is fully automatic is true as far as it goes however it does require at least two parameters to be set initially the number of groups and delta connectivity c Klimaszewski and Sedeberg Klimaszewski PhD thesis and IEEE 97 article we call this approach the adaptive grid here The algorithm principally differs from HUG The first step of algorithm is clusterizing of objects according to some criteria based on the distance between two candidates A candidate can be the current cluster or an object The criteria consider candidates and the resulting cluster s surface areas Moreover the resulting cluster must be small enough in comparison with the scene bounding box In the second phase of the algorithm bounding volume hierarchy BVH is built up over the clusters The grids are then constructed for the clusters leaves of BVH We have found that the number of children in the interior nodes of BVH is small so it is unsuitable to create grids for these nodes In the last phase so called sub voxel grids are constructed for voxels where the number of objects is greater than a given threshold The hierarchical grids b and c differ from a since voxels in recursive grids cannot overlap so each nested grid along the ray path is tested exactly once The HUG approach requires having mail boxes in the traversal algorithm where the grids are taken as an object The ray traversal for hierarchical grids is somewhat similar for all the approaches but it differs between b and c since the BVH is traversed in c In forming the list of objects for a grid cell we use the simple scheme of comparing only the object s bounding box to the grid and adding the object to overlapped cells This can result in a cell having objects in its list which in fact do not overlap the grid cell thereby causing superfluous ray intersection tests to occur However we also implemented pruning exactly testing the primitives surfaces against the cells The results do not improve very much for SPD scenes by 10 at most Ray Traversal If this grid was already tested results are already known return Prepare the constants for 3DDDA algorithm for the current grid instance Within current voxel test all its children for intersection if there is an intersection and it lies in the current voxel return Otherwise proceed to the next voxel in the current grid along ray path If there is not another voxel in the current grid return no intersection Otherwise go to step 3 There are several issues concerning the hierarchical grids construction How many voxels should be in the grid of a given size containing N objects The same question arises for uniform grids as well The answer is usually the pragmatic rule often called the N 1 3 rule the axis aligned bounding box is split on each axis into N 1 3 cells The construction of adaptive grids also provides another approach called the heterogeneous grid where the number of voxels is proportional to the number of objects but the voxel is made to be cubic as much as possible that is the number of cells along an axis is proportional to the relative length of the axis We found out this setting is generally more efficient than the regular one It can lead to better performance since it assumes the direction of rays is uniform even if this assumption is usually violated The second important issue is the parameter settings for grid hierarchy construction What should be the threshold and the number of objects to construct a grid over its child and maximum hierarchy depth What should be the distance criteria delta connectivity and number of groups for the HUG approach or the two parameters for merging in adaptive grids and the threshold for construction of subvoxel grids Suitable settings should be found experimentally even if the authors recommend some values to use The problem of parameter setting is complex and the best settings can differ from scene to scene We implemented the uniform grid and hierarchical grids schemes in the GOLEM rendering system http www cgg cvut cz GOLEM Due to space restriction and readability we present here only the final timings for the SPD scenes Several other parameters reflecting the finer points of hierarchical grids behavior obtained from testing can be found in supplementary statistics at http www acm org tog resources SPD overview html The interested reader will find much more information in this statistics document The testing was conducted on an Intel Pentium II 350 MHz 128 MBytes running the Linux operating system compiler version egcs 1 1 2 T B s time for construction of grid hierarchy T TR s time for ray tracing a scene of resolution 513x513 depth of recursion 4 according to the SPD description Scenes Timings balls gears lattice mount rings teapot tetra tree Uniform Grid D 1 0 T B s 0 19 0 38 0 38 0 26 0 35 0 3 0 13 0 22 T TR s 244 7 201 0 54 68 28 99 129 8 28 68 5 54 1517 0 Uniform Grid Customary D 20 0 T B s 0 39 1 13 1 27 0 4 0 98 0 65 0 34 0 33 T TR s 38 52 192 3 34 21 25 15 83 7 18 6 3 86 781 3 Recursive grid T B s 0 39 5 06 0 16 1 98 0 39 1 55 0 47 0 28 T TR s 36 73 214 9 82 05 30 28 113 9 22 67 7 23 33 91 HUG T B s 0 4 1 04 0 3 0 16 0 45 0 53 0 24 0 48 T TR s 34 0 242 1 71 62 62 31 116 3 25 61 7 22 33 48 Adaptive grid T B s 2 79 5 88 0 6 2 54 1 82 3 16 1 19 1 46 T TR s 30 51 330 0 129 6 59 05 167 7 43 04 8 71 18 38 It is apparent that the time for construction is always less than 10 of the time for ray tracing itself We devoted special care to the efficiency algorithm for grid traversal It requires four comparisons per traversal step when the voxel is empty We studied the Rayshade grid traversal code The result of our studies is our traversal code is much more efficient than Rayshade s One trick is to compute in advance the coordinates of the voxel in the grid where to terminate the traversal i e the voxel where the ray leaves the grid as it saves comparisons during the traversal The uniform grid Uniform Grid Customary constructed with a high number of voxels can be very efficient for SPD scenes excluding scenes which are extremely sparse With custom setting of the grid resolution it outperforms hierarchical grids for some SPD scenes The full results show that the rule of thumb of having the number of voxels equal to the number of objects is not very good We call the ratio between the number of voxels and number of objects the voxel density Uniform Grid Customary has the density set to D 20 0 and uses a resolution setting according to Woo s GI 92 article quot Ray Tracing Polygons Using Spatial Subdivision quot i e strive to create cubical voxels It always outperforms density D 1 0 and in many cases outperforms any hierarchy of grids regardless the construction algorithm The disadvantage of setting a high voxel density is the total memory used the memory consumed for a hierarchical grid is typically much smaller with similar performance Recursive grids is the simplest hierarchical grid scheme to implement and in most cases shows reasonable performance in comparison with methods b and c In our opinion implementation of HUG and adaptive grids is rather difficult and brings interesting efficiency improvements only for the scene tree and we suspect for other very sparse scenes as well You should consider carefully if the implementations of HUG and adaptive grids pays off for your application The three methods for construction of the grid hierarchy are not the only ones which can be used someone can develop his own method with different performance characteristics In order to compute ray shooting quickly the methods try to organize the free space and the objects in the scene in some reasonable adaptive way according to the local scene properties We would like to stress that even if the traversal of the grid is a very efficient algorithm there are unavoidable drawbacks of hierarchical grids First the initialization of the variables for ray traversal in the grid is expensive that is why for some scenes the uniform grid with a high number of voxels can outperform the hierarchical grid Second we need to set the grid resolution somehow and how to compute the resolution setting for real scenes is a difficult and still rather unsolved problem Moreover the cells boundary positioning does not take into account the objects boundaries which seems to be important That is a slightly different resolution along an axis can noticeably change how many cells the objects overlap and the tightness of the fit To traverse the grid efficiently the voxels along the axis have to be the same size so local changes in cell size seem unwise To conclude our observations from testing we consider the approaches of hierarchical grids appealing and promising but their best optimal suboptimal construction algorithms clustering resolution setting etc is still relatively unsolved and is a difficult problem needing more research We agree with the opinion that the best setting of parameters is scene dependent Generally speaking performance also depends on the viewer position and global illumination algorithm since these affect the distribution of rays It should be also interesting to test efficiency of the hierarchical grids for scenes with huge number of objects say hundreds of thousands but we do not have such models available The SPD models can be made to produce more primitives but we have found the computation time to grow very slowly with increasing size perhaps due to the fractal nature of these models We would like to try different large scale models It would also be worth researching how grid resolution is dependent upon the object distribution in space not just upon the number of objects We have done some research along these lines for BSP trees see quot Rectilinear BSP Trees for Preferred Ray Sets quot http sgi felk cvut cz bittner abstracts html The future work in this area should also include the optimization of hierarchical grids construction that will be based on the known or predicted rays distribution for given global illumination task It is interesting this topic of the non uniformity of ray distribution what is the distribution can we predict and utilize this distribution knowledge somehow has not yet been researched back to contents Great Shadow Hack summarized by Eric Haines This is a summary in hand waving terms of the technical report quot Single Sample Soft Shadows quot by Steven Parker Peter Shirley and Brian Smits I definitely have nothing to do with this idea I m merely summarizing it because I think it s great and deserves more air play Interestingly enough none of the three authors exactly knows which one of them invented it My thanks go out to Steve and Brian for giving additional information on their technique and helping correct this article For the original paper go see it at http www2 cs utah edu bes under quot Papers quot Start with a triangle casting a shadow on a ground plane One way to get a soft shadow is to shoot a number of rays from a point on the ground plane at the area of a light source Count up the times the light was hit vs missed and you have a rough guess of the coverage of the triangle and can attenuate dim the light s contribution accordingly Do this for all pixels and you ve got a soft shadow cast on the ground plane However the cost is excessive just to get 16 gray levels you need to cast 16 shadow rays from each test point Even with this the soft shadows are noisy at one pixel 14 rays hit the light the next has 10 hit the next 13 hit due to changing sampling patterns and you do want to change the light s sampling pattern otherwise visible patterns such as banding can arise noise is better than banding There are various acceleration schemes which can trim away at having to fire 16 shadow rays for each sample e g by identifying areas on the plane that must be fully illuminated or fully obscured But in general this classic stochastic sampling of area lights is costly and noisy sparkling when you animate it So wouldn t it be nicer if the penumbra of the shadow wasn t noisy What if I said that such a technique exists and that it costs little more than sending one shadow ray per sample Now how much would you pay But wait this technique can also be added to any ray tracer in just a few hours Well there is a little fine print the shadows are a bit overstated and some banding is also possible Let s dispense immediately with the criticism that this method is not realistic The authors present it in the context of making an interactive ray tracer where the computing time is short I believe the method is useful in a number of other areas such as previewing and in artistic or even technical rendering Many techniques in computer graphics such as environment maps and bump maps Phong lighting etc are attempts at realism with simplifications Perceived realism often does not have to match physical realism that said physical phenomena and theory are great sources of ideas and algorithms for computer graphics hacks do have their limits A soft shadow improperly drawn is almost always better than a hard shadow which can be misinterpreted as a crease or a material change in the occluded object instead of as a shadow The idea developed at Utah is that the penumbra grows linearly with the distance of the occluder from the shadowed surface This isn t quite true in reality but accept it for now In a classic point light ray test the ray is shot from the plane or whatever to the triangle and the triangle either blocks it or not In the Utah test the ray is first tested against the triangle s plane If the plane is hit the length of the ray the distance from the ground plane to the triangle s plane is used to extend the original triangle outwards You may wish to look at their figure at http www cs utah edu bes papers coneShadow shadow node5 html The idea is that the triangle itself fully blocks the shadow test ray As we get farther away from the triangle s edges the amount of light stopped by the triangle falls off until finally at some maximum distance the light is not blocked at all by the triangle Because the width of this quot extended area quot of the extended triangle is proportional to the distance of the triangle from the ground plane the penumbra works about right When the triangle is close to the ground plane the extended area and hence the penumbra is narrow as it moves further away the extended area increases and so does the penumbra The same idea can be easily done with occluding spheres other primitives are trickier you want to grow their extents in a smoothly changing and easily calculable way Less obvious but also good is to notice what happens with a triangle which is say perpendicular to the ground plane and touches at one vertex Near this vertex the shadow cast will be sharp because the distance from the ground plane to the triangle will be small At the other vertices further away from the ground plane the shadow generated will be fuzzy One question is how this system works with say a mesh of triangles Say three extended triangles are hit by a shadow test ray letting through 0 4 0 8 and 0 3 of the light How much light really gets through The authors tried a number of methods multiplication and addition of various sorts the most effective method called thresholding is simply to take the lowest value found e g 0 3 This gives physically unrealistic results but does give a reasonable looking soft shadow The umbra is over or understated the object casts a hard shadow but is extended outwards with a false penumbra In reality an object smaller than the light s area can cast a shadow with no umbra an object larger than the light s area can cast a larger umbra With the Utah method the umbra is always the size of the object though I guess you could simply change the interpolation function in the extended fringe areas to be an umbra then drop off as a penumbra so this understated umbra is less of a problem One idea is to make the overstated umbra smaller by having the penumbra area not only extended beyond the triangle but also extended inwards towards the center of the triangle This then would give a triangle an umbra that would decrease in size as it moved away from the ground plane Nice in theory but it has a fatal flaw Imagine a checkerboard and imagine each checker square pulling in as the checkerboard moves away from the ground plane With each checker shrinking light can now leak in between neighboring checkers and a checkered shadow produced Obviously this is not what should happen with a solid checkerboard Note that the scheme is somewhat more expensive than classic shadow testing but not much more The ray triangle test is more complex and returns a percentage instead of a hit miss bit Hitting these extended triangles does not necessarily end testing only a full occlusion by the initial triangle does The efficiency scheme holding the shadowing objects also has to take into account the maximum increased size of the triangles How much to move out the edges of the triangle is an interesting question As mentioned the distance extended is proportional to the distance the ray travels from the test location to the intersected plane This in fact is how Steve Parker first implemented it and it looks pretty good However the angle between the ray and the occluding plane s normal should also affect the amount to extend the edges Think of the edge of a square shadowing polygon Now rotate the square around one of its edges As it turns on this edge compared to the light this edge will need to be extended further to cast the same sized penumbra The square s opposite parallel edge will also have to be extended more Notice that the other two edges do not have to be extended even though the square is being rotated Each edge has to be extended a variable amount something like 1 DotProduct d en where quot d quot is the ray direction and quot en quot is the edge s normal in the triangle s plane However even this is not quite right as these extended edges could go out quite far and so the intersection distance can increase considerably causing a larger penumbra Also you don t even want to think about how to join variable sized edges endpoints to give curved corners Finally such huge triangles will cost extra processing time as the largest possible triangle has to be used in forming the efficiency structure storing the scene Happily just recall this is a hack and then live with the simple solution of extending edges based only on distance While one particular triangle may have its edges understated due to its orientation recall that there are normally two triangles touching any silhouette edge and that the odds are with you that one of these will be fairly well aligned with the ray direction and so cast a reasonable penumbra However you do it these extended triangles are larger than their original primitives This means that the efficiency structure put around them must take their larger size into account Either a separate structure must be created for shadow computations or the shared efficiency structure must be made less efficient for eye reflection refraction rays since these do not need to have extended triangles As far as actually testing the ray against this extended triangle here are a few approaches If you re not interested in implementing this method skip to the last paragraph or two I m making some of this up as I go so feel free to correct me if you try something out and it fails miserably The original paper says you extend the edges and round the corners In practice Steve Parker first author said they extend the edges of the triangle out also clamping the corners by this extension distance and do not bother with rounding One way to implement extending the edges and corners is to use barycentric coordinates see RTNv5n3 and extend the edges out by loosening the range 0 to 1 requirement In barycentric coordinates the point is in the basic triangle if all three coordinates are between 0 and 1 However giving different ranges for these coordinates results in different primitives For example if the intersection point s barycentric coordinate is 0 1 for a given vertex this means the point is 1 10th of the way outside the triangle edge opposite from this vertex Values above 1 means the point is beyond the vertex compared to its opposite edge Say you allow the triangle to extend by 0 5 for a given coordinate i e from 0 5 to 1 5 From 0 to 1 is then the umbra and something like 1 3 would dim the light by 0 4 the light would be multiplied by 0 6 since it is 60 percent of the way from 1 0 to 1 5 Compute the attenuation for each coordinate and choose the one that dims the light the least i e is highest Varying the allowed range of these coordinates allows you to limit how far the triangle extends vary the penumbra and also compute the attenuation However just using barycentric coordinates will give a somewhat chopped off extended triangle with sharp corners Allowing the values to be below 0 pushes the edges out and values above 1 move the amount each corner extends out essentially controls the bevel formed at the corner The corners are worth limiting because a corner with a sharp tip when extended will have a penumbra which extends quite a distance as a sharp extension The amount each barycentric coordinate is extended is relative to the width of the triangle for that coordinate For example say corner A is across from the long side of a right triangle a triangle where corner A is 90 degrees and the other two corners B and C are each 45 degrees Say the triangle is 4 units across from corner A to the opposite edge To extend the opposite edge and corner A out 1 unit change the range from 0 1 to 0 25 1 25 However for corner B and C the opposite edge is 4 sqrt 2 far away so to extend it 1 unit the range is only 0 1767 1 1767 I ve tried to figure out a way to add rounding to the corners while using barycentric coordinates but can t quite figure out a foolproof way to do it Enter method two which is less efficient but higher quality simply build the extra geometry needed on the fly and test against it First test against the triangle of course if it s hit you re done Else each edge is extended perpendicularly outwards to form a rectangle each of which is tested If any of these are hit immediately return the amount of attenuation from it since only one rectangle can be hit You might test the longest edge s rectangle first since this is most likely to be hit If none are hit then test against a circle around each vertex If inside one or more circles return the value which dims the light the most i e is closest note you have to test against all circles not just stop when you first get a hit well this isn t quite true you have to test against all circles only if the radius of these circles is larger than the length of the smallest edge of the triangle Up to this point I ve assumed a linear falloff in the penumbra region This is in fact the sort of shadow you would get if a shadow edge was aligned with a light source which was rectangular However this gives sharp slope changes where the penumbra starts To avoid the discontinuities at both edges of the penumbra the falloff could be determined instead by a form of the Bernstein polynomial essentially an S curve f 3 a 2 2 a 3 with a 0 at the umbra s edge a 1 at the point entering full illumination and f being the resulting falloff That s about it Now someone find some time to code it up into POV Ray or Rayshade or somesuch Should be easy I do not believe this idea has yet been used in Z buffer projective shadows i e extend each triangle with an alpha blended fringe This sort of thing should work though as mentioned thresholding seems to yield the best results which is not normally supported in graphics accelerators Still such soft shadows would be of higher quality than typical methods used such as accumulation buffers jitter the projection of the shadow and average the results or post process blurring of the projection back to contents Octree Traversal and the Best Efficiency Scheme by Ben Hutchison Eric Haines Hanan Samet and Erik Jansen Ben Hutchison lt ben melbourneit com au gt writes I m trying to find out about fast methods for traversing octrees It strikes me that you could use some kind of integer math method like a 3D Bresenham algorithm to get a list of cells a ray intersects I assume I m not the first to think of this and that somewhere there is some C source code for such a method or at least a detailed description of how to do it I found a fragment in Graphic Gems IV by Daniel Cohen Unfortunately it s complex uncommented code and the email address listed is no longer in use Eric Haines lt erich acm org gt replies People do essentially use a 3D Bresenham to traverse a grid efficiency structure getting the cells as they go There are many ways of looking at octree traversal Erik Jansen wrote an article discussing some of these in the book Data Structures for Raster Graphics Springer Verlag In the RT News Jim Arvo s quot Linear Time Voxel Walking for Octrees quot in RTNews2 is an interesting method of examining the octree and minimizing octree traversal Graphics Gems III has an article by Sung and Shirley on walking through octrees BSP trees but essentially the same thing and some skeletal code Personally I tend to just find the next three intersections one for X Y and Z and take the closest one and walk to the next neighbor But I ve definitely become a nested grids convert over the years so have lost track of what the best octree traversal methods are Hanan Samet lt hjs umiacs umd edu gt replies With respect to the octree Bresenham etc I saw the Ray Tracing News issue of sometime back that discussed this problem There are fast methods of doing this and in fact am close to finishing up a paper on doing it on the sphere as well So the bottom line is that there are very fast ways of doing the neighbor finding I wrote it up in the style of my book for a rewrite of the section However I found some errors while writing the paper on the sphere I will try to fix it next week it is on my stack If I get somewhere I will let you know By the way the ray tracing code in my Applications book is rewritten and published in the newer printings of the book Look for the latest printing which came out in 1995 Erik Jansen lt F W Jansen twi tudelft nl gt writes As far as I know there is no dominant quot fastest quot method yet still The quot nested grids quot is indeed a good choice Easy robust and fast The BSP traversal is also fast and if you have a bintree spatial subdivision a good choice It should be very easy to adapt the BSP traversal to octrees do some extra recursions for the x y z direction You can also apply some intelligent coding like in the HERO algorithm I have no copy any more of the paper The SMART algorithm is also a variant in the same style Then there is the DDA Octree traversal which is the grid traversal but mapped to an octree or more the other way around the octree mapped to a grid The last comparison we did is with the grid our BSP traversal and the DDA Octree It is reported in RTNv7n2 Comparison of Ray Traversal Methods That was the last thing we did The nested grid with some tweaking was the winner But with other data models the results may be slightly different but not dramatically Ben later writes One easy way to convert a grid traversal to octree traversal is to pretend the octree is actually a grid of resolution equal to the octree depth In many data sets I ve tried the average depth of an octree is close to the max depth so this simplifying assumption isn t too wasteful Then you must cull out grid cells which aren t actual octree cells by doing some lookup into the real octree I have developed a 2 pass algorithm over the last few days to do this I ve coded it up but it isn t debugged so I ve no runtime figures yet Pass 1 traverses a grid and fill and array with grid coordinate for the cells pierced by the ray Essentially a normal grid traversal In my implementation I convert these i j k co ordinate into a 64bit key which uniquely specifies an octree cell location Each depth level is encoded into three bits in the key with a depth value occupying the last few bits of the key The conversion process is all bit manipulation should it should execute fast Pass 2 culls out the missing cells I map ID values to Cell pointers via a hash table If they table returns null for an ID I derive that Cell s parent s ID bit manipulation again and try the hash table again repeat until found The found cell will have 0 or more subsequent cells in the octree which are also missing depending on how high in the tree it was The ID of the cell can be quickly bit manipulated into a template which can be matched against subsequent IDs in the list enabling further culling without a hash table lookup I believe it will run fast because its basically integer traversal then bit manipulation and hash table lookups The actual octree never needs to be touched Result little bus activity most calculation stays in the registers or the L1 cache it would work well in SMP enviroments and on ultra fast CPUs with relatively slow buses main memory Anyway hopefully I can get the thing to work soon and I ll know The bit manipulation stuff is pretty heavy and its tedious to debug Once again I hate to be doing this if someone else has I try never to reinvent a wheel already so if what Im saying sounds all too familiar please send me the right way Erik Jansen lt F W Jansen twi tudelft nl gt replies Ben The thing you are doing is what we call a DDA Octree traversal algorithm There is a paper by Kelvin Sung in the Eurographics Proceedings of 1991 K Sung A DDA Octree Traversal Algorithm for Ray Tracing Eurographics 91 North Holland Elsevier ISBN 0444 89096 3 p 73 85 In this paper Kelvin compares the DDA Octree some other traversal algorithms including the recursive bintre traversal which he called ARVO I started a discussion with him because his implementation was not optimal A result of this was that he made a better ARVO implementation and published this in Graphics Gems In the meantime I asked some students here to also make a comparison which resulted in the figures that I mentioned in my previous message Of course you can do some tuning and clever coding and make one method look better than an other The other strategy is to implement other methods dummier than necessary also an often applied strategy there s a followup to this article in the next RT News there is also in depth coverage of octree schemes in the next RT News back to contents Quicker Grid Generation via Memory Allocation by Eric Haines I ve noticed that some software which generates grid efficiency structures for ray tracing does so in a classic computer science fashion but is usually inefficient in real life Here s the classic method 1 Form a grid structure say 20x20x20 of pointers to linked lists 2 Insert each object into the grid e g find the bounding box for the object and for each grid cell overlapped by the box add the object The object is added to the front of the linked list pointed to by the grid structure This grid structure is then accessed as is walking through the linked list on each access Linked list access is usually not as fast as pure indexing i e it would be nice to just have a list of pointers at each grid cell to walk through vs grabbing quot next quot pointers Even if of comparable speed linked list nodes can be allocated in a fragmented fashion some nodes are on this page of memory some on that etc This leads to more paging than is necessary Also linked list nodes take up more memory than indexed lists Finally allocating a huge number of separate nodes is expensive both in time and in additional memory header costs Some of these problems can be solved for linked lists by using a preallocated pool of memory which can then be used to quickly dole out link nodes Nonetheless linked lists are generally clunkier than need be and are just an artifact of the way the grid structure is built Also indexed arrays allow such tricks as on the fly sorting when an object in a cell is found to be intersected by a ray you can swap that object to the top of the grid cell s indexed list on the theory that it is likely to be the first thing hit next time the cell is accessed This can buy you a few percent speed improvement though I have occasionally seen performance get worse strangely enough So one method to get indexed lists at each cell of the grid structure is to post process the linked lists tossing out each linked list and replacing it with a list of pointers That is if a grid cell has a linked list consisting of 5 nodes replace it with a single list of pointers to the 5 objects plus a NULL pointer at the end of the list Better yet you could have kept a count of all the linked list nodes in use in the grid structure and allocate one hunk of memory of this length plus additional space for the NULL end of list pointers In this way a single piece of memory is allocated minimizing both storage and page misses However we can do even better though at possibly a generally small additional cost Allocating memory for linked list nodes can be costly so this could be done away with by doing a two pass method On the first pass find out how many grid cells are overlapped by each object Say you are doing the simple but inefficient for ray tracing itself method of seeing which grid cells are overlapped by the object s bounding box It s trivial to compute how many grid cells are overlapped by each sum up and after you go through the objects once you know exactly how many list elements are needed in your array Also allocate an array for the grid structure to keep track of how many objects are in each grid cell You then go through this array and can set where the beginning of each grid cell list begins in the large allocated list of elements That is for cell 0 0 0 in the grid you point at element 0 This cell has say 5 objects in it found in the first pass so cell 0 0 1 will point at element 5 1 1 for the NULL end of list pointer Add in this next cell s number of objects 1 this is where cell 0 0 2 is set to point etc Once the grid structure s pointers are set up go through the list of objects again this time saving the pointer to the object in each overlapped grid cell s list Since you know the exact number of list elements and how many are in each grid cell before the second pass the object pointers will perfectly fit when stored No additional memory except for the piece which stored how many objects were in each grid cell this piece could be reused as the array which holds the grid cell object lists is allocated or freed Even if you do a more elaborate test than bounding box overlapping the grid i e you precisely test whether the object itself overlaps each individual grid cell two passes may still be worth it just for avoiding memory fragmentation or even to avoid running out of memory You could also use a hybrid method where the first pass just does box overlap testing to get an upper bound on the number of object pointers needed then the second pass is more precise and so does not use all the memory allocated it is still most likely a win over storing linked lists Anyway perhaps this is more than you ever wanted to know but it makes for a fairly efficient grid cell allocation scheme that avoids memory headaches and is simple to code to boot It s not for everyone but is a way of thinking worth knowing about There are a bunch of extra tricks to squeeze more memory out of the grid cell lists using short or byte sized indices instead of pointers to the objects using the sign bit or lowest bit of a word aligned pointer to denote the end of an object list so you do not have to store NULL pointers etc back to contents Eric Haines erich acm org Ray Tracing News Volume 12 Number 1 Ray Tracing News Volume 12 Number 1 Ray Tracing News Volume 12 Number 1 Ray Tracing News Volume 12 Number 1 Ray Tracing News Volume 12 Number 1 Ray Tracing News Volume 12 Number 1 Ray Tracing News Volume 12 Number 1 Ray Tracing News Volume 12 Number 1 Ray Tracing News Volume 12 Number 1 Ray Tracing News Volume 12 Number 1 http www acm org tog resources RTNews html rtnv12n1 html http www acm org tog resources RTNews html rtnv12n1 html http www acm org tog resources RTNews html rtnv12n1 html http www acm org tog resources RTNews html rtnv12n1 html 
